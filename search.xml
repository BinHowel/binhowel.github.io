<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.5）顺序存储结构队列]]></title>
    <url>%2F2019%2F07%2F06%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[顺序队列算法即实现思路顺序储存结构的队列定义(以char类型为例) 实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。 12345678910111213class SqQueue&#123; char* datas;//线性表 int capacity;//队列容量 int front;//队首 int rear;//队尾 public: SqQueue(int c)&#123; capacity = c; datas = new char[capacity]; front = rear = 0; &#125; &#125; 顺序队列 入队操作 思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。 具体实现： 1234567bool push(T e)&#123; if(rear == capacity) return false; datas[rear] = e; rear++; return true;&#125; 出队操作 思路：直接让头数值进行自加即可实现出队操作 具体实现： 123bool pop()&#123; front++;&#125; 出现一个问题:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。 循环队列 入队操作： 思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：rear = (rear+1)%capacity 算法解释：(以容量为5的队列为例) 第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2….第四个为4。 第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。 具体实现： 1234567bool push(T e)&#123; if((rear+1)%capacity == front)//满队判断 return false; datas[rear] = e; rear = (rear+1)%capacity; return true;&#125; 满队的处理：这里是用(rear+1)%capacity == front来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3 出队操作 思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即front = (front + 1)% capacity。 具体实现： 123456bool pop()&#123; if(front == rear)//空队判断 return false front = (front + 1)% capacity; return true;&#125; 具体代码实现;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt; class SqQueue &#123; T* datas; int capacity; int rear; int front;public: /*构造函数*/ SqQueue(int c = 10) &#123; capacity = c; datas = new T[capacity]; rear = front = 0; &#125; /*入队操作*/ bool push(T e) &#123; if ((rear + 1) % capacity == front) return false; datas[rear] = e; rear = (rear+1)%capacity; return true; &#125; /*出队操作*/ bool pop() &#123; if (rear == front) return false; front = (front + 1) % capacity; &#125; void tr(void(*fb)(T&amp; e)) &#123; for (int i = front; i &lt; rear; i++) &#123; fb(datas[i]); &#125; &#125;&#125;;void Print(char&amp; a) &#123; cout &lt;&lt; a &lt;&lt; " ";&#125;int main() &#123; SqQueue&lt;char&gt; s; cout &lt;&lt; "数据a入队了" &lt;&lt; endl; s.push('a'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b入队了" &lt;&lt; endl; s.push('b'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据c入队了" &lt;&lt; endl; s.push('c'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据d入队了" &lt;&lt; endl; s.push('d'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据e入队了" &lt;&lt; endl; s.push('e'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.7)数据类型转换]]></title>
    <url>%2F2019%2F07%2F04%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.4）队列及链式队列的实现]]></title>
    <url>%2F2019%2F07%2F03%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[队列的基本概念及定义 定义： 队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。 特征：先进先出(FIFO,First In First Out) 队列的抽象数据类型 ADT Queue Data 线性关系(a1,a2,…,an) Operation bool push(e) 入队操作 bool pop() 出队 T&amp;front() 获得队首数据 bool empty() 判断队列是否为空 void clear() 清空队列 …….. 链式队列实现算法及思路 入队操作 * 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。 具体代码实现: 123456789101112bool push(T e)&#123; Node* p = new Node; if(!p)return false; p-&gt;data = e; p-&gt;next = nullptr; rear-&gt;next = p; rear = p; return true&#125; 出队操作 思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。 具体代码实现： 1234567891011bool pop()&#123; if(rear == head) return false; Node* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; 具体代码实现情况： 入队(完成) push(T e) 出队(完成) pop() 是否为空(完成) IsEmpty(); 获得队首元素(完成) getFirst() 清空队列(完成) clear() 具体代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class Queue &#123; struct Node &#123; T data; Node* next; &#125;; Node* head; Node* rear;public: Queue() &#123; head = new Node; head-&gt;next = nullptr; rear = head; &#125; /*入队操作*/ bool push(T e) &#123; Node* p = new Node; p-&gt;data = e; p-&gt;next = nullptr; rear-&gt;next = p; rear = p; return true; &#125; /*出队操作*/ bool pop() &#123; if (head == rear) return false; Node* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; /*是否为空*/ bool IsEmpty() &#123; return head == rear; &#125; /*获得首元素*/ T getFirst() &#123; return head-&gt;next; &#125; /*清空队列*/ bool clear() &#123; Node* p = head-&gt;next; Node* q = nullptr; while (p != rear) &#123; q = p; p = p-&gt;next; delete q; &#125; delete rear; rear = head; return true; &#125; void Ta(void(*fb)(T&amp; e)) &#123; Node* p = head; while (p != rear) &#123; p = p-&gt;next; fb(p-&gt;data); &#125; &#125;&#125;;template &lt;typename T&gt; void print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; Queue&lt;char&gt; q; cout &lt;&lt; "a数据进队了" &lt;&lt; endl; q.push('a'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "b数据进队了" &lt;&lt; endl; q.push('b'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "c数据进队了" &lt;&lt; endl; q.push('c'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "d数据进队了" &lt;&lt; endl; q.push('d'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "清空队列" &lt;&lt; endl; q.clear(); cout &lt;&lt; "e数据进队了" &lt;&lt; endl; q.push('e'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "f数据进队了" &lt;&lt; endl; q.push('f'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "g数据进队了" &lt;&lt; endl; q.push('g'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "h数据进队了" &lt;&lt; endl; q.push('h'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-括号匹配]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[括号匹配 对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。 实现思路：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。 以（{heheda}[123]())为例。 第一步扫描上方字符串。发现第一个左括号‘(’使其入栈，第二个&#39;{&#39;入栈，发现&#39;}&#39;为右括号，与栈顶数据进行匹配发现，此时栈顶就是&#39;{&#39;与之匹配那么就出栈。（类似消消乐） 具体代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include"LKStack.h"#include&lt;iostream&gt;bool CheckStr(string str) &#123; LkStack&lt;char&gt; stack; cout &lt;&lt; "字符串：" &lt;&lt; str &lt;&lt; " "; for (int i = 0; i &lt; str.length(); i++) &#123; /*如果是左括号那么就入栈，等待匹配*/ if (str[i] == '[' || str[i] == '&#123;' || str[i] == '(') &#123; stack.push_back(str[i]); &#125; /*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/ if (str[i] == ']' || str[i] == '&#125;' || str[i] == ')') &#123; /*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; if (!stack.isEmpty() &amp;&amp; str[i] == ']' &amp;&amp; stack.GetTop() == '[') stack.pop(); if (!stack.isEmpty() &amp;&amp; str[i] == '&#125;' &amp;&amp; stack.GetTop() == '&#123;') stack.pop(); if (!stack.isEmpty()&amp;&amp; str[i] == ')' &amp;&amp; stack.GetTop() == '(') stack.pop(); &#125;&#125; /*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号匹配成功！" &lt;&lt; endl; return true; &#125; else &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; &#125;int main() &#123; CheckStr("12312()()[]&#123;&#123;&#125;&#125; "); CheckStr("&#125;"); CheckStr("[()(),hello&#123;&#125;]"); CheckStr("test"); CheckStr("()(&#125;[]");&#125; 实验结果： –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法性能分析]]></title>
    <url>%2F2019%2F07%2F02%2F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[算法性能分析好的算法应当满足 正确性：算法应能满足具体问题的需求 可读性：算法应应易于阅读和理解 健壮性：输入数据非法时，算法也能适当作出反应或进行处理 高效性：算法执行时间短，占用存储空间少 时间复杂度 程序：算法在计算机上的实现 程序的执行时间取决于如下因素： 算法本身 问题规模 编程语言 硬件性能 选择一个“基本操作”，分析基本操作执行的次数 用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。 算法的时间复杂度为：和f(n)同阶的简化无穷大量T(n) = O(f(n))]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表应用- 两数相加]]></title>
    <url>%2F2019%2F06%2F29%2F%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[两数相加 问题： 给定两个非空链表来表示两个非负整数。位数按照逆序方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 输出: 7 -&gt; 0 -&gt; 8 原因: 342 + 465 = 807 一些算法的思路： 先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数 12345678Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125; 实现思路：对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位……以此类推直到把所以值都后插入链表中。 转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。 123456789101112int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125; 实现思路：因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。 最后一步把相加的结果再ToLKlist()用变为链表。 具体实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include&lt;iostream&gt;using namespace std;class Lklist &#123; struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: Lklist() &#123; head = new LNode; head-&gt;next = nullptr; length = 0; &#125; /*前插操作*/ bool push(int e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; length++; return true; &#125; /*后插操作*/ bool push_back(int e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while (p-&gt;next) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e; q-&gt;next = 0; p-&gt;next = q; length++; return true; &#125; /*删除第一个数据操作*/ bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; /*获得第一个元素*/ int getfirst() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空链表*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; /*获得链表长度*/ int Getlength() &#123; return length; &#125;&#125;;/*转换为数字*/int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125;/*数字转换为链表*/Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125;/*两数相加核心代码*/Lklist TwoNumberAdd(Lklist num1, Lklist num2) &#123; int a = number(num1); int b = number(num2); return ToLKlist(a + b);&#125;int main() &#123; int a; int b; Lklist s; cout &lt;&lt; "请输入第一个数： "; cin &gt;&gt; a; cout &lt;&lt; endl &lt;&lt; "请输入第二个数： "; cin &gt;&gt; b; s = TwoNumberAdd(ToLKlist(a), ToLKlist(b)); int i = 0; int len = s.Getlength(); while (!s.IsEmpty()) &#123; cout &lt;&lt; s.getfirst(); if (i &lt; len - 1) &#123; cout &lt;&lt; "-&gt;"; i++; &#125; s.deletefirst(); &#125;&#125; 实验结果: 标准参考答案：1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution &#123;public : ListNode* addTwoNumber(ListNode* l1, ListNode* l2) &#123; int x = 0; int y = 0; int carry = 0; int sum = 0; ListNode* h = nullptr; ListNode** t = &amp;h; while (l1!=nullptr||l2!=nullptr) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; ListNode* node = new ListNode(sum % 10); *t = node; t = (&amp;node-&gt;next); carry = sum / 10; &#125; if (carry &gt; 0) &#123; ListNode* node = new ListNode(carry % 10); *t = node; &#125; return h;&#125;private: int getValueAndMoveNext(ListNode*&amp; l) &#123; int x = 0; if (l != nullptr) &#123; x = l-&gt;val; l = l-&gt;next; &#125; return x; &#125;&#125;; 参考答案的核心算法思路： ListNode* addTwoNumber(ListNode* l1, ListNode* l2) 这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。 第一步： 取出两个链表中的第一个元素2和5。 第二步： 让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7 第三步： 把结果7模上10并push_back进结果链表。此时结果为7并且是结果链表的第一个数据 然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。 第四步： 循环上面的步骤 第二次循环中4和6的和是10，模上10取余后的结果为0，push_back进结果链表作为第二个数据 因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位 总体来看，首先因为题目描述为 位数按照逆序方式储存，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。 个人实现代码优化后：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;iostream&gt;using namespace std;class LKlist &#123;public: struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: LKlist() &#123; head = new LNode(); head-&gt;next = nullptr; length = 0; &#125; bool push_back(int e) &#123; LNode* p = new LNode; LNode* t = head; p-&gt;data = e; while (t-&gt;next) &#123; t = t-&gt;next; &#125; t-&gt;next = p; p-&gt;next = nullptr; length++; return true; &#125; bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; int getfirst() &#123; return head-&gt;next-&gt;data; &#125; int Getlength()&#123; return length; &#125;&#125;;int getValueAndMoveNext(LKlist&amp; l) &#123; int x = 0; LKlist::LNode* T; if (l.head-&gt;next) &#123; x = l.head-&gt;next-&gt;data; T = l.head-&gt;next-&gt;next; delete l.head-&gt;next; l.head-&gt;next = T; &#125; return x;&#125;LKlist addTwoNumber(LKlist&amp; l1, LKlist&amp; l2) &#123; int x = 0; int y = 0; int sum = 0; int carry = 0; LKlist h; while (!l1.IsEmpty() || !l2.IsEmpty()) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; h.push_back(sum % 10); carry = sum / 10; &#125; if (carry &gt; 0) &#123; h.push_back(carry % 10); &#125; return h;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-进制的转换]]></title>
    <url>%2F2019%2F06%2F29%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数制转换 以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。 例如： 结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便 123456789101112void changeNumber(int n,int b)&#123;//n为十进制数，b为将要转的进制数 Stack&lt;int&gt; stack；//定义一个栈 while(n)&#123; stack.push(n%b);//获取余数并入栈 n = n/b;//更新n &#125; while(!stack.isEmpty())&#123;//出栈并输出。直至为空栈 cout &lt;&lt; stack.getTop();//获得栈顶元素 stack.pop();//每输出一个就出栈一个数据 &#125; &#125; 代码实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;iostream&gt;using namespace std;/***********链栈实现************/template&lt;typename T&gt;class Stack &#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: Stack() &#123; head = new LNode; head-&gt;next = nullptr; &#125; /*入栈操作*/ bool push(T e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; return true; &#125; /*获得栈顶元素*/ T getTop() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空栈*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125;&#125;;/*********************************//*数据转换*/void ChangeNumber(int n,int b) &#123; Stack&lt;int&gt; stack; int result = 0; while (n) &#123; stack.push(n % b); n = n / b; &#125; while (!stack.IsEmpty()) &#123; cout &lt;&lt; stack.getTop(); stack.pop(); &#125; &#125;int main() &#123; ChangeNumber(75, 8);&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ vector容器常用操作和内存释放]]></title>
    <url>%2F2019%2F06%2F29%2FC-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%2F</url>
    <content type="text"><![CDATA[一、对字符串的处理 对字符串每一个字符进行遍历修改操作 12345678910111213141516#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;int main() &#123; string ifo = "ShuHaoHwang"; for (auto iter = ifo.begin(); iter != ifo.end(); iter++) &#123; *iter = toupper(*iter); &#125; cout &lt;&lt; ifo &lt;&lt; endl;&#125; 二、查找配置项信息及内存释放 用迭代器及vector容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用vector进行内存释放。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;struct conf&#123; char confname[40];//配置项名 char confid[100];//配置项信息&#125;;char* getifo(vector&lt;conf*&gt;&amp; a, const char* s) &#123; vector&lt;conf*&gt;::iterator iter; for (iter = a.begin(); iter != a.end(); iter++) &#123; if (strcmp((*iter)-&gt;confname, s) == 0) &#123;//如果找到对应配置项名，就返回其配置项的信息 return (*iter)-&gt;confid; &#125; &#125; return nullptr;&#125;int main() &#123; conf* server = new conf; conf* server2 = new conf; /*配置项名1*/ strcpy_s(server-&gt;confname,sizeof(server-&gt;confname),"ServerName"); /*配置信息1*/ strcpy_s(server-&gt;confid, sizeof(server-&gt;confid), "1区"); /*配置项名2*/ strcpy_s(server2-&gt;confname, sizeof(server2-&gt;confname), "ServerID"); /*配置信息2*/ strcpy_s(server2-&gt;confid, sizeof(server2-&gt;confid), "10000"); vector&lt;conf*&gt; cinfo; cinfo.push_back(server);//把结构指针放入容器 cinfo.push_back(server2); vector&lt;conf*&gt;::iterator iter; /*查找信息*/ char* temp; temp = getifo(cinfo, "ServerName"); if (temp != nullptr) &#123; cout &lt;&lt; "ServerName: " &lt;&lt; temp &lt;&lt; endl; &#125; /*释放内存*/ for (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123; delete (*iter);//因为*iter是一个指针 &#125; cinfo.clear();//最后清空容器 &#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++迭代器的失控范例和解决方案]]></title>
    <url>%2F2019%2F06%2F28%2FC-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[迭代器失控范例情形一： 很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对vector容器进行push_back()操作、对vector容器进行插入操作、删除操作。都会使end()函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。 例如： 1234567891011vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125;//或者下面这种情况for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.insert(1,100);&#125; 实验结果： 在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。 123456789101112vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2); break;//添加元素后直接跳出&#125;//再进行一次迭代器遍历for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125; 实验结果： 如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。 123456789101112131415vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; iter = arrays.insert(iter,100); if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： 实现思路:因为arrays.insert()的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以end()的值没有发生变化)。多次更新迭代器的起始begin()的值，从而使迭代器类型的指向不会失控。 同样的如果使用push_back(): 123456789101112131415161718vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; arrays.push_back(100);//不断更新iter的值起始 iter = arrays.begin() if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： 总体：即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。弊端：麻烦，代码较繁杂。 情形二： 如果在某个时候要对容器进行清空操作，多数下使用容器自带的clear()函数即可。但在某些特殊情况下，要对vector容器的某些元素进行删除，就得使用容器自带的` `函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。 例如： 12345vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; arrays.erase(iter);&#125; 使用结果 如果真的要进行这样的操作可以这样做： 12345678910vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(iter != arrays.end())&#123; iter = arrays.erase(iter);//直接让erase函数来更新迭代器指向的位置&#125;//for版for(iter; iter != arrays.end(); )&#123; iter = arrays.erase(iter);&#125; 实验结果： 实现思路：因为erase()函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。 此情形更好的实现版本 1234567vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(!arrays.empty())&#123;//如果不为空就继续 auto iter = arrays.begin();//每开始一轮循环就更新迭代器的指向。 arrays.erase(iter);&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.6）迭代器]]></title>
    <url>%2F2019%2F06%2F26%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.3）链栈]]></title>
    <url>%2F2019%2F06%2F26%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88%2F</url>
    <content type="text"><![CDATA[栈的链式实现算法及思路 栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。 入栈 思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。 具体实现： 12345678bool push_back(T e)&#123; LNode*p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true;&#125; 出栈 思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈) 具体实现： 123456789bool pop()&#123; LNode* p = head-&gt;next; if(!head-&gt;next)&#123; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false;&#125; 析构函数 思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。 具体实现： 12345678~LkStack()&#123; LNode*p = head-&gt;next; while(p)&#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125;&#125; 具体代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkStack&#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: LkStack() &#123; head = new LNode(); head-&gt;next = nullptr; &#125; ~LkStack() &#123; LNode* p = head-&gt;next; while (p) &#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125; delete head; &#125; /*入栈操作*/ bool push_back(T e) &#123; LNode* p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!isEmpty()) &#123; LNode* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false; &#125; /*是否为空*/ bool isEmpty() &#123; if (!head-&gt;next) return true; return false; &#125; /*获得栈顶数据*/ T&amp; GetTop() &#123; return head-&gt;next-&gt;data; &#125;&#125;;int main() &#123; LkStack&lt;int&gt; stack; cout &lt;&lt; "入栈了数据1" &lt;&lt;endl; stack.push_back(1); cout &lt;&lt; "入栈了数据2" &lt;&lt;endl; stack.push_back(2); cout &lt;&lt; "入栈了数据3" &lt;&lt;endl; stack.push_back(3); cout &lt;&lt; "入栈了数据4" &lt;&lt;endl; stack.push_back(4); cout &lt;&lt; "入栈了数据5" &lt;&lt;endl; stack.push_back(5); while (!stack.isEmpty()) &#123; cout &lt;&lt; stack.GetTop() &lt;&lt; endl; stack.pop(); &#125;&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++个人学习路线]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.5）vector容器详解]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.2）顺序栈的实现]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序栈的实现与算法思路（以char数据类型为例） 入栈push(char e)； 思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。 具体实现： 1234567bool SqStack::push(char e) &#123; if ((top - data) == capacity)//容量满了就进行扩容 realloc(); *top = e; top++;//直接修改并移动top指针 return true;&#125; 出栈pop(); 思路：在没有空栈的情况下，直接让top自减一。 具体实现： 1234567bool SqStack::pop() &#123; if (top == data)//判断是否空栈。 return false; top--; return true; &#125; 顺序栈的实现情况 出栈(完成) push(char e) 入栈(完成) pop() 扩容(完成) realloc() 遍历(完成) Traverse(void(*fb)(char&amp; e)) 获得栈顶数据(完成) GetTop() 是否为空栈(完成) IsStackEmpty() 获得栈总容量(完成) GetCapacity() 具体代码： 123456789101112131415161718192021222324252627282930313233343536//Sqstack.h#ifndef _SQSTACK_H_#define _SQSTACK_H_ class SqStack &#123; char* top = nullptr; char* data = nullptr; int capacity;public: /*构造函数*/ SqStack(int c = 5); /*入栈操作*/ bool push(char e); /*出栈操作*/ bool pop(); /*遍历*/ void Traverse(void(*fb)(char&amp;e)); char GetTop(); bool IsStackEmpty(); int GetCapacity();private: /*扩容*/ bool realloc();&#125;; /*打印*/ void Print(char&amp; e);#endif // !_SQSTACK_H_ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//Sqstack.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;/*构造函数*/SqStack::SqStack(int c) &#123; capacity = c;//默认给一个初值 data = new char[capacity]; top = data;&#125;/*扩容*/bool SqStack::realloc() &#123; char* n_data = new char[2 * capacity]; for (int i = 0; i &lt; capacity; i++) &#123; n_data[i] = data[i]; &#125; delete[]data; data = n_data; top = data + capacity;//这里要注意top也有重新赋值新的地址 capacity *= 2; cout &lt;&lt; "扩容成功！！" &lt;&lt; endl; return true;&#125;/*入栈操作*/bool SqStack::push(char e) &#123; if ((top - data) == capacity) realloc(); *top = e; top++; return true;&#125;/*出栈操作*/bool SqStack::pop() &#123; if (top == data) return false; top--; return true; &#125;/*遍历*/void SqStack::Traverse(void(*fb)(char&amp; e)) &#123; for (int i = 0; i &lt; top - data; i++) &#123; fb(data[i]); &#125; &#125;/*获得栈顶元素*/char SqStack::GetTop() &#123; return*(top - 1);&#125;/*判断是否空栈*/bool SqStack::IsStackEmpty() &#123; if (top == data) return true; return false;&#125;/*获得容量*/int SqStack::GetCapacity() &#123; return capacity;&#125;/*打印*/ void Print(char&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " "; &#125; 123456789101112131415161718192021222324252627//main.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;int main() &#123; SqStack stack; cout &lt;&lt; "入栈一个数据a" &lt;&lt; endl; stack.push('a'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据b" &lt;&lt; endl; stack.push('b'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据c" &lt;&lt; endl; stack.push('c'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据d" &lt;&lt; endl; stack.push('d'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据e" &lt;&lt; endl; stack.push('e'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据f" &lt;&lt; endl; stack.push('f'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "出栈一个数据" &lt;&lt; endl; stack.pop(); stack.Traverse(Print); cout &lt;&lt; endl; &#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.1）栈]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88%2F</url>
    <content type="text"><![CDATA[初识栈 定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。 允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。 不含任何数据元素的栈称为空栈。 特点： 先进后出 后进先出 注意： 栈又被称为后进先出(Last in First out)的线性表 栈的插入操作，被称为进栈，也称压栈、入栈(push) 栈的删除操作也称出栈，也称为弹栈(pop) 示意图： 栈的抽象数据类型 ADT 栈(Stack) Data 栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系， Operation InitStack；初始化，创建一个空栈 destoryStack; 销毁栈 StackEmpty；判断是否为空 clearStack； 清空栈 getTop；获得栈顶元素 push 压栈 pop 出栈 stacklength；获得栈的长度 endADT 注意：栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用 –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.4）函数新特性、const关键字精解]]></title>
    <url>%2F2019%2F06%2F23%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[顺序结构的逆置算法与思路： 夹逼法： 思路：通过对数组头部和尾部相互对调并向中间靠近。 实现：(假设以整型为数据类型实现) 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0; i &lt; length/2; i++)&#123;//注意：length要除于2！！！！length要除于2！！！！ temp = datas[i]; datas[i] = datas[length - 1 - i];//前后换位置并向中间靠近 datas[length - 1 - i] = temp; &#125; return true;&#125; 注意：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。 算法优化： 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0 ，j = length - 1; i &lt; j; i++,j--)&#123; temp = datas[i]; datas[i] = datas[j];//前后换位置并向中间靠近 datas[j] = temp; &#125; return true;&#125; 此方法更能体现夹逼法。 链式存储结构的逆置算法与思路： 思路：把头结点和数据结点断开，然后把数据结点一个个前插进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：p-&gt;next = head-&gt;next;head -&gt;next = p;其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。 实现1(单向链表)： 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 实现2(循环链表) 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p!=head)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 前后只是循环条件发生变化。 –（本文完）&lt;原创&gt;&lt;待增添修改&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较]]></title>
    <url>%2F2019%2F06%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[顺序结构与链式结构的比较： 顺序结构 链式结构 按序号下标读取 直接读取通过A[index]即可获的数据+++ 要从头开始找，找的下标才能获取数据— 内存实验 要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容可能没有足够的空间或多出空间— 按需要分配，想要一个就一个可利用很小的碎片空间+++ 插入元素 插入一个元素需要不断移动后面的元素，速度慢，消耗相比大— 直接插入，速度快，消耗相比小+++ 删除 需要移动元素— 直接删除+++ –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 其他测试代码详情：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[体现循环链表的优点之从指定结点开始遍历​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： 小结：​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; 链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; 循环链表具体代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; 销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif 为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？—-对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以随便include定义的头文件了避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[命名空间的基本概念简介基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； 情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中“ : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用命名空间名::实体名（函数名）的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() …… 对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; 链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) 代码详细123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e ………. 一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; 根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() 代码详细：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX1+kzWnMSkYd+KlofgvsHOjKDM/e0YOgHx0W1Xi8peRV7hmkNcf/q7vs5pjl4PcYwQRwODCthPnR/q0nuhLHXK+ufdULCOSvTLkIag0W+syy0sKLEQtADvTepryy3/12EtBoGryIkmk33KAKdA0dQuW25hw7UpyIFNDg11o5bNzAHOfKVhDmaTvxWUZI/PP3uU1lIjTYTXevhSj5KbO0fSdhzxmB0nOetdsGesMorRfFLil38vVzUAYJCzskQVGpVi8P8Cjn5yZx5kxGpBiI7Yn/Tx+FRbCeLqeHogMrXMLOCte+ABqw+gavnqPHzS2ptSPYwpp/2dqqBT4D8r+WbgbrJGUeOEsM2bhNgMxQNSVLQDkwKuVoHdECva6MX8xLwqTPOfRuEGn11GozztNNNuo+SDeD4ZT5ULqSIE+iuAyfcoj5TU83Yg64vfYhD2lFk0RXarv0Jml12miBLCP7gPtZ4M7iJr8r8ccWE7rhb5ny7eSuYR/BS3gKwqG3fDKMtm2djlIZ7GDHb2cQfYRivGKYSKKww8tURWuzA4hHpLbkgxMEH3vpNti4YJS7yTfSlVxF0a5Qy+cs6CGF2MbuXBAnadV2ZqlSQokvy/Dvx4r3A4XtycO3DO8vXS+/bZoo7NHjpFf2WYYbd0Hs17iN0a7f1VnOCBx6uprhD4rwBm9oHbpi6chvYCoWwI3AJketH16bFdUhMjQmaBEE0pgdGIjoE+81Q2E/kJUgLhhArywzzVr6Nwdh+zde9ihyV6JFV6w2V9U4NW36SjDLE6Aa3jowFb4RIJk4F4EFDjYhQ86H91J0de1YZEJWNL0r0fz00N0JRbpVJxSuM7QoqpuP9/s2/qy9RiVcW6pPFMJgEyLoi+W3gKtPBjC2ywV0QON1NfIuM1Azqzoh/iKyJ3aaK002T6jr9ucZXe37nowINbOjrX+anFuVXEL2XCAQNIYubaRAU5Eds+OkvQ/zp3lEdmjkTZULaCnhHS5BiqC2JGvOq14xaOvfKe1iXMk43z4ag7OrR2h3UxXlyttJqnZPVAEEfBUdbglb/2NTVRKDbsgdpKyqPOji26EKVdPCTmZn5VF1KnE+w6Es1qnfOuj8nm3JMoeIggCMLml0O2gKTfQpwWrqgPH+G09NW8s9t0Sw51E3rxFy0dTQA/0FuGs2+5xn8/xLabYgV5/TPz4fTTavZmCEgx2Sd8Oo02cJyJ7GvkEra1G46LxvYy8t2C67QCMadwZyr/xzYZThOOuh8mT4gs66z4Odd8UzLIuaW3bVUM4EpkZ1Y1sFPA==]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） 顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 心得：​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 学习方法：​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , …. , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT 个人理解：​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[抽象数据类型数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT 个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … 个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 –多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述：遇到的问题比较多：例如 &gt;&gt; 与 &gt;&gt;&gt;运算符 这里的意思是这样的 &gt;&gt;有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ 其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[数据结构的基本概念五个基本概念：数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件（高达模型上面的一个零件？）。 数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[置顶]欢迎来到ShuHaoHwang的博客！！]]></title>
    <url>%2F2019%2F06%2F11%2F%5B%E7%BD%AE%E9%A1%B6%5D%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%9C%AC%E5%8D%9A%E4%B8%BB%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[本博客将先会以个人的学习总结为主，之后将更新一些技术性的文章，欢迎与博主进行探讨、一起思维碰撞。在吉珠的小伙伴还可以直接找博主哦！ 欢迎留言，博主在有空之余将一一进行查看并回复。]]></content>
  </entry>
</search>
