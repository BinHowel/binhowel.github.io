<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++迭代器的失控范例和解决方案]]></title>
    <url>%2F2019%2F06%2F28%2FC-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[迭代器失控范例情形一： 很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对vector容器进行push_back()操作、对vector容器进行插入操作、删除操作。都会使end()函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。 例如： 1234567891011vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125;//或者下面这种情况for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.insert(1,100);&#125; 实验结果：]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.6）迭代器]]></title>
    <url>%2F2019%2F06%2F26%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.3）链栈]]></title>
    <url>%2F2019%2F06%2F26%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88%2F</url>
    <content type="text"><![CDATA[栈的链式实现算法及思路 栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。 入栈 思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。 具体实现： 12345678bool push_back(T e)&#123; LNode*p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true;&#125; 出栈 思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈) 具体实现： 123456789bool pop()&#123; LNode* p = head-&gt;next; if(!head-&gt;next)&#123; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false;&#125; 析构函数 思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。 具体实现： 12345678~LkStack()&#123; LNode*p = head-&gt;next; while(p)&#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125;&#125; 具体代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkStack&#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: LkStack() &#123; head = new LNode(); head-&gt;next = nullptr; &#125; ~LkStack() &#123; LNode* p = head-&gt;next; while (p) &#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125; delete head; &#125; /*入栈操作*/ bool push_back(T e) &#123; LNode* p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!isEmpty()) &#123; LNode* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false; &#125; /*是否为空*/ bool isEmpty() &#123; if (!head-&gt;next) return true; return false; &#125; /*获得栈顶数据*/ T&amp; GetTop() &#123; return head-&gt;next-&gt;data; &#125;&#125;;int main() &#123; LkStack&lt;int&gt; stack; cout &lt;&lt; "入栈了数据1" &lt;&lt;endl; stack.push_back(1); cout &lt;&lt; "入栈了数据2" &lt;&lt;endl; stack.push_back(2); cout &lt;&lt; "入栈了数据3" &lt;&lt;endl; stack.push_back(3); cout &lt;&lt; "入栈了数据4" &lt;&lt;endl; stack.push_back(4); cout &lt;&lt; "入栈了数据5" &lt;&lt;endl; stack.push_back(5); while (!stack.isEmpty()) &#123; cout &lt;&lt; stack.GetTop() &lt;&lt; endl; stack.pop(); &#125;&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++个人学习路线]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.5）vector容器详解]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.2）顺序栈的实现]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序栈的实现与算法思路（以char数据类型为例） 入栈push(char e)； 思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。 具体实现： 1234567bool SqStack::push(char e) &#123; if ((top - data) == capacity)//容量满了就进行扩容 realloc(); *top = e; top++;//直接修改并移动top指针 return true;&#125; 出栈pop(); 思路：在没有空栈的情况下，直接让top自减一。 具体实现： 1234567bool SqStack::pop() &#123; if (top == data)//判断是否空栈。 return false; top--; return true; &#125; 顺序栈的实现情况 出栈(完成) push(char e) 入栈(完成) pop() 扩容(完成) realloc() 遍历？(完成) Traverse(void(*fb)(char&amp; e)) 获得栈顶数据(完成) GetTop() 是否为空栈(完成) IsStackEmpty() 获得栈总容量(完成) GetCapacity() 具体代码： 123456789101112131415161718192021222324252627282930313233343536//Sqstack.h#ifndef _SQSTACK_H_#define _SQSTACK_H_ class SqStack &#123; char* top = nullptr; char* data = nullptr; int capacity;public: /*构造函数*/ SqStack(int c = 5); /*入栈操作*/ bool push(char e); /*出栈操作*/ bool pop(); /*遍历*/ void Traverse(void(*fb)(char&amp;e)); char GetTop(); bool IsStackEmpty(); int GetCapacity();private: /*扩容*/ bool realloc();&#125;; /*打印*/ void Print(char&amp; e);#endif // !_SQSTACK_H_ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//Sqstack.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;/*构造函数*/SqStack::SqStack(int c) &#123; capacity = c;//默认给一个初值 data = new char[capacity]; top = data;&#125;/*扩容*/bool SqStack::realloc() &#123; char* n_data = new char[2 * capacity]; for (int i = 0; i &lt; capacity; i++) &#123; n_data[i] = data[i]; &#125; delete[]data; data = n_data; top = data + capacity;//这里要注意top也有重新赋值新的地址 capacity *= 2; cout &lt;&lt; "扩容成功！！" &lt;&lt; endl; return true;&#125;/*入栈操作*/bool SqStack::push(char e) &#123; if ((top - data) == capacity) realloc(); *top = e; top++; return true;&#125;/*出栈操作*/bool SqStack::pop() &#123; if (top == data) return false; top--; return true; &#125;/*遍历*/void SqStack::Traverse(void(*fb)(char&amp; e)) &#123; for (int i = 0; i &lt; top - data; i++) &#123; fb(data[i]); &#125; &#125;/*获得栈顶元素*/char SqStack::GetTop() &#123; return*(top - 1);&#125;/*判断是否空栈*/bool SqStack::IsStackEmpty() &#123; if (top == data) return true; return false;&#125;/*获得容量*/int SqStack::GetCapacity() &#123; return capacity;&#125;/*打印*/ void Print(char&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " "; &#125; 123456789101112131415161718192021222324252627//main.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;int main() &#123; SqStack stack; cout &lt;&lt; "入栈一个数据a" &lt;&lt; endl; stack.push('a'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据b" &lt;&lt; endl; stack.push('b'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据c" &lt;&lt; endl; stack.push('c'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据d" &lt;&lt; endl; stack.push('d'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据e" &lt;&lt; endl; stack.push('e'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据f" &lt;&lt; endl; stack.push('f'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "出栈一个数据" &lt;&lt; endl; stack.pop(); stack.Traverse(Print); cout &lt;&lt; endl; &#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.1）栈]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88%2F</url>
    <content type="text"><![CDATA[初识栈 定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。 允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。 不含任何数据元素的栈称为空栈。 特点： 先进后出 后进先出 注意： 栈又被称为后进先出(Last in First out)的线性表 栈的插入操作，被称为进栈，也称压栈、入栈(push) 栈的删除操作也称出栈，也称为弹栈(pop) 示意图： 栈的抽象数据类型 ADT 栈(Stack) Data 栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系， Operation InitStack；初始化，创建一个空栈 destoryStack; 销毁栈 StackEmpty；判断是否为空 clearStack； 清空栈 getTop；获得栈顶元素 push 压栈 pop 出栈 stacklength；获得栈的长度 endADT 注意：栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用 –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.4）函数新特性、const关键字精解]]></title>
    <url>%2F2019%2F06%2F23%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! U2FsdGVkX1+3UO3uS4/aDcsZLtKRSVY8h8x84KsHN6aw+tGWfyuhVEm0docHFUum9fLGXvIT0y8+05Hc5T3EHtM5b9ZvmHvEpMlQMAn9GsdDwhrZZXEU/hdhRDhSqb8CtXRjUMkpTuQP8gv4eNdC5+o9SPO0HhctRBZWyiGOLgLZRTwc6KCYGWiJiMnTDga364FIhcpz0ISdjDQWOdTI4iHtkEDBfQrWNV80qSPFP1Sw8kDxAM/LgSLVU7JIFVmVU04FvCZ7exFkPIha/RFMsdBYvh76B/BMEpem5wMlqONjsea0QlTg/ksJO5RtfZ0563WiBKoffm6L9VVpnpoQqp2f5hMgKzchKxMpMD97R/RwwofkqS3kZR4AwHeYGwPVWkHpbVtXh2qdQPjvMAzjhJb08lFkr/VeYgMYYzhem/NtKvDMosFyOdgsc72HrDQsRwL0jFPCcq8M3Sg7dn9wyTYYVtfpgL1J2WF6qxGFeOZx8XyrwHoe93GqmNOqx8SUI2nOeVIoMJhn8M5BgvhV+0aiFqFT+3g/+e2YbzzMyuiaskuVBblPGWLU5ek6PNjDJyt2fhRcLjA+QaQ2E/lNX2BARKLGEgPUWb8W+XpYXqFvAT1fc1SkqRubA+ExwWpd51I4ziYa8FlbIaT2dHno+yt8tTMomBfoAVyhSFs6xPn2j5tAHpq/zK+VLHADFyBCmSItZcK+7Axo7UNuXi+129b1Vluk9xbBXnUUGJTpz+FyDml826HCPJ9geRrB9omEK+IPFVCmM5DM2+ni/DirsihaAvAgqiiq3VXQ467c5aR2xbi6kUDMRyllx3/Lq9zbT7NRlAUp+QnQBL4uGX3lAwtxnIluUtb7NzQ/DpYbGoRY8RPkGNEJ0z6du9kpaBtJE9LhB16pgEjk5rDwQkIx9Fkf4vZvNw2PYL/WpBd3anwGUCO5R7jB5NV1gzbNvHjzbc7EUsW0ufyDzCDAzmCrcyGYtCbdwnkZrCj3TWSSBxxzrO2mhsOt44jmNJVIM041zsLH3lLablyuxEJ448wfuFk+CH/DisngqzzXECMzUwjSc3bEHdoyN0YdWXjCF49C1WN+6D5qV9jDCe7AWIUcRL8U0gGrvkgJyDXHFn7EZK0gDBuEGufg6vrWl2geFJlrmEb6lehvgm3G3PNf+eaTsTCj4B/uzNFAShhbB0AuxFqUQM16ebPwLAVDeBj7OueNRBdne81vfAOOeOS2XOKbL3T92GFBxQhXpE0OGf0OAUFMFwjECxiiGbhJpIPU6fUUo/PcjTC8sU1IemutK/YraS2kmh9GPGT1OsX7IxHqBrGRGk+kWwZeKhbiR8aN6ZWjr++ZWD6dDuxJfFmNU6kKMq/Y7Zc9dzEqhVJhYlN02rBsvKzU7tVZC7Ei+3lQFt0dovtc3z6sJ9czEVLaSlJNw4G6blFuo1JmiEW2KhHDxwbdQzCn7HZY4ZBpJTrIKYUT2X4NBw7i1C9MBwl77wvZ1FLPXCrQSW2f7yseMa4VHdO/wIeKPkV9t3v4ZeKztqjbpR2qeqVfkBAcC0MlqRhGpkD6OGKjxlWvn2/8F/4463Qlxe/ytw7bzHDC1ejsvh5duJnHZV4A2z+MleoqTnIideOsGW2f53JhtQGSugXL0Sj3L46qR8PIe38hfGwoFaEcsIOINi5X2UHa/hepJ6LAE6wuIJJiFrHM8HYiotBZkBSQaGpUKot6f+q17Syssd2EgPkEloKIep6apZ3aXDAld2VQ+0vXXy39irUxt8FcDquEDLzMo1Cru9BFGPROV/ugj/S7xhzB0Y21ggp+T50KbvTvUuURNY04ksRWE4dDZOOmQ9N4DoYttvZgOJGGq5tJU+eT6/YWjU1bNvQKbWJHV5H8fMuaPatXPztYMtHQeXh5c8oKrUjzy2T9x/k3BH4o3klaQ4bPBxfy2o8jGgabeeR9uM3JmkVn9UW+PfKfgGeNFMbnkkOjJvDiBaj4tJLCdFC/4HL5gE62eWqL28wIBWWz5RCUaZcydXUMVkFNgFV26yBhidpr7vP+Osd9H0jUDBJe6r+hXv/7Zl3i6J0V0LHSeOth8/LavcfXzNfjC8BjaEt+X8VCG9pireoaPgMd4m5BBO4D7E2Nm1VJIaBjeNojuTXo0rqGYf1Lcba9mlFG8s7o28/9Cv7I+Nnx/CGBZXkGKP6lwcv6jX13lk8E9RvzMBQyP4fWe+jozgxUHFMsc6vhyZXnAkjMgShnxXVyjRZNFRWuJjwMNHLDV1cEjr0VoZNU+MDdJGK58hMgvl59XVUyGldoo/oowPRwBqxNtLK7dKgpCYO7wBmuItYmNvMkLaWximG0oiHfWx9ViJo6eSYc5rRXUdQ9CpWB71gqhqEArvXY9wN35UdH+qLpJshBzEdR9yXCtE6UaKXXbEvGoDJY2M4epj2fIcVBVw9ucSI69eKOx9gKawGw173ZEwyb7iWQCOzpKimCAhcM+x9uKCr5C33gyzQlzVP5RKrzae3Ir6ZRLY9nzsrnMezAOn0mp1CJykI07Lg4+q5ErN8v3z0Q0OEfdQldXC2NGjlB34+BfyPzn6qxX2ehQwLXYMUyWTg0Y+fKRnfjqB1L5UU0dqPJKHxv67Ln60rJyvLhafsU2WwyOu4Z8sofKlAFDaX9VU4GkwVlvr2TWp9hErpPg2eGo9MHbzrE7Q2Rn+K34PSOKuDwWYqQzMtcfJGtdTV0sJnrbY82L/ijnXjLyJ9sywhR4dgemIRS/tYclNyT6EMiBfhQMx9xU1G/LHs0aykxJCJ05nUGm31Itb1E04sE/xIyS8AjT7/oFzEDVhVlZLKb7hnpPVfrAkZKR9HpFUZAJ1kjJc0NEzqCTg2xJALvaVAHHaCZyVl8VoRrruB6Cy+MqFvG9l7BMKHweLu5YFrssWyvmXqHSrxWMD55UdbzOUwt05tlA7HibJWnOts3wjLtsEN+PpG4wRxeAViC9/zwUCWjD9ppIhmcJiyh+HJzbXFje6CpZYF9uWul7Njfx78tVX6XSan/1ObMblw2OPBdpodSCUKWf/e7XaflueWklaB3Xc8necuTJzPAiq8mvoJA3YU8yR2L04WVAoBSECFv9HeWLinItk+zlAWketO+D2mCMDOkpv3h5LqhJ9oyuYe4FtXYYmFBZPEgNY9mVsxrzEk3nD8y0lM5QX4RpLHInopdGgUKZJgdrKggnuhUDy+qx8AYeBESAoXfFSyDa6lLD9YMmScz9PSdyFk9Ao9pq2eRrwjVCvvd3eEhGhQhksqIE5fCK7kx/XAPzjOKxJyshKDilo9qR1nt+kz48b29Trx12G2oQp2MMmhZwQkiQvvt0Qj03KLYYrRNEqIZsLBjU/4Ixxd/O/mTKu88rcCKaQYlGkyylO1WRgiQnOBjYUmXX4MnfqNT36aHn26dOlsOlFQXr+YTTDMyaJkKBZB9Y6GMiXcYMbO5lt/rYmFuSwzNAD2rhEv4m+kroOi9OmFMUHpZiJqLcfmCK1l9Y0e3fxMWegKnzUIT3BJQSH6aqqgY3u82w95Vdkvlenq2tQz8tofbVCFBwwO5vDKbuB43T1+78ifjetkijRFskXqPD9uwjwjEIc+12TtSYcqwCQds+W2/jrrci3J6zMv1Sj7pIq70pn4rQQMhV92LDZ3wA+vZ25RZX8x0p5rXRS5FvDgxuQOSHGstA0JH7kMvQzLO8iGDJh3GOOauZBmmFjjfMteubuRLCamcMfLT/Yyw+rVGs1lgQ5Tw3JpURMLEPS+PP1utr0TRR7GEsAdxGMRbNY3SzS7Nl39MXULVk27l6uqQm1RJHXe1rocc/qENVSj+NXhq2aE6EB4wm3K/HsRFyQGE1aiCVVskg9yMkgdL8zKfWcac6ApfN+b/Z4Tb9C54atby2vSUC7yg/01GLVtb47LlDGxWa160GzCLDpevF3ZGta4VJKRnfY/kKhJNAEh9BbNkGLKbjrrvhSgihox7bNzhXycJizy9sx5sG3/fJQKev6fEfKEcZpZTxLnqEC/Q+2L/n4OQ9GZt11tInnRmwMAMm4P90bPLedUy9CjbiyzGek5g8B58AARBNXBowrOad5c1oLqvKBWUANF9SsuvZceD2GAkrp8VENtOVRJtpKNUytfg8KTA1LblejDUX3GTpMfa3ji057tZFG7Nyp2wfiCw8qmIq3HC5BFmGNjD/2crv6kVv5JOSLSLMplvczP1kGL8TBfmD55EZfj+v8ER7X+HBiLE96AcwzE5KPe3Kk8iXaVt8P5yfLlvNoIecBhZHTm61Nrw+jcGiYGCGkQdPH0wu0Yx4XM9M82FPSTkCPmC6cCCZ+UubEaFzSAwTnKxkFmB/+wx0KEUdZQSPlw6b5vGkwzinLCS4xRu/k/nvYNANmCfY0Wwg5EPCoS/JzSL1yvCIodZYSLegnYcw/fhMDDflwtV0opA3pCat2W6p7S5xzn74n5o8PqMkBZqqzMTAGFM25Nga8gMu9lxx8TvMsHYjxZeRGX7KMbyLGgXhhNPbprAJpf8hKhtY9eIBhXX5KHn67SIrcXSGLvbHjcqeUtZbpTC7rZXxx+aA8nlQfLK+YttcHO9P1WFUtsbMl7nL1PadVjShoGJKtUX4I/23cxaGM1H7V7SMaEUyYZHv2aHVypwh2NDiSueKNQh8OkxyUGRm3X9aPAlnVzEzLchmGHF+3vgKaZn7g93MKd6MEBy1kHDFxApoackyaMTqEsqV8s2RdFPZSVyXgoPjFlVd8GasRkckQcnCRbkTCWj9LzR5opiTd09DTwZ3esFDDXku+fN0/xCi4A82/oDe8sdG32nl0wyAqb+L9LOR1MLxeAUoWSBrvUCDSisPOZo9yc7Y6A4bznUny9OMfVGUbS8W9kYSfuBeFa+aHL6k+8MtsrBYljznoY6/E1yAy9V7JNUrpr+R0CehMoklt21GfvSuERweBBRvyZzc+AaP6WUud8SjtUPnb3VcwZyH1055HsPv9jN93WbfpEwTJ4HdxcUxVhQlkt6bF/AEXCMeaFKYc7LwdguESuUL2Ayhf6JZvQL6D9cYSRjx5chN/c6C86Ct5uZs134S5BZ1rcBjoidb7zUxMG/VD+0/zThKZpqnd9AGdLT769sv54m0SKw893W/lSTF4i+hNHr21570TitV0ftEIkqT2ADdMbE3dmxbJ4r4VLxNzMyHdKpZW5SRc8wGHAj/3pV8Un/q2IlWyy7ZFAzV4BjUfWVANQWXyf1gneNlfUtNNexXr2ehzZzEhexYqhOwoWgZMzUcO+e4xPaXwM2UBIPjjNNOV+Wgh/qZfWDHagspMByXGofakpITd3wnoQ+dOedehS1wJJqLwiXEN4w1ohFa3lsPLI3ZAlg6prbZkJDwPYs+StqfTj7oHuu5yLwzxDTiZeXo903iHlYxPwk13V0frEXjng0EiBz0xKYz6Jb33urheKV4XotFwkPulrGzFRQIy/okXSz79XDA5J6CTQqhDME8Jz+bVngzMvKQmAw8UpsWPWPpWFCPjngzGP9GSbV0fMx90kcQZE5F0dBd/S2hX/BYWOBuw7SX9zU1Gy7/FTeuea8kX+y/mYBLeYdsxnNOBwgWIOFj5mkE7Z5piL0sKzh/24rtnQll/0wE5fReq0HyJUJqd2KLjCK0g5mK9+zE0XQe2JxAFgPnYsOq9hHo8NHQHgp2x5PMExb1Kd9+4yQlXGC6IxbbwR0Zg3qIEFhZVmEBPG2ispE9tP0tVWbqp+3QuLe6cikG9mXKA2Dst8+Kr/9grFfNRkilyAiHlRbQhWXQnotmAJ1n8MrWnRz5U+5V70lRwuzzlBHSeKL90kfFNPRhAsBegvCGwTeIR4y4/2nG2Nq03V9EUw1bbw8nKpjt70ZyRI5Bke3ySMe1YZ2DT3SO0bYC23bLPXTjELaMBpJ6PVbbyCRDGAFU3tIgQRRXyASj3UG6vBOjpYt12XuUuzkRNhKRYOe8FQS4sGunOKfFxgvHxCa1//v31awxJzEeE/yhtGFpWnOq4fjtFqZLW7J7GsHCTQTjuSD9IyaT5KEzXhXqpNreFkXGH5GWPu7GJ19j4wALkAma3Ki9+5mnfAj3eryQQbbpPeltx7SDsMC3HIMDPcaZwUiqTMjBFLITkjp2+DS7HzatTgvRBbw9csnltOa2K6nsGi613VMtwQpQXqcGbdbY6PfZD5s2r5vSpDXrqhv/ay/x54bbQmYdnNdKfdcp/K9pD1LvhVGrcd/OwP6UInk5G+djpiBW8NJimXtWFwfPTOM8PDSe3mRkzd84Lk1ukR/LS13U7som1GdIVYi32hugDULBHb7b0h7uxX4GN9A3yDIxsQa4TUOyb3250x9SuZl9vciNkiaemOPug9BeJ6BJ+ItbyxGudZMhKveIeYt1KeRy9iIOHIfNYo0V/SrMAIWHrMFSC39ykDW6Nahlsvg3Es4WodLdxJBXzq5hFKME2TUgHQFMlLLHIj7Skf6NH7sROvZpF4V6jYhxcSMu2rlO6INmXtWlrEco+0L3f6csdql74J5pqM6NbPB/qjmcJ+1a2kkl9S6BfmEPbfBJ9/sRPLxzc7HpTWfogQkVxlh9c18tU3MzJQCAcv9ENPRr+FNdbt7Mj/CrG6if7z2G5F4+CXBAHmgO0sseVhhBGERMAsw9bbzFp6YQRZ3IzhagVbQjjBCz12q5eoHEwgbsQ4Vv/AKf/WYaRnZjqgR7CkPCDCgz4VdwBK6M4Xqtx4JX7OaJkIgUXCZBBblHA3ie68bwaWYUn6NeSdsn9H0sTVccrNNsrsUS91zBSz6WfIHVho0Mqn0VMqbBzsbllTXbq9I+n0HM7/HpGiMZyQc3joorAueKv8oA4wCYsPVwlDbQ0uRD7IuSir/aFkaP+bR7H2ODv9Wdu9BUeicpbvEgEu1QllGG40MBnmDtG7obnf98W3naNmfINkKewi/L80/HR/vHIxcTeINoo1MzQZu1K6MWTRP3+JGUPH2IrPAMJFSS0Mta/X/VOaiZgnO8C60WMn+g8B/mSWZrIrqpkJ52+FiwsSYMHC6ZxTleys8HREVFySdQbl6SelB0+GN56zH47NSFxWQF1wUmS9Cgn7Ma+rXhzkc+2FR9H3iIOkx9h1YY44tewEo5QRGqt/uhLXQPwh/u13XEZhdLMje+9nzI1GYJvNnlzTTBR1jpHImEB+Lwb09+zi0RjP88BV9x+ullbsmvW8wAuhEPvKg1j8YVzVOSzuQ5LFRAd7tc9hiFVz2vkssMJECvrvoNb6o2eVLYmV+qoR6CcZRmQyk3Lar11HQzkMQuVJ0Ee/GVLWC4obvjw2PE6LodcVibyhGtaqkw5goYNOQBAxsq8vdmgI9nTwh3aS2qeOI96yL1I1AT1W+wgCjW0COhfRGh+8PJTgdFKjtQ4X9mQnm3py8QYQRgBiLVZ02OcgOkIhXNzfvADGd4cPcGwLqRUmoS3gYeIy9CvC6cqRZEUe3MQUlXMIS3ZA1X7dBxokP6EqaLIcyu8ecgex69TMqwy8lTNzzCKg3ZBCAWSOg8RwWWqHOJE+5Itj0XxL/3RBHtAPtj6Mhwjiwwsh9JembaUX6okmT9JpjhJHRRbWn60zDlfJiRCvFukH8V8ZXX4yc1wYOsyX1V/WJ6SFGCEPARQqmOzsrsr4ozl1HkHxaJXvot2bmhoiygfCD1u1ErMX3aHzqephVJPMhjh2Y1QnZYzJ8NvQk6DN5zd0Fj4CgmWr7sjJJv+RFI7o9PoNxF0X4wCE2iONSTNyaxrC+jO6e/6+55cU6I0f6NfPm5omyx3CAR1V048plkR7qZIv1Z1kWLXquk+RHOalZ2X71+14dUCnX4yKBShaxgo3lywjuo8jHLO2sfNp2aMp0+2B7xU0H/jCKkbd7DasK/EyZLLoXkjqsbOrjSX6/dwq8rVrWUpkKSbhRorZFXvMHG8Qit/TQQjdIsD4vqQl0j65JgeykHNvHbqLn5h39KJb0nJdp/ioFY/+tzoQL3bBp1ANX6e8RIVrs8KrhlrASf4WNZUiFrqMtTEAWexvmklCjrfjulX1Cg+Mu4PM6WyZxERowNTmPjZ9iTqwazPiiGBQlWNIyoVerFVbKM5uHkD2lUf/p4JyWWriyR2ZO9mzoZxiEpaK8z/2tXplet1eKGkDBat9T2f2t2CGVljNzx2KZpikdWDJz2FYbOAeVclBN7uIvu2BFzDl51n2b8dQAFkIN9qZ0yF22j7S9jUUAEFh9wM68GHjz8fp0qRA6wqK3KUhhO/igaWnmbp1xkqFBaQdESxLalORRzBt1XA2YOk1jWRfY65CIQph/H/eqHWOxoi+A+V6NCfNqmJPKbe+UulK0OIubp+bVO7IbLSCXWPJ0qHlJG9q2G+jH0Po2WyX9AGagpet/o1ZNCTfHZBlkyqBPeuRKcphmv4x7yyRgdoWH9KFZKyLtE8j8Na+rT1VOWc+LCQRKoBv8BStGEGVnNFI6xYj4W0iyZ86h3NSQIA6dK7m1lEQjb19mOXSiRyZ5pxkyn+jtkhbc1l3stCUezR5nN0rYlvUmvNoWcl73tQgveCKQLcr+YJnC4EehtsiYnhOSkeqT+HP7lvctwHRjduvRTTlgc+0BE/adoLOVLhNfrp6lUxl47LUoulDmZItUf2pWm6itBUN2+4GgHbodRRyktGrogO75H8XmsX/bU/oubjVuQZGtLpWmc0UNksOTCHLmQKxvaZbjU4kj2Sq5ot0WJrAnhFdyL0oAIqkFvy2XWIdfl4PRKIsTaambwVX2I/LBQpAhkKaXSkFastpmtzhGLSYnOlcsDJ7klDASbF1skafQ3bdSjV9/pAlnrJ4VF13uMvPw2EH6BZ/RMAD1MhBLEyg6ozyFBgx+zM4YSudkX+qKTpqMBcREH3yL6huY5mj8NTdnZOC6yQpN02vLfbs+h1j2qf4Ry2P5Ga8/z5ev6uS1BH6m2sdC6K/qEfiQTS0PTBSWHr9rwfaDqldoRLsOVHRW4gInx0Na6V1wxb9YcQPajiZGN1tzrYyNgzaQ6i7m6QfHUi4fS5bpPzpN4624CFimlJG2+cs7XEn4+a+BuB41bBWioAZHTfInenkf9tclGbEvbGPHQIfl82VppHZJ6T9tkE7Zjssao0oNuwslyBqZ7sja54HAdW8imBmYpJx+raolZfwm5UOSHgECORxUAjdS/KGfazI25xlZaPjN7HMHjjRaUkMAhorfzy9x1zwkkicMGPf5n+DYTN5Gii4/SBqO1VAm/oQFrZKP0KF3LqhXmieLmimY3U3T2IK9yBJfuJKr5s2jw2wchGGsyNEylWjgB4VieDbuWt7ioI7cPb7F511VLvFLf7dEtz8YrQfq87FAfoHJjPYLyOLyjCSFTlGsJhTNqM8ZjKmqX8MOOlzjAgvbOf7BJMYakWG2p+W99MyOR8M1mNOgixny9OmL/stLJJq79UZtewO+5huxql2kj8+q3o3a0rvjoD8cps5dCOtUUllf0+QNEsSUweXPw6wxC4FTbtN7p+OJTDVRRuheRxAa7+HnldWn7k98TFWIUqPWeZust/6jrtN6pEN51qsqoFhTnw/kQ9J8mfXKUcn5w6lVdu0ka2cwVsom1nUIoEiw+iE5sdSXRtv4g5QEVl7EqF2safkziJ763F2QYt6XSBOMIUTSKBHwngNnTrBF7L98t9GdTOQy1Cci0P7lh63JXkXhNJCRqEGEN02N1v++hICof1GLE9ftEH+zDLRd6tIQmKjxs/8IwuKOpDHMQQXUgdBdQvRod/syV2ShV/fW1C/MXPVyBH6XVxaQ90bC4niZjLSaY2Zbq3yS/4kt+59+D6YSNQyNPyZJMXI7852wVPGgr2EmuedwSGSNbiHivshXwr6YIdOzS4dn7tai5h0QS5zg3qMjUDMy6WyF6wPQFfnSGDeEzuMq9C/QdbzzGakLgaOduaV5RefeUSkzK3pPw69RSA1qt9pXCxTjIBE3BI9oa3vsy2CSbTcKqi9o/qb3wdhOFdtmdqSgOhgpe/fdu8Ud+i+IKK6vSmPvPYRQFMCEJQXt8vjFuo2R1roC2BSAdePNQRdXBVe/lCoi89Betq8NzZGrh3HEGJtOPoebuQC3glOSEoZefh4r0dhqIGB6PlA9XGIX9afdbUis7ZPimxTtP+v0BPwA0nCkIcwozkMRjz8Dyukvu9S5mTc63JI/E53koaCPoYhS3ckv+KW9KeQhPW7a+aUx/5kSNLP1j6KI9DtbcnEbU7NG7B8LsJnna/15nIfaiO7RPT0+CmvttYpE3oI/iKPe77+Qx8IKpKw5Vy0NYMvOJO9zm1VpIvy/AF5E65S50+XvnMHqVc5izAzJUGPPX6k4DUQvTJ8qA3E18dz6BkHm1BBLEFHhHdJJVbwDHCzj+uIx7sVOPGW7KTTVFc9PwKf49ZC9/ZLTpEhRllMBIBgVDL9dj5tylnozoi+LxLI39CqVNOnax2/4UXSOAUFIFJU1Swxem4Unq927JHQQ1rqXgrDQlRfvH72+iuxtpRhFAFZcFVYo+3gApvT4QuX7YuvuzX8AHTgxBc8KvuUHjX3Yjf4Whz5VcvXjJ6v21Xj8dZa8QVRI5RYzt1Ql93079uesN2PHY05uoDIEfwREmbl/C5g84RpMA4lqdpQoUh+V0RtNnMPfa2KiiA6j6Byz9uA+SnYwZeVs126Zsj8+Cz6vgDKd5Esf3qNCq2o7AMBReYgj7LGRzhWQYZV/2rPr8b9sVxANDU9uyIKCVV+o5WIJx0aW6Jfq7CxQi4rnkm5ho4L4d4vXr/5vWl3B/bVl+s4ZUrFK9YCydRd4AI6AmbAndmH8P1vCKo2EXPkY/ISDK13a10pgbXul7u+rvV4VLFY/AvdX48m/sUV0QAaHQssX1PLT/gUyaPCvR6UO6WLdvsGepppDJkXkAI8brbIk/sM/zQJnteP+A44GNZNbPxIQRdBmFOhmwks9mdsmVjoa3UKSU5wMw4pwen/j3X+U1IWJQwV1MGSQ3Je5J7T3R46QizxGkyEW6VZvZdiklxDVbPqdmtJKZACIeJVLsYrCwyv1AbspemyDAJK8nos9N9j3bJ+JB1OLQl8sCuDOUdbo8g5b5mP/7wJqfCbRderDpzF+JZV2MvxTVwiDe8d22JgUNQ8W2adMRbgMN7d/pc9gY6LSmPzLvoDQq3plE29eM8YV2LPMRmeC39PNgu/UImSW6NJE7mHSohZTAFA0aUvaguT84x/RwJAZfPN78cV/Zpvdd+tyrHaj60BZe5XpD4G90N1B+Gq/UJ1tdi1csK/Lux1AifOLvstizXau3tJd9JvvlGuboJwOTARRZLFzbkLt/OPHvS9/AuL04FF8RojqfX/b5ErW5rIo2rgZWXBVjUlbFi2nyAuUAd0ATOdetBnNziiSudttO/Xz9kEv4sFZO17H9QEeHwVWK8M1lsazpIssYi9rcPZE4ioW/TRoZjSqjWawBYis3+KZu4MHfQ2OTRqXBTi0jcLkYCNNjq7i9QgoemRT1bX1mbAWCN2JziNyavIpvkBu87zc7g5zKpseSwVvWG0i99My2DrnB1K7Nop43OHowXKmQcPgG6u7/vSXs5NlEJ7B8dEbMRHilU+32uy5BTBteU9+QpcK0ARwFg1QbhSJFVhbnauFNaWjibe9VRJnbeBuQ78xhL5tW3eWsKq/RDFBqlw7yVNV5JZgTecbkNAM7fy1pgx4ArgNO/FrnDSSnMIvOFE6ghe+bJr+4wsXc3EGkJ8pUWwDNG/XD8wIb0T459QQmPyrMT52HVEc/dZ4dsP5LnLdCvsoTJ4Zhf+tl1bEs1+e2sjYBQLINkKy2n+nT93/HIIIvaGWPPmwOI/FQmrv/QqZNzdpjyJPH6J82s2JjxQx/y4x7cATHwvg9H6w8DNC6ytR6dZVgRG9vHG5OZxgPz8MxuqM8wIGMcrFykMKhaNcmeC7Y27EBcZJNfEE8nb0Kgkt2Wkdcp88QK7bqkB2Q52uuU33t7imjW07/3teC6HM8cMV6HqE19RQEJwkezPrIws91I1lyaH/i8T0W0vCi+9RBWDP+yA78tX8hCRl7yKxohUuybLLMZsQEugymQR0GGkv19cCk0aoGy3kmnoNWwpZtOQptlbOcW0GqGt6TGs8ev+TINXGdOFn23T5X+2RmRKdVWDNQYah9u/irDUQw0EjEEXFnJYF6kl9XOzjFqBUUABPcaBeEGd8dJhFgYJzTKFhx6n2YajukVd3yQMH2zsUx1Mn0YEssVLTnBP6sxtcsrl1sOzc9Jrvb+jJG578I05LZ3abwIjiOjVqVMFyTu/cNryoRM+tUfyWsiCwD72S7ilZtvc8w5Q+DGs2vZWG6Tw9RprgVl+3N4BD2//8QM4J8zpH0V3gykt+A6hBOh513BRMLXjFMpm+zT6wQnx6ZUXgmpEHy6bMQLCQVgnwmmuw3+aftEY/4cYguKiPDE5Hh5jV+d6RyJQpiqUfhqGGZT6Jj7ShHTNfmOpnH0IPSDooEHlh+dOIvrsbL9RspwxbfV4nfftfhOdjo6vs6S2mNl1xUS5+Ww09rSIQg2t9/YefJApQOIgvQpZbfmCkrL5dfpzxBD3v6O9aFgBV+Mjirlf77OC7CgggDwyjJ3+f3dRuBYThOkaRhfMG/6Ke3eL1qDil3CohSdSLTRwWoUKyXKthrrxKQgg1PGcelrpFcm0kTpIXV5u6x2DWN4YGvQYNrm48uI7DKghat+M1GBCItuiWqSm3EIICZRMUzffPer0zRVy4AHvwvZXtTJduS7ZLgURVWqnZoNaAavINbfspEShQ2ewBZcGonOxy78aCbxQH7ebVCZsZsQjrJ8jj63ESe7i53jxDzd0CvuktCnIASgdR/FcZ1+b6Ynal0GGuyTmxY6QhtdzSoijSdCN17ZRD5T+xXALZhUJHeDnzhdwXYzEhiqs+8YwVexQ8AfdC3mXusFXj1puTk31ciEA+mARVLC/D7/NnFSuu/3xq/n4s7nUcs1xfzsP/ve2FAkNgzHL8J9/nL3kvWRma3ulIj286fdofDNyjoHzSJL61XvZqel4Dj+PnFcuNOYk1EoAp6YZH+z4yONRwA9yfAcBTCIUqF4lct+zdqQdlbonszXi0FEc2dUiIkzrfBM40l7Ze8Y6I1FokWtoZD4402wPpg1kyHX89yYAJiEtImnvU5DglfcGMZoK/gJRYj2ONWuq3DTyL2rf4N6+X1rl5t70nOLCUVm0+xEVFNU3raW75DP0AzxvwTjn6gK9e0ygC5MaS01oALzKuLwsWA7l2uWLM8AMmGttg/lqWcJDLysZP1A8ErGzSO+NM3WGdkFlAp7rghXHedCXLCvSp1oVumYZrnJv+DIII0/9sYx8ClpABnkpFWOABpf5Se0Cv9QbFYvfsbfRm0DayXUeaAH7zqVVYBAZAfnn+TF/IaHT9IwmINMv+oH9g1sioyuyQyWeaa/s2qsmAk8qfxZ0/nCKRRM1i5q/YC9nuhLKtBZqH7ntbdE8KJChJ6eYK+ZK1zk1+2zSQY+TFv6ZnfodWsrgT0/xeYQgnXIZh+lHDDlrBhWO1KnuBuJaHyzAu3IX3FRpucKSWgCb+cDN4BFcwDw7euIhsRWgrapLm655x+CGVRC/Mkb43opCVNqA4aExcf9dNIMWt0fVVvW/lhKBj514+k/D9+7ZtgJtQxyVsgDOEuB4wtDJa/iNhdtWVdX2slw7ZxwJW0LvgJnDFgW2m/9EntTFmf9wIypwtD/FUW+52cM6Q1D8y1p2Z3CEwPUc6fsUboR/1Yuwi2iKUmbDnIij04BAanIyj+bEx5j/NnkGMO22ocfNmw4JA3uYM3uUGg0A4y4ni0vTxhROg4Pz/GT4O3SEBMY7i7+2HSXIrbeoguvOgm2fXOWlYjeWF/lhZTX/oDhDaUVUNQ9JJA3cWahfTpipF6tUHQxtu/wutk8qLaed3eiIXDL8HDC0KH5r5jB70e+WXgThzMr0768ujJw5AG3M1Fe+5VbQmGuvuHJfszda1dgDWn3paSCc2x8Lo8AqSv7Xi/R4nUVLpHRv5lj5G9GoBM59iYxoMKrRHnsvzK99ot/cGcKgLQmNWAFb5By3z0FL7eUUvWzxmAbL2drCeJR9bAhde1m3er3H8FwOBsPl3FUf2BxcWZP3uJcLM1avHKw2nOpPZ+Sft/74DwbrzCxcppdBVvsSJNgz9+6LLm/Xec62Ll9sLxG3fRJBgk6q09PSiUE6GFBfycp2Ldsy5yIJOYnXYYGSZvJOS1EuLHkP+JB7ACPJmxteFsB6PPqXabR51yvPoW2CKUaqWytdabc+v/aUtCoqny102Huc5fcsWublbxqExlyg5ysLDm/vMR9twgSmsDYhT1P+NEFWX5LhRTf64P3Qp4UY7VulMjfXLpsFR4y79fyC0IpQaE91bsYpfCEU39G/7UmqILB5wHceqSuTehbiH4EEuPFfqGJTzpgwUA1EQs6ry3FQinmYWzWOoAWlmAeZAdTZUinnZbzcxEWiZc0oIaqK0UIlo4Ucaizesslyrno4FbjL11+AJ4QV/9SgkJMlOle5TclocvsTgt4oNtTTKni8sotl9mrxrbnPh2kzdUFhONLeJN/NbOGHQbHBOKzcS6MbR5CM4zRUCxdH8HiR8gBEdu4xwl+bTqm5vAMzN5v+8aIPdrkKr4SIgcg6rNYHHlt15AY1Nalku8uNE+mQybsHbXcgnGGDeDyCDezWA0LUgR1AzJa//HatcpQFqBtFWyf5aTSkvBTRKMyPCYYIaGnS3X38hky+LVDWdc97MN/hMEb97+WvORFU65WT0dDm860zRvy+ZXtQiOPSmNEe8ZSCvm54FggH+oqVwyi2UGGSSHq8+g/7KLXydRe3KLFck7GyPVotkV/qmtApsDM3l8G59hLmu2ueuFLdSrc2SJNpoU3FXOoyh1tKB42Rc6TqkXKGzca5Hunky50AEYibZwbRJLF+6uG/5g1ysih68OGxqvd+fAZcxgBEivIuv6s5D0bsHwDHxuNTKI1Zpj/bVcxuZrVbT4v042Pb7sdz3NpL2Ypf49IEgzAimVy4Tvnieoab2GPeMSQcY4Vn73Z5NTJyqE5vzIXU6o8y+geAi02tieeSpGM/DZ1pV8JAvzeU3F39z5tTAXZsCZCKDMMu7iVHN/lVH4F6Tz/d3v1CzJr3sAj7TlX/xm+w85uKVkzTA1BcWxW/46yTNfAV70Yjx58ODDhJc0nC7Lky4QIi9bvghbBletbd9ZOce6bnXKnnaYIbN3UK2qKoOOgw0cC7gSz7J12SaOPpUEosPCheTFkvbCrpG9+x/rrlklovHQ8ybAubdvnyqwiYEDZpwi5k8JWtzm4HY8HetV4se4apBFNNzOXewYonyahrvoj0WhyYBkUeIppkDvdgiD6wd4tTAUwgnuN6o4Wimbe7atIPsXdRP7FO0NrHP6YMOt5GC7gQF24BF8lflUw1ZgH4/zkc9XCIUdR2nsA7aLmga/sQmHsaZ4SDxlNYkBvyaJmUp5OpZgMsk2K0HQzGh8XDTvjoHPDeXyxQ3pu4Xd+mRr1pr1UfPCwxqSkalqJac/dcDN04hXYRct5T+BBNZIg/Rp+g19tGcgz91yRyQNVJ0NqRsGLc3V1VhoTZ9YsM35aMKpaCDVHYjUhgBoxW9n2tnCi9hD1nFbD7WljDClXi7ZkS9Z+QASFmMxUaAvn6UqROs0ggEdMwE8d+FU/k32tAc1ox8F5ZJW6yk2w/TnKDMpV3EpNlUITI0wgqldxewbF9QRFsS/zhsY5y3DmKABwf1AevVMKQBpuOPe9rc+h4ED8+hQmkAP9jll4+cdGUvX3QjkHMTFGfOvUvwuWX/6wlGC5En1aEnYZaIMbvmU1EvEsTw6IJ4ECqckIjq3ekjAWPNNX3yKTlUACLFWK49Sr2tXWuKnjWJKwzVl3OTKphe/vmueOaCmmjXh3r03pgBxTjr3W7Id1JWDF9NJkhCykkGULbXg0e26oWu2fmsHFESU3Hsk+Z+ToXANuc4eUSKTntxwT7mCHsCnErqXac0j1V/sHH3RFkhK6aJ7NBC6GRsxQgj7N/Ypx6nytEN2O5b2yHNV/pq26/INYHaeNZx5qGqOgmDSbA8pkx7pKrVTwjuJ3nkf5NETHpW8aQ5BAjZ532lt+G9SIIsV/gVa6TaK+25U9kuA7aW2qBQRIfFkudne18Qi9JT6G0SRy1lDg8dWUt52u7OrpgBA6Zj6wWP6Fk1KwP9dvO1b9258rRjTpLrDWuRiln1a12CCtboJC2MVK7ZBsy/rnX7djjEfvmW5oLhwSm5TpZ/RAM1XZXjShimME0VcisGrbtScsAyW2HKWF5UYVVPIyXib5xzYz5jlobs7yFqrLJ2CvQBe+Cc8jmYH736jkH1xQr2TLLESGwob/OAg2m0H5AKgxmOnwswBfxPvgvtiRVY8OJo6E+q7M1mL7VnVrujWCnVBWlKw9LY4p9fdxrXshCVp7ITSaMxooBJi+Wv5xSupnQPolmL+AMxFHspsyYspdNvOJ8uTKML52MhrZenLiXB7ayCjyx8/pcrBQkS8VZfmKZA7jL4OoQUiogrxjBu3M0ZQEqH09cjLaZmmhqhlSYDQeMkjkik2aGQnPNSuu1h4FITiHIFn9PWgazLvBZ0lsVZh9h38+UrO8TMBz2OUGCmz/GG+eW4WEgUMV8fo8BX/x5WySEiSqgp2HCmdmymq5BleP9TdRfLg5raP7SWV+RAk7Re0Jii1aaCmfGV3arIlHMpuCXl+z2EOoAC5Ov8x1wEC4zfjR4+cbak3q/U9X9bac78kytTyK7xTS5pc6ltOMDq1FEyzQ+w/HiNta2RDFzbqcF6EBDdmmJzivGVQ9pWWU1IKZ9N4zd8TaRzakzW2S8t/exTwlHrPfZSqkStjCQMx6RPsXDvOXPi/CSUlY9Srcq3zh3uMYKNX9PAdCH9au6RlFaiowSfb4Won5CYlt7I7vGJtahAxY3JVjiHPkq23ROJ9REDkIzfGcA3Rb5lEUt/jElt0A4mnPl9vhF/1kzS2QP/FaHBzgwrrmSEjcjosPBkZQQXF57GNU0oWhZ70AkJbZNNgG5RVRjWFCH0HZE8wRoR6MjmigLF7wdO1SJfzDiG4LYlBRDx0c/l8elf5WApO5DHbVptNYap6+T0WdzdZVYWEkT9IsJSafAOswh6rU+nXKMpy8cZXL8aBGJ+Hn+r+yZQc2ni7CnEdNquMGMpw6dMH2pCLsHCcxkNeJY2MzkmBkcOxQi0iSsgVkPp5DZZ8LhADygaHqYP6ND1b0duFy2dF5tLzOZZkoqtxfq3dU9vndhQrWyRbsaFQM4mog3M58W3qv+g36ArTTyDZiwMFcSUFbiW5SC+9eejln4rvKWazov0L+GKAI1vZnS/HdmF1Eqfr26hqK71vWMY0y1AC+nLMbtxZUPwTfawS53EOcP7xIymRAw31BJXz58mE4NBgOODGvH684qWjSsbMsiX8T1wgrH4PORW3ibFpPlGMco0WzClPRDQ37Kjb/Cpb/5ty2XO3F0cOxHYchpmUqmilhdEaGXAAD641VHONthazoLdF1TsYOJpu//zX2UoeSVV2QECi6wk26Ba0rYLgRakgSyyFBxmTrtETCjEFOhQl6EMqYfVWMcjTdV/ikrLp0yVbVNm2t4Jcos4xKHYUHdJRvGcIFQvUMJTdHeCLUuVavuKKurB4XUNaTLN2Zk9cdyNeUzfZRKfHELlYRUOGILf6stxuWb3zSxvAmyuaW/U5Ey03OQyx+SiZoCE1tuL4Fcu702kDylfr1IH/RHGz4l1hth4daoXCbj9+34RSUwIP5PX4qovlNOa2fQ6Qt+7UY53EDrCwgNEjRT8TtApI8iLyqruGxBl3Wl6jc3lTc0moRn6bKGrAgsiHHHtz5fAQ16vl+P1jrzhshSvUBIpRotie3LEDt4mCv7Fnc0In2889jox2MbF75UALAgtGWhUsYxAVYjExxVtp9nyQTDfp6iQqRDl04u+PGK6vyS1ogfpnvfVVau/BFJjpr6ajhC02jLCu1B9dNBpYVhXN678424HBtoqgVKsPPmM88ejFLw5HFdFEJKJytMKQwt9qF1WM5nKJUGtZF7RDxm4HvEQY+pQjGH1hffcQE16KSG03KUXi87nneLJ4hphraabJ0L6NH7CxgCzPtb8yHwMeSWLLplnYT3B6yg/+rXnn3Oh7jv/cu0B7P4ukDbVdhXEzzuHwburcMtMSRxSxU47TBpo49JdUojvDKCgJicE+PPXZ8yzrSBJjdJpur8/JmR0PHIBwqjO1DS3EFI0NUeUsysgG30frIAZ+OAi6NqxM3C2jv+JsR/qWFfgxTNtX1QUJtcw9Rza8Lv+ApMZlJnHNtx3rKBzW5vSxehD/h4ECjosD0t/8aweI94jXXf8qjTPhHL6OyHh4K8rJBI2laS1FbmlBi6rvDVZOxOjE1hBKrSvv4R55zAq5tkfWLajO4CKeKrZ+h6ZV4U762mN7Fjl0NOOkRXQnxP/GbGK1Z6L9RvcFAlsSAZrz23wgIdLuOH/3eHMnte3bUgdd76kXqzEc0DE4FinkJZ8G5J6DovnXMmVGaeB93umsct4oTTxs1eJONQ0v4XFP8rVA2WY6QmOTvEuJFFmGmBhjIU+22M2wvwpqahkILnnkRmKmSMbMJZZ/XSHY4DI5usMI88/wjA49kX2kPHd8C3NsiPIjbfPkpI2Z3yC3qsjQTseCeZKudicVUv+DaM+02OKj1KTjYfH45eXrI+6/IUavtireyMJ1OLIZHnoxF4caCe4YHp7XrLHXWj9+i72imElKArJe7tdVPrL3fRoldVCPKk0k8XtXlVVHpJIq9Cc7pb2PUET1+8RpdQBcqHbhGoLFmtxEs3FfFJSRgr611+4xjOHRjqa+6UfdI+6Hl3Q8to7bawMv6CqE+CcjQDVdY4Mg+jsDBiC1PlD1X5LUPOyGDuLXX9e4SO3/yNur5T2sYujsHosEd5x54LK/PdHE+L0iM0pDL5uhvkc6qnvCHd2Y/AFvAkKOMQ2q8tUImh3DkXp1SYHtep61EV55PYIdDLWCSV3VQCb7zdiAsZ/Jjxxw2GyCmOYCw+ajkycKQdq7kM1xvbRJKWEMntTsVoEg2Uy9H46M6+zD7qtd0iitVWTUeAyblHAnREqNhUie9CvmND+2KTCaa74iDhGY4DSEKLUZLBDMzDiT3SznN0XujiTjRH6Sx8Uay7TINZKGM435cMp8n6Xjq7fHWaNKLuEfG/Clqai08b74GlkHwfe1rQb/H1mlydODicq8R90a+YOTJzJbrI34LDCHIZEiEi96EyGfEge8rcAaAYk0JZ8vKse5lrYqUQ4WdV2MqjQkpuzbYMm/u+dd6RIw8rvtwdcTxXrb1vfUBESSI2LHEq5S6HCIGV55ecuQ1NWvWjKNJ5y6BbviBaz6psRHc3CEstHVWjEYxQcfG7pqTAOAFqOW3OFHeFe18pT8sLozijSboSvA4Aa3DnIDYgDYdrRZXLwuiRyJlqPh/Ktw7XDDJ9psFzM0nZuXhww+7k991zbd8qn+n10tC+EL1F8XM4LZy2PkycUvITKwSRDuURss5GJzzDDMlgGMsLKoAD+bBFVpmi557pKoF7jsEQOofd1DYn7wP3LwVAhaRU5kxUqWeICoWooe9eqf8NnWC7XGL8rXDGRn3CRXHcIwlLw6627jqiPwGXXXOFa223beXp9EglOW1/5NPAaFitP18rDUamYZrbTPmOFCNY5GG8VjTK33OYyndFbq/MZX8eq7Rf/CnP1LrXnp/nAv0Wfu3Q+2Vc2mRwb+MWWKjQ9ZcZKkd/OIEcWbPM5ELVqCtmeSnmml8qfhvdPNkwffHZlIMPvSMWSUsySRIw4UVzD39C7XAB32ddwQXCe6c9og6I08DozfLxn35MQhNrCGywqIlMQf1slQ6T9pqxxMOJ3Zm3+pmAjZSLGchdjxdk8/KPhOqDvzAcIEDc4QX7M0RkqThpXvHQ1Qa8wvk8ZOiTXg2LvaME8DtSGtqi+JLZwqreV/BGLs++qLk8mIXFaogeNHqGBMG4cbZ9lUB/4ia1gbwG1gaSHuTtEh0N5UfuXA9oisyZy+zDmULa/PjMY+4yZjII5btnue2XFHNGVDcCiMSaQHIgYGRmzXV6/tX03Rjv+uJ/4aA+QAlqi80fLTHMZSK0Q7oF2wlhsItfxLCMMUWXCxXLNzKKQ9+yeZ1hBBt2/I6DC1jJLrJQpDqiNthNkxjGwkX/Yqz2BqAIb2NBSSuBiT9SxBHr44uLYcD+yEhHYYaM5yvMGNP1S2nLQ3knWqMFZiWtWQcAGoWV/Y6yQ/wewCSX0GU0qhWpr54kaxLaMfvhLCixynco56TmP/yMJoe91Ljm/141uVOJVgM/gUtUdpieGDIDPvOqS3yn3cg+fKqrUWwNNv5VMCa/tUeVlCSEid/VI7frCXGR7IsipEJdE1uc+eAHnN7KMYwpSmleL7W2DuGDrzXBL0yzRzqTz9DPk3LsAHpKdDUKLMBieGJKyhOeEJ39J+5EiVNrzi5HOI7266H8tBDc+Z5oxC1+dTNHm0K6hQSXaOuGYUZ4tgIp/57XGyVEWG+A2JYfFuSr2cgrCLG3qjv+r6dQ0ieSF24EiKN62++5LFMr0cZ3CKj3kyvLHG/6lQLND0z8UsZDKuegH43AhMDLc/AsjV9BYsSsqXW07JqqnBZ1GMIDbWCYx6wU2dMY1J4wNEzclRzhysfVTKKDRvNBiwBdpXhEJeItUFHx1IcbYsP5vYT0bBvp+9XkUi/sBePuH95gl1gIazIJGClxehaabSCYGx/SLxDfwxikjy82/h5Uj0uORvzlYOHgPEnHiWsqb2Ji0CjIwoiFbADVIQsRzWQTZSNGnZGaRod4JJ18YAS0axHky7TolzusftjWZk/lQMgm+tyqllG/QncHlC2V3NgFU4gY914JvAf/54oFFWTwykp60gmTEFGL4maOzx+iphdFIZahJmZMs7lqd5+PIzu3mbPyb5a/rd/IMVDprjKv6h6JfH6KHZ5H+Ltu4g635Y4uR4+oeupto2iMN4F9awouqivbUVXmel6wxNq87vJ7Rumwn0eBjZCMskfpWSvUg1Du3N0i3PReI4tyBQyp8jhUV/gX6HA2BlwpOm6YMJyajzxFDfQk/vZmVihi25SvMu/pdDpBYSYcltgg4vHDmejtOzPaaeTbmNBsudHc+Z69jxJ0GGpZDUEQM0saCrHTgoDZFkpb7dwYy79wKhxgR82nvZ1I7hkwiDbDMroaGU76jniEtk3hr5+z5wL/7p86/wdIGBS8H3O7H+5btiZihFRLphm0mQs87rqhtOWa3Wc7QiAHtJ43yOCDeNDFF62AiPOMidQuEn4s/+eY9id/JwdNCvYlhXvEReNv0CrS3MGVl4vhY6YyknGzIfScVS1F5t01H2U8qt2KivwRUEwT/SPn7xzMIbUnwmWPhnOpAgr0IS8fNkniOKEJC6Vnq4oOXdauVFFz1HQpe5Op1ZabHKsJS3CzraUdA+hK3HN/RM2uLb2iJP0w5YhGuMhNgB000ezsEhY5WNGSN0Z8D0cFXw8p2DjcFVlWcvVVJwhq5uorUJZhQYqKadAGenr+KTMn2Hsf4ctqIFPBkl7KLPNeTdx8497TJU3Y716s75Y3qaxRMBtDQSGw1m4YGwArjdCcUjY632rS0YLwP3/ijLWyWT38TIRYDf6BEGnlbkqvV+Mb8LpWoeKLChY/6e8tgF5f+3aBNJiodGgfLuYloBO5l32AgB679WJ3i3rEbutDUKvcMgHEfsTPe4PkjVjTclHmrXMt0eK42ASf898dYstVc194Ef7lFuOyXWH5cV5kaBaw1xEgLXyMySmE1iu2ZwElhapfdccHp+6g0jp07kvxHn91f1GSlgM6G9hvkYiJ7c/pcYbLXlbU9mkRo5CFtnsoJXJhAMjqptm7GlmutFAeg87qqxAKzJep/3nZFMBgOwlVfSdd7uH8mSopSNy2vstRiB1D/lgfkh/PK8f4823Ry+9aHg65GxUTlFjh0UfWhO1NNgRPeTRpKVr264QYVXhWrkrEBC7oJTW2jbNg7nfx5EBSOgfWoHTHPxGfxpPiWZNx8+nby7pD+3cU6Q4zFL+HiH6luCIa7aae241Wf9kRjKC3nMFo0W23yaJPgKd1YlV4CpYazH9lMUpJR1mS3fwvbMCV2hMAh1FTBEqdcDLOG+BN5z+GLYVkNMMNewAA7FZtdotvv8QYCTNZR7RHTzRpNtfm3QkryaI+K8YCxKycjyVqPXp1UIfKjxK/oy/c0a9v6gA+9ouJaTLESosZpgvtcx9G0foSqnNPl2xL1RU2p0+Wjmx6IuhtEvduwvvRFNeHWB6MoQ1jtfKd1IEb6OemWrkgsicO6wW2dMAjVtaq/6+goqgc1FPJRvQgSwbJFmJvsGAR5Ib7FPdOZmjAim6kVRb2CY0c+mNceX6O4Mgf8a+QGREPxpDuW4fB2wjDr8FVNYGKXy1UMNVLLSveJcT9I59VhxjXDhTCQp/IjEt9Q4/HxGAPOmgEydsLxbruhrDFVIEEOWyZTJx6hNOWwrqP1dUjSHAml05WXhjiF9TxcG5k2FTCFo1KYzxJOyVZNQXwHsnotiZYaM0GDUtYAFAJT7UVttGRVYjgg3/Xntkg6uj6Y7rFVhFsmDrMwmjME4D5C5eAyROxmn69Rnm86HKtihev5Ga4DRiop78npvOZIWBFlD9iszwGoitNa7sChPj85sDyIGAHypiUNRlZS0/PxX7CxmIZgKKL4AGCXBIdmQzCbn8l5FvhiNPADiNEpd7hquYewa0vQqOhmtzzpoZ0eSaivq6bsCNDB8P+lbKcapURsGS4/P8qKWvXQwjwZ0AmFqWg5os/dyKLzkvOFEDGUXPtf9lPT6/nXeA+pSv4gYbAVe9FHGUpD4qt6JGFA/CXWbEuTDGMn0k+3xoy80MGdEj58s13KacHgIw2PGzAMjJObhpJjMHRFz2qDeA5axOBniLqCxmGSR2EVrAE7RNiOBtfMPFzCM32GaPwokFRM0Py2hKtk6c+qh9vuHWTfFLyZrDkQHdiNrHiigZ2V49i6YxUFrzWZUkypZZjldzA9ODigNfn/DaKUMqksaypnUCincNlx4UnX+WlbOX2BAuIuGjQ/45mBD1oS2Q7yxfVOpE5y813c7xYxkX3R3sjq6KhD7X0LoW1qgylTlwV3SnVsBrxYgGmTrdbyKR/vpYi6wzIdcTge86nORHSlse1Ql2GmFRMlFuvkxTp/xBOBTE+9/Q2MiiEbHhNhONhqqJyCUTAYWzX/xA6bE2C6QzDg7wTdJjWp5FNUsNG2VFHm/7Un6uOeYeeep6SLALvJVxwp3+wn0ZuyIQxE0BEJJHZLYRwRZzEAplRRumu+cnQTDZ2Kx2ebyvuxjCtPrMt2agQnmPu4CwHd7pq+ca3EGLTyFjxQAm/B2+3/UPircpOhizNCDEMoisx/2mzFLLJ5BRN9TsLhyKADFdYcwkQhnUY8r6xwqzXJQ7i9PhR32M7v1NhZSFGkRmXWVI8AchfJhWi1PlBXJ2Gdz2C+bccW+DOl5/2JnJEb2wHCdRUGKBu4aJU9sXaDv03sGm6ZAew00sVn4hXhVnS5OWDQeSfneAQvp3QDTgoBzIflSxKOpDfuT/UW3+JX8nGa7myHh38D2lTBvfEJXRFmE10vehfvlq271mFMz3iwLbFX3cELp4r9plqEw5lKs2sjqisjpQKcxnJzCTgLjtI+boZrAjmtOB6FAviWyC5KPaMNvtMT47rjjOWwJSolriFwt38NpynPyEwu057vLHvVuUaMecUN1fNWnCaKcWCUVHMsCdoso1vD7gg4KWue5LUMhGRxQ2wvOG4ZIIUk10os6RhxUQzOgAqOMfIZuVAecQDBUp8l7R+EfBJ5eUlBrOpN9nRRS0iYeLOAMu7L2zk+GnsTDiGllnBvaWFBl4+YWcYC/QwsHSexkZTbsbJ4uF4cM5357k4C92zw4km8IgiLcMa+2/vxUsYBvDbIeY4z0rJhRx6ue5zPqnYtTl6Eu2zKulWzOB7ht5oadmZYGN6PD7VMa08Ymj5f/Gzd/1p6hH28Z0ZR5Fcg6Fg04htVaYbZa7C41QL20tqZxCbu9/SQYfBY8gx+QfO5mSDv9lBptCRXGQnw6oKmu26TPOdW3a6sgkm77aoN+nVYmgR4D19FOdsPLZ4e9a2j30vJNinoVklw6YgAj5TwTZYSUV9rLVdHV2chDucSFY6g8Vop4hZDN1/yA2NU9wzgQkCjfohlV02cJE3NfLXrU9MxksonCGu5uFKYvX1n+Q0NU8wpf/j85prO6oOuev7bAaoEhzZNvpa/E44LmOCkERkjjZSBRkOMqoPjY1AqAL2Ed+YUeaMV9YppuukC8m065fF+bMq86zwwm9VOwoUbn80nDPGKceJysSltfTGOt3M5KSyO37Vsn5Z3fpJ7FlcbduScjNanip7YQN91EyxaehlsZFlOalVJH+AZiwhdodZsvrvW265vZGtJSA8ZDV8oElFTfrwzRs4+FrG/IMtfUhXyniuJbaNX23TRlnA8inR/unM+q3XGOoshG4j41gVyVveIpt3Vl0y4nzOBCTh+itc3A9bESGtLhKy2hs6DLl6RNTEFeXACFvJk+uSL2DWZmC4JCZMISCARjRc6luREQcG7WYd9N6FzAL3AGYSZVXe9SH7O63db1GhML8xt7FwJIo4whVk1E/HxFVT7MNhZW0mV2CKfhQgvRwuPYGz5DvZOFALH6YcZS1Lj7i41N1VGVtpUG6D//V24uy3Z3zR+n69GZxo48rNa8zJjeNn+7FjVwLyLJ0j8gbziF1TRdQ2WlLVKTZS7K1DBszbBmcfxVXiBbamPei/RNeUaTWx555a4reUHfTet6VBYQT8qiPX89WMDBKvV2gNDqpke7hLLLhoOLR2w7YCzp8+/jeVH1TRZ4j48b/bChTYkd3jOuUgot61E7om1yUvlJ8EvORZcI+JS+XYlNU/JNjbA3uEwGufBgXyOtGrClLoUqmgHFY6HYD6t5bgLbPznoQl7a3eAEvwbl6kljLY+OxAK1kyRdvaUTSYJhS1pwrRAqwqKCSXxbjG9pMvry5YGaI0Ukd96wUE9RS39PThMCgno8FGge5XAYtn+TYqIgKhKJRLGpeeDk+8Nc+VPpjVroQ6jdD2E3adkng8SwvpN1y1kPHXbb0UEgyilp8vd61HFu5UNy5imcBLZX/ljVKKIf48ZLwxL5utTSdluy4VcK70dlohyL6fQN9sS3mmtjY37lmyPD3U03HoaipczkxpM+jJf8nuLgtotGvWtj1KKylPuT/2JkGcuzp38R7viI0vqVCIooMXM03HmtM8kHaE7VslxVi7uPCDW/9XEaw1lM8CrCqNqVfKI71MmmFFYp4OcNyvv1qQEQTPfY0LkcMt6+74MBwj4ymvtzS/2dkERmD0A2ubXNDD002nvSPEqpJNdBW7pcu8rFyNA3q4e0+c/5F0Pn3ir9g5zaJYbUn1wbVdA3xcmdZemCGmmNGiUBFMBEOaGsepovKJIDjQYHTRvjJzQu0xb3FFEHkqYfQWtZGMIV932mGu0cOdfPmNGqGaiSAphGnYasVxTqiQsb8BWsBPwYyKcaE3PQLH3jTk6sTP2fVBWRPopEM3v9vgvkgS1loKWIRViVtijRVbY4JYLl1lyHZC3SslLL1MYgEjsJ+KdTIBc/GImmKQFsX09oUkaZikhZRoJqIKGjK/8H7O/rGA9tRuH+/9AyWtXu3e41uBKofeTEFp3JYUb20IMbVCb37eWAEgxc1ErxeUOk5695kkcLszQotKEAozlWpVdO4EXPKAc8anTkhDvprjecMaVzCST5/rmC+qqt+5/+YibQaTzBVb16jU+cgHzustcoy9WGNfy2cB5f6PXMe3mwJBothi3qM0OaH84QUq0Ag/kGvPI1zamiB2aQq0Wbbr03Jh19/nfpGA7qi0vWtd/xB5HFwmG59FueWjy0pKdPkY0im2u3pvNxB8KhsxyGOnY/KABOtopI9YBov/lxI5DinvLZI/7yuwQoxVprb3OY3IAM3pha5y7+IJnbHJxBJhHgdKJ4NALa5uVaQIZqLrM8cGQXNtPG7xRU4HuzkkpDzCGfg3QGvifLlNsnEr/DPCBUGVQdWBlZOz77CLUp4QGdoC9mz0hYOUHxzUWOQznSKAvDGaehEn7yHdV07XrWexTJrTUp8+Iawr0MmhCCX+O8a6SEtuyJHVLum9jBka7DnO8XG7K4+iWANeKMUY2ZdZ6LnG0rGF/wqY8Mi57jVm6WdDv1susdMftq7s3B31l6lu6MQtWQUnJLASUcjbDCMLItLUq8OYjHBbfQPfNS0s3I3ds0cg9eBWevwg7mBbAUI58sVv9FppFwvLxmm1I7UP1BFLwv7pPRjy0ngahNSzq0huJkezK6kdNgioe3g6h62t3OjIM9tJCkjKGLwAfojn6xp21D0oeVUHBiYQqwzL4CDTNa9BxtwF/5xnX29xWuZkbwZugcxsN4XCO/dPcHgwhlZdobVj9azrD0shdBN0vR9qHSmp9kth0tggruqhQwsX/5cWWuoX+SuA5mc3S4wQGSeBhTDPtEGELYVwW7vDM14VsL9Ga8bG6bxGbP07FDi1nWb6uSLMtskPm0SJWiQzYhpDEDDzysUxoZ9QJ1JMKCk+7ck1jWYTfGJTjoxRVCRgV68aDmcIZKUa/w+JaJu249fhbNOcfQ4hcoujlfciBAYCqLGWJ3Rnkiqy+rbnLLgPM6vhw3AUdTaUNVPCVsiLLE6wFhBDfgVG+zk/XsV/dy5y+ysOdghEWLIF5gunRFmJV3TDICJUJ5RzE+aIK570I0T0gA1zczfslTWwE61/dtqHAl3WMgs+B8rKRknmnebecYw2zaT+GnCK9xxdRfexfJL4sbgfNG4+Ix7AOyZp8sB2AFMXwrFXP+kP5YPsGSxfpuPKnGvcYUUJOgLMS4Nl1++0BYWY0lSmdGAj5I40ZiJj+ex4WGq2H/pCTNYjvYhLx9wTzSvB+ivZU5zAv0wCVLwvi1lWaz1F8W+FzeHv/Twg64hv8n4yB+tu2+okE+QrP13mPBccmkR5+m9MbiuXS7A+gx1w9uEa37PShjOCitvWRG1FiJ5R8U3VYuo0xgOoIaR1kqNbbV8WPGnJvQS0qjwnX1JwOSfXcjB9FHVko9l26NOwe8pqdUFTVK17PjFf4vAR43QQe0Zz7yw/K7BTJJ+6upq4KHloCXU55Tbp+5UYVU/rA0p1IGE06Hro3MYV4z1KZqYALqkyCyYjDGJd/uO1EP9TWt2neKRDBo47V3Olu0JRB/QPT/JFAcH8nVsc+kbMywL35uP8XHK9sau4UARwBHa5yLs3842LXBCN4cd4y/sgQPz8nyrHf1EvUY3Z/+OvI3KTmEkNIoJsxrcxghrZagGLv00uVPjeeoJQLb0L5SvbXoHuXasvpVbJFv4cDrNK6X95Sny2vaWCany+uQaTYYw0tslhF7k5WQrG1CJcdd2WX/ICnNfTXSvNJ9pg1NYI+Y3JHE867HIBRtLtbIixJDfrXz3GeNk9dP2ZtlS1xdhaNNxcWu9xEw46Sp2mOau97lQVxS4u8gQ4t1SxGXCy4eh3nTfWzShPAgr20tIMsH4BgRI6d9ZWpH2a20Krxat6821w4FX9OU11HNhwgLyh7NAK/gTF8tFQZFKwL1eazGLIpPohIjHMiGY0VurW6tiZiJnG/XRbYPlbh7mxa48GLaEvAIdqQgIGBdF9FUhnk7Uub1W1uXENCXP0ftj7Ep98hRe1xG6l2eqUzwwaHZPr+yGZtPWRPY4pDcMK3j4ydQfQdIORSuOGzU2AYriBR/nJfEq3c/z5LMrX1sqYwyhrSEXNIM1dfRYF4zAyx+w5hi+LmSWC7se9OWTKUEduXG7+uNl/ivBjzIQuCAuCGRCAOqjzBOcs7X2725UzytZBU4oKeCzyfhXaEZ5IGcRerECpubMrUXqW5eNl+ywS/wAlj5RTBAjSMOqvBqcduy+mauYDPEzK3QM5bTqNetGf5Zhbq7BfO7MWR/E2RptwYbdW9vpYWzlz3Lzak7wHgvFp7ToqfPmHtrg6/2MeWmZ+I12s3vyE2qx2pGhznoNqNZU76qzqnx35pYsRnQT3Onm6kiqJa6yi7TnXBVXYx9C3JuvS2JCNp+i8gYIkQMV1ICkITKKisyLIrrioE/wkJjH968oP84cQ78Zkp3101+DICzxe/pESMGFU6AbpOa4P0lr8eN7VYHblERdtAE0Dsax/sem1+dWjsKlaX1KDQ6LyV+3x96fqMdzn/QQo6FBEHW3SjbMuKfrXqLQRSvLwbbtWrpl83mgczynQKmCD/AwdSmarNpgmbxAYf3ETDaywcpax+llcVgFB+nzcdNKy5lgBi/bslqP0vAaYLzi1HEEiCKt0ujrlYheVRRLauQnyFJETMMavvYuTVOL0rt6QlpEpYQ0W2MW/5XoBgRCFc4f1hXBO3ZWFRZLgkGAH7aMIRZnlXwx5GA90lPELhjPNe8j9mozuI4xX921K9q9yRuQ4Ky4bmIeDLPlfSphXP+qp4jB4OMmPXBzLwIRdyJ+3kk82QS3xlKkEswGocR0t7Aqx0x2L+T14On7l+ME+ez7bi6zhY5ksRcALEFVuOCkTBgJJZeqguMzZVDXkrntAOsQnbGckSiu1btNWo9imHES28VM3wkJwYR8iWXPzuhKufHbokEl9Z5l9W5JHkklg/xfeRIOqihYqNZ33SjLfGi5YT3U7Mw3n7ZoAT14yHzwsbksg2xv4/EPuM1cFVemPZtUCgIwRkKuPvsINMosAnSzDdA2PkBZV3g3Ofa7EZNjFAKjy2TaVt1UQaPjiIhh+7c0WBIBHD0So7XYs2Vx13jB7CPj1qjtt4YAfk/ejl3HDgBZTdUSxEvf+j3BKk7swfQYcHgCE0ApBhqSx06OTSRGjIBPw8VDAXV7MfxGwrv8hjbHkS9tkXpQlx20ryJS2/ZN4kZCpAvOc/nNn8VffPMsoeApqTtS9LnWB5vQ5dyYECy2gtVUocjxFu1d4vMjolP4mM9js1ekZ8v/OGAcyOO5PtoJvCPAZYOf8F7sAnTSu5sZmeK/CWr+pfh6fz7EHrw48RbDGEVPVYN6CGIh+CS0Q4rlih1hDULVNxNEsm4HpsY2U5YPQ86mpGZvNBwZH0iWoeZssmfNNtS7WS9VZBDAcP09ACT5gFAnzbWzvaPO6HInk5eFi/mJjeR3StMSYQ/Ec/RKEm6wn8X/aQ+hZmf3OulTb8Gt4RAbTpD9Sf61+7pI7PQmj17kYBvU38B8OG4jD/NtrDnChLIT3+XVTZ9S4r6WYujMkCUzlYr9PiF5Sv/3Q0bZWnvmOUHiC7fT0gnEg2J9DLSzFVIQECoXWTsFB9F39j5bvkh+DNht/nChL/zg6rJcYuUXdxHa6j6jXPXvkNPm5YPpxYiQ9ZTcv2EwU7dBAJkolynOgQi+rkOlQKWDnCdxiuzqCBS4gzmHOPNK3fHhKYOe7GevzbqHmYii/xw62+MQCA+VSBQDiJ1AuHQj2SV1eCN5cZYRY6aWTOODCmZ80GuuS+nkFgZpzXEhUCr5Or7azchsZgyxLX+F685ezde+OJRiOn8nCN0ZbJPUHQgGEtHYVkS3jPVwPwNZMCDXiB3RnTBOpLF0y3waDKkz4z5ptBZP0b7WX/mFNgxop51HaTI9eGBthFj8xoZoT2U+z7VzTSRsC/jKblt/1bBakUwradRtmJ9K3HvDuAjST8npujdTJig14pbB+IQkBVah5lsqB3melgxM34mt816PlmIczHAuETPvbwUeWyz8wBnfwG2YK+IF/c+1ZUF1pkiIqxNS9z7SQCFDQgJdrz69o2kcEob6TqhpBoTILA5qz8FYPlDNN+yEz5FhP5Tpx29n18I3MJj0Lx/idWSdxGEUcw3cFAhJtmpiRTymUs5g5A1C4SKJC4G/qpJe3+7M4wMUiLt7Ud0Ncf/HpPxFA+3YmKQ+P8K22q7RdGYGuSomXpHh3Khe2btEpT6cVBMJrA2ZhoPEvSC838ewOkcUPnfLNwoM3vFd4hJtkubDNYJG7+iuq31CGDM+fpV9k/APCHdBS3unt+OgFl0z7qw3flT+yJaDT3LrSSf5DKiO0AWozKNSSyUs3l4RjEv+vc82lHiNH3xzoQGS3QI5X4SRushG276GAxK76lAXDHPJ9r7s8xKcP14dFNoM5vq+IxW/08qw9+T5JfmVCtm/KWP88JiI89xVLk+hdY1d9ZZ1TBSUJA27qcsdwjGfvdApalInKZ8xF1h7o2VenPLyhiWn7yQ7t9GZTAlavPM4nsCZlVGliUkdHv55m0cl6CxvY6aBPegbDG+DFVjCzXaIzx1FJ5RZ2XxXDK3glfDDtQqVH+1P0ypXeMIH34HxqqZMM1LHUDctcMh8FOJZdYN+FDbhXWJzSz896zSXSe2I+LbIt5ZNiGZjYPPP5dSKE+h13Arxal5AhNoTnsPSQHVtUgjoDbfEtBDOUMZD0vaE2GqGF35LzH6Cd4KM2hgvXuA1WehCKPzmEFZvfGPSmR7bnjeUsJtl1JcIdGjW+2jk18o3kB2Ju4I6j6IikyDtLQiDUZvECbPdM2CySKaPYdMAHEAjyXyMjHZ06ZqlKSGaJXboo+iUDpvz/1bvTC37S2dHivzXFXplOYowcTS5dlOqi507n9Ms1WS6MH3uKs+O4nqNjBajiPy1qxr+4PmgZQUTDFXVp6/YP8yzAsQoRzlSM9/efXFglQA/S2cJtalz9XTdf7dvspKD/cIXsaCRSK29cwrZ9sj+RdqCnWvKpHgzW8EUwqL4rt8GxgWyXXcdU1YR07PyJiCLVMV7bYRgQN6tFqN+fLtcW/iDDhJ8c1hRFzlMUWgyu5WNOVRKxDKQJGrkAcJZsITOGRC4Zr/JOyNcq7CBicQXCzBzKFJjGjtO+tTesm78GJ2OdHMe1Dojx5oRceWkR0JZDKYeY2rbbuqmcQLLz/z5PdhS2U81izbuAtzBXl9YqypcfZUTlasTDD2bNlUuySqZlh5RTyBX0PuK4fuQbZIDwppKURHgyN7pWe72gDhhcZYTD2X9RqcDZli5jamjB+nNNmBzZtC97JezyLtOavH1rqoqj/1dSVb14VjaZ1EunaEHl0+Rg1TAzMwdNYGY7u8M46Xz3XJE//x2y3bXCzjlyCO07d1XQ40P1t6535zF/1tQX9wRyV9KCMBF0Nd81eWRr4oUE1Bfr64up24d0T+Do3IG/fDadr/hGcc+ZKnMtXUZO9YEob3vFLZdgVStDR9UPa3YqRdvJuyKAD68NNCJltnMFKksC9JATbGyvXk1P1Y+OsdjqAzHanfMt3QmEiAwt+Zozn8lpuocBpHtQJugZf1ttzFAvZ8JppEJIL+VFbyJtkP9ww0RBbGkBT+9Que4A0HtyZ+W1rmFdcQIQS+AGkVWZv8rUTOnbvKWO0xMLdeo3jj3DAJor5OcI5Hrj4Ny87ugPBlooDDQEfBg3I7gqu4VbTspd5f9rGvmSUl3NnCeK465QUdtKu/bvVWS7mK78h8N+biHW1F5XZbuRy4l7+mGrdqQSxhGkz87Lpej4GnZxETCYsV3nFTmWp/qQMmYansVpdofm76gHXuLOqhoVF9M29OKJoOG1C/LDOaHIYEcN7ZTl27A29V2Qxfkleevj3dM/GVncIn6XooKeR7EU4gEX61EDKdhWSrkOxg5DEGkwvh9341oAPtC09hlVjQ9loDwxBIQBu14KrcYP/ptT7+G+KYhn4L+AVkrK0fBdlOAjnzJfmvnZHw+HiEFXgQbD1y4cT6puqTYKztf84ADDlA7OCG+5v0rwtJ8taBMUXZJBLIIoslYL33gdsA0bkgjv8iVnjtqNHhWf0XBi52/0yw8F4Gxz/DwM9eTjssJlppiG7n0NyWEKxqkf0lLGhJLEN0F+MlkHDr4sOFBnjcAA2eSYkv5S9G327LpjIxb0F1yWhWejP90yszAK7WGmILOvJns97IdlvbwnoggWGpamgOhSCpMhhhwOnWaf9OnqqBVpXDctQ4Ug+tUtYIHBH2lh/Kn/bg+I5FaO+6Tvqt5jzOIU5TUi62X4e4xVQD5xB8ztCkcexklkSDdznJ1q7xEOlkiNmgfBFz/Pvo1TVHvJvaJ5FXvv952qP8GIE3mRJNTnhN+ZdOnirK8rMGsxuc1hjjOa1TOkUhvr6eM/OFrS4H25xkBd43lvYl5FX7lms4jGzWARkSKn/x80M9qlkadluNH1ywTj9AM0bmCCCL+Qqi6nkAKfO5bD4cWa6Kyv+0l44wa/4rpBTmsMVIipvy1+9OuG6Dplzcd7Gqf9ITeaOZeGxOLkLPGgasSuXr/1XT7upVGNCR4GgG1WeIBteO+RWdsuo08cvagiExyAtTvZqgBYpdew36jXsedXiPhMG8TxXlQSVyq4Vk07JbdNErYEZmr/J3fwA8qwXl7VXcciHRhhDt70GjsR5+Yrxbm4+1qjENmFWcaJCbN0KP2kgDVVWMiFo06uZchNN69dF0nVGzcXMvjVQ1K26YCDKSUVM4S7DbckqR++7n/TJtp0RrYUjvtx36fLnxpb5LV4c6kVtvxTE2Izj/L6cgNq3WRZDL0O24WRfbx8tk+s+7tsvmABmzyLuX0sntpSnDfskKZ6wQamqKCUaW8Bzw5U6HH7p7yWm+lWgJ0Z3Kvi8i3pHSd/tGU48HMAFv2vZvETsqZxofJBTkY4VFWmgh345EM/3ZBPTGZF4rjtxnREEz3NevhHDLqbX9EIlz7PwIJ7UdnHTgiUeXqei9lVkrQhEdO3GvcRyJLKiA8IqccqJ0E524RxNNm6xEJd/EriHvbCX+9CV/GkEjyojRBKZw4zkQj1GjkN13Y9gHRumDDhl2Ks+RvTDLrhwRNtoJcnhECnqLNxuqoGmMirdSARJcwVSESdNKoRHZpug1S3EWLyriclBWsTwTHnigj37sXSFBL44lznDsU8qVkJpzyqiFSGn3FzN3OpJc6F8Qm4FeH+q0oDyGeu7NQKZH6jzpF0Lr9iGZNPqSsgIHTfU+LB/quvEB0ogwky4kpWOqNuZOU859V7YE6IkaWyp5+kvy9M6PJM7GhzkP/nJiZGF7rAajPF6dh7KTTQBSa1/CybUP36nkl3/jIQPPgIXAyVq2UGQ/8robeDCdx3LxaHgtzojdJuoH+Nrif4pD+Fjo66sNILhwtIxrKCVgAeN5W/PX4EMbeXj75j1flaW683L3FrPqw7NmGZmEG3Rhd9kP0YX9FFIcXh1/KM+KZDFvXJ4eFN6TX8u1mF8h4cOJS/htVcFLhWfoJlp1lYHUHJRgTdhQTybQV8mjXKH/CEE88eNqCZ3q/6+c2PD5DN0Allq5wEaHY7Mxzr0bQTZ4iwoerc3seoGqBLsItz05R3vjmqOW9xg/Hz8rhuQLuNDo10GNS+tPUv+8Yv9i+deh+QL2B7wPusGOzfByC99x/fheLEYIJ3Ki9UNRMNtFahIkUy4OuoJ2wInJ0+82Jg91zjB01XjWhHNPKCo7mBZJK88ezBwxWHzIr2V8Uh24WjtDQNYM4WokJSSbrQgfD/e2pBRu5qh6nf2uysmtWJ0WB4fj54YO5nxuksHWCme8iZVPlNuowTtf+SBRW72+bq6u++M28MWOf+viCiaAuUDdEws8z8WYVXBcvGT6Bv9a6+T5gbqbWOdD9n39w0vgQehO6npUYpCquQVJXYFJuYdoZQzNIwYNo0C2Grm7jUlpcH5QeHzTJT2RMl3Xp67GxZzyLiJhgEuca0d83w8YCKyF1dwB/oThqWOGpmIn9LwUALBmcmzNkmRSuJJGj16kcLeGuhRCkFj4zDbwV2lodARSdUbGqiCfPiru6OE5dWvIC0ggj5Z7LHE/LbO13dvGhHJknfeOqn5tm1Esb5+tUQllAjGH25mubt7ugqTo5nPUhbSwyUnSlMz3w1Az88J2+Ynwb4usKy4iwgd95GV9VPHvtjn8PXYXfG+iVghr7LFp4mCCBBe3RoKDdEvgMF5LExl3h7v3FNmjEOCue6rFdpsorC+X85W20FRrdvnbggN3M2LcLFqg5DoJsF0oBgbNaZnlmo4Ajzhi+tVNaRWrOL9M1e4Ditdnz6qh5U7mLB7tcPNDsFcQ4ngwh/bqiWqTbjK0WPzWiGE1QWGlBA6SNWOjbiqbO7B0Os6WdpU2TGXgAYw2CHWp5l6F7GShbGmLU8p7IotfPI6GhO2yzJFK3l9Poh5hv66nxjjoLE6tbKF6qJWo+ExZDBTnoH9vnsHJzY93wAHc9QJd0UgWK9Wyhdtix4tOY4+8tLwCi2x0n7AJefa0ftTaV5fpMLIc7A9sdnhAx+/slY873jyLcq6LpABNYUcmxzMgBdaH1H3bqgM0mzPlum2C65xyLAqrSQcfAOTug2risgHM9XHdhc3kGDYpK9T4sYE1lHG4fHnw//J+HuFhU5fN1X32l/n8Hjy/ZXogrDprg4ZmpK6M4F42Fdhm67vgTwLv+VtO1n3wKdiR5al+b3hebcQtjFgZ2AH2eA8pQtnzq1FiCunWWqcSloZy+ZohVQKZtj7c7aOlc0ZcLuOJ18GIkLYNvfNDx4U4Wa8f53+6dlZ29xrSld3ESau5DeymCrHfd4ga7FQKp8arI0oum1aUNPj3y54OLiJCwaFNf9yZ2Bq0DNMV+ibhfbrDL1PVAtfGO9ZuDwg5koCBAKH9au0uYV7C9faR05tvJPZm2GcoT7AWRp1xpxdlth20luC32CfwZZ1ZhnnMND8zDhC/ehD1SmrWM3gjcUCezvJzYRj84+Z/BSZZwnKCJ1RrCl08Tqj70UVhf4Sb9DE6W0mvVsFilruNoTOxStR+fQT0D+JuDqJTRrg7eLI3Al4O5H5S/sf8ECuR+hOmFurJn3jbnF4zXl1Up9lp7xbfSbwdjeANj0hTZQ1CR1XsiB8KakQATVjyZhu5KE3z8MISzcKiF9KHYNS1W8lYQWMu8WvsXNPOIUsY9HbNcgpdyWJ205dyqhLcPGgI6KOhqDbl77sDozth7MiE5eqe3npGnRs7uAMpO19UuwimIpDQx1vjwxs7rfhNN1Iul3ZxbG9BnECl3HidjokUnNsMTNy5CgxVoc5+AiZWzdw8jL98ZchGQ6/WNabXQdj3kKK7ql6OvhBgQhqsle8YshJFQBQVN6ansgz5/GVW0hVwwBl7mOTQkoEnnTZXjHTKFNgEdxJc5kG4SUGGQdKYylqmkmFHM9u6ODocasYf2Ml3kmcPmoVvynQ6uca5J/qE69zy3wnamuVBEJY7+BxMFUqFBAfz5yFOyg4ZB3N3KD6H9z8DrZL1CmjRNbbehH7D/b8M1PcLdp47dv+j5QcRbxYZGpOUjbno08oLP9XgaWtw/Zw8WlKkhhM79KLHsezNxpmmFyvfOx5JzslEFThyUeCHpM7Q7yFAQpTVGyqmqeoDVu7EiITFDhYB3kByIInPy8tbeiLWy5ewnCY+E9hXiilysmCugrDKqqNizAIIKz/gNVgwUIlPDH6xaMgyj/pHTfD+8bQfUfSj4uoQAKSj67qtTAjD+ZWC+sO2ab6dzU3EQ6vtWBXrpNk5h1ptJcHCqc2WXO5d0J1uo5dp+X02GXbKyOMcJjV5JpT/EhxZfqKFHve2S5gHGArAvegVMxKkthNRbks8Gxzjf1dwCY5APk8QyP8bsLEeiRgFgAupr0NocpuxzKHOoKpWttH/oGvvv42ZA+3xbCyY6c9is7hYgy5iugjJLAMoytZs6R9UWlLiegARMDRuvvm85w0DaRPUD2ayPYbV8ARsDHSbERWb0VVXRWvWLflp8hYCKozID1AcOX/6UAjqvl+wPiVDarSe2t0Y6zJi2RIMALbWRqKumGElJcyar7roghfWdUxM0TQ51hCD1hnbFgRykE686cl1ZKgdYlj/U5zK/2xZsYHlg/DTRNFuSpCRddgl64WWoDc+8LCH6ODG+yC+JGowUSaVT102tE5Bufa3tbjuK44kjO2nXHLngqFD2T5P61f7fGr8mYQNpCIZUBH7QTQSFXtUWUx98S8mkZzaJVOtWqeekATafLFKO1VQv4pW5WGc33ClTNxc258ywgyBvunmtq/nvckWfz00le1V28NFb3MV5SBlgVrZcN2vw48Bzm06+uLO7Q97pG+yX8LO60P2T5PywxbgwPX/QmJx29VXrYxjEJ22eduKpvrC1eySZ18rQ9EfVgZqbPDcxxARdsDwpf+JKKC+WFtip5quUXdlFtLWl1x6aG6RA0IOPtzCnIsTcZ9BmO4qCGpLJx2RNcIdwpn2mmh0CCOUxuC0ofVVPV+KH0EcUfsmiqE23byKFmnTNdUl7pHZxQe6ob7kz5fUqE9R9iMYb1o8ehXlDugX5WZP9RQmvDTYpsXAyGooutCKKrBGYzOtB0BRP4xpjwM2aLndDu4k23SI7zS39P/JXjRRhuRnjMeFbfzyQlUZvWDMj6jXQ6AgZx7r3Xa6sbFfMrXckp01uBDanzB0enIhfjyFMMBsu8wZCqkwVGQyEJJnYfJHepT0QF1QIHa1UafBonY709U7PktErjDDO69gY6G69l5hjBSP7FWjgJEMvK1xbf6D+o/84/GFtnnk5fTBDVKN7ddLRqwwrrKyWJfVUET6Zdh4qFYAiqIhiwc1PNV+4awxQwW8GCXbZQ0RSdhA/dymSoOMP+9D5ncsGJVo7tYQv+VRtAFz00CWWGLe+mx6XAjmxn1NzyLU7vtSBNVehATFJz02Nv4xAzIDBLu7bnG6BI6N4gLAbQCEWjHywFi/QDY23TAT8i6dksl6ThvO5P+WDDYplMD4TZIkHzaKPafrlHPcxOEQBkDu4/yTpU2mmPso2e8aLjJqIlnXfxVRouhNQCYuzPYq02TXSbRJKMoC5wagDHamD8AGuc+slFu3bRcQo7b+Wdf83hzK4TG8SlY05vfgigdZK/Vq/PUyH3hBcIlJZWbG+QjDZTUc3CHLdxMJfKeZr8HFSZS8LwiP1wMr+j0ua1qs/8K+LVt4w6KA2MhjZan3vlAslH4NX4tAON/xpl+789UeBrdlxxVxWEl1abrBWvNX/3uHqkzmE7Ac/1lrcJwX/ZE4VJv+uBTWxPL2xwVVW6Yn5ZxHdHjZZUrqeFFU6o5q8G0PIADE8MzygtbP4z6GjMM1caxSTj/xW6dn+HK/zld6WeeXPTPH0hhTTQ6DRnP7/PzWZLZiGmu1/f59+kVIqEttqudU2yLfkjib7VQ514lbH/L6S4q8wZxYVyX2Uig7hPFcY7FbUnVCp3oq9d4ibbwIUUJz9Nb7wRKj329Y+8p03yigVcYaqbCyn/aTXv14jYLouYM2cpxPrpW3ifDib3bMGs42UrrN4+cHZlk3Eur56yBf25iGQeZMHjFjhkn/ykwtmCJxTHc0tO1UiZwemnI66/JSxzF3aWgtcCsHFTwVvGUKbjrQkR0FlgNP+RoVrV95FVwbUqKT2fSw+8hx7ZMbkCd8ImdglcRCCbCegmuv+6BAHEeZW1l8RZLhq2NDCGg+6/Po6WPRZWJo0KXeb47NZSnByT/PO68tRt1S46H2znlLXO2DT7mCjfoEOVhNbDaQTb3kgzTCkaf58HmSxAhrWM8j7Yj51DzFmd05RmjAlfWPnLlyAEqJI84s/xdw0v/WjhpDyd2hk7PLRaeNNT3Noa6+CxYI/wIVAwCE+N496Hkz6eOiOkei3ULyFLZ1+Q/sYlpGWLTLre/fErXQ0k1lhe1fkwioErIdtEluL/CyEsk+WmPHpZV9SwCUgy9cCbVScTUXcfNYNtMKZ9jxsR+YpiHjF0t1ZPNLnAOAtMgoVM0PPo/nUTpIzRh2K2lHRMMd+gYyaxri1BhP02942u6ycvWYLqtMVeYpMncD3wX3+cUPTuSxLn2HB2UTWP80ThhG9xFUnSRG2n9fwO8QcpsO1NiyHZZ6QLqNAQreo5w+7uAPzkKsTpCaIOKasEqPje9+agPbfcwWI7nzYUI0033/5R5HPL6YrYPKl5f4kbcl27Ld0NEVVRZ1Pe7C+eI1xWnggnL5YggG/9FcMc4iPMKeZNcnJoo2bC6CUXIPYzLBwg09DkYJbPeetM00V3USXmhbgcbW+GnV7i+Phw+lkMq24aIYvYTwyidNVcauFlQwAbyCOaedUZSen4BXSfYX0PVoXAD11aIvESaIjeOHv+Z2yQOiAYeRx4K9MCvZHrZBzAOfuemi97rzB2M4SI5ydPIASYNfTdeT+5PvKsLDK37eRjkoKbm0VfwYeEAt8Dl/7UluTafDCvqnRhZdbtTv7ihMojI5tZPEwMVFClLa0tWjvxbM8RW6lFnY1kaLLhCTMNyTGWxmOPqsoxt5VXk9AxzuxXNKUW5ZA7+rSYBwaA2ikKZlnjhyCDevK5R/EInT93G3tekzrhTN0/LbFvkkHLQhiZutW8rDjzFY/txikeztVmYSGT27Nqw+2YVYUFFIv81bxINxYvMfTjQiciO1QTOCiktZvZUgdMCst4eNjCtIN1hLTE9czeRvSaesnGj9lCiN8zMVw15q9Qgxn00pVOSxzkYMiD3s56+84rm1Qcy03hd/yHhbhc4VQ1VKNEdx3+lc+1vYDIXq9gkkk8v8V1iowH/mB2ShXwrFsFkUfSwTQkIqw5/xPtCasZoJB3r5O62kMObkZP5x9rsenkVXh2sGfJDOrfk3+KoH8AijJkHiKm38YF7fGSdciRS4fdwspuTctuoXfVLCgAnMlbv42rXp8cZWSZ6a3OrTmKiY0NvDZyHAJzHD5A+Jy8orUeAlBZt8gqiuuMAGUSXDilGVkJJS3HIOxjRxViJOSEFaAsKIjQqdbZrgEvlw1kETRn01bZxbwaqcGEwiEUtW9Y4FTnRJ+xITWxq68Ug5I4iay2TJuVqPRCadVfMrIegBm6EeYC8mVxbgKc8inqOjEFjGgNoRr2CIdIHoBMz/mpCovdWqsnTQ86S50oxC7ME3/+vTk+nAGPxodNUnWNIh6mtMuHhesZSyFuPqUR2qipVZFImdOQfT9/zbqNdsQ1OuddRl1O0XV3Idn6KU+OqcDCcnO7luCcLwQj0N/noim4hRH+cFIQITkWmD6pQiA439NlROAE6j6OxPVA+0ay9zz9i6Y1BuhrAa/Ph7oscDSJuFCmy+Pm1L3e42om0l+odWNiV2epvF7bB3Lzd4ZtOPT5eUd8FYa9SkGRKOCtZeYxyR4uI06lIWf46+gveBFB8PyLkziN/rFpO4ha/FZYUJz9bkODMbyU5MjdUShHZdS/YZIWz7JQRBYBXqguF4UBVvvz5IGvFHmBK8ZfIXHPZeToe30giV2Ah367p3qKweJ2Ca3s9kr0X2EQnb6fZK6kmUqUFnQo+cYwgCM2KF21mKNNF4dEeVEG4MCyyI7M9uENIDWRHBywfXeyf4KyL+JZU/4JaRVJqrjU/jWh8FRU9CfcfhAmxDTEBWuzTF3rxP4/QDUfGkQEzMeDKgkiJ9HsvVJc4imPH2Rej9gXRMbMK0QoE3iCkQ0Z2MU4qPRc+o2SwBzgHDV/55N3ao7ztrtSviIUaHmhkSBQSMd33sO5hfeWIrEpvOOa6GEAIo5mAMgZgZgDyGUxRZuHEg0LXqCl/1SiLEVxe01072HpqJDnEXWUgjCOQiBXUnn5mWHC/SBTGPb26mp7Dk9iCtHlGQDrTK3RA7nj/IQcjcHOe9kLy+Z5HPPtWhsjKeqyVA6Mjf3dvv02Ho5duvNRIduUcM9FriZdwHvBkAxobZkMSa5AwJmS0I1sZxLsNafnG99gxbGfomQOH3ZshcHr0areqflsQv5iqbBG6ZvhbObIQQPcXDMr0hvMSmlaq8Bp0TcSqBSBSNb4dyGBULdmYgYW9RY9m8mAekEdT3WdM0FU6KEJgvA+speqC4ljQAtWBv3e+R4uxouH1Krz+NurdN/j6YVqI+mvtkLU+whO3BxJfidj+X+dVNjvY2kFxHM4Z1W7EU24lhxWYrIchLiFryZWjCWDVqETtYm4ZZkC/ZPDZ+AhxkwMnueWBPJTWsjMO3gqsxAA2aKl8k5vevti5e0scwhAm64TM25Om2E0z28g3FWnsWPWesh+LiXQNKs8S/635iJKlzMf5JPenwQg6RpPCySIWVKLodS3wxuMW96W5Yj60fdW+FKpwFI8z9bBHQjMffp0MmucuO9RVHKxQtyx9ozfsd4/5coXBk2hG59zPja+sXKUlYO0JFKP940IQ/fJHx5IMZFqaqIyoDzSCBPQ0EQ15AN7FXfBi/PiOxj2kT1bE/Q/BsEmaxtOoh4mRWld0ZTfGYqc7PIf54Oun88m9mh8FhXKxrwF2Jsm7wKngX+YOrfhc8C4oNCBp6aUotu2gsrv9c0wBTC40iafIcMAuLDst2WgarWYegFHUZ+eiFNqJHVFAea7CucwgjP1TKh/kA0P/Gt5/KJrRwC9iy4KSXYevWNRKzZ9xqLyeU15Q6H3mWGXR3GH+PLSemS3OHTxgP1mH0nP8Ra2ikYuZ18wy+7+273jHsaGFzX6/FvgGtC00IEqpC4Fhp1lDRS62z9EgcI+QYvwL9ctEnSwrsIeR0P4aEb3+GRJGu0+AbKZp8mQIZQ5XpFK1tiDK15V0LIM/4sf6s9EvuuvZjLR8UkB7rO41VwmmmS6Tdx+cqj9MH8eR0YTknWtNLsEye4a4xkd18kVo4TOOdRuTdecwDtyPXJqrfeXwgqt63UCYMddtHI1P3EmQ0NLnXeIZUyN/3vvVGZuQHi4G2LnMaBEAmEPve042UfU1Kgk+40o9+vmjVy4sUqizlQJ/2o+xgahaI8TR36bJKytWiXHofI9DfQFSGmwQrG4/hsr0Oaln9BMo8JE+71viH9AJPKFZp2iqNuZ98aqOv5Dsv+J3PVLUDBJZuTuqLAmScvGc3Tl4rPEbK+3CP/yXOqvVhUUyW/YPXDOKPaqNIELpIst5WuP4scM1a4Nh8YxpwqcsVSRPF8AbNE7cP7VUbpdqughE4G2whsxuuxNcxVOFHT9RBmwXX425gn2CUBTiHR2yz9Lc6hQpCxH5Pjwb/bMe63HRFKt30caXYGWmyOecTpB3GyZ2Mo5JMWmoQk3CAPwH8RYSfiOB0BT602SjrHZzaa7goEFuATNN4WmUMSIwsLwOyRVjxqsk7bu0aUbsSsejbdodNVRr9bpTlvX7AUGc63+d+yRNm/7hW146zk5se7Q5E3EiZIhLdCf233Qe/J7aV74gi5lVBzAZPDncu4c7Tc7LZM3OgO2q1965gYwgqz4eGhE2lRfEG2tiAUZerwDLzJgXuA+gjaZhad0AUmz56B4Nc5GnFFqIIwZBCs6XIYJwT1/q7Fd78kcLXCLwj5O8Fldvek0r7mEuaHrlR4reIYuPF/5JiUMOzn6H/ZKeuX5rtNz5VgVL3L1FfW+N7PcSBJDNNCd+EFmIzruPebwcPZAs8FDtqQeF1bx6mS4E8kFdXN/kh5JjVKdi925ChFl9XmotH9/spXe2J00XMlw7MH77uctHera9xN/B+w+SKyYF/WOycZynXhz0SE1k6zJUAcKTjZSoYYKHR+5fglo2htx7nKZaL2SampUPlDcfuuRh15HgpRyzSeXUJqi/SJJK9R4qj4kefpZ4ha1MTQEnTiR+0O7VEZYRelu4mVOCX5SoNRu8iF4V2VG9geYFzmwWA2YlSOcrII5Cag34Q+pAA899VVnSdYewoaZefLfk64t1Xuweyj1n1da03WLeNNKDwYppUTpIiO1l0ola6payFROjV2qDDyxvtrWK9F7ZR/5M6NItj3spNYTooV6UIHZbabBWc5ZZ0OfeTdKknOi5trtVxpEVgXliYjFESG56gppneeUS5Np/VEraAnSVhusqb6hnY7mhSsMIBrRthRL6EXHBbHSJg8HCcA3Gzo1/EJYg34aWzC5Namn3FqWsS3eqezsT2rRzid1h4WbtQ9TcR0tmoqDxPv6EeKRfE5xFFJV2390HMIMwNC/Th+BZasA6qR3DaRgPL0Q8D+0wB9cNF58pvJ08gonulfLjzkkQD9DGIiebIljevckFGbxqhL0jqUoqxg4VCf9GEujC1Cvt1pqoA+xpVbsIEL/JkFHvaOmjittT0Au7mvAu7hPsPDzuZyyN0Pbservkz+5v+t1S64Bd8UJQejpAVbS7IGidNGIOua8oN0eO7+aQhAXNbnp2MHX2yKFioRcem9ELug6h9QIuK47EQ2p2y1ZeFXHuNJXo13fKPD3y63qiL3wO7bz+vRHSGiXOJdQCP3HXpmS8GPTO8Pcw78c28zQ9t/AVK2ci0DoXzlcU7RJ8AaA6iXbZmbTsgIfrngjvV+uYVHBSC8pvrdpdJ5+7nrL3nbA+nfUrHqmkOVdYsxwQ0sraQXAac4zXf5J8lu5sO1WPYfm9yKin53ndUxPPgnNpzLArTV+N0ojGvWm972zkfJTCr9w+nUiE9pWr0o6tokaH8dekPPsvwVawzzsq9pUJrm35MeVNAcxCW51t46BYm63Vpv9hOrrFqQdwMQui0aTbA0W0ZOOtPZHhPGkl79FvKMWx4xkw8jFe7uez5D5lNDGCixTUjYZdE3A6dw8CdVbjFi+v2C1d0ZPYxeHHZ2sf5mnzlqlsApz2mqPWAlR4tnGL8ydJsISnkNOOGasIf/TATDJAXq8JgF7t5aM7Yg4LHXEtAPA+6molu1cmagP8+dCsTgyn0TdBSDKZ5msilUgP9isyMqIFbV964C53GqDV6lG8s+P4WE/7vs8E1OImOoZbjX9EsnnhuJ/xkTcbFhmycw/+D2KVbmngrXDxNSSGUXXnjvYrzJfnXE/QFn8J3vJBm6eaW78ClN8KM7LqamkRYhVn9AgtmopI6nmQIhF+iAuw0tRlW/3+DudvIw6NP7KjL9fq9WlnmntLbaPXbt4z6TwmWh/G7WO4B6Q6mWE/h4QmBQcK4cDfr3K0JBuSmRki59FFWXgzjAWPP86VAQEq37dfw4Qws9wuEdTvj/Sgcg4rhdDWOWXcBPeUFn/Cztp8oes4eFi5pxK+yWWepNwG30zdpuj+AbCC0v32YYn9fx6w79/+KkXJiFG/06RsDNBqzUgCMEKLmqg0CjLKoCwjVHLzJ3Xgw23Ddbhh7w6in4QYtIHyYD1UN5vLBZ+l2aIIUZp4UDIp2+VbDuheAwFFRAbHEcvYoX7nfdT4/jWNIZr3GrFrMBY6J6AofTNwqtOHpiaPb3PVAkw/BhjKSiAJBed0r1qldUj/uSogMIegAAa5jgIO6IUsF3Ppkso1fhbIL2fyJfVX1/pyoPGMX8kLYkHT6tXjb7bvE1TfmzscvtEa0EKMwNWyjQmJX6ATOHfsfxTpCydPjcHbiyYGDSufzQAtxgPJwU9IouW6qYwI20BRLuWrEH0d59akWHjk2xy6ufVEr6PXBaHU2tC00fRJ2+huJfqFYz/rqqsZMnj5S/gBv9t7MyqxTQ2Up5RUEb5MNg3uwLwax8/GHIJmWvlKe8U9Pj1dWeDRkDq7Oi3VN8+xWQz0gox/0z4xjMr7YvFhX4Sill95qPzXptubc6tw2GYGtyHr9o9SUPsX+xDArzTcQC5WvwgN3EH8NuWB1uhQeXqIN/NDiyT69u8Uokqd6oCKHfbFAfOb81aQcEWv08oljiK4VmsltNNEoeLicqQsvnZh+5tA7kgytFrMz7+BWE4jQ/RtcvGnl6A7TuJg0ChSuHw6BNmPXXDEwr0GNZkibCtMomVD+uYuiGjH/Gmp6O36bVn9cEfBcu9DUtm6FqyVx9aX1eV9lk2ZjmFzwdg7SCWMGHQGZHdOwDtqODIUtu6CQmrSE0j/gFUk77NsjdxoL70p+Fri6NiZKaeFxgqY3k3oAIrXDKICqyWltwQy8LKzKvDmpHBYVDcH5Z1ti+fnoGe62w7WdG+3i6RRG363eTXQL4/hk2ROp13bg0L0GO8Mty8IfnkjPwFiUqW/FvKWTtEaqQAZA3p2vOz2mEgKmf4Cy/crPkYKphb9A9NAO86AqdfYNg48CDu/DBhIcnQJy/6dzzoZnPN7LtoemFWSqZUjBr7ThhU6QaWw2bkgfR3FaRdWkOjttFf2q3UeGwUFqBs2GHc1qGEWOq+KhvEAT8nhmmEv1UxByhxPMz7rvSUmqVSMbBtOUnhYE2TFfVaLJl7Hi8ITCv+jpl+FHDxFthELtsTZw0LxldJY1qroLV+dc4xXjR+xUxhbULaGfqaMl4w2TCujCS+atTugBN4kFgSayhl4hFg9sVOIyeLnAqgHqfkpuweKflAAAktfNbffxl+qheoRrT15og7ZAyC0CVAQbQ5vtATZmyYwZi563OIlfjwa+hSZVz1np2lzfLJTbL8WxipeT2wtUka2S72l7eBf3unDq5QNlFsDohxKJM+zfoUiJiDF5+pUeO3gQItxmz05OPXpgzMwPSxsz0lN3Bea3XEwEfOLgVUsPN2unMwR5HNNcIaa/p1s2DOelJcltO9zj8ccPz+YWPnf0JXRkASaChTuy/GnmOW1hrmL99hOyDmFQ0kiR+FBmnJ/JUX1zigvxj/iBQlZ7haXC6VMfFPA2cmblZJ8FBfzh+mYTwbN7qN3QHD02KZVzX4tgAoaty7xxnfuuGVMJUc0l1wYlwmi/55V1QGIwYSYfpYZrVnLYObc/hHXtEDklp2mmlrDA8idgJCeTslAylwWupY4KxTZCtmNENJMWhGSmG+85zOZndcIj32MBQ5xgukViCZeHjprMdAKwGI7PQ8Lkl/4ZfTRg4reod/CtP2t120yGrK2n47M76lZoyz7rLYU33b8pLUNjStPYERlXAuf/Ku+xrl5u0w1PvyPoWTtSoCM/lEktVeVzuXEfvR+zmqgI1IdkXu86q42NVNOYKIVrIG7IhYO+8FFh7trJXNJ3n75cU4VRVOpe1sdyYa8ZhmWmLOWPLEBNXf+IndWuxbSlF7ZFLco2kPf9efkSJGbsU8BuB+ucvQ0cvZ/CQ2N8lklicllsqIJod7P/VXlKTPSNx56Xbcmr6jeGMzrVOzeBqbh1IRvO6247TCzIu4bhs7pHNDWxqrTb9qy0fjewhHWg3wZrRbqG2zdK6DmpNZJAMm3T+RxxLx5Emg5ZgGCaQq9tGF/1jtmt2c1goc8eQdzS0a6AraRCQflwTyf2x8iZFlbPCDTsgRwl+lFegw8TpLw3H77pO9X9nB+9ynmQRWApWQUXcmJhdgIBLCpegcjSkpX54rh9TLXfeOKi/4lAqrozcHTeoxlZQSA8Ym/40UgcndEoqNpABpeLQbFEshp16fmomkrFyGis7Grbqs1ZzjX5nfJeJLndGZaQT+aWvJy1lL9WtFWLTLwcr+Aku9/L0qCLBvXTMteTeesioZcU8/zhxwrezZAy0/X+FbdO6nzpKAiu7Ix41TOkYabaNpBxH5bhoLH00m7gClVhAK3f5qHM8RUqemn3EfITnCLWZT5JM0KOuBV/0joZcm0p+OG+jgtdEwmu95oAu0JpAdC0cGa8rIMlAS9OorS9rEFkLOMEDkqLSgNr0np0GlXVVOoYaldyUH49euwDUSKHuM5T5xo87mzkTEdSEYUaBHPOIG9inlLKESqAO03+XoaURrHTjwhc6uQnE/H68fyg9Ki1Jilmsa3OC3ossH6ETGjvTl3QGPMzDbJA+xKzcrmwwMRKcVQWsdUziMVekzYe3slxXyyxg+aS+Lvp8qCc79QbxvAoapxlrLVEsAJgEyph2INs5eYY2CnM4QbPJCQ3JmI8gtcYhd4pFTPI12DNRWT17brHkafsGl9Eu1QCEW6RRNYPP9rJyXWshUUBo9P00MjVPTqwz9UOm011CQA/ahBImPkuUxTu6JZgI0xYxy8llXP/ymxr1jbUSGF3RSIxFlJ0wXtowyfcyzYZRP3x8xESB3ML55Vrrd9ocDlMJINUF49sr99Q50cM0dlP5lmsdKtO2rHiUEoEsB4GDKLuC88anKfF4yN1vbNv5aqtP90UJxy/0+v+kePCgOORPCga5Q4mchp1R/QX12XNbW9CmJysBoWvWedy7tK++T5pnYvtGuXPv2js6tNwYXcpTTjAOqM/amwH3/wfOy1GZLLfN/WmJcZRWscaZEozOZ0By0GYBDwfuKpfmAEKpBYbYf50HMYiMaTaZbqFqwkR761WXwz6nTx60DyoVkVnoc5eKI9T9TwC72VdTYP09yhahjvamnn7l2/UF3UltXkw3tudkjYqOffXr4cB39L0sxOZZQWmZOVBnL6c+Zkq2oN0A9m/uq3MlXBrR161Ngbut9G5kHCaPChI7zrhnClqWeVzubMVZxp9Fuk9z1wyqu430hME4Qt7hV//Jq6SJMPisKrYlCyMWPVYqsGibSWTvETFDHIosmG7MG+ZBaMhPNSnluYT12rIU+rDjRB4L4/Rl4HfHcvKtTM0HaZ5AHp8rAylOzCGmsbxYTA7BvbsL0szpMndEEN/uMGOgk3oDbbtuD2oXpsN/JX4mqsEq4xFRvq9MuKDe/DiwHnMcH4sJb1owgbu8mdwK0C+fxTd6WlPzgtBlC8c3XJCaPr3ltBxLuRO0eJ+ikWbJXnN31RYfQgJplG7Tpt0feGb11fhD/xoEplsDfAE7M+vkfT/kLRh0V0tyMBPk1ldrPZvvflH9v/6o6RdpqY+Z8MLkskYzF1Wxf5p0kk3DmEui6bWHyUa7czDmxzYhcyrfVeEiHAz/MB4OWEju3W4fLBgDMkKC2PwjUZqRm9cT2XA4VcGJwyOFi2zzPQ4JeFxX1zi3LJ8pDNETS33JW/BoP47dIQjPeFiVRjh0FGwwk/5IXmn7nY5xTIpLbOeG1DwiCH0qXWo/5wd7+nwWxxHCxZ9pQBYNMJzSRmYmQipaHAVRQkJ7kxZpULO1CWwsBRK8ycvi9OG2JSdz2pSCtNW3EkUlZE9sK/Swh0dpFeoVjpIpNOGCPlMDBJyb38t5UHga1voNuLQWepUzcx15HC0s5C9pOP1tHE+3QAkAVwQSuqJgI1NhC3MdzpqOKqgBxmtx/JPETi+U44iQ/GM6ihI50foUOcdt3+r5EojYiiGgKkerO/Wajo9Hh6RrvbAlvwEZaM4r48ByqoLNyI32Zl4C/9B6HK1TyepIU+XiYUJnJf5iapxeLRZ8cylKxHh5MlD01DlDuhyGkYFYJEiIkpWlKvl2DWC3AjmovAeSdI2Mqov5wGnkYq0zY1BFak4iX5XeL1E+TGDdz/F1CZ+zs36+AmdDLcdCt1Mxm6/Um9AyjhJjyfmsoPwa8QiQxTvvw9IsMaFAiFPCOA9XtrEFTRKHM8WpQrcd5pkc4wFjpcTk715UwXsaswMBoBytk96/oUaxBhKJz4bdW7idd3ikZGWTFSbMwbLBtmOfjI94zxYsWiuEFKBfwOsjP8knvqt6Uf6KaPHC8E1RPWTA2APnt8e5xrHeGBoVz3jVC7D0/kupo5neTZeXD8qT1b3V0K3/g+RxytdH2Apkpuf4Vua/AHla+t3ZOVHLcyjOh56kr79G4hyB0ksbMkvdVeoKM5DBl6NFYzd7fqLL2RMbo/TiwP+jPq/rXg08IUECfvgMIaNkgijxUssATScMWpALeIoZcVt1mQDsw2hNV7AUCZjAYfCdAlMpxFnjfWzHBcMS8nV/7/6MKAzeYeG60SJ2hFv7oavTfs/bKw7A2WNQDbv4snP5zsi/rOy75wJzX5F/KULBd8j2EsT/l3OdyyV9LrObHcWOesc0i82ONfN2/YY//qh/LemmmWfaKVOUbIrGefQrem4ilLPU14zN9X4M2B4Pc7QLpZ8lyYpD4hVbdmwtcZxQkKCFELNmYENAttXbxwI96r6xVpDi0KTQcOiusKtESek+oePM0bJpwiVvfIdeU9WFNaOl3zvf09lT7KLXOPZ4/HX9w2JSiAxbX1PBX9doTywmhkKFPQE90ImInNEZBYu/jhPhjguMZfucHF9UjCu9dCjtFIpaIcyNNqb5h1m72Odk3H3ztFKga1kwrXvyZQYnqGkqVfIBzVV2YIWLzFXBaWCO0bQyyXbsqA2gX3pBgMeLzgcDNN7hZrsP4LTPQGz76Te+X2+RGTOm2JvnGfT6g9UBfk+G5mLLlt9jCmUcfK7De3YDvRxMbcYKTBl4mA4mpvmpc4EHzkP+oTmpOOxWGubCmkBSXPLdh290fh0XCWek+C6xnnrsh+iBYvmrTOO1uoqrLeolwS8nyZlim4oSTQnrQqvQu4nTkm+Dkj+ZvvjTRlRGswUjjAtVeCYIlovmtC3MfYIqfgTIgiuJ4f3OOhGOyCjfEoCCnHg60ZNGyajj0uReckXt3NcTNRv0d4IF8G5anBWTR8j/OcDkOH/eE647Ad5fYqGidMJRyZeTf8W4kn2wT9L2o/6yA4TdTvcmWFCW6URLcu5w3llT0YLjMEsKHu/Cb2vAMRok0cPAcIU8DKHN2iEtXHpMyXLs9AQunE8BZeFg8gS0y020Cr70xso0dxfn74jACYCyD7/iLEbn4W1Q5pFvIBHzh3SkloQa84gJ6w72bI1l8kmgptkdWnjC7t60bBpfxgr6Vvro6g5SIxTyQ3jhaYWAOy50xi51ImiE7VngLVLg5mtoHax8mVP75zSAdUXjQoLLSzmmBbu5UUvAuNrnLIypxmXVSyHmvd8+KVo24OfqrIwfBSehT/2XyVjYfi0v/p4kq5I1LllPB5jZ/hlmjNOTorYxq+cpvXIOMEQjTKdEnIHzpAsT9wTnoqIuB26KZro+HikwzyLdbHLLL5pxw7mbNQUxv7MUyv2weimgIYIWRLMDpKZtpTv21WYwGO/VIm9pU5koXg+BuH2ps/Nyr2EhAUZ555L+YhdNkW0k+PkielR75G5nZzRPDGS9nBa03lgDFJz1tvtkB/v+58Ps7lQAzyZYPAL/tokyY0G7x6eL2hRfkBN5k57TL+NfaISTDiUfV9Ke7G5LLKgzdZr1SBJI9GeqKYwIqwdRB9w7Bhg6WKIav/XnLk0sJbW920txg2kXJWRev+VEqauLydoQ9RHP4=]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[顺序结构的逆置算法与思路： 夹逼法： 思路：通过对数组头部和尾部相互对调并向中间靠近。 实现：(假设以整型为数据类型实现) 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0; i &lt; length/2; i++)&#123;//注意：length要除于2！！！！length要除于2！！！！ temp = datas[i]; datas[i] = datas[length - 1 - i];//前后换位置并向中间靠近 datas[length - 1 - i] = temp; &#125; return true;&#125; 注意：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。 算法优化： 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0 ，j = length - 1; i &lt; j; i++,j--)&#123; temp = datas[i]; datas[i] = datas[j];//前后换位置并向中间靠近 datas[j] = temp; &#125; return true;&#125; 此方法更能体现夹逼法。 链式存储结构的逆置算法与思路： 思路：把头结点和数据结点断开，然后把数据结点一个个前插进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：p-&gt;next = head-&gt;next;head -&gt;next = p;其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。 实现1(单向链表)： 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 实现2(循环链表) 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p!=head)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 前后只是循环条件发生变化。 –（本文完）&lt;原创&gt;&lt;待增添修改&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较]]></title>
    <url>%2F2019%2F06%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[顺序结构与链式结构的比较： 顺序结构 链式结构 按序号下标读取 直接读取通过A[index]即可获的数据+++ 要从头开始找，找的下标才能获取数据— 内存实验 要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容可能没有足够的空间或多出空间— 按需要分配，想要一个就一个可利用很小的碎片空间+++ 插入元素 插入一个元素需要不断移动后面的元素，速度慢，消耗相比大— 直接插入，速度快，消耗相比小+++ 删除 需要移动元素— 直接删除+++ –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 其他测试代码详情：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[体现循环链表的优点之从指定结点开始遍历​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： 小结：​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; 链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; 循环链表具体代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; 销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif 为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？—-对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以随便include定义的头文件了避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[命名空间的基本概念简介基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； 情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中“ : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用命名空间名::实体名（函数名）的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() …… 对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; 链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) 代码详细123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e ………. 一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; 根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() 代码详细：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX1+v5aoVoRKSbW5F+v3fVHKw5WCTfYD7ts15vUKeEWWMcEGL90Rrk9JQk+jKsMubaC/PFpz0CzvLZ6nWm98yYqc8hUG35CWmJAImHpnrH5RI0Tlc/Rvit0E/As285n3A5xgWMk5PyP0kI/x8S9LrH7wvIsq7enpflQ5G3dQNMURY7jY8jY7VuV7VBI9CfYV74UvIupobAwBsoRxJaJbp+o/xU9/JrfkvXhqmxx2bHotZ/P0FNEEOb08j4fOPACrs0XwhdkfaA+4/oplYYmuL6Jj108iUTfOYLuHU4ejPfydmaiCFC/6mKbBILkYNJc5QkdZO3PVynR+pfHUcWFpyJuha7BaKqH6VWbIi4IxlvrqEA64VCqdLpK8P5J2EyxkKseR4Pl6/R5HuyCEbnTMusNRZiNbC7yQETV/xzih1zV+J15bd/izKPu2B2KDpLWSIVdEseKGrxGzQY/2YQStUmRtjBBf+pTcSiHIfGvGeaoKP7aXVXarr6zF6yvk+lp+MRu293VxJHPoD5kwUAjBjEWqaHkfmR9sIcHEEmCdRz3hcEhG0TBpSB4M0Lbcrb+hD3uf2im2ok6rpSLWY7hGepCbxVMa40M6vrg9nHrAl62EidOTDs55JgQkGQCIv5yKMj55Jwbg7k0+NRLve/Z5prMKqUrb0FDh9lADGlkjNqgCpUyfb3jf//hJ+Vn94kUnG9G5I7JYNgFT/1p8yjkBsvZr418K3t3ScmFpa93sD85GXYIuribFauLO0BV2YkJHcGXWGpU29n9qf3pG+nfT2VwiOjuh2iZ4drLxpSA1O4mAm9Kxh3tvLc8UoAWRnYvdLV0xtOU3yZUex0Oc+CXtUt+8i8UkauTbHmiNHjpPBexqroXZmdiobqhzuATC72yO896kOeL7H/pdGw8UmBuj0Wp8QrTgKYbqgoKxvzLY/S6ekY5AbohjxLC/eAAhUxS5VJmr+l9a8TlV8y3yzcZB1Hefgz/Q6ld2tG3Z+Mkei8SOqYAuJs9WS1/f7t1kAgvCtoMXqlgwOcJz5D9cKeqi8PTAw6rM7UOxSaiWekm7TkGHriHQguBYpyRgRPHMk/4JNkhft8JSoc7cXfK017K73RuJAo+P/N5o/EQTQdK9OZ7EJb5G5a/4lYUahgUJIu5FekE2/BbQBgtAYE7+7czEgke/lmgV1BKz4kJhn6zqrUYSgPmZiTzPnyyVG5btLp6qGJpzgj4TVX+HlWtRCCFDMdk3zsz/jnJyIao+dopKjK/NshC0Ld+p6byUtDNFviOJOtmXjHIGGDzYPrg==]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） 顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 心得：​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 学习方法：​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , …. , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT 个人理解：​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[抽象数据类型数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT 个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … 个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 –多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述：遇到的问题比较多：例如 &gt;&gt; 与 &gt;&gt;&gt;运算符 这里的意思是这样的 &gt;&gt;有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ 其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[数据结构的基本概念五个基本概念：数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件（高达模型上面的一个零件？）。 数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[置顶]欢迎来到ShuHaoHwang的博客！！]]></title>
    <url>%2F2019%2F06%2F11%2F%5B%E7%BD%AE%E9%A1%B6%5D%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%9C%AC%E5%8D%9A%E4%B8%BB%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[本博客将先会以个人的学习总结为主，之后将更新一些技术性的文章，欢迎与博主进行探讨、一起思维碰撞。在吉珠的小伙伴还可以直接找博主哦！ 欢迎留言，博主在有空之余将一一进行查看并回复。]]></content>
  </entry>
</search>
