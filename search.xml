<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构学习总结-（5.3）二叉树的性质及推导]]></title>
    <url>%2F2019%2F07%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-3%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E6%8E%A8%E5%AF%BC%2F</url>
    <content type="text"><![CDATA[¶二叉树的性质 ¶性质1：(层级)📝 在二叉树的第i层上至多有2i-1个结点。 即：下层的结点最多是上层结点的2倍 ¶性质2：(深度)📝 深度为k的二叉树至多有2k-1个结点。 ¶性质3📝： 对于任何一颗二叉树，若2度的结点数有n2个，则叶子结点n0的个数比为n2+1 符号 解释 n0 度数为0的结点数(叶结点数) n 总结点数 n1 度数为1的结点数 n2 度数为2的结点数 B 分枝数 n0 = n2+1 其他公式🔎： 分枝数(B)： B = n1+2n2 B = n - 1(n为总结点数)B 推导过程（n0 = n2+1）📜： 因为 B = n -1① 且 n = n0 + n1 + n2② 所以B = n0 + n1 + n2 - 1 ③所以 n0 = B - n1 - n2 + 1④ 又因为B = n1+2n2 代入④ n0 = n1 + 2n2 - n1 - n2 + 1 得n0 = n2+1 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（5.2）二叉树]]></title>
    <url>%2F2019%2F07%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-2%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[¶二叉树(Binary Tree) 二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。 只有一个称为根的结点 除根外，其余结点分为不相交的子集T1和T2，分别称为T的左子树和右子树，且T1和T2本身又都是二叉树 二叉树与树： 二叉树 树 至多只有两个子树 没有限制子树的个数上限 子树有左右之分，其次序不能颠倒(有序树) 子树可有序也可以无序 具有递归性质 具有递归性质 ¶二叉树的五中基本形态 空树 只有一个根结点的二叉树 只有左子树 只有右子树 完全二叉树 ¶二叉树的优点 普通树相比二叉树代码很难实现 二叉树结构简单，规律性强 所有树都可以转为唯一对应的二叉树 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（5.1）树的定义及概念]]></title>
    <url>%2F2019%2F07%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-1%EF%BC%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[¶树 ¶概念及定义 树是一个有层级结构的数据结构 定义：树是有n（n&gt;=0）个结点组成的有限集合 如果n = 0 ，称为空树 如果n &gt; 0, 则： 有一个特点的称之为为根(root)的结点，它只有直接后继，没有直接前驱。 除根以外的其他结点划分为m(m &gt;= 0)个互不相交的有限集合，T0、T1、…、Tm-1，每个集合又是一颗树，称为根的子树。和根有直接关系的结点分别是这些子树的根。 特点：每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树。 ¶树结构与线性结构 线性结构：一对一 树结构：一对多 线性结构 树结构 第一个元素(无前驱) 根结点(无前驱) 最后一个元素(无后继) 多个叶子结点(无后继) 其他数据元素(一个前驱、一个后继) 树中的其他结点(一个前驱、多个后继) ¶树结构的一些术语 根：唯一没有双亲的结点，其他结点都有唯一的双亲 结点的度：一个结点含有的子树的个数称为该结点的度 树的度：树结构中，最大的结点的度称为树的度 分支结点：度数不为0的结点 叶结点：度数为0的结点 孩子结点/子结点：某个结点的子树的根 双亲结点/父节点：若一个结点含有子结点，则这个结点称为其子结点的父结点 兄弟结点：同一个双亲结点的孩子结点之间互为兄弟结点 结点的祖先：从根到该节点所经分支上的所有节点 子孙：以某节点为根的子树中任一节点都称为该节点的子孙 森林：多个数的集合 子树森林：一个结点的所有子树构成的森林 结点的深度：结点的祖先个数+1 结点的高度：从结点到其子树叶结点经过的最大边数+1，叶结点的高度为1 结点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推 树的高度：高度最大的结点的高度 树的深度：树中结点的最大层次或结点的最大深度 堂兄弟结点：双亲在同一层的节点互为堂兄弟 有序树：每个结点的子树有次序之分 无序树：每个结点的子树没有次序之分 ¶树的类型 ¶树的抽象数据类型 ADT Tree DATA 父子关系 Operator Tree() //初始化 Tree(definition) //从输入definition中创建树 Tree(const Tree &amp; T) //复制树 Node root() // 返回根结点 int depth() //获得树的高度 int size() //获得树的结点个数 Node parent(Node p) //获得结点p的双亲 Node[] children§ //返回结点P的所有孩子 Node[] silbings(parent , p) //返回结点p的所有兄弟 Node find() //查找结点 … endADT –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（4.4.2）查询子串位置二-KMP算法[难点]]]></title>
    <url>%2F2019%2F07%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-2%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E4%BA%8C-KMP%E7%AE%97%E6%B3%95-%E9%9A%BE%E7%82%B9%2F</url>
    <content type="text"><![CDATA[¶简单(BF)算法的缺陷 简单算法的实现📝：就让子串与主串进行一个个判断。 例如 “acdcda”中找“cda”那么有：①c先与主串中的‘a’比较不匹配 主串后移、②c与主串中的‘c‘匹配，子串后移让d与主串中的‘b’比较。不匹配主串后移、③c与主串中的‘d’比较，匹配子串后移、④a与主串中的‘c’比较，不匹配,主串后移、⑤c与主串中的‘d’不匹配，主串后移、⑥c与子串中的‘c’匹配,子串后移，d与主串的下一个‘d’匹配，子串再后移，a与主串中的下一个‘a’匹配。找到，返回主串中第二个‘c’的位置。 发现问题​❗️：从上面可以看出，在③开始子串与已经比较过的主串字符又重新比较一次，从而大大的浪费了效率。 ¶KMP算法 正如上面所说的，简单算法，因为在最差的情况下，会进行大量的无意义的比较匹配。而KMP算法的发明者们便想：能否更加比较不匹配所给出的信息，跳过无意义的比较呢？这就是KMP算法的核心。 –（本文未完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（4.4.1）查询子串位置算法一—简单算法]]></title>
    <url>%2F2019%2F07%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-1%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E7%AE%97%E6%B3%95%E4%B8%80%E2%80%94%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[¶简单(BF)算法的代码实现及思路 算法作用🔍：查找在给定的子串在主串中的位置。例如：子串“llo”在主串“hello”的位置为3。 实现思路💡：BF的算法的核心就是子串对主串逐一比较。所以只需用第一个循环来匹配子串的首字符与主串中的字符是否相等，如果相等那么在对子串后面的字符与此时主串的后面的字符进行比较。 例如：要在“AB CADB CADA BCA”中查找子串“ CADA”则从主串A中第一个开始查找，因为“A”与“ ”不匹配所以子串与主串的下一个字符比较，但也不同所以后移，当到了第三个的时候开始匹配，所以主串的第四个字符与子串第二个比较…主串第五个与子串第三个比较…。但到了主串的第七个字符与子串第4个字符不一样，所以匹配失败，主串后移一位又与子串的第一位开始比较。 具体实现💻: 123456789101112131415161718192021int find(String str) &#123; int j = 0; int k = 0; int n = 0; for (int i = 0; i &lt; size &amp;&amp; j &lt; str.size; i++) &#123; if (this-&gt;str[k] == str.str[j]) &#123; j++; k++; &#125; else &#123; j = 0; n++; k = n; &#125; &#125; if (j &lt;= str.size)return n; return -1; &#125; 实验结果🔑: ¶算法优化🔧： 12345678910111213141516int find(String ch)&#123; int i = 0; int j = 0; while(i &lt; size &amp;&amp; j &lt; ch.size)&#123; if(str[i] == ch.str[j])&#123; i++; j++; &#125;else&#123; i = i + 1 - j; j = 0; &#125; &#125; if(j &lt;= ch.size) return i - j; return -1; &#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（4.3）实现字符串结构、相关操作代码和实现思路]]></title>
    <url>%2F2019%2F07%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-3%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E3%80%81%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[¶字符串结构的实现 具体代码💻： 12345678910111213141516class String&#123; char* str;//字符串 int size;//字符串长度 public: String(const char* ch)&#123; /*计算ch长度*/ char* temp = ch; while(*temp++ != '\0'); str = new char[temp - ch];//创建字符串 size = temp - ch - 1; for(int i = 0; i &lt;= size; i++)str[i] = ch[i]; &#125; .......&#125; 字符串是由字符数组来实现的,所以字符串的构造函数首先要根据const char* ch（传入的字符数组）求得其长度，然后创建足够大的空间，并对其逐一赋值即可完成String类型的创建。 ¶相关简单操作的代码实现和实现思路 返回指定位置指定长度的子串 subString() 实现思路❗️：根据用户输入指定的长度来创建足够大的空间的char* temp用来储存子串，然后用循环从指定位置开始对temp进行赋值，直到长度达到用户给定的长度即可。并在后面补上一个结束符(’\0’),因为这是一个主串中的子串，后尾赋值的时候没有结束符。最后丢入String类型的构造函数中，释放temp的空间，返回新的字符串。 具体代码💻： 1234567891011121314String subString(int pos,int len)&#123; char* temp = new char[len+1]; for(int i = 0,k = pos; i &lt; len;i++,k++)&#123;//对子串进行逐一赋值 temp[i] = this-&gt;str[k]; &#125; temp[len] = '\0';//末尾补上结束符 String str(temp); delete[] temp;//释放堆空间 return str;//返回新的String&#125; 实验结果: 重载运算符+=使其实现字符串的拼接 实现思路❗️:拼接顾名思义，是把两个字符串连起来，所以定义一个new_size用来拼接后的字符串长度，只需分别求左右运算数的size相加即可。然后更加这个new_size长度定义一个新的字符串。之后先对左运算数，进行逐一赋值，然后在对右运算数进行赋值。即可完成拼接。 具体实现💻: 1234567891011121314String&amp; operator+= (const String&amp; str)&#123; int new_size = this-&gt;size + str.size; char* temp = new char[new_size+1];//最后需要一个结束符所以+1 if(!temp)return *this; int i = 0; while(i &lt; this-&gt;size)&#123;temp[i] = this-&gt;str[i]&#125;; for(int k = 0; k &lt;= str.size; k++,i++)&#123; temp[i] = str[k]; &#125; delete[]this-&gt;str; str = temp; size = new_size;&#125; 实验结果: ¶具体完成代码📜： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;iostream&gt;using namespace std;class String &#123;public: char* str; int size;public: /*构造函数*/ String(const char* str) &#123; const char* temp = str; while (*temp++ != '\0'); this-&gt;str = new char[temp - str]; if (!this-&gt;str)throw "内存分配失败"; size = temp - str - 1; for (int i = 0; i &lt;= size; i++)this-&gt;str[i] = str[i]; &#125; /*返回指定位置指定长度的子串*/ String subString(int pos, int len) &#123; if (pos &lt; 0 || pos &gt;= size)throw "指定位置超界"; if (pos + len &gt;= size)throw"待获取子串超界"; char* temp = new char[len + 1]; for (int i = 0, k = pos; i &lt;= len ; i++, k++) &#123; temp[i] = this-&gt;str[k]; &#125; temp[len] = '\0'; String str(temp); delete[]temp; return str; &#125; /*重载运算符+=*/ String&amp; operator+=(const String&amp; str) &#123; int new_size = this-&gt;size + str.size; char* temp = new char[new_size + 1]; if (!temp)return *this; int i = 0; while (i &lt; this-&gt;size) &#123; temp[i] = this-&gt;str[i]; i++; &#125; for (int k = 0; k &lt;= str.size; k++, i++) &#123; temp[i] = str.str[k]; &#125; delete[] this-&gt;str; this-&gt;str = temp; size = new_size; &#125; &#125;;int main() &#123; String str("hello world "); cout &lt;&lt; "原字符串为:" &lt;&lt; str.str &lt;&lt; endl; String str2 = str.subString(2, 3); cout &lt;&lt; "其位置2开始长度为3的字串为 : " &lt;&lt;str2.str &lt;&lt; endl; String str3("ShuHao"); str += str3; cout &lt;&lt; str.str &lt;&lt; endl;&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（2.2）类中的static函数/成员变量、类函数const后缀、mutable]]></title>
    <url>%2F2019%2F07%2F12%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-2%EF%BC%89%E7%B1%BB%E4%B8%AD%E7%9A%84static%E5%87%BD%E6%95%B0-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0const%E5%90%8E%E7%BC%80%E3%80%81mutable%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（4.2）实现字符串strlen和strcpy]]></title>
    <url>%2F2019%2F07%2F10%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-2%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2strlen%E5%92%8Cstrcpy%2F</url>
    <content type="text"><![CDATA[¶实现字符串中的简单操作一 ¶strlen() 作用：返回字符串的长度 实现思路：因为在c/c中字符串是以char*指针来实现的，并且这些字符串中的末尾都有一个‘\0’结束符，所以在c/c中可以利用指针和地址来求得字符串的长度，首先定义一个临时指针然后用待求字符串长度的字符串对其进行赋值，再用循环对这个临时指针进行自加移动，当判断在某个地址中的数据为‘\0’结束符的时候，再让其与原来的字符串相减，即可得到字符串的长度。 具体实现: 123456int strlen(const char* str)&#123; const char* temp = str; while(*temp != '\0')&#123;temp++;&#125; return temp - str;&#125; 实验结果: ¶strcpy() 作用：进行字符串复制操作 实现思路：因为这个函数本身是实现复制操作，所以可以用原字符串对目标字符串进行逐一赋值即可实现。用一个临时指针存储目标字符串，然后用原字符串对这个临时指针进行逐一修改赋值，然后返回目标字符串即可。 具体实现: 123456char* strcpy(char* p,const char* s)&#123; char* temp = p; while((*temp++ = *s++) != 0); return p&#125; 实验结果: ¶错误记录： 在编写strcpy()时，忘记了char*p是一个指针，结果直接运用循环对其进行自加移动赋值修改，然后再返回该指针。 错误代码: 12345char* strcpy(char* p , const char* s)&#123; while((*p++ = *s++) != 0); return p;&#125; 实验结果: 错误总结:上述错误代码中，因为p是一个指针，在循环的时候虽然是进行了逐一修改赋值，但指针也随之移动了，所以结果s不再是指向该字符串的首字符地址，而是指向了未知的末尾地址，从而造成指针p变成野指针。返回的结果也就想当然的是乱码了。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
        <tag>错误记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(4.1)字符串]]></title>
    <url>%2F2019%2F07%2F10%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[¶(字符)串类型定义及概念 ¶串的一些概念 以(&quot;Hello world&quot;)为例 主串：即整个字符串被称为主串。 str = “Hello World”；str就是主串 子串：在主串中的一小段。(顺序相同) &quot;llo&quot;是主串“Hello World”的字串、“eH”不是该主串的字串(顺序错了) 位置：某个字符、或字符段的第一个字符位于主串的位置下标。 例如字串“llo”在主串&quot;Hello World&quot;的位置为3 串相等：当两个字符串之间，完全相同(长度相同，每个字符相同且位置相同)称为两个串相等 ”hello world“与“Hello World”不相等(字符不相等) 空串：串长度为为0的字符串被称为空串。 **注意：**空串与空格串不一样，空格串中的空格也算一个字符长度 ¶串的抽象数据类型 ADT String Data：字符序列，以c/c++为例，char*类型数据，字符序列 Operation： bool init(T,char*) //初始化一个字符串 int find(S ,T) //查找字符串中是否存在字串 String strcat(T , S) //拼接字符串 String subStr(S,pos,size) //将s中的pos位置开始size长度的字串获取 bool inserStr(s,pos,T) //将T插入到s的pos位置 bool deleteStr(S,pos,size) //将S的pos位置开始的size长度的字串删除 bool copy(T,S) //将S拷贝给T int size() //获得字符串长度 void clear() //清空字符串 … endADT –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（2.1）类与构造函数]]></title>
    <url>%2F2019%2F07%2F08%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-1%EF%BC%89%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.5）顺序存储结构队列]]></title>
    <url>%2F2019%2F07%2F06%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[¶顺序队列算法即实现思路 ¶顺序储存结构的队列定义(以char类型为例) 实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。 12345678910111213class SqQueue&#123; char* datas;//线性表 int capacity;//队列容量 int front;//队首 int rear;//队尾 public: SqQueue(int c)&#123; capacity = c; datas = new char[capacity]; front = rear = 0; &#125; &#125; ¶顺序队列 入队操作 思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。 具体实现： 1234567bool push(T e)&#123; if(rear == capacity) return false; datas[rear] = e; rear++; return true;&#125; 出队操作 思路：直接让头数值进行自加即可实现出队操作 具体实现： 123bool pop()&#123; front++;&#125; 出现一个问题:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。 ¶循环队列 入队操作： 思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：rear = (rear+1)%capacity 算法解释：(以容量为5的队列为例) 第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2…第四个为4。 第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。 具体实现： 1234567bool push(T e)&#123; if((rear+1)%capacity == front)//满队判断 return false; datas[rear] = e; rear = (rear+1)%capacity; return true;&#125; 满队的处理：这里是用(rear+1)%capacity == front来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3 出队操作 思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即front = (front + 1)% capacity。 具体实现： 123456bool pop()&#123; if(front == rear)//空队判断 return false front = (front + 1)% capacity; return true;&#125; ¶具体代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt; class SqQueue &#123; T* datas; int capacity; int rear; int front;public: /*构造函数*/ SqQueue(int c = 10) &#123; capacity = c; datas = new T[capacity]; rear = front = 0; &#125; /*入队操作*/ bool push(T e) &#123; if ((rear + 1) % capacity == front) return false; datas[rear] = e; rear = (rear+1)%capacity; return true; &#125; /*出队操作*/ bool pop() &#123; if (rear == front) return false; front = (front + 1) % capacity; &#125; void tr(void(*fb)(T&amp; e)) &#123; for (int i = front; i &lt; rear; i++) &#123; fb(datas[i]); &#125; &#125;&#125;;void Print(char&amp; a) &#123; cout &lt;&lt; a &lt;&lt; " ";&#125;int main() &#123; SqQueue&lt;char&gt; s; cout &lt;&lt; "数据a入队了" &lt;&lt; endl; s.push('a'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b入队了" &lt;&lt; endl; s.push('b'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据c入队了" &lt;&lt; endl; s.push('c'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据d入队了" &lt;&lt; endl; s.push('d'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据e入队了" &lt;&lt; endl; s.push('e'); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl; cout &lt;&lt; "头数据出队了 " &lt;&lt; endl; s.pop(); s.tr(Print); cout &lt;&lt; endl;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.7)数据类型转换]]></title>
    <url>%2F2019%2F07%2F04%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.4）队列及链式队列的实现]]></title>
    <url>%2F2019%2F07%2F03%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[¶队列的基本概念及定义 定义： 队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。 特征：先进先出(FIFO,First In First Out) ¶队列的抽象数据类型 ADT Queue Data 线性关系(a1,a2,…,an) Operation bool push(e) 入队操作 bool pop() 出队 T&amp;front() 获得队首数据 bool empty() 判断队列是否为空 void clear() 清空队列 … ¶链式队列实现算法及思路 入队操作 * 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。 具体代码实现: 123456789101112bool push(T e)&#123; Node* p = new Node; if(!p)return false; p-&gt;data = e; p-&gt;next = nullptr; rear-&gt;next = p; rear = p; return true&#125; 出队操作 思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。 具体代码实现： 1234567891011bool pop()&#123; if(rear == head) return false; Node* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; ¶具体代码实现情况： 入队(完成) push(T e) 出队(完成) pop() 是否为空(完成) IsEmpty(); 获得队首元素(完成) getFirst() 清空队列(完成) clear() ¶具体代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class Queue &#123; struct Node &#123; T data; Node* next; &#125;; Node* head; Node* rear;public: Queue() &#123; head = new Node; head-&gt;next = nullptr; rear = head; &#125; /*入队操作*/ bool push(T e) &#123; Node* p = new Node; p-&gt;data = e; p-&gt;next = nullptr; rear-&gt;next = p; rear = p; return true; &#125; /*出队操作*/ bool pop() &#123; if (head == rear) return false; Node* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; /*是否为空*/ bool IsEmpty() &#123; return head == rear; &#125; /*获得首元素*/ T getFirst() &#123; return head-&gt;next; &#125; /*清空队列*/ bool clear() &#123; Node* p = head-&gt;next; Node* q = nullptr; while (p != rear) &#123; q = p; p = p-&gt;next; delete q; &#125; delete rear; rear = head; return true; &#125; void Ta(void(*fb)(T&amp; e)) &#123; Node* p = head; while (p != rear) &#123; p = p-&gt;next; fb(p-&gt;data); &#125; &#125;&#125;;template &lt;typename T&gt; void print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; Queue&lt;char&gt; q; cout &lt;&lt; "a数据进队了" &lt;&lt; endl; q.push('a'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "b数据进队了" &lt;&lt; endl; q.push('b'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "c数据进队了" &lt;&lt; endl; q.push('c'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "d数据进队了" &lt;&lt; endl; q.push('d'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "清空队列" &lt;&lt; endl; q.clear(); cout &lt;&lt; "e数据进队了" &lt;&lt; endl; q.push('e'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "f数据进队了" &lt;&lt; endl; q.push('f'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "g数据进队了" &lt;&lt; endl; q.push('g'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "h数据进队了" &lt;&lt; endl; q.push('h'); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl; cout &lt;&lt; "首数据出队了" &lt;&lt; endl; q.pop(); q.Ta(print); cout &lt;&lt; endl;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-括号匹配]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[¶括号匹配 对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。 实现思路：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。 以（{heheda}[123]())为例。 第一步扫描上方字符串。发现第一个左括号‘(’使其入栈，第二个'{'入栈，发现'}'为右括号，与栈顶数据进行匹配发现，此时栈顶就是'{'与之匹配那么就出栈。（类似消消乐） ¶具体代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include"LKStack.h"#include&lt;iostream&gt;bool CheckStr(string str) &#123; LkStack&lt;char&gt; stack; cout &lt;&lt; "字符串：" &lt;&lt; str &lt;&lt; " "; for (int i = 0; i &lt; str.length(); i++) &#123; /*如果是左括号那么就入栈，等待匹配*/ if (str[i] == '[' || str[i] == '&#123;' || str[i] == '(') &#123; stack.push_back(str[i]); &#125; /*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/ if (str[i] == ']' || str[i] == '&#125;' || str[i] == ')') &#123; /*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; if (!stack.isEmpty() &amp;&amp; str[i] == ']' &amp;&amp; stack.GetTop() == '[') stack.pop(); if (!stack.isEmpty() &amp;&amp; str[i] == '&#125;' &amp;&amp; stack.GetTop() == '&#123;') stack.pop(); if (!stack.isEmpty()&amp;&amp; str[i] == ')' &amp;&amp; stack.GetTop() == '(') stack.pop(); &#125;&#125; /*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号匹配成功！" &lt;&lt; endl; return true; &#125; else &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; &#125;int main() &#123; CheckStr("12312()()[]&#123;&#123;&#125;&#125; "); CheckStr("&#125;"); CheckStr("[()(),hello&#123;&#125;]"); CheckStr("test"); CheckStr("()(&#125;[]");&#125; 实验结果： –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法性能分析]]></title>
    <url>%2F2019%2F07%2F02%2F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[¶算法性能分析 ¶好的算法应当满足 正确性：算法应能满足具体问题的需求 可读性：算法应应易于阅读和理解 健壮性：输入数据非法时，算法也能适当作出反应或进行处理 高效性：算法执行时间短，占用存储空间少 ¶时间复杂度 程序：算法在计算机上的实现 程序的执行时间取决于如下因素： 算法本身 问题规模 编程语言 硬件性能 选择一个“基本操作”，分析基本操作执行的次数 用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。 算法的时间复杂度为：和f(n)同阶的简化无穷大量T(n) = O(f(n))]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表应用- 两数相加]]></title>
    <url>%2F2019%2F06%2F29%2F%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[¶两数相加 问题： 给定两个非空链表来表示两个非负整数。位数按照逆序方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 输出: 7 -&gt; 0 -&gt; 8 原因: 342 + 465 = 807 ¶一些算法的思路： 先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数 12345678Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125; **实现思路：**对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位…以此类推直到把所以值都后插入链表中。 转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。 123456789101112int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125; **实现思路：**因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。 最后一步把相加的结果再ToLKlist()用变为链表。 ¶具体实现: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include&lt;iostream&gt;using namespace std;class Lklist &#123; struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: Lklist() &#123; head = new LNode; head-&gt;next = nullptr; length = 0; &#125; /*前插操作*/ bool push(int e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; length++; return true; &#125; /*后插操作*/ bool push_back(int e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while (p-&gt;next) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e; q-&gt;next = 0; p-&gt;next = q; length++; return true; &#125; /*删除第一个数据操作*/ bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; /*获得第一个元素*/ int getfirst() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空链表*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; /*获得链表长度*/ int Getlength() &#123; return length; &#125;&#125;;/*转换为数字*/int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125;/*数字转换为链表*/Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125;/*两数相加核心代码*/Lklist TwoNumberAdd(Lklist num1, Lklist num2) &#123; int a = number(num1); int b = number(num2); return ToLKlist(a + b);&#125;int main() &#123; int a; int b; Lklist s; cout &lt;&lt; "请输入第一个数： "; cin &gt;&gt; a; cout &lt;&lt; endl &lt;&lt; "请输入第二个数： "; cin &gt;&gt; b; s = TwoNumberAdd(ToLKlist(a), ToLKlist(b)); int i = 0; int len = s.Getlength(); while (!s.IsEmpty()) &#123; cout &lt;&lt; s.getfirst(); if (i &lt; len - 1) &#123; cout &lt;&lt; "-&gt;"; i++; &#125; s.deletefirst(); &#125;&#125; 实验结果: ¶标准参考答案： 1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution &#123;public : ListNode* addTwoNumber(ListNode* l1, ListNode* l2) &#123; int x = 0; int y = 0; int carry = 0; int sum = 0; ListNode* h = nullptr; ListNode** t = &amp;h; while (l1!=nullptr||l2!=nullptr) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; ListNode* node = new ListNode(sum % 10); *t = node; t = (&amp;node-&gt;next); carry = sum / 10; &#125; if (carry &gt; 0) &#123; ListNode* node = new ListNode(carry % 10); *t = node; &#125; return h;&#125;private: int getValueAndMoveNext(ListNode*&amp; l) &#123; int x = 0; if (l != nullptr) &#123; x = l-&gt;val; l = l-&gt;next; &#125; return x; &#125;&#125;; ¶参考答案的核心算法思路： ListNode* addTwoNumber(ListNode* l1, ListNode* l2) 这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。 第一步： 取出两个链表中的第一个元素2和5。 第二步： 让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7 第三步： 把结果7模上10并push_back进结果链表。此时结果为7并且是结果链表的第一个数据 然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。 第四步： 循环上面的步骤 第二次循环中4和6的和是10，模上10取余后的结果为0，push_back进结果链表作为第二个数据 因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位 总体来看，首先因为题目描述为 位数按照逆序方式储存，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。 ¶个人实现代码优化后： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;iostream&gt;using namespace std;class LKlist &#123;public: struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: LKlist() &#123; head = new LNode(); head-&gt;next = nullptr; length = 0; &#125; bool push_back(int e) &#123; LNode* p = new LNode; LNode* t = head; p-&gt;data = e; while (t-&gt;next) &#123; t = t-&gt;next; &#125; t-&gt;next = p; p-&gt;next = nullptr; length++; return true; &#125; bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; int getfirst() &#123; return head-&gt;next-&gt;data; &#125; int Getlength()&#123; return length; &#125;&#125;;int getValueAndMoveNext(LKlist&amp; l) &#123; int x = 0; LKlist::LNode* T; if (l.head-&gt;next) &#123; x = l.head-&gt;next-&gt;data; T = l.head-&gt;next-&gt;next; delete l.head-&gt;next; l.head-&gt;next = T; &#125; return x;&#125;LKlist addTwoNumber(LKlist&amp; l1, LKlist&amp; l2) &#123; int x = 0; int y = 0; int sum = 0; int carry = 0; LKlist h; while (!l1.IsEmpty() || !l2.IsEmpty()) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; h.push_back(sum % 10); carry = sum / 10; &#125; if (carry &gt; 0) &#123; h.push_back(carry % 10); &#125; return h;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-进制的转换]]></title>
    <url>%2F2019%2F06%2F29%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[¶数制转换 以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。 例如： 结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便 123456789101112void changeNumber(int n,int b)&#123;//n为十进制数，b为将要转的进制数 Stack&lt;int&gt; stack；//定义一个栈 while(n)&#123; stack.push(n%b);//获取余数并入栈 n = n/b;//更新n &#125; while(!stack.isEmpty())&#123;//出栈并输出。直至为空栈 cout &lt;&lt; stack.getTop();//获得栈顶元素 stack.pop();//每输出一个就出栈一个数据 &#125; &#125; ¶代码实现: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;iostream&gt;using namespace std;/***********链栈实现************/template&lt;typename T&gt;class Stack &#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: Stack() &#123; head = new LNode; head-&gt;next = nullptr; &#125; /*入栈操作*/ bool push(T e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; return true; &#125; /*获得栈顶元素*/ T getTop() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空栈*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125;&#125;;/*********************************//*数据转换*/void ChangeNumber(int n,int b) &#123; Stack&lt;int&gt; stack; int result = 0; while (n) &#123; stack.push(n % b); n = n / b; &#125; while (!stack.IsEmpty()) &#123; cout &lt;&lt; stack.getTop(); stack.pop(); &#125; &#125;int main() &#123; ChangeNumber(75, 8);&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ vector容器常用操作和内存释放]]></title>
    <url>%2F2019%2F06%2F29%2FC-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%2F</url>
    <content type="text"><![CDATA[¶一、对字符串的处理 对字符串每一个字符进行遍历修改操作 12345678910111213141516#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;int main() &#123; string ifo = "ShuHaoHwang"; for (auto iter = ifo.begin(); iter != ifo.end(); iter++) &#123; *iter = toupper(*iter); &#125; cout &lt;&lt; ifo &lt;&lt; endl;&#125; ¶二、查找配置项信息及内存释放 用迭代器及vector容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用vector进行内存释放。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;struct conf&#123; char confname[40];//配置项名 char confid[100];//配置项信息&#125;;char* getifo(vector&lt;conf*&gt;&amp; a, const char* s) &#123; vector&lt;conf*&gt;::iterator iter; for (iter = a.begin(); iter != a.end(); iter++) &#123; if (strcmp((*iter)-&gt;confname, s) == 0) &#123;//如果找到对应配置项名，就返回其配置项的信息 return (*iter)-&gt;confid; &#125; &#125; return nullptr;&#125;int main() &#123; conf* server = new conf; conf* server2 = new conf; /*配置项名1*/ strcpy_s(server-&gt;confname,sizeof(server-&gt;confname),"ServerName"); /*配置信息1*/ strcpy_s(server-&gt;confid, sizeof(server-&gt;confid), "1区"); /*配置项名2*/ strcpy_s(server2-&gt;confname, sizeof(server2-&gt;confname), "ServerID"); /*配置信息2*/ strcpy_s(server2-&gt;confid, sizeof(server2-&gt;confid), "10000"); vector&lt;conf*&gt; cinfo; cinfo.push_back(server);//把结构指针放入容器 cinfo.push_back(server2); vector&lt;conf*&gt;::iterator iter; /*查找信息*/ char* temp; temp = getifo(cinfo, "ServerName"); if (temp != nullptr) &#123; cout &lt;&lt; "ServerName: " &lt;&lt; temp &lt;&lt; endl; &#125; /*释放内存*/ for (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123; delete (*iter);//因为*iter是一个指针 &#125; cinfo.clear();//最后清空容器 &#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++迭代器的失控范例和解决方案]]></title>
    <url>%2F2019%2F06%2F28%2FC-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[¶迭代器失控范例 ¶情形一： 很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对vector容器进行push_back()操作、对vector容器进行插入操作、删除操作。都会使end()函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。 例如： 1234567891011vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125;//或者下面这种情况for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.insert(1,100);&#125; 实验结果： 在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。 123456789101112vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2); break;//添加元素后直接跳出&#125;//再进行一次迭代器遍历for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125; 实验结果： 如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。 123456789101112131415vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; iter = arrays.insert(iter,100); if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： **实现思路:**因为arrays.insert()的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以end()的值没有发生变化)。多次更新迭代器的起始begin()的值，从而使迭代器类型的指向不会失控。 同样的如果使用push_back(): 123456789101112131415161718vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; arrays.push_back(100);//不断更新iter的值起始 iter = arrays.begin() if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： **总体：**即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。弊端：麻烦，代码较繁杂。 ¶情形二： 如果在某个时候要对容器进行清空操作，多数下使用容器自带的clear()函数即可。但在某些特殊情况下，要对vector容器的某些元素进行删除，就得使用容器自带的` `函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。 例如： 12345vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; arrays.erase(iter);&#125; 使用结果 如果真的要进行这样的操作可以这样做： 12345678910vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(iter != arrays.end())&#123; iter = arrays.erase(iter);//直接让erase函数来更新迭代器指向的位置&#125;//for版for(iter; iter != arrays.end(); )&#123; iter = arrays.erase(iter);&#125; 实验结果： **实现思路：**因为erase()函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。 此情形更好的实现版本 1234567vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(!arrays.empty())&#123;//如果不为空就继续 auto iter = arrays.begin();//每开始一轮循环就更新迭代器的指向。 arrays.erase(iter);&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.6）迭代器]]></title>
    <url>%2F2019%2F06%2F26%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.3）链栈]]></title>
    <url>%2F2019%2F06%2F26%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88%2F</url>
    <content type="text"><![CDATA[¶栈的链式实现算法及思路 栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。 入栈 思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。 具体实现： 12345678bool push_back(T e)&#123; LNode*p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true;&#125; 出栈 思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈) 具体实现： 123456789bool pop()&#123; LNode* p = head-&gt;next; if(!head-&gt;next)&#123; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false;&#125; 析构函数 思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。 具体实现： 12345678~LkStack()&#123; LNode*p = head-&gt;next; while(p)&#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125;&#125; ¶具体代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkStack&#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: LkStack() &#123; head = new LNode(); head-&gt;next = nullptr; &#125; ~LkStack() &#123; LNode* p = head-&gt;next; while (p) &#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125; delete head; &#125; /*入栈操作*/ bool push_back(T e) &#123; LNode* p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!isEmpty()) &#123; LNode* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false; &#125; /*是否为空*/ bool isEmpty() &#123; if (!head-&gt;next) return true; return false; &#125; /*获得栈顶数据*/ T&amp; GetTop() &#123; return head-&gt;next-&gt;data; &#125;&#125;;int main() &#123; LkStack&lt;int&gt; stack; cout &lt;&lt; "入栈了数据1" &lt;&lt;endl; stack.push_back(1); cout &lt;&lt; "入栈了数据2" &lt;&lt;endl; stack.push_back(2); cout &lt;&lt; "入栈了数据3" &lt;&lt;endl; stack.push_back(3); cout &lt;&lt; "入栈了数据4" &lt;&lt;endl; stack.push_back(4); cout &lt;&lt; "入栈了数据5" &lt;&lt;endl; stack.push_back(5); while (!stack.isEmpty()) &#123; cout &lt;&lt; stack.GetTop() &lt;&lt; endl; stack.pop(); &#125;&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++个人学习路线]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.5）vector容器详解]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.2）顺序栈的实现]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[¶顺序栈的实现与算法思路（以char数据类型为例） 入栈push(char e)； 思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。 具体实现： 1234567bool SqStack::push(char e) &#123; if ((top - data) == capacity)//容量满了就进行扩容 realloc(); *top = e; top++;//直接修改并移动top指针 return true;&#125; 出栈pop(); 思路：在没有空栈的情况下，直接让top自减一。 具体实现： 1234567bool SqStack::pop() &#123; if (top == data)//判断是否空栈。 return false; top--; return true; &#125; ¶顺序栈的实现情况 出栈(完成) push(char e) 入栈(完成) pop() 扩容(完成) realloc() 遍历(完成) Traverse(void(*fb)(char&amp; e)) 获得栈顶数据(完成) GetTop() 是否为空栈(完成) IsStackEmpty() 获得栈总容量(完成) GetCapacity() 具体代码： 123456789101112131415161718192021222324252627282930313233343536//Sqstack.h#ifndef _SQSTACK_H_#define _SQSTACK_H_ class SqStack &#123; char* top = nullptr; char* data = nullptr; int capacity;public: /*构造函数*/ SqStack(int c = 5); /*入栈操作*/ bool push(char e); /*出栈操作*/ bool pop(); /*遍历*/ void Traverse(void(*fb)(char&amp;e)); char GetTop(); bool IsStackEmpty(); int GetCapacity();private: /*扩容*/ bool realloc();&#125;; /*打印*/ void Print(char&amp; e);#endif // !_SQSTACK_H_ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//Sqstack.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;/*构造函数*/SqStack::SqStack(int c) &#123; capacity = c;//默认给一个初值 data = new char[capacity]; top = data;&#125;/*扩容*/bool SqStack::realloc() &#123; char* n_data = new char[2 * capacity]; for (int i = 0; i &lt; capacity; i++) &#123; n_data[i] = data[i]; &#125; delete[]data; data = n_data; top = data + capacity;//这里要注意top也有重新赋值新的地址 capacity *= 2; cout &lt;&lt; "扩容成功！！" &lt;&lt; endl; return true;&#125;/*入栈操作*/bool SqStack::push(char e) &#123; if ((top - data) == capacity) realloc(); *top = e; top++; return true;&#125;/*出栈操作*/bool SqStack::pop() &#123; if (top == data) return false; top--; return true; &#125;/*遍历*/void SqStack::Traverse(void(*fb)(char&amp; e)) &#123; for (int i = 0; i &lt; top - data; i++) &#123; fb(data[i]); &#125; &#125;/*获得栈顶元素*/char SqStack::GetTop() &#123; return*(top - 1);&#125;/*判断是否空栈*/bool SqStack::IsStackEmpty() &#123; if (top == data) return true; return false;&#125;/*获得容量*/int SqStack::GetCapacity() &#123; return capacity;&#125;/*打印*/ void Print(char&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " "; &#125; 123456789101112131415161718192021222324252627//main.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;int main() &#123; SqStack stack; cout &lt;&lt; "入栈一个数据a" &lt;&lt; endl; stack.push('a'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据b" &lt;&lt; endl; stack.push('b'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据c" &lt;&lt; endl; stack.push('c'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据d" &lt;&lt; endl; stack.push('d'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据e" &lt;&lt; endl; stack.push('e'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据f" &lt;&lt; endl; stack.push('f'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "出栈一个数据" &lt;&lt; endl; stack.pop(); stack.Traverse(Print); cout &lt;&lt; endl; &#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.1）栈]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88%2F</url>
    <content type="text"><![CDATA[¶初识栈 定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。 允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。 不含任何数据元素的栈称为空栈。 特点： 先进后出 后进先出 注意： 栈又被称为后进先出(Last in First out)的线性表 栈的插入操作，被称为进栈，也称压栈、入栈(push) 栈的删除操作也称出栈，也称为弹栈(pop) 示意图： ¶栈的抽象数据类型 ADT 栈(Stack) Data 栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系， Operation InitStack；初始化，创建一个空栈 destoryStack; 销毁栈 StackEmpty；判断是否为空 clearStack； 清空栈 getTop；获得栈顶元素 push 压栈 pop 出栈 stacklength；获得栈的长度 endADT 注意：栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用 –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.4）函数新特性、const关键字精解]]></title>
    <url>%2F2019%2F06%2F23%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[¶顺序结构的逆置算法与思路： 夹逼法： 思路：通过对数组头部和尾部相互对调并向中间靠近。 实现：(假设以整型为数据类型实现) 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0; i &lt; length/2; i++)&#123;//注意：length要除于2！！！！length要除于2！！！！ temp = datas[i]; datas[i] = datas[length - 1 - i];//前后换位置并向中间靠近 datas[length - 1 - i] = temp; &#125; return true;&#125; 注意：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。 算法优化： 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0 ，j = length - 1; i &lt; j; i++,j--)&#123; temp = datas[i]; datas[i] = datas[j];//前后换位置并向中间靠近 datas[j] = temp; &#125; return true;&#125; 此方法更能体现夹逼法。 ¶链式存储结构的逆置算法与思路： 思路：把头结点和数据结点断开，然后把数据结点一个个前插进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：p-&gt;next = head-&gt;next;head -&gt;next = p;其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。 实现1(单向链表)： 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 实现2(循环链表) 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p!=head)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 前后只是循环条件发生变化。 –（本文完）&lt;原创&gt;&lt;待增添修改&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较]]></title>
    <url>%2F2019%2F06%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[¶顺序结构与链式结构的比较： 顺序结构 链式结构 按序号下标读取 直接读取通过A[index]即可获的数据+++ 要从头开始找，找的下标才能获取数据— 内存实验 要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容可能没有足够的空间或多出空间— 按需要分配，想要一个就一个可利用很小的碎片空间+++ 插入元素 插入一个元素需要不断移动后面的元素，速度慢，消耗相比大— 直接插入，速度快，消耗相比小+++ 删除 需要移动元素— 直接删除+++ –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[¶双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 ¶根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 ¶其他测试代码详情： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[¶体现循环链表的优点之从指定结点开始遍历 ​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： ¶小结： ​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[¶循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 ¶判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 ¶循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; ¶链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; ¶循环链表具体代码实现include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; ¶销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[¶Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 ¶头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif ¶为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？----对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include&quot;head2.h&quot;的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以~~随便include定义的头文件了~~避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[¶命名空间的基本概念简介 ¶基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； ¶情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中&quot; : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用**命名空间名::实体名（函数名）**的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[¶链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() … ¶对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; ¶链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) ¶代码详细 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[¶链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 ¶链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 ¶链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[¶顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e … ¶一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; ¶根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() ¶代码详细： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX19h1NEIxJqzzJk9T9kOybKcHSMQg9TdmKxXJM/kFS1BtsG+fV/XYhKIuMlmWr6XZiTGbbQicBvf6jEBIX7yrVDWHjkoNn1WFZc+NZkV2bM7JLNk7XQQ1M6O9iZbMpGoIgcpm+eDP7UC7M1Q4v5FufpC8Tmn/XZ4J5x59UAD3n9y0bDSPNQqaB85vFLCg3PNhkB/OjMT3PasZLA9Z/FCg018F7ZFToFJ5scbcQnOoJH1pwAlaV5z/tRH4JvwNBKeIrDj0CjVNU+0Nw8LLdjspq10ZAOWIrxEIdFQSjEe6WT/56ifwSFCTLvSqsIC3/Cvo/b7iw84XMUnoysIHEZro8gaQ2+uMPBRC4X71p1csBk5/7mhu0o28A7HlCqvYrXeflM+ohZ6Hxj8pSpexKbJu2hEMLiINApIIulKtU7Y9++SQwnRYem2eYZixEZl0nyX53jjUUoGtRsnA66qpEnhM1lBOyfGSdLTHqJe4X0f9Dxz41Ea9utRKaKe1wFGtjajTgNT6PTffP4ZhbF/9hRLxKLZ7J+R84b3eZDhaGZ5eai0l2flnOccpJqUEnauSS2CeNAJ2rzJCa9geKcS992QGhjtI5p7IcsrfLpnWRIqakJbswjiXKLZ82Z4RHm0M9Lnz7yHH0+R3bnaIwmLRpvRs+QHK+miSoDirgDWfNeOMFodcrkNIvDmSC9+Fwpd1mQCIs4As5j6NP2yBAGCsjEDN7XMlZ0KfKYA3BikYlsASZUIg9n7aEfN1Jd/LwAf1Ww0Ze+mXP8OnylJWzCIjP6Noy7zvaFCQeBCTGkeV7VnIX3RjIDVtw5sNXbNasYPO7Og+WyzrEoFDNMl03dXN1XpskhWTtfz62JPYtTJjNU/7i8CVRlcpNpq54QspkS61piDsrni2k8eiLlIkMpwhg+WaMkGbAcaLHeGG9b/hyIfYlVlTfyRjGqFYdBrYgN5tMcIsQMjwY1r/k5UB6PECT2DztZ5UMoKFt0gWJ5wdbnqKHhFWfu6vfCqlonahDyGbxXNvH5CgyHZDUKTpuKkvwM5NOjx2bQTSOI4yPMEtVwT3aSmTgC+SCApwc/Sgui0OuSLfMgi+nUAlfCTSvzxL6Ti9BPvU4JAcdUBgO48OXq8eqmqny8GS3INojUpm+BTSTDNhrFujhb7zP57iWOGGgUw100WavZcLiWP9+vEmJdp66xYmYy4diPTa3wiu6l1JTS5uoKnAHGKeZnVHoPwAAGC9xmP0E/Kiw0hmuU=]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[¶顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） ¶顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 ¶心得： ​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 ¶学习方法： ​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[¶线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 ¶线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , … , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT ¶个人理解： ​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[¶问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[¶抽象数据类型 ¶数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 ¶例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 ¶抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT ¶个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … ¶个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 --多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[¶今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述： 遇到的问题比较多：例如 &gt;&gt; 与 *&gt;&gt;&gt;*运算符 这里的意思是这样的 *&gt;&gt;*有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 ¶警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ ¶其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[¶数据结构的基本概念 ¶五个基本概念： ¶数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 ¶数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件~~（高达模型上面的一个零件？）~~。 ¶数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 ¶数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 ¶数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 ¶总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 ¶逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 ¶物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[置顶]欢迎来到ShuHaoHwang的博客！！]]></title>
    <url>%2F2019%2F06%2F11%2F%5B%E7%BD%AE%E9%A1%B6%5D%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%9C%AC%E5%8D%9A%E4%B8%BB%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[本博客将先会以个人的学习总结为主，之后将更新一些技术性的文章，欢迎与博主进行探讨、一起思维碰撞。在吉珠的小伙伴还可以直接找博主哦！ 欢迎留言，博主在有空之余将一一进行查看并回复。]]></content>
  </entry>
</search>
