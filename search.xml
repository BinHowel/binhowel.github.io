<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 其他测试代码详情：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[体现循环链表的优点之从指定结点开始遍历​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： 小结：​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; 链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; 循环链表具体代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; 销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif 为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？—-对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以随便include定义的头文件了避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[命名空间的基本概念简介基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； 情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中“ : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用命名空间名::实体名（函数名）的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() …… 对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; 链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) 代码详细123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e ………. 一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; 根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() 代码详细：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX19AN0XHo9L/3G+mQy5M6oGsImTNaSEJbRoicJwmgjv5cl8Yfg6f2FI2cSZKX1J9sMTiJGNXeyQUK65UIWLplstDFRZPGBmYCNyQMigyRz/oWg8j5Z8Ny/7Itlcedb7jhm31HydjZuAskeea5PmREfHN9xJdI3A8gr0FepUE6sgXYI13K+r9fVc0jPAyJb7do1irUJx8KjowMLy9iJGeVnGL8K2J9EdGEnKQw+dH+V74rVqpfuApXGg0ciwqGzDRn6umZlzvXUg1ZQBomw3c2dKHJHLmZGczxYg5VR4zv8HqZvRaWDHHEH/qc7HCojTuRDfpJmOb+SCIhGHRUx/TMo+9K8vQEXOSZIWZxZmadCMsBarYjsXVVGBhCcvPYw1wXXIodBm+V56E8+t3tq6+XV4NJ7h61dk5uNRntxhvKKrro/aIawqCqm+aMtVgGVMFRrOCFtc0RnnsXUYeRioQ1Tscebu7M6MkMS2pu+1SomKhPVVARCy9xDEprrn8lt31YJ4GLuGlHaN6mXjfgUeJKOuEsuUa7LspKQSo3H1khEXCbm19v7GnSUI4N5bENgP8mP4WRfpOnvYlpu8ajjfVidEBk19Y30vaRfg1yhPRoarM8bOZEW3VjcSnD3M+vF8EQQ4I2CSMv3grUwuQduq76ZPU3NxzVTQsN9g0JvEz2dj14NrmHIw+Cm/vm6y6amVLcaEGhCGOZqURktz4PU3hEraUMDRrE8KKHjUrq/CbUro1natVBjHutKWLyWsx30r5lqpE1meP87pbOaKXiyniYvPJoGuJyj6bdjR8vb/RIOXxSgQo6qsIxuShX6Yi8x7bWIq2oO9BdbYQKSma/ItpFd1KlznalrTQjd5+KSZTpqC0jQaoiCZw7E5ary8GlgXZbKDfpofhVgeawMERv4KoVDX5ntk+rnZ19txO5wpAHQ82t1/r7Q6Ut/O5F4D3thSu4dg0OeqP9d/moX1amVUxx+R8m7lYWfVNRRy1Wtv0YLQHiIFmvFSAc+MhO/2m3RqQvUjy+Oce4yabBi95316jdU+NcIYlwdLQhKFn6XCdd/PkWEMElLEDfgYnQ//jOgupoQCn4mIgixkJHO+Ts+NIbEvD66RKh9lTeb+50OOg8vvg05m09QYXA1QxikQxP/016VM9+OcZkYZUCEJS5Y2V82OKIPqMDPB+WU7kiluCOB0zkDAsDcjXy0sDiI4edHk9tCA5fsnx+TvjCPLt63lqQq9T9+5CaAdowYaxPWEInmLV3dO39tkhJgumrEZsa/HX1+wB76pXVI+Yww==]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） 顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 心得：​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 学习方法：​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , …. , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT 个人理解：​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[抽象数据类型数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT 个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … 个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 –多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述：遇到的问题比较多：例如 &gt;&gt; 与 &gt;&gt;&gt;运算符 这里的意思是这样的 &gt;&gt;有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ 其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[数据结构的基本概念五个基本概念：数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件（高达模型上面的一个零件？）。 数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客文章]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX18scM5JRJ8CKnAAeR7A/YJNK2iMZs48ySBrzwNKyG2gC2WEYMvuwCSwfbdTuXE1Oc2zki8SeiK48sOi1A/9e6Uknm4Csg7StKkwsGbv8rHQNrzKbxST8LYsDyBhrjkPOXfyn1/QW4vXLHpQt3B9EgRYIn0OV1uoypcPYd6kso6YY91jRcLezb9NYFXz1NhB+SW3Sj5XEFQp9Q3Ox+DbBMDhHGyP4PaX2V82NpL55S5fFn7sWaYjk0wE2zzXh8ZfURX8YwLMyB6DxKb6pzXMXeGyUp29+RRLKuM/fHnmNtp7UMswR9ZxIA9SrY+Yf/NOz5PUNCPTGWfIuzjgPmPytmjuQmQVKmSr0JRMCbzvkbof5WtZiJ06YhlAoaikO9A3xC0hfd0bw+qrSc5tvAwHazssC37v2fvyDS+XsoL8NEnuqi3dV1AdLyoJzF1bOnfctRJ9OpBiyRm2IWDpaZI5/VijtQRWY2N5YYPnyzLdc6M6S9yxlhUHhrdQiMKVKUqTauicQRTEhftIBvhcJ9Oxb8Wz1SZRRRxQNZy2hpye7X7YZlv7ACVdOME77MM47XMFRwQ00TmQ2yltXHy8noKGoMuqQ9FzdpTcTe5pFq5hTDcTI+Zhh7bueea9hLl1vuR/jcaZPmFFc69mLZsxr+GQtE+7tNLl6xGhDpg=]]></content>
  </entry>
</search>
