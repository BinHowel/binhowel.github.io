<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.4）队列及链式队列的实现]]></title>
    <url>%2F2019%2F07%2F03%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[队列的基本概念及定义 定义： 队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。 特征：先进先出(FIFO,First In First Out) 队列的抽象数据类型 ADT Queue Data 线性关系(a1,a2,…,an) Operation bool push(e) 入队操作 bool pop() 出队 T&amp;front() 获得队首数据 bool empty() 判断队列是否为空 void clear() 清空队列 …….. 链式队列实现算法及思路–（本文未完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-括号匹配]]></title>
    <url>%2F2019%2F07%2F02%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[括号匹配 对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。 实现思路：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。 以（{heheda}[123]())为例。 第一步扫描上方字符串。发现第一个左括号‘(’使其入栈，第二个&#39;{&#39;入栈，发现&#39;}&#39;为右括号，与栈顶数据进行匹配发现，此时栈顶就是&#39;{&#39;与之匹配那么就出栈。（类似消消乐） 具体代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include"LKStack.h"#include&lt;iostream&gt;bool CheckStr(string str) &#123; LkStack&lt;char&gt; stack; cout &lt;&lt; "字符串：" &lt;&lt; str &lt;&lt; " "; for (int i = 0; i &lt; str.length(); i++) &#123; /*如果是左括号那么就入栈，等待匹配*/ if (str[i] == '[' || str[i] == '&#123;' || str[i] == '(') &#123; stack.push_back(str[i]); &#125; /*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/ if (str[i] == ']' || str[i] == '&#125;' || str[i] == ')') &#123; /*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; if (!stack.isEmpty() &amp;&amp; str[i] == ']' &amp;&amp; stack.GetTop() == '[') stack.pop(); if (!stack.isEmpty() &amp;&amp; str[i] == '&#125;' &amp;&amp; stack.GetTop() == '&#123;') stack.pop(); if (!stack.isEmpty()&amp;&amp; str[i] == ')' &amp;&amp; stack.GetTop() == '(') stack.pop(); &#125;&#125; /*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/ if (stack.isEmpty()) &#123; cout &lt;&lt; "括号匹配成功！" &lt;&lt; endl; return true; &#125; else &#123; cout &lt;&lt; "括号不匹配！" &lt;&lt; endl; return false; &#125; &#125;int main() &#123; CheckStr("12312()()[]&#123;&#123;&#125;&#125; "); CheckStr("&#125;"); CheckStr("[()(),hello&#123;&#125;]"); CheckStr("test"); CheckStr("()(&#125;[]");&#125; 实验结果： –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法性能分析]]></title>
    <url>%2F2019%2F07%2F02%2F%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[算法性能分析好的算法应当满足 正确性：算法应能满足具体问题的需求 可读性：算法应应易于阅读和理解 健壮性：输入数据非法时，算法也能适当作出反应或进行处理 高效性：算法执行时间短，占用存储空间少 时间复杂度 程序：算法在计算机上的实现 程序的执行时间取决于如下因素： 算法本身 问题规模 编程语言 硬件性能 选择一个“基本操作”，分析基本操作执行的次数 用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。 算法的时间复杂度为：和f(n)同阶的简化无穷大量T(n) = O(f(n))]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表应用- 两数相加]]></title>
    <url>%2F2019%2F06%2F29%2F%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[两数相加 问题： 给定两个非空链表来表示两个非负整数。位数按照逆序方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 输出: 7 -&gt; 0 -&gt; 8 原因: 342 + 465 = 807 一些算法的思路： 先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数 12345678Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125; 实现思路：对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位……以此类推直到把所以值都后插入链表中。 转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。 123456789101112int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125; 实现思路：因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。 最后一步把相加的结果再ToLKlist()用变为链表。 具体实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include&lt;iostream&gt;using namespace std;class Lklist &#123; struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: Lklist() &#123; head = new LNode; head-&gt;next = nullptr; length = 0; &#125; /*前插操作*/ bool push(int e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; length++; return true; &#125; /*后插操作*/ bool push_back(int e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while (p-&gt;next) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e; q-&gt;next = 0; p-&gt;next = q; length++; return true; &#125; /*删除第一个数据操作*/ bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; /*获得第一个元素*/ int getfirst() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空链表*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; /*获得链表长度*/ int Getlength() &#123; return length; &#125;&#125;;/*转换为数字*/int number(Lklist num) &#123; int result = 0; int len = num.Getlength(); int i = 1; while (!num.IsEmpty()) &#123; result += num.getfirst() * i; num.deletefirst(); i *= 10; &#125; return result;&#125;/*数字转换为链表*/Lklist ToLKlist(int r) &#123; Lklist stack; while (r) &#123; stack.push(r % 10); r /= 10; &#125; return stack;&#125;/*两数相加核心代码*/Lklist TwoNumberAdd(Lklist num1, Lklist num2) &#123; int a = number(num1); int b = number(num2); return ToLKlist(a + b);&#125;int main() &#123; int a; int b; Lklist s; cout &lt;&lt; "请输入第一个数： "; cin &gt;&gt; a; cout &lt;&lt; endl &lt;&lt; "请输入第二个数： "; cin &gt;&gt; b; s = TwoNumberAdd(ToLKlist(a), ToLKlist(b)); int i = 0; int len = s.Getlength(); while (!s.IsEmpty()) &#123; cout &lt;&lt; s.getfirst(); if (i &lt; len - 1) &#123; cout &lt;&lt; "-&gt;"; i++; &#125; s.deletefirst(); &#125;&#125; 实验结果: 标准参考答案：1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution &#123;public : ListNode* addTwoNumber(ListNode* l1, ListNode* l2) &#123; int x = 0; int y = 0; int carry = 0; int sum = 0; ListNode* h = nullptr; ListNode** t = &amp;h; while (l1!=nullptr||l2!=nullptr) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; ListNode* node = new ListNode(sum % 10); *t = node; t = (&amp;node-&gt;next); carry = sum / 10; &#125; if (carry &gt; 0) &#123; ListNode* node = new ListNode(carry % 10); *t = node; &#125; return h;&#125;private: int getValueAndMoveNext(ListNode*&amp; l) &#123; int x = 0; if (l != nullptr) &#123; x = l-&gt;val; l = l-&gt;next; &#125; return x; &#125;&#125;; 参考答案的核心算法思路： ListNode* addTwoNumber(ListNode* l1, ListNode* l2) 这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。 第一步： 取出两个链表中的第一个元素2和5。 第二步： 让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7 第三步： 把结果7模上10并push_back进结果链表。此时结果为7并且是结果链表的第一个数据 然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。 第四步： 循环上面的步骤 第二次循环中4和6的和是10，模上10取余后的结果为0，push_back进结果链表作为第二个数据 因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位 总体来看，首先因为题目描述为 位数按照逆序方式储存，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。 个人实现代码优化后：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;iostream&gt;using namespace std;class LKlist &#123;public: struct LNode &#123; int data; LNode* next; &#125;; LNode* head; int length;public: LKlist() &#123; head = new LNode(); head-&gt;next = nullptr; length = 0; &#125; bool push_back(int e) &#123; LNode* p = new LNode; LNode* t = head; p-&gt;data = e; while (t-&gt;next) &#123; t = t-&gt;next; &#125; t-&gt;next = p; p-&gt;next = nullptr; length++; return true; &#125; bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125; bool deletefirst() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; length--; return true; &#125; int getfirst() &#123; return head-&gt;next-&gt;data; &#125; int Getlength()&#123; return length; &#125;&#125;;int getValueAndMoveNext(LKlist&amp; l) &#123; int x = 0; LKlist::LNode* T; if (l.head-&gt;next) &#123; x = l.head-&gt;next-&gt;data; T = l.head-&gt;next-&gt;next; delete l.head-&gt;next; l.head-&gt;next = T; &#125; return x;&#125;LKlist addTwoNumber(LKlist&amp; l1, LKlist&amp; l2) &#123; int x = 0; int y = 0; int sum = 0; int carry = 0; LKlist h; while (!l1.IsEmpty() || !l2.IsEmpty()) &#123; x = getValueAndMoveNext(l1); y = getValueAndMoveNext(l2); sum = carry + x + y; h.push_back(sum % 10); carry = sum / 10; &#125; if (carry &gt; 0) &#123; h.push_back(carry % 10); &#125; return h;&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈的应用-进制的转换]]></title>
    <url>%2F2019%2F06%2F29%2F%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数制转换 以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。 例如： 结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便 123456789101112void changeNumber(int n,int b)&#123;//n为十进制数，b为将要转的进制数 Stack&lt;int&gt; stack；//定义一个栈 while(n)&#123; stack.push(n%b);//获取余数并入栈 n = n/b;//更新n &#125; while(!stack.isEmpty())&#123;//出栈并输出。直至为空栈 cout &lt;&lt; stack.getTop();//获得栈顶元素 stack.pop();//每输出一个就出栈一个数据 &#125; &#125; 代码实现:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;iostream&gt;using namespace std;/***********链栈实现************/template&lt;typename T&gt;class Stack &#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: Stack() &#123; head = new LNode; head-&gt;next = nullptr; &#125; /*入栈操作*/ bool push(T e) &#123; LNode* p = new LNode; if (!p)return false; p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!head-&gt;next) return false; LNode* p = head-&gt;next-&gt;next; delete head-&gt;next; head-&gt;next = p; return true; &#125; /*获得栈顶元素*/ T getTop() &#123; return head-&gt;next-&gt;data; &#125; /*判断是否为空栈*/ bool IsEmpty() &#123; return head-&gt;next == nullptr; &#125;&#125;;/*********************************//*数据转换*/void ChangeNumber(int n,int b) &#123; Stack&lt;int&gt; stack; int result = 0; while (n) &#123; stack.push(n % b); n = n / b; &#125; while (!stack.IsEmpty()) &#123; cout &lt;&lt; stack.getTop(); stack.pop(); &#125; &#125;int main() &#123; ChangeNumber(75, 8);&#125; 实验结果: –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ vector容器常用操作和内存释放]]></title>
    <url>%2F2019%2F06%2F29%2FC-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE%2F</url>
    <content type="text"><![CDATA[一、对字符串的处理 对字符串每一个字符进行遍历修改操作 12345678910111213141516#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;int main() &#123; string ifo = "ShuHaoHwang"; for (auto iter = ifo.begin(); iter != ifo.end(); iter++) &#123; *iter = toupper(*iter); &#125; cout &lt;&lt; ifo &lt;&lt; endl;&#125; 二、查找配置项信息及内存释放 用迭代器及vector容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用vector进行内存释放。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;using namespace std;struct conf&#123; char confname[40];//配置项名 char confid[100];//配置项信息&#125;;char* getifo(vector&lt;conf*&gt;&amp; a, const char* s) &#123; vector&lt;conf*&gt;::iterator iter; for (iter = a.begin(); iter != a.end(); iter++) &#123; if (strcmp((*iter)-&gt;confname, s) == 0) &#123;//如果找到对应配置项名，就返回其配置项的信息 return (*iter)-&gt;confid; &#125; &#125; return nullptr;&#125;int main() &#123; conf* server = new conf; conf* server2 = new conf; /*配置项名1*/ strcpy_s(server-&gt;confname,sizeof(server-&gt;confname),"ServerName"); /*配置信息1*/ strcpy_s(server-&gt;confid, sizeof(server-&gt;confid), "1区"); /*配置项名2*/ strcpy_s(server2-&gt;confname, sizeof(server2-&gt;confname), "ServerID"); /*配置信息2*/ strcpy_s(server2-&gt;confid, sizeof(server2-&gt;confid), "10000"); vector&lt;conf*&gt; cinfo; cinfo.push_back(server);//把结构指针放入容器 cinfo.push_back(server2); vector&lt;conf*&gt;::iterator iter; /*查找信息*/ char* temp; temp = getifo(cinfo, "ServerName"); if (temp != nullptr) &#123; cout &lt;&lt; "ServerName: " &lt;&lt; temp &lt;&lt; endl; &#125; /*释放内存*/ for (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123; delete (*iter);//因为*iter是一个指针 &#125; cinfo.clear();//最后清空容器 &#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++迭代器的失控范例和解决方案]]></title>
    <url>%2F2019%2F06%2F28%2FC-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[迭代器失控范例情形一： 很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对vector容器进行push_back()操作、对vector容器进行插入操作、删除操作。都会使end()函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。 例如： 1234567891011vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125;//或者下面这种情况for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.insert(1,100);&#125; 实验结果： 在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。 123456789101112vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2); break;//添加元素后直接跳出&#125;//再进行一次迭代器遍历for(iter;iter!=arrays.end();iter++)&#123; cout &lt;&lt; *iter &lt;&lt;endl; arrays.push_back(2);&#125; 实验结果： 如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。 123456789101112131415vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; iter = arrays.insert(iter,100); if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： 实现思路:因为arrays.insert()的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以end()的值没有发生变化)。多次更新迭代器的起始begin()的值，从而使迭代器类型的指向不会失控。 同样的如果使用push_back(): 123456789101112131415161718vector&lt;int&gt; arrays&#123;12,35,56,78&#125;;vector&lt;int&gt;::iterator iter = arrays.begin();int i = 0//用来控制插入次数（循环次数） while(iter != arrays.end())&#123; arrays.push_back(100);//不断更新iter的值起始 iter = arrays.begin() if(i &gt; 5) break; iter++; i++; &#125;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; cout &lt;&lt; *iter &lt;&lt; endl;&#125; 实验结果： 总体：即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。弊端：麻烦，代码较繁杂。 情形二： 如果在某个时候要对容器进行清空操作，多数下使用容器自带的clear()函数即可。但在某些特殊情况下，要对vector容器的某些元素进行删除，就得使用容器自带的` `函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。 例如： 12345vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter;for(iter = arrays.begin(); iter != arrays.end(); iter++)&#123; arrays.erase(iter);&#125; 使用结果 如果真的要进行这样的操作可以这样做： 12345678910vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(iter != arrays.end())&#123; iter = arrays.erase(iter);//直接让erase函数来更新迭代器指向的位置&#125;//for版for(iter; iter != arrays.end(); )&#123; iter = arrays.erase(iter);&#125; 实验结果： 实现思路：因为erase()函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。 此情形更好的实现版本 1234567vector&lt;int&gt; arrays&#123;12,35,56,78&#125;vector&lt;int&gt;::iterator iter = arrays.begin();while(!arrays.empty())&#123;//如果不为空就继续 auto iter = arrays.begin();//每开始一轮循环就更新迭代器的指向。 arrays.erase(iter);&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>技术类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.6）迭代器]]></title>
    <url>%2F2019%2F06%2F26%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.3）链栈]]></title>
    <url>%2F2019%2F06%2F26%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88%2F</url>
    <content type="text"><![CDATA[栈的链式实现算法及思路 栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。 入栈 思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。 具体实现： 12345678bool push_back(T e)&#123; LNode*p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true;&#125; 出栈 思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈) 具体实现： 123456789bool pop()&#123; LNode* p = head-&gt;next; if(!head-&gt;next)&#123; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false;&#125; 析构函数 思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。 具体实现： 12345678~LkStack()&#123; LNode*p = head-&gt;next; while(p)&#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125;&#125; 具体代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkStack&#123; struct LNode &#123; T data; LNode* next; &#125;; LNode* head;public: LkStack() &#123; head = new LNode(); head-&gt;next = nullptr; &#125; ~LkStack() &#123; LNode* p = head-&gt;next; while (p) &#123; head-&gt;next = p-&gt;next; delete p; p = head-&gt;next; &#125; delete head; &#125; /*入栈操作*/ bool push_back(T e) &#123; LNode* p = new LNode(); p-&gt;data = e; p-&gt;next = head-&gt;next; head-&gt;next = p; return true; &#125; /*出栈操作*/ bool pop() &#123; if (!isEmpty()) &#123; LNode* p = head-&gt;next; head-&gt;next = p-&gt;next; delete p; return true; &#125; return false; &#125; /*是否为空*/ bool isEmpty() &#123; if (!head-&gt;next) return true; return false; &#125; /*获得栈顶数据*/ T&amp; GetTop() &#123; return head-&gt;next-&gt;data; &#125;&#125;;int main() &#123; LkStack&lt;int&gt; stack; cout &lt;&lt; "入栈了数据1" &lt;&lt;endl; stack.push_back(1); cout &lt;&lt; "入栈了数据2" &lt;&lt;endl; stack.push_back(2); cout &lt;&lt; "入栈了数据3" &lt;&lt;endl; stack.push_back(3); cout &lt;&lt; "入栈了数据4" &lt;&lt;endl; stack.push_back(4); cout &lt;&lt; "入栈了数据5" &lt;&lt;endl; stack.push_back(5); while (!stack.isEmpty()) &#123; cout &lt;&lt; stack.GetTop() &lt;&lt; endl; stack.pop(); &#125;&#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++个人学习路线]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.5）vector容器详解]]></title>
    <url>%2F2019%2F06%2F25%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.2）顺序栈的实现]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序栈的实现与算法思路（以char数据类型为例） 入栈push(char e)； 思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。 具体实现： 1234567bool SqStack::push(char e) &#123; if ((top - data) == capacity)//容量满了就进行扩容 realloc(); *top = e; top++;//直接修改并移动top指针 return true;&#125; 出栈pop(); 思路：在没有空栈的情况下，直接让top自减一。 具体实现： 1234567bool SqStack::pop() &#123; if (top == data)//判断是否空栈。 return false; top--; return true; &#125; 顺序栈的实现情况 出栈(完成) push(char e) 入栈(完成) pop() 扩容(完成) realloc() 遍历？(完成) Traverse(void(*fb)(char&amp; e)) 获得栈顶数据(完成) GetTop() 是否为空栈(完成) IsStackEmpty() 获得栈总容量(完成) GetCapacity() 具体代码： 123456789101112131415161718192021222324252627282930313233343536//Sqstack.h#ifndef _SQSTACK_H_#define _SQSTACK_H_ class SqStack &#123; char* top = nullptr; char* data = nullptr; int capacity;public: /*构造函数*/ SqStack(int c = 5); /*入栈操作*/ bool push(char e); /*出栈操作*/ bool pop(); /*遍历*/ void Traverse(void(*fb)(char&amp;e)); char GetTop(); bool IsStackEmpty(); int GetCapacity();private: /*扩容*/ bool realloc();&#125;; /*打印*/ void Print(char&amp; e);#endif // !_SQSTACK_H_ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//Sqstack.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;/*构造函数*/SqStack::SqStack(int c) &#123; capacity = c;//默认给一个初值 data = new char[capacity]; top = data;&#125;/*扩容*/bool SqStack::realloc() &#123; char* n_data = new char[2 * capacity]; for (int i = 0; i &lt; capacity; i++) &#123; n_data[i] = data[i]; &#125; delete[]data; data = n_data; top = data + capacity;//这里要注意top也有重新赋值新的地址 capacity *= 2; cout &lt;&lt; "扩容成功！！" &lt;&lt; endl; return true;&#125;/*入栈操作*/bool SqStack::push(char e) &#123; if ((top - data) == capacity) realloc(); *top = e; top++; return true;&#125;/*出栈操作*/bool SqStack::pop() &#123; if (top == data) return false; top--; return true; &#125;/*遍历*/void SqStack::Traverse(void(*fb)(char&amp; e)) &#123; for (int i = 0; i &lt; top - data; i++) &#123; fb(data[i]); &#125; &#125;/*获得栈顶元素*/char SqStack::GetTop() &#123; return*(top - 1);&#125;/*判断是否空栈*/bool SqStack::IsStackEmpty() &#123; if (top == data) return true; return false;&#125;/*获得容量*/int SqStack::GetCapacity() &#123; return capacity;&#125;/*打印*/ void Print(char&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " "; &#125; 123456789101112131415161718192021222324252627//main.cpp#include&lt;iostream&gt;#include"Sqstack.h"using namespace std;int main() &#123; SqStack stack; cout &lt;&lt; "入栈一个数据a" &lt;&lt; endl; stack.push('a'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据b" &lt;&lt; endl; stack.push('b'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据c" &lt;&lt; endl; stack.push('c'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据d" &lt;&lt; endl; stack.push('d'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据e" &lt;&lt; endl; stack.push('e'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "入栈一个数据f" &lt;&lt; endl; stack.push('f'); stack.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "出栈一个数据" &lt;&lt; endl; stack.pop(); stack.Traverse(Print); cout &lt;&lt; endl; &#125; –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（3.1）栈]]></title>
    <url>%2F2019%2F06%2F24%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88%2F</url>
    <content type="text"><![CDATA[初识栈 定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。 允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。 不含任何数据元素的栈称为空栈。 特点： 先进后出 后进先出 注意： 栈又被称为后进先出(Last in First out)的线性表 栈的插入操作，被称为进栈，也称压栈、入栈(push) 栈的删除操作也称出栈，也称为弹栈(pop) 示意图： 栈的抽象数据类型 ADT 栈(Stack) Data 栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系， Operation InitStack；初始化，创建一个空栈 destoryStack; 销毁栈 StackEmpty；判断是否为空 clearStack； 清空栈 getTop；获得栈顶元素 push 压栈 pop 出栈 stacklength；获得栈的长度 endADT 注意：栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用 –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.4）函数新特性、const关键字精解]]></title>
    <url>%2F2019%2F06%2F23%2FC-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[顺序结构的逆置算法与思路： 夹逼法： 思路：通过对数组头部和尾部相互对调并向中间靠近。 实现：(假设以整型为数据类型实现) 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0; i &lt; length/2; i++)&#123;//注意：length要除于2！！！！length要除于2！！！！ temp = datas[i]; datas[i] = datas[length - 1 - i];//前后换位置并向中间靠近 datas[length - 1 - i] = temp; &#125; return true;&#125; 注意：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。 算法优化： 12345678910//length为顺序表总长度。bool Convert()&#123; int temp;//用来对换位置时使用的临时变量 for(int i = 0 ，j = length - 1; i &lt; j; i++,j--)&#123; temp = datas[i]; datas[i] = datas[j];//前后换位置并向中间靠近 datas[j] = temp; &#125; return true;&#125; 此方法更能体现夹逼法。 链式存储结构的逆置算法与思路： 思路：把头结点和数据结点断开，然后把数据结点一个个前插进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：p-&gt;next = head-&gt;next;head -&gt;next = p;其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。 实现1(单向链表)： 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 实现2(循环链表) 12345678910111213141516bool Convert()&#123; LNode* p = head-&gt;next; LNode* temp = nullptr;//临时指针 head-&gt;next = nullptr; while(p!=head)&#123; temp = p-&gt;next;//获取下一个数据的值 p-&gt;next = head-&gt;next;//前插 head-&gt;next = p; p = temp;//移动指针到下一个数据 &#125; return true;&#125; 前后只是循环条件发生变化。 –（本文完）&lt;原创&gt;&lt;待增添修改&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较]]></title>
    <url>%2F2019%2F06%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[顺序结构与链式结构的比较： 顺序结构 链式结构 按序号下标读取 直接读取通过A[index]即可获的数据+++ 要从头开始找，找的下标才能获取数据— 内存实验 要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容可能没有足够的空间或多出空间— 按需要分配，想要一个就一个可利用很小的碎片空间+++ 插入元素 插入一个元素需要不断移动后面的元素，速度慢，消耗相比大— 直接插入，速度快，消耗相比小+++ 删除 需要移动元素— 直接删除+++ –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 其他测试代码详情：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[体现循环链表的优点之从指定结点开始遍历​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： 小结：​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; 链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; 循环链表具体代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; 销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif 为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？—-对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以随便include定义的头文件了避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[命名空间的基本概念简介基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； 情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中“ : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用命名空间名::实体名（函数名）的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>学习总结</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() …… 对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; 链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) 代码详细123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e ………. 一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; 根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() 代码详细：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX19tyj87LM84xYDap60l/adaKjcdkf0Mmys20jq5gmVGsf+pWdC2YAkMViaxSac23Nvk2PBlz7Vnj+KhGkWTWfxj2gIePgdps0n8nXwgY3uxRodvIsH4o/4xNcp+oPe0F30cBt+bYEbI+ILpkEfpFRwTzg9ESyJGUwxEw1y8LjmsaalsvG7BO2bedFPYV+4H8l3/3xiy3JQ/qr+KzWu1VIpgGsqMARzW/s4M18k1p3wkZ7lzvORqxJlLLBgCZh1PerBQAEz216J+gENraDQ1tyuFTcvEOkATgiqinjHCygIA//0TgFY1LlSWZ0w5OvAFc9cJhcrFncGMjQWI+5taiWM/n0tu9+uFZudP9RABUukp8bb0KSqYblXw1v4Ryoqmhim1uUAnHRmqEdF1hrlHdCuPL99pN1/8+/x2IvD9qeBri0Ub47almmDihozsSVjn0cgXMtKvR/G7CWhGIF4auoedds4HfJORisavq7BEEzkL/s6voGZ/kfolMpnvI2MgUxH13Tx/r7hauZXO8oujH7Od4473q0FJfa9CCQGjEEjL39BqynnnpuZWMDtIxuQzs2XDgdPOoZQXAvY/lw3zkxBuq9y+umnKu6IupsRtwQe8afSHztwaHVcz+7BfzT4sr1S+TjwUFpdYJviDyK1aZWfSupXVtgDg9WhKwP3tfANiF9uBIe9HfbKdZgmrIPNMiqxR1g0XP7Ao5GtbESTcw592lrzlabCNhbjoUIYlVI7zyxt61j55NE25hzBytHoinDASNIUkU1t37GlpayhKttMzdmaN7rXagSWQzCLBvtLehZtB3GoyVu7yVmWi7yJP089igg5PTHJhMI2kzUmEYmKokh/1azO+ABfWdTpVD4FNmGtIJsP5+STgY/d5B/SLpfNvbMxYs/UcuJYUFtjIVS3t8rMJl4CIQUU3uJ9bHu3PSSNZQRo28lVg5dF86gyuOSlWrbHLRzFr/cBA92/FPWhMnjgBfBfT3Q2NK5v7xSpbv/8dZD9GqCTG0PyGOHm9gp9TM5NhuZXPDIGAvnc6B2Dh7NNTL2ST2dt3x5q4RO6Xi3M8pKfpQo5czLfnmM1jkpm3dS7b/kuI5OmTl5RfO5yluXTpOVnOuTgpgyinZiHZErGyOWaFP7i2yhfE98v68+fVXobbLD+8kGIWo/7ttHdRTcldk73UXOAQcSYLDkOpfHDVeMAYnPb2vIqUXNYGq5QsfLI4mXJkYb5gf6mwWaDINgXsSfFyb14w2T4580JX8EjGuSxx4LqiUc+4XBRdBs18/Rhtk6gj8Q==]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） 顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 心得：​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 学习方法：​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , …. , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT 个人理解：​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[抽象数据类型数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT 个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … 个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 –多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述：遇到的问题比较多：例如 &gt;&gt; 与 &gt;&gt;&gt;运算符 这里的意思是这样的 &gt;&gt;有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ 其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[数据结构的基本概念五个基本概念：数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件（高达模型上面的一个零件？）。 数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[置顶]欢迎来到ShuHaoHwang的博客！！]]></title>
    <url>%2F2019%2F06%2F11%2F%5B%E7%BD%AE%E9%A1%B6%5D%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%9C%AC%E5%8D%9A%E4%B8%BB%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[本博客将先会以个人的学习总结为主，之后将更新一些技术性的文章，欢迎与博主进行探讨、一起思维碰撞。在吉珠的小伙伴还可以直接找博主哦！ 欢迎留言，博主在有空之余将一一进行查看并回复。]]></content>
  </entry>
</search>
