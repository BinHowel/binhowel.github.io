<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较]]></title>
    <url>%2F2019%2F06%2F21%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[顺序结构与链式结构的比较： 顺序结构 链式结构 按序号下标读取 直接读取通过A[index]即可获的数据+++ 要从头开始找，找的下标才能获取数据— 内存实验 要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容可能没有足够的空间或多出空间— 按需要分配，想要一个就一个可利用很小的碎片空间+++ 插入元素 插入一个元素需要不断移动后面的元素，速度慢，消耗相比大— 直接插入，速度快，消耗相比小+++ 删除 需要移动元素— 直接删除+++ –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr]]></title>
    <url>%2F2019%2F06%2F21%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%2F</url>
    <content type="text"><![CDATA[此文章是加密文章，请输入密码后查看. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>C++</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.7）双向链表]]></title>
    <url>%2F2019%2F06%2F20%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表 与单向链表的不同之处： 单向链表 双向链表 只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。 相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到 双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。 根据双向链表具有前后两个指针的这个特性 在插入算法和删除算法中都有很好的优势 插入算法： 12345678910111213141516171819202122bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index)//直接定位到要插入的位置即可 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node;//指定位置的前一个数据的next指针指向新插入的数据地址 node-&gt;prior = p-&gt;prior;//新插入数据的prior指针指向原来位置数据的前一个数据地址 p-&gt;prior = node;//插入位置的前一个数据更变为新插入的数据地址 node-&gt;next = p;//新插入数据的next指针指向插入位置的地址 length++;//链表总长度加1 return true; &#125; 删除算法 12345678910111213141516bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index)//直接定位到要删除的数据结点 &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next;//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址 p-&gt;next-&gt;prior = p-&gt;prior;//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据 delete p;//释放待删除数据的空间 return true; &#125; 删除算法即可以直接跳过待删除数据结点。 其他测试代码详情：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class BSLkList &#123; struct LNode &#123; T data; LNode* next; LNode* prior; &#125;; LNode* head; LNode* rear; int length;public: BSLkList() &#123; head = new LNode(); head-&gt;next = head; head-&gt;prior = head; rear = head; length = 0; &#125; /*后插操作*/ bool Push_back(T e) &#123; length++; LNode* node = new LNode(); LNode* p = head; if (!node) return false; while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; node-&gt;data = e; p-&gt;next = node; node-&gt;next = head; node-&gt;prior = p; rear = node; return true; &#125; /*插入操作*/ bool InsertElement(int index, T e) &#123; LNode* node = new LNode(); LNode* p = head; node-&gt;data = e; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = node; node-&gt;prior = p-&gt;prior; p-&gt;prior = node; node-&gt;next = p; length++; return true; &#125; /*删除操作*/ bool DeleteElement(int index) &#123; LNode* p = head; int j = 0; while (j &lt; index) &#123; p = p-&gt;next; j++; &#125; p-&gt;prior-&gt;next = p-&gt;next; p-&gt;next-&gt;prior = p-&gt;prior; delete p; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; e)) &#123; LNode* p = head-&gt;next; while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*指定位置遍历操作*/ void Traverse(T e, void(*fb)(T&amp; e)) &#123; LNode* s = GetDataAddress(e); LNode* p = s; do &#123; if(s!=head) fb(s-&gt;data); s = s-&gt;next; &#125; while (s != p); &#125; private: /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head; while (p-&gt;next != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;&#125;;template&lt;typename T&gt;void Print(T&amp;e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; BSLkList&lt;char&gt; list; cout &lt;&lt; "后插入了一个A数据" &lt;&lt; endl; list.Push_back('A'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个B数据" &lt;&lt; endl; list.Push_back('B'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插入了一个C数据" &lt;&lt; endl; list.Push_back('C'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入了一个p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "删除了3号位置的数据" &lt;&lt; endl; list.DeleteElement(3); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了1号位置的数据" &lt;&lt; endl; list.DeleteElement(1); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; endl; cout &lt;&lt; "从B数据开始遍历" &lt;&lt; endl; list.Traverse('B', Print); cout &lt;&lt; endl;;&#125; 测试效果图： –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[体现循环链表的优点之从指定结点开始遍历​ 上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表可以从指定的结点开始遍历整个链表，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。 这里通过遍历函数来体现这一特性。 123456789101112131415161718192021222324252627282930313233//查找链表中的某一个元素并获得它的地址LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125;/*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//获得指定结点的地址 LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head)//越过头结点 fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125; 思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。 具体实验代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得指定结点地址操作*/ LNode* GetDataAddress(T e) &#123; LNode* p = head-&gt;next; while (p != head) &#123; if (p-&gt;data == e) return p; p = p-&gt;next; &#125; return NULL; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125; /*从某一个结点进行遍历*/ void Traverse(T e,void(*fb)(T&amp; t)) &#123; LNode* p = GetDataAddress(e);//从头结点开始遍历每一个元素的data LNode* q = p; if (!p) &#123; cout &lt;&lt; "链表为空" &lt;&lt; endl; return; &#125; do &#123; if(p!=head) fb(p-&gt;data); p = p-&gt;next; &#125; while (p != q); &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "从b数据开始遍历链表； " &lt;&lt; endl; list.Traverse('b', Print); cout &lt;&lt; endl; cout &lt;&lt; "从c数据开始遍历链表； " &lt;&lt; endl; list.Traverse('c', Print); cout &lt;&lt; endl; &#125; 运行结果： 小结：​ 这里只是单单用遍历体现了循环链表的这个特点。 ​ 其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表]]></title>
    <url>%2F2019%2F06%2F19%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[循环链表 相较于非循环链表 在非循环链表中，最后一个元素的next指针是空指针，造成浪费。 每次寻找后继指针的时候都要重新从头开始找。 循环链表 尾指针直接指向表头，使最后一个元素的next指针被利用起来。 从每一个元素开始都能遍历表中每一个元素。 便于类似于链表合并这样的算法实现。 其他不同： 循环链表与非循环链表的判断条件发生了变化 判断的具体解释（循环链表） 判断到前驱结点： 1234while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; ​ 因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。 判断到头结点： 1234while (p != head) &#123; p = p-&gt;next; &#125; ​ 这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。 循环链表的尾指针 循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。 尾指针的好处： 找head指针非常方便。rear-&gt;next的值便是head。 便于链表的合并。 代码实现空表时的尾指针： 1234567891011121314151617181920212223class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear;//尾指针 int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; head-&gt;next = head; rear = head-&gt;next;//空表时的尾指针 &#125;&#125; 当插入一个元素后尾指针的变化 123456789101112131415161718192021//从链表最后面插入元素bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q;//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的 q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 return true; &#125; 链表合并的实现: 具体思路（链表2合并到链表1）：先获得链表2的头结点的地址（即：链表2的指针head）然后让链表1的head指针指向链表2的指针head-&gt;next指向的地址（即：链表2的第一个元素的地址），然后让链表2的指针rear（尾指针）指向链表1的head-&gt;指向的地址（即指向链表1的第一个元素）最后delete 链表2的head指针。完成合并操作。 合并前： 合并后： 具体实现： 1234567891011121314bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head;//获得链表2的head指针 s-&gt;rear-&gt;next = head-&gt;next;//让链表2的尾指针指向链表1的第一个元素 head-&gt;next = t_head_of_s-&gt;next;//让链表1的head-&gt;next指针指向链表1第一个元素 delete t_head_of_s;//释放原链表2的head指针 return true;&#125; 循环链表具体代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class CLkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 LNode* rear; int length;public: /*构造函数*/ CLkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = head; rear = head-&gt;next; &#125; /*往后插入操作*/ bool push_back(T e) &#123; length++; LNode* p = head-&gt;next; LNode* q = new LNode(); while (p-&gt;next != head) &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 rear = q; q-&gt;next = head; p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 //length++; return true; &#125; /*获得链表长度*/ int GetLength() &#123; return length; &#125; /*插入元素操作*/ bool InsertElement(int index,T e) &#123; LNode* p = head; LNode* q = new LNode(); int j = 0; while ( j &lt; index-1) &#123; p = p-&gt;next; j++; &#125; q-&gt;data = e; q-&gt;next = p-&gt;next; p -&gt; next = q; length++; return true; &#125; /*删除操作（下标型）*/ bool DeleteElement(int index) &#123; LNode* p = head; LNode* q = head-&gt;next; int j = 0; while (j &lt; index-1) &#123; p = p -&gt; next; q = q -&gt; next; j++; &#125; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; /*删除操作（找值型）*/ bool DeleteElement(T e) &#123; LNode* p = head; LNode* q = head-&gt;next; while (q != head) &#123; if (q-&gt;data == e) &#123; p-&gt;next = q-&gt;next; delete q; length--; return true; &#125; p = p-&gt;next; q = q-&gt;next; &#125; return false; &#125; /*清空链表操作*/ bool ListClean() &#123; length = 0; LNode* p = head-&gt;next; LNode* q; while (p-&gt;next != head)//定位到头结点之前，清空初头结点的外的其他数据空间 &#123; q = p -&gt; next; delete p; p = q; &#125; head-&gt;next = head; return true; &#125; /*合并操作*/ bool ListCombine(CLkList* s) &#123; LNode* t_head_of_s = s-&gt;head; s-&gt;rear-&gt;next = head-&gt;next; head-&gt;next = t_head_of_s-&gt;next; length += s-&gt;length; delete s-&gt;head; return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T &amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p != head) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp; e) &#123; cout &lt;&lt; e &lt;&lt; " ";&#125;int main() &#123; CLkList&lt;char&gt; list; cout &lt;&lt; "后面插入了一个a数据" &lt;&lt; endl; list.push_back('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个b数据" &lt;&lt; endl; list.push_back('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个c数据" &lt;&lt; endl; list.push_back('c'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个d数据" &lt;&lt; endl; list.push_back('d'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在2号位置插入p数据" &lt;&lt; endl; list.InsertElement(2, 'p'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除测试 " &lt;&lt; endl; cout &lt;&lt; "2号位置的数据被删除了" &lt;&lt; endl; list.DeleteElement(2); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据a删除了" &lt;&lt; endl; list.DeleteElement('a'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "数据b删除了" &lt;&lt; endl; list.DeleteElement('b'); list.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2: " &lt;&lt; endl; CLkList&lt;char&gt; list2; cout &lt;&lt; "后面插入了一个v数据" &lt;&lt; endl; list2.push_back('v'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个n数据" &lt;&lt; endl; list2.push_back('n'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后面插入了一个m数据" &lt;&lt; endl; list2.push_back('m'); list2.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "list2合并到list" &lt;&lt; endl; list.ListCombine(&amp;list2); cout &lt;&lt; "合并后：" &lt;&lt; endl; list.Traverse(Print); cout &lt;&lt; endl; //清空list list.ListClean(); cout &lt;&lt; "清空完成" &lt;&lt; endl; &#125; 销毁链表与清空链表的区别： 销毁链表 清空链表 具体解释 包括头结点全部清空全部delete 保留头结点其他数据元素全部delete清空 产生的后果 头指针丢失，链表无法使用 清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.2)auto、头文件防卫]]></title>
    <url>%2F2019%2F06%2F18%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[Auto auto：变量的自动类型推断。 可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（声明时要初始化） 自动推断发生在编译期间，所以使用auto不会造成程序效降低。 头文件防卫式声明 语法： 123456#ifndef _文件名_H#define _文件名_H内容#endif 为什么要用到头文件防卫式声明？ 目的：为了防止头文件中多重、重复定义内容。 情景假设： 假设一个工程里面有两个个头文件.h文件。里面都有自己的内容 123//head1.hint number1 = 8； 123//head2.hint number2 = 5; 1234567891011//main.cpp#include&lt;iostream&gt;#include"head1.h"#include"head2.h"using namespace std;int main()&#123; cout &lt;&lt; number1 &lt;&lt; endl; cout &lt;&lt; number2 &lt;&lt; endl;&#125; 编译运行情况： 假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现： 错误原因：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h意味着又重复定义了一次head1.h里面的内容从而造成head1.h里的number1重复定义的错误。 如何解决？—-对头文件进行防卫式定义 即对head1.h文件编辑 1234567//head1.h#ifndef _HEAD1_H//如果head1.h没有被定义那么就执行下面的内容#define _HEAD1_H//定义head1.hint number1 = 8；#endif//结束如果 当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而避免了头文件重复定义的情况。 结论：所以以后定义头文件的时候都可以进行防卫式定义然后就可以随便include定义的头文件了避免这些错误了。 –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>C++</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++进阶学习总结-(1.1)命名空间]]></title>
    <url>%2F2019%2F06%2F17%2FC%2B%2B%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[命名空间的基本概念简介基本概念 命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名。 可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。 命名空间定义： 1234namespace 命名空间名&#123; void fb()&#123;&#125;//函数 ....&#125; 命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明； 情形 假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现： 找到一个或多个多重定义的符号 void_cdecl Print(void)已在project2.obj中定义的错误 如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用命名空间来解决具体： 123456//project1.cppnamespace ZhangSan &#123; void Print() &#123; cout &lt;&lt; "这是张三的Print函数" &lt;&lt; endl; &#125;&#125; 这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 命名空间名::实体名（函数名）的方法调用张三的Print函数 （其中“ : : “是作用域运算符）。 12345int main() &#123; ZhangSan::Print();//张三的 Print();//李四的&#125; 运行情况： 但是每次调用的时候都要用命名空间名::实体名（函数名）的方法岂不是也太麻烦了。 所以这里就要用上using关键字了，只要在头文件引入语句下面加入： using namespace ZhangSan就可以了 1234567891011#include&lt;iostream&gt;#include"project2.h"//张三命名空间定义所在的头文件using namespace std;using namespace ZhangSan;//使用的张三的命名空间int main() &#123; Print();//张三的&#125; 运行情况: –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>C++</tag>
        <tag>C++学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.5)链表存储结构的算法]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[链表储存结构 链表（LinkedList） 定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构 对应线性表操作： 前插数据元素 Insert_Front() 后插数据元素 Push_back() 插入数据 Insert_Element() 删除数据 Delete_Element() 获得数据 Get() 设置数据 Set() 遍历链表 Traverse() …… 对应一些算法实现思路 插入操作： 思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针 具体实现： 123456789101112131415bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 return true; &#125; 删除操作： 思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时要先创建一个临时的指针指向将删除的元素的地址（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后delete这个临时指针。 具体实现： 1234567891011121314bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; 链表存储结构代码实现情况： 前插操作（完成） bool InsertFront(T e) 后插操作（完成） bool push_back(T e) 插入操作（完成） bool InsertElement(int index, T e) 删除操作（完成） bool DeleteElement(int index) 获得操作（完成） bool Get(int index,T&amp; e) 修改操作（完成） bool Set(int index, T e) 遍历操作（完成） void Traverse(void(*fb)(T&amp; t)) 代码详细123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;iostream&gt;using namespace std;template&lt;typename T&gt;class LkList&#123; struct LNode &#123; T data;//数据 LNode* next;//指向下一个数据的指针 &#125;; LNode* head;//头指针 int length;public: /*构造函数*/ LkList() &#123; head = new LNode(); length = 0; if (!head)throw"No Memory";//若没有new出来就抛出异常 head-&gt;next = 0; &#125; /*获得数据操作*/ bool Get(int index,T&amp; e) &#123; LNode* p = head-&gt;next;//这里的p指向的下一个元素的头指针 int j = 1; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next;//把p的指针往后一个元素头指针移动 ++j; &#125; if (!p || j &gt; index) return false; e = p-&gt;data;//获得数据 return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T e) &#123; LNode* p = head;//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标 int j = 0; while (p &amp;&amp; j &lt; index-1)//定位到要插入元素位置的前一个元素（即：寻找前驱结点） &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* s = new LNode();//创建一个链表数据空间 s-&gt;data = e;//把要插入的数据放入这个空间 s-&gt;next = p-&gt;next;//这个新的空间的下一个指针地址是上一个元素的下一个元素地址 p-&gt;next = s;//上一个元素的下一个指针地址变为新空间的地址 length++; return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; LNode* p = head;//定位到头结点 int j = 0;//从第0个元素开始移动指针 while (p &amp;&amp; j &lt; index - 1) &#123;//找到要删除元素数据的前一个位置 p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; LNode* q = p-&gt;next;//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置） p-&gt;next = q-&gt;next;//把前一个数据元素的下一个指针地址存储 delete q;//释放临时指针（即：要删除数据元素）的空间 length--; return true; &#125; /*前插操作*/ bool InsertFront(T e) &#123; LNode* q = new LNode();//创建一个新数据空间 if (!q)return false; q-&gt;data = e;//对要插入的数据进行赋值到这个空间的data q-&gt;next = 0;//避免第一个数据next指针出现野指针的问题 q-&gt;next = head-&gt;next;//与头结点相连 head-&gt;next = q;//这个next指针指向第二个数据的位置 length++; return true; &#125; /*往后插入操作*/ bool push_back(T e) &#123; LNode* p = head;//从头结点开始让指针指向最后一个数据元素的地址 LNode* q = new LNode(); int j = 0; while (p-&gt;next)//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址 &#123; p = p-&gt;next; &#125; if (!p)return false; q-&gt;data = e;//进行data赋值 q-&gt;next = 0;//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题 p-&gt;next = q;//原最后一个元素数据的next指向这个新插入的空间地址 length++; return true; &#125; /*设置操作*/ bool Set(int index, T e) &#123; LNode* p = head;//从头结点开始寻找要修改的位置 int j = 0; while (p &amp;&amp; j &lt; index) &#123; p = p-&gt;next; ++j; &#125; if (!p || j &gt; index) return false; p-&gt;data = e;//数据进行修改 return true; &#125; /*遍历操作*/ void Traverse(void(*fb)(T&amp; t)) &#123; LNode* p = head-&gt;next;//从头结点开始遍历每一个元素的data while (p) &#123; fb(p-&gt;data); p = p-&gt;next; &#125; &#125;private:&#125;;template&lt;typename T&gt;void Print(T&amp;t) &#123; cout &lt;&lt; t &lt;&lt; " ";&#125;int main() &#123; LkList&lt;char&gt; List; cout &lt;&lt; "前插了一个A " &lt;&lt; endl; List.InsertFront('A'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "前插了一个B " &lt;&lt; endl; List.InsertFront('B'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "后插了一个C " &lt;&lt; endl; List.push_back('C'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了O " &lt;&lt; endl; List.InsertElement(4, 'O'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "在第4个位置插入了G " &lt;&lt; endl; List.InsertElement(4, 'G'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "删除了第2位的元素 " &lt;&lt; endl; List.DeleteElement(2); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "把第3位的数据修改成I" &lt;&lt; endl; List.Set(3,'I'); List.Traverse(Print); cout &lt;&lt; endl; cout &lt;&lt; "获得第4位的数据 " &lt;&lt; endl; char ch; List.Get(4, ch); cout &lt;&lt; ch &lt;&lt; endl;&#125; –（本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(2.4)初识链表]]></title>
    <url>%2F2019%2F06%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表基本概念 结点包括数据域和指针域。 链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。 相较于顺序表存储结构的优点： 不用定义时规定长度。 存储的元素个数不受限制。 插入和删除元素时，不用移动其他元素。 链表的头指针和头结点 基本概念 头指针：链表中第一个结点的储存位置。 头结点：在单链表的第一个结点前附设的一个结点。 头指针 头结点 若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针 头结点是为了操作的统一和方便而设立的，放在第一个结点之前 其数据域一般无意义（可以存储链表的长度） 头指针具有表示作用，所以常常有头指针表示链表的名字 有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了 无论链表是否为空，头指针均不为空。头指针是链表的必要元素 头结点不一定是链表的必须要素 链表存储结构 链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。 链表存储结构中，数据存储在内存中分散的位置。各个数据由一个指针相互连接 一个数据中的指针域存放的是下一个数据的地址。 由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问 删除：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。 添加：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.3）顺序表存储结构代码、算法实现]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[顺序表储存结构 顺序表(SqList) 定义： 顺序表存储结构是一个以连续空间地址存储为方式的物理结构 实现线性表相应操作： SqList（） 初始化线性表：创建一个空的线性表List SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e SqList.GetLength（） 获得线性表的长度 SqList.DeleteAllElement（） 清空线性表 SqList.find（e） 查找线性表中的元素e ………. 一些基础算法的实现思路 插入算法： 思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值 具体实现： 12345678910void InsertElement(int index, Datas t) &#123; length++;//因为要插入一个新的元素，故实际长度要加1 for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部往后覆盖赋值 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 &#125; 删除算法： 思路：根据要删除元素的下标为目标往前覆盖赋值。 具体实现： 1234567void DeleteElement(int index) &#123; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 &#125; 扩容： 思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。 具体实现： 1234567891011121314if(length == capacity)//判断使用扩容的时机void realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 &#125; 根据线性表用顺序存储结构实现的操作完成情况： 增加元素（完成） bool Push_back(T) 查找元素（完成） bool GetElement(int index,T&amp;c) 扩容（完成） bool realloc() 删除元素（完成） bool DeleteElement(int index) 插入元素(完成) bool InsertElement(int index, T t) 清空元素（完成）&lt;待完善修改&gt; bool DeleteAllElement() 代码详细：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198#include&lt;iostream&gt;#define MAX_SIZE 1 //定义最大容量using namespace std;template&lt;typename T&gt;class SqList&#123;private: T* datas; //线性表 int length = 0;//实际容量 int capacity;//总容量public: /*构造函数*/ SqList() &#123; capacity = MAX_SIZE;//总容量等于最大容量（进行初始化） datas = new T[capacity]; cout &lt;&lt; "初始化成功！！！" &lt;&lt; endl; &#125; /*获得总容量*/ int GetLength() &#123; return length; &#125; /*查找并取值操作*/ bool GetElement(int index, T&amp; c) &#123; if (index &lt; 0 || index &gt; length) return false; c = datas[index]; return true; &#125; /*增加元素操作*/ bool Push_back(T NewElem) &#123; if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if(!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; datas[length] = NewElem; length++; return true; &#125; /*设置元素操作*/ bool SetElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; datas[index] = t; return true; &#125; /*插入元素操作*/ bool InsertElement(int index, T t) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; length++;//因为要插入一个新的元素，故实际长度要加1 if (length == capacity)//判断顺序表是否满了 &#123;//如果满了调用扩容操作 if (!realloc())//如果扩容失败那么Push_back也失败 return false; &#125; for (int i = length; i &gt; index; i--) &#123;//先把后面的元素全部后退 datas[i] = datas[i - 1]; &#125; datas[index] = t;//在目标index位置插入新元素 return true; &#125; /*删除元素操作*/ bool DeleteElement(int index) &#123; if (index&lt;0 || index&gt;length)//判断下标是否输入正确 return false; for (int i = index; i &lt; length-1; i++) &#123; datas[i] = datas[i + 1]; &#125; length--;//每删除一个length（实际长度）将减少 return true;//删除动作完成后返回true &#125; /*清空元素操作*/ bool DeleteAllElement() &#123; int len = length; for (int i = 0; i &lt; len; i++) &#123; DeleteElement(0); &#125; return true; &#125; /*查找元素操作*/ int find(T e, int pos = 0) &#123; for (int i = pos; i &lt; length; i++) &#123; if(datas[i] == e) return i; &#125; return -1; &#125;private: /*扩容操作*/ bool realloc() &#123; T* p = new T[2 * capacity];//最大容量扩大两倍 cout &lt;&lt; "扩容成功！！！" &lt;&lt; endl; if (!p)return false; for (int i = 0; i &lt; length; i++) &#123;//把原顺序表赋值到新顺序表 p[i] = datas[i]; &#125; delete[]datas;//清空原线性表里的元素 datas = p;//把新扩容后线性表的地址赋给datas p = NULL;//避免临时指针p变为野指针 capacity *= 2;//总容量扩大 return true;//更换扩容操作完成后宣布扩容操作成功 &#125;&#125;;//打印顺序表操作template&lt;typename T&gt;//模版void Print(SqList&lt;T&gt;&amp; L) &#123; T e; for (int i = 0; i &lt; L.GetLength(); i++) &#123; L.GetElement(i, e); cout &lt;&lt; e &lt;&lt; " "; &#125; cout &lt;&lt; endl;&#125; int main() &#123; SqList&lt;char&gt; List; char ch; if (!List.GetElement(1, ch)) cout &lt;&lt; "未找到" &lt;&lt; endl; cout &lt;&lt; "加入A" &lt;&lt; endl; List.Push_back('A'); Print(List); cout &lt;&lt; "加入B" &lt;&lt; endl; List.Push_back('B'); Print(List); cout &lt;&lt; "修改下标为1的B为G" &lt;&lt; endl; List.SetElement(1, 'G'); Print(List); cout &lt;&lt; "加入C" &lt;&lt; endl; List.Push_back('C'); Print(List); cout &lt;&lt; "加入D" &lt;&lt; endl; List.Push_back('D'); Print(List); cout &lt;&lt; "在下标为2的位置插入O" &lt;&lt; endl; List.InsertElement(2, 'O'); Print(List); cout &lt;&lt; "删除下标为1的G" &lt;&lt; endl; List.DeleteElement(1); Print(List); cout &lt;&lt; "寻找M的下标为： " &lt;&lt; List.find('M') &lt;&lt; endl; cout &lt;&lt; "清空了所有元素" &lt;&lt; endl; List.DeleteAllElement(); cout &lt;&lt; "加入F" &lt;&lt; endl; List.Push_back('F'); Print(List); cout &lt;&lt; "寻找A的下标为： " &lt;&lt; List.find('A') &lt;&lt; endl; cout &lt;&lt; "在下标9位置插入G" &lt;&lt; endl; List.InsertElement(9, 'G'); Print(List);&#125; –(本文完)&lt;原创&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大学学习个人计划及路线规划]]></title>
    <url>%2F2019%2F06%2F15%2F%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX1+uyYSlU4fCNA/rCzX6PP7zVrMgL1FJVjJPCSLstobPcx1qcISIzw/S+7TQ9azEFCvtRFgBi3lUgmKs4gjE6zjME3yDUroCSFxyOwmy11+i1puqB9Jud/A1exaGSPmS/9VR30c5jMcFIy03QW2bECpeRZJKtgn25uS/xDT3jfL/zlJPWQqqynfQb2atJi1joTdnE+C/BOIxq8et+kz0IuZK8F7ytPlWdh2T9lP2iXUKcj6bY60lJJ4N6ujE7ingsYM1dHw1v73R/6pWVA3gND79mYHS1KHwsP3Uwg3UGr79sOx1YC2wEKVc9376AP9OZ3/JvC1Mj/oyW9xxOadjUxFg7X0Mg7ww+M8oQsOlKwN+UiKsYAWd0CXqnpR0loXM9iBnBjUs4Udk+l3YqdwF91m/bCn7xlFPXJ+hmL8Z9Tb71ylm+umgujSIj33QoVJjGuMxGcSTBA6Io3hn+gI2EW1APr0E4naiIOduGoZWGWFWWfZkutbxzgucljtY//ZcO6V/ONyr1YhCcTnwvQv+ovYSLq11Np38hRmhPyGLOFX7lmSh/fdAgsOgSQbNVVGFjyC8K8uqR0oo+QLpGKJpyUjbx8E4NqNNBa0PRW8vdfvlsqQNkoD5Fbloi4ZC04BmNnJxvjdVg81NYM64vxEOzz4sfc8ONq3IQqi9jNgbhNMoSO7LgGmj0jg1X4C3v1nd0U6lRef6B9k4sR/zKbVou+d1HPhRHmEcT1RdYGdN6zXC5pppGkyWhCD61y7xAExvpyqcRQkkuEjvlTcjt2nwFV4Ga4kJ7+8KKA/JHpzp4+ln0TpiM5SCCQzntlBfAcbfEZkTiD7zvHuiiyF3q8Wtihsor9smLthkt+6mROtSP3VwkhtwK/GE7Le9iSbLpg4EohNEwoy4Oko4FUlZO9qK/Tvjk3doKgEfADdq0Vo8Yo5gQ1SYiI9n+x8OXibgMoosBXv9rIYNrNmdueEz+V3XoUtrxKFAFoiatuZbioQ1Tk96nwBn2COsP7nL+JFw65nZ1kWC5lgxzd1RofT00MOcT95ZOJ7Op3jYrqZdFzCCrBjQhPL/3Bc+D2fzJoBgIZk+FSZxBhX4MR4faOTzWk2yr88zJtn4JU1dvcoUUH4As0ypD6vdgIOY4L8kZWziLNHPwnOOXr7sHMQjQfE/lNGGR8sO0ysy5yye0NoBnblIPsAqGZHBPZP64rya6rhnOGNEEdIM/6DVOshWk/SbJ0GJu/4QuLBDs2/3THOdSlnK2jninymHgiiqO47/Z46sYAbmGqSxy+f9LE9Gmg==]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.2）顺序表存储结构]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[顺序表结构 顺序存储结构的线性表–顺序表 定义：指的是用一段地址连续的存储单元依次存储线性表的数据元素（数组） 顺序表的构成 需要定义线性表的最大存储空间 #define int Max_SIZE = 255; 线性表里需要有统一类型的元素集合 12345678910111213141516#define int MAX_SIZE = 255;//最大存储长度 /*定义线性表*/typedef int ElemType;//给int起一个别名 ElementTypetypedef struct&#123; int num;char* name;&#125;ElementType;/*定义顺序表结构*/typedef struct &#123; ElementType Datas[MAX_SIZE]; int length;//当前长度&#125;SeqList; –(本文完)&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏球（练习）]]></title>
    <url>%2F2019%2F06%2F14%2F%E7%9F%B3%E8%86%8F%E7%90%83%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习心得体会]]></title>
    <url>%2F2019%2F06%2F14%2FJava%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[​ 先简单说一下我对于编程这一门课程个人感受吧，编程说难也难，但说它简单也不过分。难，难在程序编写过程的中的思考方式。简单，就简单在一旦你掌握了基本语句和方法的基础下，有着一个活跃的思维思考能力，程序编程基本都是水到渠成的事。接下来我就简单说下我个人对于Java学习过程中一些心得和学习方法供大家参考一下吧。 心得：​ 首先我在大一是有接触过C++的，刚拿到课本也是一头雾水，看不明白。但在深入学习后，我认为掌握一门程序语言重要的不是知道它具体的语法和规则，而是运用这些语法和规则时的思维。为什么编程的思维很重要呢？这是一个很现实的问题，如今知识更新快，社会发展非常快，意味着编程语言的变化也是很无常的，或许你刚掌握了java语言，市场上就有了更好的编程语言。这就意味着你要继续学习新的语言和知识，如果此时你有一个活跃的编程思维，去接触新的语言学会它会非常容易。 说了这么多思维很重要，那编程思维到底是怎样的？举个小例子：假设你要编程一个超市商品结账的程序，先不要想怎么去编写它。先去思考一下，假如你在超市工作并给一个顾客买的两个东西结账。结账时你要做的事情：你要先识别他买的两个东西单价分别是多少钱，买了多少个，总金额多少，付钱结账最后打印一个小票给这个顾客。简化下来就是：1.识别物品，2.计算金额3.打印信息。好的！接下来用编程来搞定它，1.识别物品从你一大堆的商品信息中找到这个商品的信息。怎么编这个功能？用循环被一个个找。找到同名的商品并得到它的金额信息就可以了。2.计算金额 用循环累加，3.打印出信息 完成本次结账，程序结束。从上面可以看出编这个程序思考方向：明确你程序要干的事情是什么（目的是结账），干这个事情有什么动作（1.识别食品找到对应的价格2.计算总金额3.打印信息），完成这些动作要用什么方法（1.可以用循环来找或其他方法2.每一项金额累加3.打印上面步骤得到的数据信息）。你能在看见一个动作就能想到一个方法去解决它。这就要靠活跃的思维，怎么样用你所学到的编程规则与语句对应想出编写针对它解决它的方法，这就是一个编程的思维。 学习方法：​ 根据上文所述的思维的方式我说下我自己的学习方法供大家参考。 根据自己的想法用自己的话去总结每一章学习的知识：这里要注意！自己每次学习完一章内容尽量地去总结且一定要根据自己的话和自己的思考去总结不能网上复制粘贴一下概念知识。这样做有两个好处：①加固加深你所学的知识，毕竟是根据自己思考后总结出来的、②培养独立的学习思考能力（说白了就是把你学到的知识用自己的理解写一个类似于教材的总结）。 建立编程错误库：其实很多人在编程的时候都会遇到红标报错，这是很正常的事情我们本来就是在试错中才能积累经验。你每一次出错，如果你有时间可以编写一个文档计入每一次遇到的新的报错 并且记录下错因是什么 怎么去解决，这样遇到同样的错误就会有条件反射：“哦！我以前犯过NullPointException的错误，这个错误是空指针错误，原因是有一个对象没有给它空间，应该调用它的构造方法去解决它。”慢慢的就会有独立去解决这些错误的能力了。当然如果你没有多余的时间，也可以让自己的脑子去记下来QWQ。 找个好（ji）朋友进行讨论和思维碰撞：单干是很寂寞的。可以找一个好朋友、舍友进行思维碰撞和讨论。这也很重要！为什么，因为每一个对同一个问题的思考方式、方向都不可能完全相同的。通过思维的交汇，朋友间能相互提高且提高的跟快。再者可以有效的避免一些舍友之间的矛盾。 兴趣主导目标引领：有一个学习目标是很重要的，当然这得取决你不会去排斥它，就如编程。你主动爱它虽然它不会爱你_(:з」∠)_。但你排斥它，它也一定会排斥你这也是必然的。所以学好一门课首先是要培养出对它的兴趣，然后java语言与其他编程语言一样，学习它时候是要用大量的课余时间去练习它。练习也是要有目的的，你可以就按每次作业的要求去学习它，在完成作业后，你也可以自己想一点小玩意供自己去练习。例如：你看见你去钱用的很乱，你就会想编一个记账的小程序，然后就有一个目标出现了。你就会根据你的小目标去主动学习主动搜索你所需要的知识。学习一门课程，只要你站在主动的一方，一切问题就非常好解决了。 从初学就养成良好的编码习惯：这里有些人可能有点疑问，码是我编的，我想咋编就咋编我看得懂就ok这样的思想是很错误的。首先这样做DEbug会非常辛苦，现在是小程序可能体会不出来，当你编写几百行几万行以上的代码就会痛苦的不得了。（个人亲试过：你体验过自己编了700多行代码的程序，de一个bug蹦出一堆bug的快感吗？）。这里我非常推荐一点要写注释！特别是自己想的方法。这样做有两个好处：①这样你编写这个方法的时候思路会比较明确，知道每一步要怎么去做。 ②.对于以后工作写文档会有用处，未来的代码是要给别人看的。 然后我提一点其他的好习惯吧。㈠定义变量的时候命名让它有意义，且在定义的时候一个变量占一行，有关联的变量尽量相近定义。㈡善用回车换行，这里举一个简单的例子吧。每个方法尽量用两个回车来分开。这样做，一是方便注释，二是方便分辨每一个方法体，且美观。这里要注意回车换行适度就行，不宜太多。其他方法可以搜索网上资料。这里就不一一叙述了。养成良好的编程习惯一是方便你自己，二来也对未来工作有非常大的帮助。 尽量先靠自己去想怎么做：不要一遇到不会就百度、参考其他同学的代码。切记！有人会说，参考后我会自己去理解，之后也不是会变成我自己的知识吗？这样说吧：这样做好比你在海上航行，你知道答案了就像你知道目的地的准确位置了，接下来你只需把船开过去即可，但正常情况下，你应该要靠自己的能力去找目的地而不是知道它在哪的前提下去航海。未来工作也是这样。一个是逆向思考，另一个是正向思考。两者是不一样的。所以我们一定要先独立思考。直到真的完全不会了再去参考学习。每次都参考别人的东西去学习，会导致一个依赖感长期的逆向思考，到了真的要自己动手的时候发现一点都不会。这也解释了一些同学看得懂代码，自己动手却什么都不会的原因。 ​ 最后我先明确我的这些理解和见解只供大家去参考。我的一些理解和心得可能没有你们的好，学习方法或许你的也会更棒。所以不要太局限于我的见解QAQ。 –（本文完）&lt;原创&gt;]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2.1）线性表的抽象数据类型]]></title>
    <url>%2F2019%2F06%2F14%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.1%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[线性表 定义： 零个或多个数据元素的有限序列。 特点: 它是一个序列 数据元素之间是有有序的。 数据元素之间是一对一的关系。 有限性 两个数据元素的有限序列称为空表。 常见线性表的操作： 删除 插入 创建 初始化 清空 查找 线性表的抽象数据类型 ADT 线性表(List) Data 线性表数据元素是一个集合{a_1 , a_2 , a_3 , …. , a_n},数据元素的类型DataType（int , char ,…)。 除了第一个（a_1）元素外，每个元素有且只有一个直接的前驱元素。 例如 : a_2的前驱元素是a_1。 除了最后一个（a_n）元素外，每一个元素有且只有一个直接的后继元素。 例如: a_3是a_2的后继元素。 Operation InitList（*List） 初始化线性表：创建一个空的线性表List InsertElement（*List ， index ， e） 在线性表List的index下标处插入元素e DeleteElement（*List ， index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e GetLength（*List） 获得线性表的长度 IsEmpty（*List） 判断线性表是否为空表 ClearList（*List） 清空线性表 ExsitElement（*List ， e） 查找线性表中的元素e endADT 个人理解：​ 在实际上，线性表可以理解为一群人在排队，排队的都是人（数据元素类型相同），然后他们是排成一条线的。首先排队的人肯定是有限的（即：有限性）其次他们每一个人是相互连成一条线的，即一个人跟着一个人有顺序（即：一对一、有序的）。 ​ 再者，这队排队的人，除了第一个人前面没人，最后一个人后面没人外。其中每一个人都是前后都有人的。例如第二个人的前面是第一个人（即：第一个人为第二个人的前驱元素），而第三个人是第二个人的后面（即：第三个人为第二个人的后继元素）。 ​ 这队排队的人是在等待上车的。他们之间可能会有人在中途想上厕所从而离开了队伍（即：删除），又或者有人在后面加入进去了（即：增加），这时检票员也会一一核对信息对照人员表查找每一个人是否到齐了（即：查找），这时上厕所的人回来了因为这队人是有顺序的，所以这位回来的也可以插入原来的位置（即：插入）。 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（2）第二章预习]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882%EF%BC%89%E7%AC%AC%E4%BA%8C%E7%AB%A0%E9%A2%84%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[问题： 线性表的顺序存储的优点和缺点有哪些？ 线性表的删除和插入算法的思路？ 数组长度和线性表长度的区别？ 顺序存储结构的三大属性？ –（本文未完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-(1.2)抽象数据类型]]></title>
    <url>%2F2019%2F06%2F12%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.2%EF%BC%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[抽象数据类型数据类型 定义： 计算机中，内存空间是最有限的，不同的类型的数据分配的内存空间大小不同。 例如：在C++ 中 整型占4个字节，双精度浮点数占8个字节等等 数据类型就是指一组性质相同的值和集合及定义在此集合上的一些操作的总称 例如在C/C++语言中的数据类型中是按取值不同分类的数据类型 原子型（不可再分）：不可再分的数据类型。例如：int(整型)、double（双精度浮点型）等等 结构型（可再分）：若干个数据类型（包括原子型和结构型）组成的一个组合。例如：数组，类，结构体（C/C++）等。 抽象数据类型（Abstruct Data Type[ADT]) 定义：是对已有的数据类型进行抽象 抽象数据类型是指一个数据模型及定义在该模型上的一组操作 模板： ADT 抽象数据类型名 Data 数据元素之间的逻辑关系的定义 Operation 操作1 初始条件 操作结果描述 操作2 … 操作n … endADT 个人理解：通过套用上面的模板 解释int（整型数据类型） int（整型） 是以线性结构存储一个int（整型）数据类型占4个字节 Operation 操作1：加法 需要两个数 结果为两个数的和 操作2：减法 需要两个数 结果为两个数的差 操作3：乘法 … 操作4：除法 … 个人总结： 用自己的话简述下列术语： 数据：类似一个或几个人的全部基本信息（姓名、性别、爱好等）。 数据元素：人基本类型里面的单一个姓名、性别等。 数据对象：单一个人的基本信息。 数据结构：数据通过一定的结构、关系（计算方法【算法】）存储起来就是数据结构 例如：上面所说的数据 –多个人的基本信息 一般是用列表格的形式存储的，即所用的是线性逻辑结构存储的。 存储结构（物理结构）：是对逻辑结构在计算机上的表示。即对上面的数据结构在计算机进行实习，如果是顺序存储结构，那么这些个人基本信息可能是用数组储存起来的。 数据类型：例如 整型、浮点型就是一个数据类型，数据类型是一组相同值和其每个值之间特有的关系上的操作的总称。例如整型，它每一个数据元素都是一个整数，他们可以进行加减乘除等操作。 抽象数据类型：类似于数据类型，但是把一些东西抽象化成数据类型。例如游戏角色，它的数据元素（对比就是整型里面的整数）有很多，例如武器、玩家属性等、这个数据类型可以执行的动作有移动攻击等。 数据结构和抽象数据类型的概念与程序设计语言中的数据类型概念的区别 抽象数据类型是对软件设计过程中问题模型抽象出来的逻辑结构和在逻辑结构上的运算。 数据结构是计算机处理元素的组织形式的相互关系。 程序设计语言中的数据类型是已经实现了的数据结构。 即：一个还没有被实现（抽象数据类型）一个是已经实现的了（程序设计语言中的数据类型） 而数据结构是指： 数据的相互之间存在一种或多种特点关系的数据元素的集合。 --（本文完）&lt;待完善&gt;]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java模拟考心得体会]]></title>
    <url>%2F2019%2F06%2F12%2FJava%E6%A8%A1%E6%8B%9F%E8%80%83%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[今天进行了Java期末考试的模拟考，颇有心得与感触，以本文进行叙述：遇到的问题比较多：例如 &gt;&gt; 与 &gt;&gt;&gt;运算符 这里的意思是这样的 &gt;&gt;有符号的右移这是对二进制的数来说的 int i=8，那么 i &gt;&gt; 2就是二进制往右移两位，即：（0）1000【8】 往右移两位就是 （0）0010【2】，而&gt;&gt;&gt;就是不考虑符号位。 jpane的默认布局是流式布局 （我居然写BorderLayout） 其次是swing包里面的 按钮监听器不太熟 警示： 千万不要在程序设计或填空 题目里面用Shift + F 格式化 切记切记！！ 其他知识点： 按钮监听器重写方法：public void actionPerformed(ActionEvent event) 对于子类可以从父类继承的成员变量，只要子类中声明的成员变量和父类中的成员变量同名时，子类就隐藏了继承的成员变量，子类自己声明定义的方法操作与父类同名的成员变量是指子类重新声明定义的这个成员变量。 –（本文完）]]></content>
      <categories>
        <category>个人随感</category>
      </categories>
      <tags>
        <tag>心得体会</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构学习总结-（1.1）数据结构的基本概念]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881.1%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[数据结构的基本概念五个基本概念：数据 定义：描述客观事物的符号，是计算机中可以操作的对象。 个人理解：类似于整型，或者一个文件都是可以看出数据。实际情况：例如我输入的账号密码就算是为数据 数据元素 定义：组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据元素是数据结构的聚焦点 个人理解：把数据比喻成一个文件夹，那么数据元素就应该是里面的一个不可分的文件（高达模型上面的一个零件？）。 数据项 定义： 一个数据元素可以由若干个数据项组成。 个人理解 ： 数据元素比作对象，那么数据项就类似于对象的属性（成员变量）。例如：上面输入信息时，用户名和密码分别就算是数据项 数据对象 定义： 性质相同的数据元素的集合，是数据的子集。 个人理解：这个应该是介于数据和数据项中间的东西 数据结构（data structure） 定义：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。 数据元素 + 特定关系 = 数据结构 总结：用实际情形来描述，你在一个网站上进行注册，要求填写个人形象，其中里面的姓名、密码就是 数据项 ，每一个数据项组成的就是一个 数据元素 ，数据元素一多起来就统称为：数据 逻辑结构 集合结构 图形结构（图） 树形结构（皇帝与丞民） 线性结构 物理结构 定义：又叫存储结构，是指数据的逻辑结构在计算机中的存储形式。 顺序存储结构 ：类似于数组 ，把数据元素存储在地址连续的储存单元里。 链式存储结构 ：把数据元素存放在任意的存储单元里 类似于数组，但可以不连续，每一个数值直接有一个类似于绳子或链条的东西相互绑定。 类似指针 –（本文完）]]></content>
      <categories>
        <category>代码学习</category>
        <category>数据结构学习</category>
      </categories>
      <tags>
        <tag>学习总结</tag>
        <tag>数据结构</tag>
        <tag>数据结构-学习总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[石膏立方体（练习）]]></title>
    <url>%2F2019%2F06%2F11%2F%E7%9F%B3%E8%86%8F%E7%AB%8B%E6%96%B9%E4%BD%93%EF%BC%88%E7%BB%83%E4%B9%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>绘画</category>
        <category>练习</category>
      </categories>
      <tags>
        <tag>绘画练习</tag>
        <tag>素描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客文章]]></title>
    <url>%2F2019%2F06%2F11%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX1/A4Q3TYe933jPysaEJ6NvErcvR8CKxCT1Ir7l0FTxXYeQW/LCjN8NZbio2ffGpY56QOqxtNFyA6aiKcyjxSRVs6EdrwDxQSgYFMOZYehEqRjL/eY7hPwS6SXKn1hpqOAjCMZ0q5eIHgPkr3yClQpKmNW8sO4X3yqahwNwOKW2+iURWEENIZgVsWMILvcqjwoJP/sWSIIDHhvLy743xqAgB4oPZAIWewFPR8hBb85QI1rQw2UPDtK/O9z5CGH48ZB4Ln+jx1Ya8pPLqUnb9edB2eNVj+g5sMQ8gYiNnoWRs30AUQI1YrZPik9wfKMf78a77ctPFRkEHnJH7WVrJ6zKiv5Mdx126jDbqJxwZ4y0kpygZ7jTUoh90PwadI/doYAXXHkLHI1leWMMYi8Y+C35jmiqAnzWbqX3CKE0mNtEsvZLHhkunpFJfOCcGAlnkgO2bUbKVV0NoQT/04XIOTIJQhAi36mbk2g7M8sNIcTHZr3Pz4F/mALMN0QKMwpLP+qEQ1MMTUvhh70jmGsfG9vzHPyU/MHrGJ3PkUmQSRh8B6CHpeskt5P48Zymr0lJqupZhfgaRSDCBQoXpl3jadPBHSwmVzOWTz35qznSuzLFOyZhISI4hgi+76KPvKexmcQPVrAoGeYNo34LVfyeie1GU9tKMDqJo8t0=]]></content>
  </entry>
</search>
