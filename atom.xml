<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此，却永不能触及</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2020-01-20T12:24:23.807Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb学习总结(2.3)Session</title>
    <link href="https://shuhaohwang.github.io/2020/01/20/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-3-Session/"/>
    <id>https://shuhaohwang.github.io/2020/01/20/JavaWeb学习总结-2-3-Session/</id>
    <published>2020-01-20T09:26:32.000Z</published>
    <updated>2020-01-20T12:24:23.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTTP通信"><a href="#HTTP通信" class="headerlink" title="HTTP通信"></a>HTTP通信</h4><p>​    JavaWeb应用程序运行是基于B/S的模式,用户通过客户端浏览器向Web服务器发送一个HTTP请求,服务器收到请求的同时一个连接就建立了,服务器根据请求做必要的处理并生成一个响应信息,然后把它回送给客户端。这一过程结束后,服务器就关闭了该连接,而不会一直与客户端保持着连接的状态。</p><p>当用户发送另一条请求时，所有的请求与响应都和上一次一样，客户和服务器之间必须重新建立连接。</p><p>即：你访问一个网站，此时会发出一个请求，然后服务器给与回应两者就断开了，你和网站的服务器不是一直有着连接，而是这种一瞬间的短连接，这也就是为什么你访问一个网站后 断网了，网站依旧可以在该页面进行浏览。</p><h5 id="HTTP的无状态性"><a href="#HTTP的无状态性" class="headerlink" title="HTTP的无状态性"></a>HTTP的无状态性</h5><p>​    Web服务器需要为大量的用户服务。对于一个服务器接受一条网络连接就意味着通过一个套接字侦听进入的请求,如果一服务器同时连接大量的用户, 这会消耗掉服务器大量的资源,包括线程和内存。</p><p>为了能够服务于大量的用户, HTTP被设计成在每一次新请求中都使用新的连接,这种特性称为HTTP的无状态性。</p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>既然http是无状态的,那服务器该如何对多个用户进行区分呢?</p><p>我们常进的网站通常都是每次只需要登录一次,然后就记住了用户信息和登录状态,这是如何实现的呢?这就需要一种机制来唯一的标识用户,以便跟踪用户在站点中的行为。</p><p>这就是我们要说的会话对象session,可以利用会话对象session来记录用户的数据信息。</p><p>即：JavaWeb可以通过Session来记录每一个用户的使用情况，它是跟踪于浏览器的，假设你登入了一个网站，下次再打开时，它会保持你现在的登入状态，这就是Session的用法之一。</p><ul><li><p>从一个用户打开浏览器并连接到服务器开始到用户关闭浏览器离开这个服务器结束称做一个会话。</p></li><li><p><strong>在多次HTTP连接间维护用户与不同请求之间关联的情况称为维护一个会话(session)</strong></p></li><li>当一个用户连接到服务器时可能到不同的页面,而许多 WEB程序需要用户在客户端的一系列请求之间能够互相关联,实现不同的页面之间数据的传递和共享, 而HTTP协议是无状态的,基于WEB的应用程序需要维护这样的状态,这就需要session,利用session可以保存访问者访问页面的数据信息。</li></ul><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><ul><li><p>会话能够把用户与同一用户发出的不同请求之间关联起来。不同用户的会话应当是相互独立的。</p></li><li><p>会话一旦建立就应当一直存在,直到用户空闲时间超过了某一个时间界限,容器才应当释放该会话资源。</p><ul><li>例如你登入一个页面，然后很久都没有去访问了，然后就要你重新登入。称为Session过期</li></ul></li><li>在会话的存活期间,用户可能给服务器发送了很多请求 ,该用户的这些请求信息都可以存储在会话中。</li></ul><hr><h4 id="Session使用演示"><a href="#Session使用演示" class="headerlink" title="Session使用演示"></a>Session使用演示</h4><h5 id="Session的属性"><a href="#Session的属性" class="headerlink" title="Session的属性"></a>Session的属性</h5><ul><li><p>Session对象使用以下方法管理绑定到会话的属性</p><ul><li>设置: void setAttribute(String name, Object value);</li><li>获取: Object getAttribute(String name);</li><li>移除: void removeAttribute(String name) ;</li></ul></li><li><p>与Map的用法相似,其实内部就是键值对。</p></li></ul><h5 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h5><ul><li>创建两个Servlet 一个名为setSession 用来给session内存值设置值，一个为ShowSession用来展示session内的值</li><li>在使用session时，要先使用request对象获取HttpSession的对象才能对session进行操作使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        HttpSession session = request.getSession();<span class="comment">//获取HttpSession对象</span></span><br><span class="line">        session.setAttribute(<span class="string">"Test"</span>,<span class="string">"HelloWord"</span>);<span class="comment">//往1session内存值</span></span><br><span class="line">        session.setAttribute(<span class="string">"Test2"</span>,<span class="number">1234</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();<span class="comment">//获取HttpSession对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*打印session内的数据*/</span></span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容 :"</span> + session.getAttribute(<span class="string">"Test"</span>));</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容2 :"</span> + session.getAttribute(<span class="string">"Test2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h5><ul><li><p>session是根据浏览器不同而不同的，例如你使用IE浏览器对session进行了设置值，然后换另一个浏览器访问展示session页面也会没有接受到session里设置的值</p></li><li><p>与ServletContext对象不同的是，当session过期或者被销毁的时候其值会消失，而不是一直存在与项目本身(主要体现与不同的浏览器进行访问)</p></li></ul><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/1.png" title="当打开SetSession后，再打开ShowSession"><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/2.png" title="此后重新直接打开ShowSession一样显示在SetSession设置后的值，即使是重启浏览器"><p>但是，如果换一个浏览器</p><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/3.png" title="这里换了一个IE浏览器进行访问ShowSession，数据不见了"><p>可以发现，这里就跟以往提到的ServletContext不同了。当换一个浏览器的时候以往给session设置的值不见了，说明session是对于浏览器来说的，即，通过浏览器来辨认不同的用户</p><hr><h4 id="session的ID"><a href="#session的ID" class="headerlink" title="session的ID"></a>session的ID</h4><p>根据上述演示实例，可以发现，同一个浏览器下session是共享的，换一个浏览器session就不同了，实质上：</p><ul><li><p>WEB容器在创建每一个新的HTTP会话对象时,都会赋予一个新的ID号。WEB容器保证它在Web应用范围内是唯一的。</p></li><li><p>这个ID号可以通过Session对象的<code>getld()</code>获得。例如:<code>String sessionld=session.getd();</code></p></li></ul><p>例如：修改上例的Showsession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容 :"</span> + session.getAttribute(<span class="string">"Test"</span>));</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容2 :"</span> + session.getAttribute(<span class="string">"Test2"</span>));</span><br><span class="line">        </span><br><span class="line">       response.getWriter().println(<span class="string">"该浏览器的SessionID为 :"</span> + session.getId());<span class="comment">//这里我们把sessionID打印出来</span></span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/4.png" title="可以发现 不同的浏览器其sessionID是不同的，说明每个浏览器对应的session都不同"><h4 id="终止Session"><a href="#终止Session" class="headerlink" title="终止Session"></a>终止Session</h4><p>​    这里的终止不是说完全把session进行销毁，而是创建一个新的session，session是一直都会有的。</p><ol><li><p>直接调用invalidate方法,终止会话</p><ul><li><code>session.invalidate();</code></li></ul></li><li><p>设置会话超时时间,单位为<strong>秒</strong></p><ul><li><code>session.setMaxinactivelnterval(600);</code></li></ul></li><li><p>在web.xml文件中配置超时时间,<strong>单位分钟</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>当我们不设置session的timeout时,它是有默认时长的,不同的Web服务器默认时长可能不同。<ul><li>Tomcat的默认超时时间是30分钟,可以在conf目录下的web. xml中查看timeout</li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HTTP通信&quot;&gt;&lt;a href=&quot;#HTTP通信&quot; class=&quot;headerlink&quot; title=&quot;HTTP通信&quot;&gt;&lt;/a&gt;HTTP通信&lt;/h4&gt;&lt;p&gt;​    JavaWeb应用程序运行是基于B/S的模式,用户通过客户端浏览器向Web服务器发送一个HTTP请
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(2.2)ServletContext对象</title>
    <link href="https://shuhaohwang.github.io/2020/01/20/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-2-ServletContext%E5%AF%B9%E8%B1%A1/"/>
    <id>https://shuhaohwang.github.io/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/</id>
    <published>2020-01-20T02:23:13.000Z</published>
    <updated>2020-01-20T12:24:10.473Z</updated>
    
    <content type="html"><![CDATA[<h4 id="servletContext"><a href="#servletContext" class="headerlink" title="servletContext"></a>servletContext</h4><p>ServletContext官方叫servlet上下文。服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。</p><p>它代表当前正在运行的web应用程序，也就是当前的网站。它是一个单例对象，整个web项目应用就仅此一个对象，且当web项目一启动就会创建，所以后面要使用它只能通过获取的方式</p><p>里面包含了应用程序的一些基本信息，同时这个对象也可以当做容器来存取数据，想要获取该对象，需要使用request对象进行获取</p><h4 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h4><ul><li>编写两个<strong>servlet</strong> 一个为Setservlet 一个为 Showservlet</li><li>对应访问路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Setservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ServletContextTest.SetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Showservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ServletContextTest.ShowServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Setservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Setservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Showservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Showservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中在Setservlet 其作用为：获取ServletContext对象然后往里面进行存值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext app = request.getServletContext();</span><br><span class="line">        app.setAttribute(<span class="string">"Test"</span>,<span class="string">"1234Hello!!(*^▽^*)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Showservlet 的作用为 向ServletContext对象中进行取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        ServletContext app = request.getServletContext();<span class="comment">//获取ServletContext对象</span></span><br><span class="line">        String str =(String) app.getAttribute(<span class="string">"Test"</span>);<span class="comment">//取得ServletContext对象中的值</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"获取到的内容为Test =  "</span> + str);<span class="comment">//输出该值</span></span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li>ServletContext是一个单例对象。整个Web项目都共用一个，有点类似于项目的全局变量区一样</li><li>在往ServletContext对象进行存数据时，首先要使用request对象进行获取ServletContext的对象，然后使用<code>setAttribute(&quot;xx&quot;,&quot;aaaa&quot;);</code>方法进行存值，其存储方式类似于map容器，是一个键值对。</li><li>在进行往ServletContext对象进行取对象时，使用<code>getAttribute(&quot;xxx&quot;)</code>方法进行数据取出，注意！该方法的返回值是object，所以自己要根据取出值进行类型转换</li></ul><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/1.png" title="在地址栏输入Setservlet的地址进行访问"><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/2.png" title="再访问Showservlet 可以发现在Setservlet里面保存的值在Showservlet 中被取出并输出"><hr><h5 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h5><p>以该上述的演示为例子，如果先进行访问Showservlet 会发现其获得的值是null，原因是它没有提前进行存值，再访问Setservlet 页面进行通过<code>setAttribute()</code>方法进行存值后其ServletContext对象才有对应值。</p><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/3.png" title="重启项目，并且直接访问Showservlet 页面可以发现，并没有获得值"><p>其次：只要服务器、该项目还在运行此值就将一直存在，除非通过重启</p><h5 id="例如：不同的浏览器进行访问"><a href="#例如：不同的浏览器进行访问" class="headerlink" title="例如：不同的浏览器进行访问"></a>例如：不同的浏览器进行访问</h5><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/4.png" title="当使用谷歌浏览器往ServletContext对象中存值 然后通过谷歌和IE浏览器分别打开Showservlet 进行查看"><p>可以看出ServletContext对象，无论是换一个浏览器进行访问它都存在且仅有一个，它是对于服务器来说，只要服务器、该项目还在运行此值就将一直存在，除非通过重启</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;servletContext&quot;&gt;&lt;a href=&quot;#servletContext&quot; class=&quot;headerlink&quot; title=&quot;servletContext&quot;&gt;&lt;/a&gt;servletContext&lt;/h4&gt;&lt;p&gt;ServletContext官方叫servl
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(2.1)请求响应和重定向</title>
    <link href="https://shuhaohwang.github.io/2020/01/19/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-1-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://shuhaohwang.github.io/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/</id>
    <published>2020-01-19T09:59:19.000Z</published>
    <updated>2020-01-19T14:08:19.525Z</updated>
    
    <content type="html"><![CDATA[<h4 id="页面跳转的两种方式"><a href="#页面跳转的两种方式" class="headerlink" title="页面跳转的两种方式"></a>页面跳转的两种方式</h4><ul><li>请求转发<ul><li>服务器内部的转发,服务器内部跳转</li><li><code>RequestDispatcher dispatcher = req.getRequestDispatcher(&quot;xxx.jsp&quot;);</code></li><li><code>dispatcher.forward(req.resp);</code></li><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/1.png"></li><li>类比你向张三借钱，张三没有，然后他自己去向李四借钱然后再给你，整个过程你只提出了一次请求，得到了一次回应</li></ul></li><li>重定向<ul><li>服务器告诉浏览器跳转到某个页面(由浏览器完成)</li><li><code>res.sendRedirect(“index.jsp”)</code></li><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/2.png"></li><li>就类似你去借钱，向张三借，张三说没有，让你去找李四，然后你再去向李四借钱。整个过程你向两个人提出了请求，同时也获得了两次回应</li></ul></li></ul><hr><h4 id="重定向用法演示"><a href="#重定向用法演示" class="headerlink" title="重定向用法演示"></a>重定向用法演示</h4><ul><li>首先创建一个<strong>Servlet</strong>(命名为<code>Recive</code>)其访问路径为<code>src/Re.c</code></li><li>然后对其进行重定向至自己创建的HelloHtml.html</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rd_And_Rs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recive</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Recive`s Get is OK!"</span>);</span><br><span class="line">       String url = req.getContextPath();</span><br><span class="line">       System.out.println(<span class="string">"URL="</span>+ url);</span><br><span class="line"></span><br><span class="line">       resp.sendRedirect(url+<span class="string">"/HelloHtml.html"</span>);</span><br><span class="line">       <span class="keyword">return</span>;<span class="comment">//重定向后要结束当前方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><strong>注意点</strong></h5><ul><li><code>resp.sendRedirect(&quot;&quot;);</code>这个方法会使你这个Servlet被访问时重定向跳转至括号里面的内容页面，也就是说浏览器的地址栏的内容当你访问该Servlet时会发生改变，变为上述这个方法括号内的地址</li><li><code>resp.sendRedirect(&quot;&quot;)</code>这个方法括号内默认是以你该Servlet文件为基准的而不是项目路径,即：例如你这个Servlet是位于 项目路径下的 src/Demo/Servlet,你要重定向至src中的其他文件就应该../Xxx</li><li>重定向后要结束该方法。即：不应该继续执行<code>resp.sendRedirect(&quot;&quot;)</code>后面的代码了(重要！)</li><li>request对象中的<code>getContextPath()</code>方法可以直接获取当前的项目路径，也就是<code>contextRoot</code></li><li>重定向后之前的请求信息就没了，故不能通过表单来实现多个页面的数据传送</li></ul><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/3.png" title="通过直接在浏览器地址栏中打开上诉的Servlet"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/4.png" title="按下回车后，发现它重定向至HelloHtml.html"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/5.png" title="控制台中根据getContextPath()方法打印出了 项目路径 的信息"><hr><h4 id="请求转发用法演示"><a href="#请求转发用法演示" class="headerlink" title="请求转发用法演示"></a>请求转发用法演示</h4><ul><li>首先创建两个Servlet 一个名为 show 另一个为 code 两者的地址路径分别为 <code>../src/show.c</code> 和 <code>../src/Code</code></li><li>其实创建一个表单<ul><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/6.png" title="此处为使用上文的HelloHtml.html中的表单演示 表单提交至show 文件中"></li></ul></li><li>其中这个show 将获取HelloHtml.html表单中的内容然后使用请求转发把值传至code 中进行打印</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*show*/</span></span><br><span class="line"><span class="keyword">package</span> Rd_And_Rs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Demo.HelloServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Show</span> <span class="keyword">extends</span> <span class="title">HelloServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Show`s Get is OK!"</span>);</span><br><span class="line"></span><br><span class="line">        RequestDispatcher dispatcher = req.getRequestDispatcher(<span class="string">"/src/Code"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"id"</span>,<span class="number">10223</span>);</span><br><span class="line">        dispatcher.forward(req,resp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get is ok"</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"你好世界！注册成功！您的id为"</span> + request.getAttribute(<span class="string">"id"</span>));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"用户名为： "</span> + <span class="keyword">new</span> String(request.getParameter(<span class="string">"un"</span>)));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"密码为： "</span> + request.getParameter(<span class="string">"pw"</span>));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"请牢记！你们用户名和密码（づ￣3￣）づ╭❤～"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><ul><li>注意乱码问题！</li><li>要使用请求转发 首先要获取一个<code>RequestDispatcher</code>对象，该对象可以通过request对象的<code>getRequestDispatcher(&quot;xx&quot;);</code>方法进行获取。其实使用该<code>RequestDispatcher</code>对象的方法 <code>forward(req,resp);</code>进行跳转至request对象的<code>getRequestDispatcher(&quot;xx&quot;);</code>方法括号中填写的页面</li><li>注意！<code>getRequestDispatcher(&quot;xx&quot;);</code>该方法中的参数 默认是以项目路径为准的，而不像重定向中以该Servlet 文件为准，即：你在括号中只填一个‘<code>&#39;/&#39;</code>它意味着是项目路径 下的 xxxx</li><li>请求转发可以实现每个页面的数据传送不像重定向。</li><li>请求转发中使用request对象的<code>setAttribute(“xx”,aaaa);</code>和 <code>getAttribute(&quot;xx&quot;)</code>方法自行设置传输数据和获取自定义的数据</li><li>请求转发中进行跳转时默认是使用post进行数据提交</li></ul><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/6.5.png" title="使用HelloHtml.html中的表单进行填写"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/7.png" title="可以发现页面前面地址栏中的内容提交后 为show.c而不是Code这个文件对应的 code 地址，说明前后的页面跳转是由服务器来实现的,其次使用自行设置的数据也传输成功"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/8.png" title="请求跳转是使用post请求"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/9.png" title="在合理设置字符集后，使用中文字符依旧成功"><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;页面跳转的两种方式&quot;&gt;&lt;a href=&quot;#页面跳转的两种方式&quot; class=&quot;headerlink&quot; title=&quot;页面跳转的两种方式&quot;&gt;&lt;/a&gt;页面跳转的两种方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;请求转发&lt;ul&gt;
&lt;li&gt;服务器内部的转发,服务器内部跳转&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.4)Servlet响应、请求乱码问题</title>
    <link href="https://shuhaohwang.github.io/2020/01/18/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-4-Servlet%E5%93%8D%E5%BA%94%E3%80%81%E8%AF%B7%E6%B1%82%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://shuhaohwang.github.io/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/</id>
    <published>2020-01-18T12:13:35.000Z</published>
    <updated>2020-01-18T13:29:37.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="响应时的乱码"><a href="#响应时的乱码" class="headerlink" title="响应时的乱码"></a>响应时的乱码</h4><p>当Servlet向网站进行响应时，在响应的过程中，Java源程序的中文字符串数据发生至网站站点，可能会出现乱码问题，如下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get is ok"</span>);</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"你好世界"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文是通过get请求，当打开该servlet后，会打印一个html页面出来。</p><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/1.png" title="源码中的你好世界为乱码"><p>可以发现，响应至网站的内容含有中文的部分变为乱码 无法识别</p><h5 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h5><p>对于本案例，可以直接在html标签中的<code>&lt;Head&gt;</code>标签中添加<code>&lt;meta charset = &#39;utf-8&#39;/&gt;</code>来实现</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">   PrintWriter out = response.getWriter();</span><br><span class="line">   out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;meta charset = 'utf-8'/&gt;&lt;/HEAD&gt;"</span>);<span class="comment">//进行添加&lt;meta charset = 'utf-8'/&gt;</span></span><br><span class="line">   out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"This is "</span>);</span><br><span class="line">   out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">   out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"你好世界"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">   out.flush();</span><br><span class="line">   out.close();</span><br></pre></td></tr></table></figure></li></ul><h5 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h5><p>  可以直接对content-type属性进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//response.setContentType("text/html");</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset = utf-8"</span>);<span class="comment">//对其识别字符集进行设置</span></span><br><span class="line">   PrintWriter out = response.getWriter();</span><br><span class="line">   out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/2.png" title="可以看出中文字符被解析成功"><hr><h5 id="附加：content-type"><a href="#附加：content-type" class="headerlink" title="附加：content-type"></a>附加：content-type</h5><ul><li><p>Content-Type</p><ul><li>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</li></ul></li><li><p>常见的媒体格式类型如下：</p><ul><li>text/html ： HTML格式</li><li>​    text/plain ：纯文本格式      </li><li>​    text/xml ：  XML格式</li><li>​    image/gif ：gif图片格式    </li><li>​    image/jpeg ：jpg图片格式 </li><li><p>​    image/png：png图片格式</p><p>以application开头的媒体格式类型：</p></li></ul><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml     ： XML数据格式</li><li>application/atom+xml  ：Atom XML聚合格式    </li><li>application/json    ： JSON数据格式</li><li>application/pdf       ：pdf格式  </li><li>application/msword  ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li><p>application/x-www-form-urlencoded ： <code>&lt;form encType=&quot;&quot;&gt;</code>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</p><p>另外一种常见的媒体格式是上传文件之时使用的：</p></li><li><p>​    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</p></li></ul></li></ul><hr><h4 id="请求时的乱码"><a href="#请求时的乱码" class="headerlink" title="请求时的乱码"></a>请求时的乱码</h4><p>当我们通过表单进行获取用户名或者密码的时候，通常可能会出现提交的时候用户名是中文字符，当提交至服务器进行处理的时候，这个阶段就可能会出现中文的乱码。</p><ul><li>通过post提交来处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line"></span><br><span class="line">    String n = request.getParameter(<span class="string">"um"</span>);</span><br><span class="line">    String pw = request.getParameter(<span class="string">"pw"</span>);</span><br><span class="line">    System.out.println(<span class="string">"用户名:"</span> + n);</span><br><span class="line">    System.out.println(<span class="string">"密码:"</span> + pw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/3.png" title="实际服务器中获取的不是对应的中文用户名，而是一段乱码"><h5 id="对于post提交"><a href="#对于post提交" class="headerlink" title="对于post提交"></a>对于post提交</h5><h6 id="解决方案1-1"><a href="#解决方案1-1" class="headerlink" title="解决方案1"></a>解决方案1</h6><p>通过使用 <code>request.setCharacterEncoding(&quot;utf-8&quot;);</code>来设置请求req对象的获取请求的字符集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">    </span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);<span class="comment">//设置获取的字符集</span></span><br><span class="line"></span><br><span class="line">        String n = request.getParameter(<span class="string">"um"</span>);</span><br><span class="line">        String pw = request.getParameter(<span class="string">"pw"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户名:"</span> + n);</span><br><span class="line">        System.out.println(<span class="string">"密码:"</span> + pw);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/4.png" title="可以发现获取的中文字符已经不是乱码"><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;响应时的乱码&quot;&gt;&lt;a href=&quot;#响应时的乱码&quot; class=&quot;headerlink&quot; title=&quot;响应时的乱码&quot;&gt;&lt;/a&gt;响应时的乱码&lt;/h4&gt;&lt;p&gt;当Servlet向网站进行响应时，在响应的过程中，Java源程序的中文字符串数据发生至网站站点，可能会出现乱
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.3)Servlet实操、获取表单内容</title>
    <link href="https://shuhaohwang.github.io/2020/01/16/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-3-Servlet%E5%AE%9E%E6%93%8D%E3%80%81%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%86%85%E5%AE%B9/"/>
    <id>https://shuhaohwang.github.io/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/</id>
    <published>2020-01-16T11:12:06.000Z</published>
    <updated>2020-01-16T12:48:20.525Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h4><ul><li>HTTP协议定义了GET和POST两种请求方法，POST方法是对请求发送的数据量没有限制</li><li>GET是使用明文在浏览器地址栏直接显示请求字符串</li><li>post是将数据隐含在HTTP协议的请求报文中发送至服务器</li></ul><p>说白了。GET请求是在用浏览器地址栏直接访问才会发出，而post为网页来发出的隐性请求。从方式来看Post请求比Get请求更加安全。</p><hr><h4 id="Servlet实操"><a href="#Servlet实操" class="headerlink" title="Servlet实操"></a>Servlet实操</h4><h5 id="Servlet的两个入口"><a href="#Servlet的两个入口" class="headerlink" title="Servlet的两个入口"></a>Servlet的两个入口</h5><p>Servlet的两个入口也就是上面说的Get和Post，要实现网页网站与Servlet的交互就是通过Get和Post来做到。</p><h5 id="Servlet的配置与编写"><a href="#Servlet的配置与编写" class="headerlink" title="Servlet的配置与编写"></a>Servlet的配置与编写</h5><h6 id="Servlet的编写"><a href="#Servlet的编写" class="headerlink" title="Servlet的编写"></a>Servlet的编写</h6><p>在创建好JavaWeb项目后在src包中编写一个<strong>Servlet</strong>并让其继承于<strong>HttpServlet</strong>类。</p><p>根据上述，要实现网站与Servlet的交互就要通过Get和Post来实现，所以可以通过Servlet类中的doGet和doPost的方法重写来实现上述操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重写doGet和doPost方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Get请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Post请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Servlet的配置"><a href="#Servlet的配置" class="headerlink" title="Servlet的配置"></a>Servlet的配置</h6><p>完成Servlet文件的编写后，如何通过项目的网页来运行它。这就要在项目的XML文件对这个Servlet进行配置</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/1.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Web.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.Test<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;web-app&gt;</code>标签内添加<code>&lt;servlet&gt;</code>标签用来引用编写的<strong>servlet</strong>，其中<code>&lt;servlet-name&gt;</code>来标组<strong>servlet</strong>的名字</p><p>然后在<code>&lt;servlet-class&gt;</code>给出对应要实现的<strong>servlet</strong>所在的项目路径。</p><p>完成上诉后，还不能运行所编写的<strong>servlet</strong>，还要对项目的<strong>servlet</strong>进行路径连接，通过<code>&lt;servlet-mapping&gt;</code>标签来编辑配置<strong>servlet</strong>的连接。同样<code>&lt;servlet-name&gt;</code>标签来指明<code>&lt;servlet&gt;</code>标签内所添加的<strong>servlet</strong>名，而<code>&lt;url-pattern&gt;</code>标签则为设置<strong>servlet</strong>的链接结点地址映射。</p><p>完成后即可运行Tomcat服务器来启动该项目</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/2.png" title="可以发现通过一开始配置的servlet的链接结点地址映射进行访问即可运行Test中的内容"><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/3.png" title="可以发现直接在地址栏中进行访问的是get请求"><p>上面演示的就为<strong>servlet</strong>的编写与配置的简单演示</p><hr><h4 id="servlet实操-通过post请求获取网站表单内容"><a href="#servlet实操-通过post请求获取网站表单内容" class="headerlink" title="servlet实操 通过post请求获取网站表单内容"></a>servlet实操 通过post请求获取网站表单内容</h4><h5 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h5><p>开始之前，<strong>servlet</strong>如何来获取网站里的内容？它实质是通过doGet或者doPost中获取的<strong>requst</strong>对象来获取网站中提取的内容。</p><p>对此有下列方法来实现提取网站返回的<strong>requst</strong>对象中的内容</p><div class="table-container"><table><thead><tr><th>说明</th><th>方法名</th></tr></thead><tbody><tr><td>获取单值请求参数的方法</td><td>getParamter();</td></tr><tr><td>获取多值请求参数地方</td><td>getParamterValues();</td></tr><tr><td>获取请求参数名字的方法</td><td>getParamterNames();</td></tr><tr><td>获取session对象的方法</td><td>getSession();</td></tr><tr><td>获取Web应用根路径的方法</td><td>getContextPath();</td></tr><tr><td>获取Servlet路径的方法</td><td>getServletPath();</td></tr><tr><td>获取request中的属性的方法</td><td>getAttribute();</td></tr><tr><td>设置request中的属性的方法</td><td>setAttribute();</td></tr><tr><td>获取请求转发对象的方法</td><td>getRequsetDispatcher();</td></tr></tbody></table></div><h5 id="例子：获取网站中表单中内容"><a href="#例子：获取网站中表单中内容" class="headerlink" title="例子：获取网站中表单中内容"></a>例子：获取网站中表单中内容</h5><h6 id="表单页面的实现"><a href="#表单页面的实现" class="headerlink" title="表单页面的实现"></a>表单页面的实现</h6><p>所先通过项目自带的index.jsp来实现一个简单表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">15</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">05</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ShuHao`s Test&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  This is a page of index；</span><br><span class="line">  &lt;form action=<span class="string">"./src/DataPost.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">      用户名：</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> name=<span class="string">"UserName"</span>/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      性别：</span><br><span class="line">      &lt;input type="radio" name="Sex" value="NULL" checked&gt;私密&lt;/input&gt;</span><br><span class="line">      &lt;input type="radio" name="Sex" value="Man" &gt;男&lt;/input&gt;</span><br><span class="line">      &lt;input type="radio" name="Sex" value="Woman"&gt;女&lt;/input&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      爱好：</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Reading"&gt;看书&lt;/input&gt;</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Shopping"&gt;购物&lt;/input&gt;</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Sport"&gt;运动&lt;/input&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      城市：</span><br><span class="line">      &lt;select name=<span class="string">"City"</span>&gt;</span><br><span class="line">          &lt;option value="BeiJing"&gt;北京&lt;/option&gt;</span><br><span class="line">          &lt;option value="ShangHai"&gt;上海&lt;/option&gt;</span><br><span class="line">          &lt;option value="GuangDong"&gt;广东&lt;/option&gt;</span><br><span class="line">          &lt;option value="Etc"&gt;其他&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      个人描述:</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;textarea name="introduction" id="" cols="30" rows="10"&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>value=<span class="string">"提交！_(:з」∠)_"</span>/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/4.png" title="上述实现的页面样子"><p>这里要注意。表单<code>&lt;form&gt;</code>标签内的action要填写对应<strong>servlet</strong>对应的链接结点地址映射，提交方法为<strong>post</strong>请求</p><h6 id="servlet的编写"><a href="#servlet的编写" class="headerlink" title="servlet的编写"></a>servlet的编写</h6><p>页面点击提交后，程序只会看对应表单内的name属性和value属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*防止乱码，在使用response对象和request对象的时候就提前设置好字符编码*/</span></span><br><span class="line">       resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">       req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">       String name = req.getParameter(<span class="string">"UserName"</span>);</span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + name);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"性别:"</span> + req.getParameter(<span class="string">"Sex"</span>));</span><br><span class="line"></span><br><span class="line">       String[]hobby = req.getParameterValues(<span class="string">"Hobby"</span>);</span><br><span class="line">       System.out.print(<span class="string">"爱好："</span>);</span><br><span class="line">       <span class="keyword">for</span> (String str:hobby)System.out.print(str+<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println();</span><br><span class="line">       System.out.println(<span class="string">"城市:"</span> + req.getParameter(<span class="string">"City"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"个人介绍:\n"</span> + req.getParameter(<span class="string">"introduction"</span>));</span><br><span class="line"></span><br><span class="line">       resp.getWriter().print(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Data is Posted&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Post请求"</span>);</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的servlet地址映射为<code>“/src/DataPost.php”</code></p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/4.5.png"><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/5.png" title="测试填写表单里的内容"><p>点击提交后</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/6.png" title="会跳到对应表单action属性设置的servlet链接映射地址"><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/7.png" title="可以发现，表单填写的内容通过post请求获取到了"><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="对应多个servlet进行配置"><a href="#对应多个servlet进行配置" class="headerlink" title="对应多个servlet进行配置"></a>对应多个servlet进行配置</h5><p>对应多个servlet进行配置的时候，要通过多个<code>&lt;servlet&gt;</code>标签</p><p>例如：我要对一开始编写的名为Test的<strong>servlet</strong>和实操例子中的名为MyServlet的<strong>servlet</strong>进行配置，则要分开进行对其逐一配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.Test<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/DataPost.php<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对于项目web-xml项目中-lt-url-pattern-gt-标签中的内容"><a href="#对于项目web-xml项目中-lt-url-pattern-gt-标签中的内容" class="headerlink" title="对于项目web.xml项目中 &lt;url-pattern&gt;标签中的内容"></a>对于项目web.xml项目中 <code>&lt;url-pattern&gt;</code>标签中的内容</h5><p><code>&lt;url-pattern&gt;</code>标签内的地址映射可以写除中文和其他字符的所有内容，把地址写为后缀.php都可以。</p><p><br></p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;HTTP请求方式&quot;&gt;&lt;a href=&quot;#HTTP请求方式&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求方式&quot;&gt;&lt;/a&gt;HTTP请求方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HTTP协议定义了GET和POST两种请求方法，POST方法是对请求发送的数据量
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.2)Tomcat配置编辑器及Servlet介绍</title>
    <link href="https://shuhaohwang.github.io/2020/01/15/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-2-Tomcat%E9%85%8D%E7%BD%AE%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8AServlet%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuhaohwang.github.io/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/</id>
    <published>2020-01-15T12:06:32.000Z</published>
    <updated>2020-01-15T13:01:54.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IDEA添加Tomcat"><a href="#IDEA添加Tomcat" class="headerlink" title="IDEA添加Tomcat"></a>IDEA添加Tomcat</h4><p>自用：<a href="https://blog.csdn.net/wsjzzcbq/article/details/89463304" target="_blank" rel="noopener">https://blog.csdn.net/wsjzzcbq/article/details/89463304</a></p><h4 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h4><ul><li><strong>Servlet</strong>是用Java语言编写的程序，它运行在Web服务器上，用以处理来自客户端的请求；</li><li>它一般会把处理的结果以HTML形式进行返回，在客户端形成动态网页</li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>Servlet</strong>运行在Web服务器中，可以扩展服务器的功能</li><li><strong>Servlet</strong>可以和其他资源交互(例如：用文件IO流读取文件)，从而返回给客户端相应的内容，这样就形成了动态网页；</li><li>使用Java编写，所以能够跨平台</li><li>Java的所有优点都可以在<strong>Servlet</strong>中体现；</li><li><strong>Servlet</strong>很安全，因为访问<strong>Servlet</strong>的唯一途径是通过服务器</li><li>只有符合<strong>Servlet</strong>规范的<strong>Servlet容器</strong>(例如：Tomcat)都可以运行Servlet</li></ul><h5 id="Servlet容器"><a href="#Servlet容器" class="headerlink" title="Servlet容器"></a>Servlet容器</h5><ul><li><p><strong>Servlet</strong>和我们以往见过的普通Java类一样，在需要的时候被实例化，在不需要的时候被销毁，而<strong>Servle</strong>t的实例化和销毁工作由 <strong>Servlet容器</strong> 来完成</p></li><li><p><strong>Servlet</strong>在<strong>Servlet容器</strong>内运行，<strong>Servlet容器</strong> 负责调度<strong>Servlet</strong>，并控制着<strong>Servlet</strong>的生命周期</p></li><li><p><strong>Tomcat</strong> 即是Web服务器软件，同时也是符合规范的<strong>Servlet</strong>容器</p></li></ul><h5 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h5><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/1.png"><h5 id="Servlet常用核心API"><a href="#Servlet常用核心API" class="headerlink" title="Servlet常用核心API"></a><strong>Servlet</strong>常用核心API</h5><div class="table-container"><table><thead><tr><th>接口名</th><th>说明</th><th>包</th></tr></thead><tbody><tr><td>Servlet</td><td>这是每个<strong>Servlet</strong>都必须实现的接口，它定义了一系列必须由<strong>Servlet</strong>实现的方法</td><td>Java.servlet</td></tr><tr><td>ServletRequest</td><td>此接口用于将客户端的请求信息传送给Servlet</td><td>Java.servlet</td></tr><tr><td>ServletResponse</td><td>此接口用于对客户端做出响应</td><td>Java.servlet</td></tr><tr><td>HttpServletRequest</td><td>该接口扩展ServletRequest接口，定义了一系列于描述HTTP请求的方法</td><td>Java.servlet.http</td></tr><tr><td>HttpServletResponse</td><td>该接口扩展ServletResponse接口，提供服务器对客服端的响应对象</td><td>Java.servlet.http</td></tr></tbody></table></div><hr><h4 id="IDEA-Servlet-快速上手"><a href="#IDEA-Servlet-快速上手" class="headerlink" title="IDEA Servlet 快速上手"></a>IDEA <strong>Servlet</strong> 快速上手</h4><ul><li>创建一个JavaWeb动态Web项目</li></ul><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/2.png"><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/3.png"><ul><li>在项目src文件中创建包和类</li></ul><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/4.png"><ul><li>编写类文件<ul><li>注解<code>@WebServlet(&quot;XXXX&quot;)</code>括号内为地址文件 例如 <code>@WebServlet(&quot;/hello.html&quot;)</code>在Tomcat服务器启动后 可以使用 localhost:8080/hello.html 来执行该类中的代码</li><li>需要继承<code>HttpServlet类</code>再实现其内部的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/hello.html"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代码被执行"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"&lt;script&gt;alert('He1231231231231231266666666666666ld')&lt;/script&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：</p><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/5.png"><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/6.png"><hr><p>—(本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;IDEA添加Tomcat&quot;&gt;&lt;a href=&quot;#IDEA添加Tomcat&quot; class=&quot;headerlink&quot; title=&quot;IDEA添加Tomcat&quot;&gt;&lt;/a&gt;IDEA添加Tomcat&lt;/h4&gt;&lt;p&gt;自用：&lt;a href=&quot;https://blog.csdn.
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构解题错题和知识积累</title>
    <link href="https://shuhaohwang.github.io/2020/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E9%A2%98%E9%94%99%E9%A2%98%E5%92%8C%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    <id>https://shuhaohwang.github.io/2020/01/14/数据结构解题错题和知识积累/</id>
    <published>2020-01-13T17:29:50.000Z</published>
    <updated>2020-01-13T17:30:59.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构基础知识"><a href="#数据结构基础知识" class="headerlink" title="数据结构基础知识"></a>数据结构基础知识</h3><ul><li>计算机算法指的是解决某一问题的有限运算序列</li><li>常用的时间复杂度所耗费的时间从小到大依次是：<ul><li>O(1 )&lt; O(logn) &lt; O(n) &lt; O(n*logn) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</li></ul></li><li>若一个算法的时间复杂度用T(n)表示着这个n代表的是该<strong>_问题的规模_</strong>    </li><li>算法的5个重要特征有<ul><li>有穷性：一个算法一定要保证在有限步之后结束。</li><li>确定性：算法的每一步骤必须有确切的定义</li><li>输入：一个算法必须有输入，可以是0个也可以是多个</li><li>输出：一个算法必须有输出，可以是一个或多个，没有输出的算法是没有意义的</li><li>可行性：算法原则上能够精确地运行，而且做有限次运算后即可完成</li></ul></li><li>算法的计算量大小称算法的 <strong>时间复杂度</strong></li><li>数据结构通常是研究数据的 <strong>存储结构和逻辑结构</strong> 及它们之间的相互联系</li><li>抽象数据类型与计算机内部表示和实现无关</li><li>数据的逻辑结构与数据元素本身的内容和形式无关</li><li>数据的最小单位是 <strong>数据项</strong></li><li>在数据结构中，从逻辑上可以分为 线性结构和非线性结构</li></ul><hr><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><ul><li><p>数据结构上相互之间存在<strong>_一种或多种特定关系_</strong>的数据元素的集合</p></li><li><p>在单链表中设置头节点的作用是<strong>_简化插入和删除操作_</strong></p></li><li><p>数据的逻辑结构是数据间关系的描述</p></li><li><p>线性表是典型的线性结构</p></li><li><p>顺序表将线性表中数据元素之间的相邻关系映射为数据物理位置上的相邻关系</p></li><li><p>带头节点的双向循环链表为空表的条件是 _head == head-&gt;next_</p></li><li><p>顺序存储结构是通过<strong>_结点物理上的相邻_</strong>表示元素之间的关系</p></li><li><p>链式存储结构上通过<strong>_指针_</strong>表示元素之间的关系</p></li></ul><hr><h4 id="线性表习题"><a href="#线性表习题" class="headerlink" title="线性表习题"></a>线性表习题</h4><h5 id="1-在顺序表-长度为127-中插入一个元素平均（63-5）个元素。"><a href="#1-在顺序表-长度为127-中插入一个元素平均（63-5）个元素。" class="headerlink" title="1.在顺序表(长度为127)中插入一个元素平均（63.5）个元素。"></a>1.在顺序表(长度为127)中插入一个元素平均（63.5）个元素。</h5><ul><li><strong>解决</strong>：在长度为n的顺序表中插入一个元素平均移动2/n个元素<br><br></li></ul><h5 id="2-单链表中，增加一个头结点的目的是为了-方便运算"><a href="#2-单链表中，增加一个头结点的目的是为了-方便运算" class="headerlink" title="2.单链表中，增加一个头结点的目的是为了(方便运算)"></a>2.单链表中，增加一个头结点的目的是为了(<u>方便运算</u>)</h5><ul><li><strong>解决</strong>：头结点的目的是为了(<u>方便运算</u>)</li></ul><p>​    <br></p><hr><h3 id="栈，队列，数组"><a href="#栈，队列，数组" class="headerlink" title="栈，队列，数组"></a>栈，队列，数组</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li>函数调用时，系统要用栈保存必要的消息</li><li>栈和队列都是线性表，只是在插入和删除时受到了限制(true)</li><li>消除递归不一定需要使用栈(true)</li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li><p>循环队列可以解决普通队列中假溢出的问题(<strong>循环队列防止假溢出</strong>)</p></li><li><p>循环队列中的一些常用判断条件</p><ul><li>队列为满的条件：(rear + 1) % MaxSize == front</li><li>队列为空的条件：front == rear</li><li>队列中元素的个数：(rear - front + MaxSize) % MaxSize</li><li>入队：rear = (rear+1) % MaxSize</li><li>出队：front = (front+1) % MaxSize</li></ul></li><li><p>用链接方式存储的队列，在进行插入运算时 头、尾指针可能都要修改</p></li><li><p>用循环链表表示的队列长度为n，若只设头指针，则出队和入队的时间复杂度分别是<strong>O(1)</strong>和<strong>O(n)</strong>;若只设尾指针，则出队和入队的时间复杂度分别是<strong>O(1)</strong>和<strong>O(1)</strong></p><p>​    </p></li></ul><h4 id="串"><a href="#串" class="headerlink" title="串"></a>串</h4><ul><li>KMP算法的特点是在模式匹配时指示主串的指针不会变小。</li><li>串是一种特殊的线性表，特殊<strong>在数据元素是一个字符</strong></li><li>设有两个串S1和S2，求S2在S1首次出现的位置的运算称作<strong>模型匹配</strong></li><li>字符串的子串数目为 <code>n(n+1)/2 + 1</code>（这里的加一是把空串也加上了）</li></ul><h4 id="栈，队列，数组的习题"><a href="#栈，队列，数组的习题" class="headerlink" title="栈，队列，数组的习题"></a>栈，队列，数组的习题</h4><h5 id="1-一个栈的输入序列为123…-n-若输出序列的第一个元素是n-输出第i-1-lt-i-lt-n-个元素是-n-i-1"><a href="#1-一个栈的输入序列为123…-n-若输出序列的第一个元素是n-输出第i-1-lt-i-lt-n-个元素是-n-i-1" class="headerlink" title="1.一个栈的输入序列为123….n,若输出序列的第一个元素是n,输出第i(1 &lt;= i &lt;=n)个元素是(n-i+1)"></a>1.一个栈的输入序列为123….n,若输出序列的第一个元素是n,输出第i(1 &lt;= i &lt;=n)个元素是(<u>n-i+1</u>)</h5><ul><li><strong>解决</strong>：使用代入法 当n等于 4的时候 输出第一个元素就为4 第二个为 3 通过代入获得</li><li><strong>错因</strong>：以为第一个取出后整体长度变短了一位</li></ul><p><br></p><h5 id="2-已知字符串S为“abaabaabacacaabaabcc”-模式串t为“abaabc”-采用KMP算法进行匹配，第一次出现“失配”-s-i-t-i-时，i-j-5-则下次开始匹配时，i和j的值分别是（i-5-j-2）"><a href="#2-已知字符串S为“abaabaabacacaabaabcc”-模式串t为“abaabc”-采用KMP算法进行匹配，第一次出现“失配”-s-i-t-i-时，i-j-5-则下次开始匹配时，i和j的值分别是（i-5-j-2）" class="headerlink" title="2.已知字符串S为“abaabaabacacaabaabcc”. 模式串t为“abaabc”, 采用KMP算法进行匹配，第一次出现“失配”(s[i] != t[i])时，i = j = 5,则下次开始匹配时，i和j的值分别是（i = 5; j = 2）"></a>2.已知字符串S为“abaabaabacacaabaabcc”. 模式串t为“abaabc”, 采用KMP算法进行匹配，第一次出现“失配”(s[i] != t[i])时，i = j = 5,则下次开始匹配时，i和j的值分别是（<u>i = 5; j = 2</u>）</h5><ul><li><strong>解决</strong>：</li></ul><p><br></p><h5 id="3-设S为一个长度为n的字符串-其中的字符各不相同，则S中的互异的非平凡子串-非空且不同于S本身-的个数为-n-n-1-2-1"><a href="#3-设S为一个长度为n的字符串-其中的字符各不相同，则S中的互异的非平凡子串-非空且不同于S本身-的个数为-n-n-1-2-1" class="headerlink" title="3.设S为一个长度为n的字符串,其中的字符各不相同，则S中的互异的非平凡子串(非空且不同于S本身)的个数为( n(n+1)/2 - 1 )"></a>3.设S为一个长度为n的字符串,其中的字符各不相同，则S中的互异的非平凡子串(非空且不同于S本身)的个数为( <u>n(n+1)/2 - 1</u> )</h5><ul><li><p><strong>解决</strong>：比如S字串为”abcdefg”,长度为7.则S中的包含的互不相同的字串有如下一些：<br>1.长度为6的个数为2：”abcdef”和”bcdefg”<br>2.长度为5的个数为3：”abcde”,”bcdef”,”cdefg”<br>.<br>6.长度为1的个数为7：”a”,”b”,”c”,”d”,”e”,”f”,”g”<br>个数总和就是2+3+4+5+6+7 = (1+2+3+..+7) - 1 = 7x(7+1)/2 - 1.<br>其中：<br>1+2+3+…+n = (1+n) + (2+(n-1)) + (3+(n-2)) + …（首尾两项相加的和都是n+1,共 n/2个）<br>= n(n+1)/2 </p><p>再减去S本身 得n(n+1)/2  - 1</p></li></ul><p><br></p><h5 id="4-组成串的数据元素只能是-字符、【字符型】、【char】"><a href="#4-组成串的数据元素只能是-字符、【字符型】、【char】" class="headerlink" title="4.组成串的数据元素只能是(字符、【字符型】、【char】)"></a>4.组成串的数据元素只能是(字符、【字符型】、【char】)</h5><ul><li><strong>解决</strong>：组成串的数据元素只能是(<u>字符、【字符型】、【char】</u>)</li></ul><p><br></p><h5 id="5-字符串“ababaaaab”的nextVal数组值序列为-1-0-1-0-1-3-1-0）"><a href="#5-字符串“ababaaaab”的nextVal数组值序列为-1-0-1-0-1-3-1-0）" class="headerlink" title="5.字符串“ababaaaab”的nextVal数组值序列为(-1 0 -1 0 -1 3 1 0）"></a>5.字符串“ababaaaab”的nextVal数组值序列为(-1 0 -1 0 -1 3 1 0）</h5><ul><li><strong>解决</strong>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先给字符串进行标号</span><br><span class="line">1 2 3 4 5 6 7 8 9 </span><br><span class="line">a b a b a a a a b </span><br><span class="line">0 0 1 2 3 1 1 1 2  //求最大前缀后缀</span><br><span class="line">-1 0 0 1 2 3 1 1 1  //消除最后一位，前面补-1 右移动对齐 </span><br><span class="line">0 1 1 2 3 4 2 2 2//然后加1 得到next数组  (对应版本的next数组需要减 1 )</span><br><span class="line">0 1 0 1 0 4 2 2 1   //然后next数组与最大前缀后缀进行比较，如果相等填next数组对应的值，如果不相等 则填此时next数组值对应一开始标号序号的next值</span><br><span class="line"></span><br><span class="line">得到的最终结果 0 1 0 1 0 4 2 2 1 //全部减一得到</span><br><span class="line">-1 0 -1 0 -1 3 1 1 0 //为最终答案</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><ul><li>树的后根遍历序列等同于该树对应二叉树的中序遍历<ul><li>后根遍历就是后序遍历、中根，前根一样</li></ul></li><li>将森林转换成二叉树后，有以下的性质<ul><li>森林叶结点 <strong>n<sub>0</sub></strong> 的个数是其对应二叉树中 左指针为空的结点个数</li><li>森林中 度为1的结点 <strong>n<sub>1</sub></strong> 的个数是其对应二叉树中，右指针为空的结点个数</li></ul></li><li>采用孩子兄弟链表作存储结构，树的前序遍历和其相应的二叉树的前序遍历的结果是一样的</li><li>给定一颗树，可以找到唯一的一颗二叉树与之对应</li></ul><h4 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h4><ul><li>哈夫曼树中，所有的字符串结点都是和其他字符串结点或者权值结点构成子树，因此不可能存在度为1的结点 即：<strong>哈夫曼树中一定没有度为1的结点</strong></li><li>树中两个权值最小的结点一定是兄弟结点。</li><li>树中任一非叶结点的权值一定不小于下一任一结点的权值</li><li>若从二叉树的任一个结点出发，到根的路径上所经过的结点序列按其关键字有序，则该二叉树一定是哈夫曼树<strong>（X）</strong></li><li>一棵哈夫曼树的带权路径长度等于其中所有分支结点的权值之和 <strong>(X)</strong></li><li>在哈夫曼树中，任何一个结点的度都是( <strong>0 或 2</strong> )</li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li>从堆中删除一个元素的时间复杂度为(<strong>O(logn)</strong>)</li></ul><h4 id="二叉树对应的一些公式"><a href="#二叉树对应的一些公式" class="headerlink" title="二叉树对应的一些公式"></a>二叉树对应的一些公式</h4><ul><li>哈夫曼树的总结点数与叶节点数的关系<ul><li>由于哈夫曼树中没有度为1得结点. 只有度为0和度为2得结点. 则一棵<strong>有n个叶子结点</strong>得<strong>哈夫曼树</strong>共有<strong>2n-1个结点</strong></li></ul></li></ul><p><br></p><ul><li>在含有n个结点的树中，边数只能是 <strong>n-1</strong> 条</li></ul><p><br></p><ul><li>完全二叉树中，结点个数为n，结点的编号从1开始，则编号最大的分支结点的编号为 <strong>n/2</strong></li></ul><p><br></p><ul><li>一颗树高为K的完全二叉树至少有 <strong>2<sup>k-1</sup></strong> 个结点<ul><li>一棵高为k的完全二叉树，当第k层只有最左边一个结点时具有最少的结点。根据二叉树的性质，第1层到第k-1层共有结点2<sup>k-1</sup> - 1个，因此它至少有2<sup>k-1</sup> - 1 + 1 = 2<sup>k-1</sup>个结点。</li></ul></li></ul><p><br></p><ul><li>有 <strong>n</strong> 个结点，并且高度为 <strong>n</strong> 的二叉树的数目为 <strong>2<sup>n-1</sup></strong><br><br></li><li>叶子结点和二度结点数目关系：<strong>n<sub>0</sub>=n<sub>2</sub>+1</strong><ul><li>二叉树中的度<strong>只算出度</strong>，往下的出度为多少其度数就为多少</li></ul></li></ul><p><br></p><ul><li>如果这是一个<strong>完全二叉树</strong>，那么一度结点的个数是有限的，要么为0要么为1。所以可以最后得到结点总数目和叶子结点的关系：<ul><li>当n1=0时，n=2n0-1所以n0=(n+1)/2。这里的n为奇数。</li><li>当n1=1时，n=2n0所以n0=n/2。这里的n为偶数。</li></ul></li><li>一个具有n个节点的完全二叉树,其叶子节点的个数n<sub>0</sub>为: <strong>(n+1) / 2</strong> 向下取整。(重要！！！)</li></ul><h4 id="二叉树中的一些习题"><a href="#二叉树中的一些习题" class="headerlink" title="二叉树中的一些习题"></a>二叉树中的一些习题</h4><h5 id="1-将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是"><a href="#1-将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是" class="headerlink" title="1  将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是( )"></a>1  将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是( )</h5><p>Ⅰ．父子关系<br>Ⅱ．兄弟关系<br>Ⅲ．u的父结点与v的父结点是兄弟关系（X）</p><ul><li><strong>解析</strong>：森林与二又树的转换规则为“左孩子右兄弟”。在最后生成的二叉树中，父子关系在对应森林关系中可能是兄弟关系或原本就是父子关系。<br>情形Ⅰ：若结点v是结点u的第二个孩子结点，在转换时，结点v就变成结点u第一个孩子的右孩子，符合要求。<br>情形Ⅱ：结点u和v是兄弟结点的关系，但两者之中还有一个兄弟结点k，则转换后，结点v就变为结点k的右孩子，而结点k则是结点u的右孩子，符合要求。<br>情形Ⅲ：结点v的父结点是原先的父结点或兄弟结点。若结点u的父结点与v的父结点是兄弟关系，则转换之后，不可能出现结点u是结点v的父结点的父结点。</li></ul><h5 id="2-若用一维数组表示一个深度为5、结点个数为10的二叉树，数组的长度至少为-16"><a href="#2-若用一维数组表示一个深度为5、结点个数为10的二叉树，数组的长度至少为-16" class="headerlink" title="2.若用一维数组表示一个深度为5、结点个数为10的二叉树，数组的长度至少为(16)"></a>2.若用一维数组表示一个深度为5、结点个数为10的二叉树，数组的长度至少为(16)</h5><ul><li><strong>相关知识</strong>：二叉树存储在一个一维数组时，是以层次遍历来存储进一位数组的</li></ul><h5 id="3-已知一棵完全二叉树的第6层（设根是第1层）有8个叶结点，则该完全二叉树的结点个数最多是（111）"><a href="#3-已知一棵完全二叉树的第6层（设根是第1层）有8个叶结点，则该完全二叉树的结点个数最多是（111）" class="headerlink" title="3.已知一棵完全二叉树的第6层（设根是第1层）有8个叶结点，则该完全二叉树的结点个数最多是（111）"></a>3.已知一棵完全二叉树的第6层（设根是第1层）有8个叶结点，则该完全二叉树的结点个数最多是（111）</h5><ul><li><strong>解析</strong>：即第六层有32个节点，其中有8个是叶子节点，说明其余24个是有子节点的，又由于是完全二叉树，所以那24个节点每个节点有2个子节点，共计48个节点，也就是第七层的节点有48个，所以前六层的63加第七层的48就是111个节点了</li></ul><h5 id="4-若一棵二叉树的前序遍历序列为a，e，b，d，c，后序遍历序列为b，c，d，e，a，则根结点的孩子结点（A-只有e）"><a href="#4-若一棵二叉树的前序遍历序列为a，e，b，d，c，后序遍历序列为b，c，d，e，a，则根结点的孩子结点（A-只有e）" class="headerlink" title="4.若一棵二叉树的前序遍历序列为a，e，b，d，c，后序遍历序列为b，c，d，e，a，则根结点的孩子结点（A.只有e）"></a>4.若一棵二叉树的前序遍历序列为a，e，b，d，c，后序遍历序列为b，c，d，e，a，则根结点的孩子结点（A.只有e）</h5><p>A．只有e<br>B．有e、b<br>C．有e、c<br>D．无法确定</p><ul><li><strong>解析</strong>：根据题中给出的二叉树的前序遍历a、e、b、d、c和后序遍历b、c、d、e、a可以确定的是a为二叉树的根结点。那么根据前序遍历的访问次序为根结点、左子树、右子树，可以确定e为左子树或右子树的根结点，即根结点的孩子结点。假设e为左孩子结点，那么根据后序遍历的结果可知，b、c、d一定在左子树上，不可能为a的孩子结点。若e为右子树的根结点，根据前序遍历结果可知，此二又树没有左子树。</li></ul><h5 id="5-设F是一个森林-B是由F变换得到的二叉树-F中有n个非终端结点-则B中右指针域为空的结点为（C-n-1-）"><a href="#5-设F是一个森林-B是由F变换得到的二叉树-F中有n个非终端结点-则B中右指针域为空的结点为（C-n-1-）" class="headerlink" title="5.设F是一个森林,B是由F变换得到的二叉树.F中有n个非终端结点,则B中右指针域为空的结点为（C.n+1 ）"></a>5.设F是一个森林,B是由F变换得到的二叉树.F中有n个非终端结点,则B中右指针域为空的结点为（C.n+1 ）</h5><p>A.n-1</p><p>B.n </p><p>C.n+1 </p><p>D.n+2</p><ul><li><strong>解析</strong>：F有n个非终端节点,所以转换为二叉树后所有的空的右指针域(right)就是n个.<br>根节点没有兄弟,所以该右指针域也为空.(注:这里根节点也是一个有指针域.上文中根节点属于非终端节点,那里它所指向的右指针域不是它本身而是它的最右边的儿子.)<br>所以综上,二叉树中右指针域为空的节点有(n+1)个.</li></ul><h5 id="6-将森林F转换为对应的二叉树T，F中叶结点的个数等于-（C-T中左孩子指针为空的结点个数）"><a href="#6-将森林F转换为对应的二叉树T，F中叶结点的个数等于-（C-T中左孩子指针为空的结点个数）" class="headerlink" title="6.将森林F转换为对应的二叉树T，F中叶结点的个数等于 （C. T中左孩子指针为空的结点个数）"></a>6.将森林F转换为对应的二叉树T，F中叶结点的个数等于 （C. T中左孩子指针为空的结点个数）</h5><p>A. T中叶结点的个数</p><p>B. T中度为1的结点个数</p><p>C. T中左孩子指针为空的结点个数</p><p>D. T中右孩子指针为空的结点个数</p><ul><li><p><strong>解析</strong>：在二叉树中，节点的左指针指向其孩子，节点的右指针指向其兄弟。所以在一颗二叉树中，如果某个节点的左指针为NULL，就说明这个节点在原来的森林中没有孩子，是叶子结点，如果某个节点的右指针为NULL，就说明这个节点在原来的森林中没有兄弟。</p><p>所以森林中的叶子节点=二叉树中左指针为NULL的个数</p></li></ul><h5 id="7-一棵124个叶结点的完全二叉树，最多有-B-248-个结点。"><a href="#7-一棵124个叶结点的完全二叉树，最多有-B-248-个结点。" class="headerlink" title="7.一棵124个叶结点的完全二叉树，最多有(B. 248)个结点。"></a>7.一棵124个叶结点的完全二叉树，最多有(B. 248)个结点。</h5><p>A. 249</p><p>B. 248</p><p>C. 250</p><p>D. 247</p><ul><li><strong>解决</strong>：根据公式：<code>一个具有n个节点的完全二叉树,其叶子节点的个数n0为: (n+1) / 2 向下取整</code>，且题目中要求是最多几个结点，那么就极端假设，有N个结点，代入公式最大值有124.5个叶结点，向下取整得到的124个叶结点，所以用124.5反代公式得到的结果最多有248个结点</li></ul><hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul><li>图的深度遍历是一个递归过程</li><li>用邻接表存储图所用的空间大小(<strong>与图的顶点数和边数都有关</strong>)</li><li>判断一个有向图是否有环（回路）除了拓扑排序方法，还可以用( <strong>深度优先遍历</strong> )</li><li>若用邻接矩阵存储有向图，矩阵中主对角线以下的元素均为零，则关于该图拓扑序列的结论是 <strong>存在，可能不唯一</strong></li><li>在有向图G的的拓扑序列中，若顶点Vi在顶点Vj之前，则下列情形不可能出现的是 <strong>G中有一条从Vi到Vj的路径</strong></li><li>回路 <strong>不是</strong> 简单路径</li><li>在有向图的邻接表存储结构中，顶点v在链表中出现的次数是 <strong>顶点v的入度</strong></li><li>当各边上的权值 <strong>均相等</strong> 时，BFS算法可用来解决单源最短路径问题</li><li>无向连通图中，边数<strong>不一定大于</strong>顶点个数减1</li><li>无向连通图中，所有顶点的度数之和为偶数</li><li>无向连通图中，至少有一个顶点的度为1     ( <strong>X</strong> )</li><li><strong>迪杰克斯拉</strong> 最短路径算法从源点到其余顶点的最短路径的路径长度按 <strong>递增</strong> 次序依次产生，当弧上的权值为 <strong>负数</strong> 时，该算法不能正确产生最短路径</li><li>若一个有向图具有拓扑排序序列，那么它的邻接矩阵必定为 <strong>一般矩阵</strong></li><li>用邻接表存储图所用的空间大小 <strong>与图的顶点数和边数都有关</strong></li><li>n 个结点的无向图。若不允许结点到自身的边，也不允许结点到自身的边，也不允许结点到结点的多重编，且边的总数为 n(n-1)/2,则该无向图一定是连通图</li><li><strong>Floyed</strong> 求每对不同顶点对的算法中运行弧上的权为负，但不能有权和为负的回路</li><li>连通图上各边权值均不相同，则该图的最小生成树是唯一的</li></ul><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>对有 <strong>n</strong> 个顶点，<strong>e</strong> 条边且使用邻接表存储的有向图进行广度优先遍历，其算法时间复杂度是( <strong>O(n+e)</strong> )</li><li>若将 <strong>n</strong> 个顶点 <strong>e</strong> 条弧的有向图采用邻接表存储，则拓扑排序算法的时间复杂度( O(n+e) )</li></ul><h4 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h4><ul><li>图的BFS生成树的树高 h1 比DFS生成树的树高 h2 (<strong>小或者相等</strong>)</li></ul><h4 id="图的一些公式"><a href="#图的一些公式" class="headerlink" title="图的一些公式"></a>图的一些公式</h4><ul><li>设无向图的顶点个数为n，则该图<strong>最多</strong>有 <strong>n (n-1) / 2</strong>  条边。</li><li>一个有n个结点的图，最少有 <strong>1</strong>   个连通分量，最多有  <strong>n</strong>  个连通分量。</li><li>在一个<strong>无向图</strong>中，所有顶点的度数之和等于所有边数的 <strong>2</strong> 倍；</li><li>要连通具有 <strong>n</strong> 个顶点的有向图，至少需要 <strong>n</strong> 条边    （<strong>掉坑数</strong>：1）</li><li>一个 <strong>n</strong> 个顶点的连通无向图，其边的个数至少为 <strong>n-1</strong> </li><li>在有n 个顶点的有向图中，每个顶点的度最大可达 <strong>2*(n-1)</strong></li><li><strong>n </strong>个结点的<strong>完全有向图</strong>含有边的数目 <strong>n*(n-1)</strong></li><li>握手定理：各顶点度数之和 = 边数的两倍</li><li>在有 <strong>n</strong> 个顶点的有向图中，若要使任意两点间可以互相到达，则至少需要 <strong>n</strong> 条弧</li><li>若用 <strong>n</strong> 表示图中顶点数目，则有 <strong>n*(n-1)/2</strong> 条边的无向图称为完全图</li><li>无向图G 中有<strong>n</strong>个顶点 <strong>e</strong>条边，则其对应的邻接表中的表头结点 个数为 <strong>n</strong> ； 边表结点的个数为 2e</li></ul><h4 id="图的一些习题"><a href="#图的一些习题" class="headerlink" title="图的一些习题"></a>图的一些习题</h4><h5 id="1-G是一个非连通无向图，共有28条边，则该图至少有-9-个顶点"><a href="#1-G是一个非连通无向图，共有28条边，则该图至少有-9-个顶点" class="headerlink" title="1.G是一个非连通无向图，共有28条边，则该图至少有 9  个顶点"></a>1.G是一个非连通无向图，共有28条边，则该图至少有 <u>9</u>  个顶点</h5><ul><li><p><strong>解析</strong>：假设至少有N个顶点。由于是非连通图，并且要满足28条边，所以N=边为28的完全图（顶点最少）的顶点数+1（与完全图不连通）。 </p><p>完全图边数=28，解n(n-1)/2=28，得n=8，因此N=8+1=9.</p></li></ul><h5 id="2-下列关于无向连通图特性的叙述中，正确的是-A"><a href="#2-下列关于无向连通图特性的叙述中，正确的是-A" class="headerlink" title="2.下列关于无向连通图特性的叙述中，正确的是(A )"></a>2.下列关于无向连通图特性的叙述中，正确的是(A )</h5><p>Ⅰ．所有顶点的度之和为偶数<br>Ⅱ．边数大于顶点个数减1<br>Ⅲ．至少有一个顶点的度为1</p><p>A．只有Ⅰ<br>B．只有Ⅱ<br>C．Ⅰ和Ⅱ<br>D．Ⅰ和Ⅲ  </p><ul><li><strong>解析</strong>：考查无向连通图的特性。<br>Ⅰ．每条边都连接了两个结点，则在计算顶点的度之时，这条边都被计算了两次，故所有顶点的度之和为边数的两倍，显然必为偶数。<br>Ⅱ．边数大于顶点个数减1，如果定点数为3，则边数为2，边数=定点个数减1；<br>Ⅲ．在顶点数n≥3的完全有向图中，没有度为1的节点，如下图所示：</li><li>注意：对顶点数n≥3的无向完全图，不存在度为1的顶点，并且边数与顶点数的差要大于等于0。</li></ul><h5 id="3-若无向图G-V，E-中含7个顶点，为保证图G在任何情况下都是连通的，则需要的边数最少是-C"><a href="#3-若无向图G-V，E-中含7个顶点，为保证图G在任何情况下都是连通的，则需要的边数最少是-C" class="headerlink" title="3.若无向图G(V，E)中含7个顶点，为保证图G在任何情况下都是连通的，则需要的边数最少是(C )"></a>3.若无向图G(V，E)中含7个顶点，为保证图G在任何情况下都是连通的，则需要的边数最少是(C )</h5><p>A．6<br>B．15<br>C．16<br>D．20  </p><ul><li><strong>解析</strong>：要保证元向图G在任何情况下都是连通的，即任意变动图G中的边，G始终保持连通，首先需要G的任意6个结点构成完全连通子图G1，需15条边，然后再添一条边将第7结点与G1连接起来，共需16条边。</li></ul><hr><h3 id="排序与查找"><a href="#排序与查找" class="headerlink" title="排序与查找"></a>排序与查找</h3><h4 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h4><ul><li>为提高散列（Hash）表的查找效率，可以采取的正确措施是 <strong>设计冲突少的散列函数</strong></li><li>哈希查找中 不存在特别好与坏的哈希函数，要视情况而定</li><li>用哈希方法处理 冲突 时可能出现堆积现象，其中 <strong>平均查找长度</strong> 会手堆积现象的直接影响</li><li>随着装载因子a的增大，用闭散列法解决冲突，其平均搜索长度比用开散列法解决冲突时的平均搜索长度增长得慢 （<strong>X</strong>）</li><li>开放地址法：Hi=(H(key)+di) mod m,   其中H(key)为哈希函数，m为哈希表长，di为增量序列，增量序列有以下取法： <ul><li>di=1,2,3,4….,m-1 称为线性探测再散列 </li><li>di=1^2 ，- 1^2,2^2，- 2^2，…..,k^2,-k^2(k&lt;=m/2),称为<strong>二次探测再散列</strong> </li><li>di=伪随机数序列，称为随机探测再散列；</li></ul></li><li>采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找</li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>在排序过程中，对尚未确定最终位置的所有元素进行一遍处理称为一趟排序。其中 每一趟排序结束时都至少能够确定一个元素最终位置的方法是 <strong>简单选择排序、快速排序、堆排序</strong></li><li>归并排序既适合内排序也适合外排序</li><li>若不考虑基数排序，则在排序过程中，主要进行的两种基本排序操作是关键字的 <strong>比较</strong> 和记录的 <strong>移动</strong></li><li>为实现快速排序算法，待排序序列宜采用的存储方式是 <strong>顺序存储</strong></li><li><strong>n</strong> 个待排序的记录关键字，则在堆排序中需要 <strong>1</strong> 个辅助记录单元</li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li>当采用分块查找时，数据的组织方式为 数据分成若干块，每块内数据不必有序，但块间必须有序，没块内最大(或最小)的数据组成索引块</li></ul><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>设被排序的结点序列共有<strong>N</strong>个结点，在该序列中的结点已十分接近排序的情况下，用<strong>直接插入法</strong>的时间复杂度为<strong>O(N)</strong>,用 <strong>归并法</strong> 的时间复杂度为<strong>O(N*logN)</strong> 用<strong>快速排序法</strong>的时间复杂度为<strong>O(N^2)</strong></li></ul><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><ul><li>假定有<strong>K</strong>个关键字互为同义词，若用线性探测法吧这<strong>K</strong>个关键字存入散列表中，至少要进行<strong>k*(K+1)/2</strong>次探测</li></ul><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><h5 id="1-分别采用堆排序、快速排序、冒泡排序和归并排序，对初态为有序的表，则最省时间的是-冒泡排序，最费时间的是-快速排序"><a href="#1-分别采用堆排序、快速排序、冒泡排序和归并排序，对初态为有序的表，则最省时间的是-冒泡排序，最费时间的是-快速排序" class="headerlink" title="1.分别采用堆排序、快速排序、冒泡排序和归并排序，对初态为有序的表，则最省时间的是 冒泡排序，最费时间的是 快速排序"></a>1.分别采用堆排序、快速排序、冒泡排序和归并排序，对初态为有序的表，则最省时间的是 <u>冒泡排序</u>，最费时间的是 <u>快速排序</u></h5><ul><li><strong>扩展解析</strong>:简单排序的算法（直接插入，冒泡，简单选择排序）简单且稳定，适合与待排记录较小的情况，当当待排序的关键码序列已经基本有序时，用直接插入排序最快。<br>就平均时间的性能而言，快速排序最佳，即排序速度最快，所以在随机情况下，快速排序是最佳选择。一般情况下，快速排序效率最好。<br>既要节省空间，又要有较快的排序速度，堆排序是最佳选择，其不足之处是建堆时需要消耗较多时间。<br>若希望排序是稳定的，且有较快的排序速度，则可选用2路归并排序，其缺点需要较大的辅助空间分配</li></ul><h5 id="2-采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找-正确"><a href="#2-采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找-正确" class="headerlink" title="2.采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找(正确)"></a>2.采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找(正确)</h5><ul><li><strong>解析</strong>：考虑置空位置a后面存有数b，当查询b的时候，可能由于查询到a位置为空，就不往下查了，导致查询结果错误</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据结构基础知识&quot;&gt;&lt;a href=&quot;#数据结构基础知识&quot; class=&quot;headerlink&quot; title=&quot;数据结构基础知识&quot;&gt;&lt;/a&gt;数据结构基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机算法指的是解决某一问题的有限运算序列&lt;/li&gt;
&lt;li&gt;常用的时间复杂度所
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1-1)Tomcat安装与使用介绍</title>
    <link href="https://shuhaohwang.github.io/2020/01/14/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-1-Tomcat%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuhaohwang.github.io/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/</id>
    <published>2020-01-13T16:11:20.000Z</published>
    <updated>2020-01-13T17:32:12.307Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Tomcat介绍"><a href="#Tomcat介绍" class="headerlink" title="Tomcat介绍"></a>Tomcat介绍</h4><p>​    Tomcat 服务器是一个免费的开放源代码的Web 应用服务器是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noopener">HTML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073" target="_blank" rel="noopener">标准通用标记语言</a>下的一个应用）页面的访问请求。</p><p>​    说白了就是可以帮助你搭建服务器，从而上传自己的网站站点。当你访问开启Tomcat服务器电脑或者服务器的IP地址时即可访问该电脑或服务器里面的内容。</p><hr><h4 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h4><ul><li>安装步骤<ul><li>进入官网下载安装包</li><li>压解安装包</li><li>配置环境变量(重要！因为Tomcat是依靠于系统环境变量中的JAVA_HOME变量)</li><li>打开安装包里面的<code>bin</code>文件目录下的<code>startup.bat</code></li><li>打开浏览器 输入地址 <code>localhost:8080</code>验证安装是否成功</li></ul></li></ul><h5 id="安装包的下载"><a href="#安装包的下载" class="headerlink" title="安装包的下载"></a>安装包的下载</h5><ul><li>Tomcat官方站点<ul><li><a href="http://tomcat.apache.org" target="_blank" rel="noopener">http://tomcat.apache.org</a></li></ul></li><li>获取Tomcat安装包<ul><li>tar.gz文件是Linux操作系统下的安装版本</li><li>exe文件是window系统下的安装版本</li><li>zip文件是Windows系统下的压缩版本(推荐！压解即可运行)</li></ul></li></ul><h5 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h5><ul><li>JAVA_HOME 中必须配置，内容为jdk安装目录</li></ul><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/1.png"><ul><li>Path 中需要把jdk文档中的bin目录添入</li></ul><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/2.png"><h5 id="启动Tomcat服务器"><a href="#启动Tomcat服务器" class="headerlink" title="启动Tomcat服务器"></a>启动Tomcat服务器</h5><p>打开Tomcat文件目录下的bin文件里面的<code>startup.bat</code>，当出现Server startup in xxxx ms时 即为启动Tomcat服务器成功</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/3.png" title="出现此为启动成功"><h5 id="打开浏览器输入本机IP地址验证是否启动成功"><a href="#打开浏览器输入本机IP地址验证是否启动成功" class="headerlink" title="打开浏览器输入本机IP地址验证是否启动成功"></a>打开浏览器输入本机IP地址验证是否启动成功</h5><p>在浏览器中输入 localhost:8080 或者 127.0.0.1:8080 若打开的内容为下图所示即为 Tomcat 服务器安装且启动成功</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/4.png" title="Tomcat启动成功！"><hr><h5 id="Tomcat的其他问题"><a href="#Tomcat的其他问题" class="headerlink" title="Tomcat的其他问题"></a>Tomcat的其他问题</h5><ul><li><p>为啥一定要是8080端口？</p><ul><li><p>这个为Tomcat默认的端口设置，倘若端口被占用或者想修改为其他端口可以在Tomcat目录下的<code>conf</code> 中的<code>server.xml</code>文件中修改</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--server.xml--&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- A "Connector" represents an endpoint by which requests are received</span></span><br><span class="line"><span class="comment">         and responses are returned. Documentation at :</span></span><br><span class="line"><span class="comment">         Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</span></span><br><span class="line"><span class="comment">         Java AJP  Connector: /docs/config/ajp.html</span></span><br><span class="line"><span class="comment">         APR (HTTP/AJP) Connector: /docs/apr.html</span></span><br><span class="line"><span class="comment">         Define a non-SSL HTTP/1.1 Connector on port 8080</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- A "Connector" using the shared thread pool--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector executor="tomcatThreadPool"</span></span><br><span class="line"><span class="comment">               port="8080" protocol="HTTP/1.1"</span></span><br><span class="line"><span class="comment">               connectionTimeout="20000"</span></span><br><span class="line"><span class="comment">               redirectPort="8443" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的port 后的 <code>8080</code> 修改为其他端口即可</p></li><li><p><strong>注意</strong>！：修改后应该重启Tomcat服务器才会生效</p></li></ul></li></ul><hr><h4 id="Tomcat中发布自己的站点"><a href="#Tomcat中发布自己的站点" class="headerlink" title="Tomcat中发布自己的站点"></a>Tomcat中发布自己的站点</h4><p>在Tomcat文件中有一个<code>webapps</code>文件 里面即可放置自己的站点文件 来通过 服务器开启IP地址来访问对应的站点 或者文件 </p><p>这里我们在<code>webapps</code>创建一个<code>myweb</code>文件夹 里面放置了一个图片和一个测试的网站</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/7.png"><p>然后在Tomcat开启的IP地址后加<code>/myweb/xxx..</code>来访问对应的内容</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/8.png" title="访问文件中的图片"><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/9.png" title="访问文件中的html站点"><h5 id="虚拟目录映射"><a href="#虚拟目录映射" class="headerlink" title="虚拟目录映射"></a>虚拟目录映射</h5><p>虚拟目录映射就是把 你实际的目录例如上面的<code>127.0.0.1:8080/myweb/xxx..</code>中的<code>myweb/xxx</code>等实际目录信息替换成别的字符串，来起到便捷或者安全的作用  。</p><p><strong>例如：</strong>把 <code>myweb/xxx</code>替换成 <code>hello</code> 即 使用地址 <code>127.0.0.1:8080/hello</code>也可访问到<code>127.0.0.1:8080/myweb/xxx..</code>所访问的内容</p><p><strong>如何设置</strong></p><ul><li>打开tomcat目录中的<code>conf</code>文件下的<code>server.xml</code></li><li>在该文件下的 <code>&lt;Host&gt; ...&lt;/Host&gt;</code>中添加 <code>&lt;Context path =&quot;/XXXX(虚拟目录名称)&quot; docBase = &quot;myweb/xxx.(实际目录的名称)&quot;/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--server.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Host区域内添加相应内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--server.xml--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span> =<span class="string">"hello"</span> <span class="attr">docBase</span> = <span class="string">"myweb"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/10.png" title="可以发现用hello/index.html也可以访问 myweb/index.html"><hr><h4 id="Tomcat目录中的文件结构"><a href="#Tomcat目录中的文件结构" class="headerlink" title="Tomcat目录中的文件结构"></a>Tomcat目录中的文件结构</h4><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/11.png" title="Tomcat目录"><ul><li><strong>bin</strong> 文件<ul><li>存放启动和关闭 <strong>Tomcat</strong> 的脚本文件</li></ul></li><li><strong>conf</strong> 文件<ul><li>存放Tomcat服务器的各种配置文件</li></ul></li><li><strong>lib</strong> 文件<ul><li>存放<strong>Tomcat</strong>服务器的支撑jar包</li></ul></li><li><strong>logs</strong> 文件<ul><li>存放<strong>Tomcat</strong> 的日志文件</li></ul></li><li><strong>temp</strong> 文件<ul><li>存放 <strong>Tomcat</strong> 运行时产生的临时文件(缓存文件)</li></ul></li><li><strong>webpps</strong> 文件<ul><li>web应用的所在目录，即供外界访问的<strong>web</strong>资源的存放目录</li></ul></li><li><strong>work</strong> 文件<ul><li><strong>Tomcat</strong> 的工作目录</li></ul></li></ul><hr><p><strong>其他补充</strong>：当你访问服务器文件(例如上面的 myweb 文件夹) 下的其他应用文件(exe、MP3 、MP4….)时 会 启用下载</p><p>—-（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Tomcat介绍&quot;&gt;&lt;a href=&quot;#Tomcat介绍&quot; class=&quot;headerlink&quot; title=&quot;Tomcat介绍&quot;&gt;&lt;/a&gt;Tomcat介绍&lt;/h4&gt;&lt;p&gt;​    Tomcat 服务器是一个免费的开放源代码的Web 应用服务器是开发和调试JSP 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(1.1) view容器</title>
    <link href="https://shuhaohwang.github.io/2020/01/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-1-1-view%E5%AE%B9%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2020/01/12/微信小程序-1-1-view容器/</id>
    <published>2020-01-12T03:28:11.000Z</published>
    <updated>2020-01-12T13:08:39.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="View组件的一些属性"><a href="#View组件的一些属性" class="headerlink" title="View组件的一些属性"></a>View组件的一些属性</h4><h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>hover-class</td><td>string</td><td>none</td><td>否</td><td>指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td>1.0.0</td></tr><tr><td>hover-stop-propagation</td><td>boolean</td><td>false</td><td>否</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td>1.5.0</td></tr><tr><td>hover-start-time</td><td>number</td><td>50</td><td>否</td><td>按住后多久出现点击态，单位毫秒</td><td>1.0.0</td></tr><tr><td>hover-stay-time</td><td>number</td><td>400</td><td>否</td><td>手指松开后点击态保留时间，单位毫秒</td><td>1.0.0</td></tr></tbody></table></div><ul><li><strong>hover-class</strong><ul><li>解释：当按下后会把原本的样式改成hover-class后边所带的样式</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;Mission&#125;&#125;"</span> <span class="attr">wx:key</span> =<span class="string">"*this"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_group"</span> <span class="attr">bindtap</span>=<span class="string">"test"</span> <span class="attr">hover-class</span>=<span class="string">"p_group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_name"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_desc"</span>&gt;</span>&#123;&#123;item.desc&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_date"</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**index.wxss**/</span></span><br><span class="line"><span class="comment">/*初始样式*/</span></span><br><span class="line"><span class="selector-tag">m_group</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1575569560956&amp;di=5adf4bd524cb8d7eab23c194fa11f5ca&amp;imgtype=0&amp;src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*按下后的样式*/</span></span><br><span class="line"><span class="selector-tag">p_group</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">m_name</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: STKaiti;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">m_date</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/12/微信小程序-1-1-view容器/1.png" title="按下前"><img src="/2020/01/12/微信小程序-1-1-view容器/2.png" title="按下后"><hr><ul><li>hover-stop-propagation<ul><li>当出现容器组件相互包含的时候，当点击一个子容器的时候样式的改变会导致其外面的父容器的样式也被改变，通过使用<u>hover-stop-propagation</u>的设置可以设置成只有点击出的容器发生样式改变而不影响其父容器</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>view组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view-parent-container"</span> <span class="attr">hover-class</span>=<span class="string">"hover-parent-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view-container"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">hover-class</span>=<span class="string">"hover-container"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">hover-stop-propagation</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">hover-start-time</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">hover-stay-time</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/weui.wxss'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/common.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** view **/</span></span><br><span class="line"><span class="selector-class">.view-parent-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-parent-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: chocolate;</span><br><span class="line">    <span class="comment">/* transition: all .5s; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.7)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/12/微信小程序-1-1-view容器/3.png" title="按下前"><img src="/2020/01/12/微信小程序-1-1-view容器/4.png" title="当hover-stop-propagation设置为false 按下后"><ul><li>可以发现hover-stop-propagation的设置与否可以关系到子组件与父组件的相互影响，当没有设置的时候子组件的样式改变会影响到父组件</li></ul><img src="/2020/01/12/微信小程序-1-1-view容器/5.png" title="当hover-stop-propagation设置为true按下后"><hr><h5 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h5><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>scroll-x</td><td>boolean</td><td>false</td><td>否</td><td>允许横向滚动</td></tr><tr><td>scroll-y</td><td>boolean</td><td>false</td><td>否</td><td>允许纵向滚动</td></tr><tr><td>upper-threshold</td><td>number/string</td><td>50</td><td>否</td><td>距顶部/左边多远时，触发 scrolltoupper 事件</td></tr><tr><td>lower-threshold</td><td>number/string</td><td>50</td><td>否</td><td>距底部/右边多远时，触发 scrolltolower 事件</td></tr><tr><td>scroll-top</td><td>number/string</td><td></td><td>否</td><td>设置竖向滚动条位置</td></tr><tr><td>scroll-left</td><td>number/string</td><td></td><td>否</td><td>设置横向滚动条位置</td></tr><tr><td>scroll-into-view</td><td>string</td><td></td><td>否</td><td>值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素</td></tr><tr><td>scroll-with-animation</td><td>boolean</td><td>false</td><td>否</td><td>在设置滚动条位置时使用动画过渡</td></tr><tr><td>enable-back-to-top</td><td>boolean</td><td>false</td><td>否</td><td>iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向</td></tr><tr><td>enable-flex</td><td>boolean</td><td>false</td><td>否</td><td>启用 flexbox 布局。开启后，当前节点声明了 <code>display: flex</code> 就会成为 flex container，并作用于其孩子节点。</td></tr><tr><td>scroll-anchoring</td><td>boolean</td><td>false</td><td>否</td><td>开启 scroll anchoring 特性，即控制滚动位置不随内容变化而抖动，仅在 iOS 下生效，安卓下可参考 CSS <code>overflow-anchor</code> 属性。</td></tr><tr><td>bindscrolltoupper</td><td>eventhandle</td><td></td><td>否</td><td>滚动到顶部/左边时触发</td></tr><tr><td>bindscrolltolower</td><td>eventhandle</td><td></td><td>否</td><td>滚动到底部/右边时触发</td></tr><tr><td>bindscroll</td><td>eventhandle</td><td></td><td>否</td><td>滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>];</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        toView: <span class="string">'red'</span>,</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scroll-view api</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    upper: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    lower: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    scroll: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    tap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; order.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (order[i] === <span class="keyword">this</span>.data.toView) &#123;</span><br><span class="line">                <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">                    toView: order[i + <span class="number">1</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tapMove: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            scrollTop: <span class="keyword">this</span>.data.scrollTop + <span class="number">20</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--scorllview.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>scroll-view组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>竖向滚动<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">style</span>=<span class="string">"height: 200px;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-y</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindscrolltoupper</span>=<span class="string">"upper"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindscrolltolower</span>=<span class="string">"lower"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindscroll</span>=<span class="string">"scroll"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;toView&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-top</span>=<span class="string">"&#123;&#123;scrollTop&#125;&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">enable-back-to-top</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-with-animation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"green"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_green"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"red"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_red"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"yellow"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"blue"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn-area"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"tap"</span>&gt;</span>click me to scroll into view <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"tapMove"</span>&gt;</span>click me to scroll<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>横向滚动<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"scroll-view_H"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">scroll-x</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"green"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_green"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"red"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_red"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"yellow"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"blue"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这里设置了一个上下滚动的view scroll容器，然后滚动的时候会调用回调函数scroll【详见js文件】，到顶和到头的时候会调用upper和lower</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/weui.wxss'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/common.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** scroll-view **/</span></span><br><span class="line"><span class="selector-class">.scroll-view-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600</span>rpx;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_green</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_green</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_red</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_red</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_yellow</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_yellow</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_blue</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_blue</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view_H</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;View组件的一些属性&quot;&gt;&lt;a href=&quot;#View组件的一些属性&quot; class=&quot;headerlink&quot; title=&quot;View组件的一些属性&quot;&gt;&lt;/a&gt;View组件的一些属性&lt;/h4&gt;&lt;h5 id=&quot;view&quot;&gt;&lt;a href=&quot;#view&quot; class=&quot;
      
    
    </summary>
    
      <category term="微信小程序" scheme="https://shuhaohwang.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="微信小程序" scheme="https://shuhaohwang.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习（1.3）DAO设计模式</title>
    <link href="https://shuhaohwang.github.io/2019/11/21/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-3%EF%BC%89DAO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/"/>
    <id>https://shuhaohwang.github.io/2019/11/21/Java基础学习（1-3）DAO设计模式-1/</id>
    <published>2019-11-21T14:52:18.000Z</published>
    <updated>2019-11-23T02:13:54.309Z</updated>
    
    <content type="html"><![CDATA[<h4 id="DAO设计模式"><a href="#DAO设计模式" class="headerlink" title="DAO设计模式"></a>DAO设计模式</h4><p>DAO设计模式是数据层的操作，可以简化代码，增加程序移植性和易用性。</p><p>在程序编写过程中都是使用实体对象，如User，Hero等，当我们想储存这些对象时，就需要把属性一项一项的拆解出来，混合着JDBC代码进行数据存储。想要从数据库中读取时还要一项一项的读取出来再组合成一个实体对象，<strong>难编写，难维护</strong>。</p><p>而使用DAO设计模式可以很好地解决这些问题。</p><p>DAO设计模式包含：</p><ol><li>DAO接口</li><li>DAO实现类</li><li>DAO工厂类</li><li>实体模型</li><li>数据库链接类</li></ol><p><br></p><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>在实际开发中，我们是要对对象进行操作的。然后可以使用设计一个DAO数据持久层，专门把数据库的一条条数据进行转换成对象，或者专门把对象转换一条条字符串数据存入数据库。这样在实际开发中就不必大段大段的写转换代码，直接从DAO成获取已经成型的对象，或者通过DAO层直接把对象分割成字符串数据存入数据库。</p><hr><h4 id="通过IO流实例演示DAO层"><a href="#通过IO流实例演示DAO层" class="headerlink" title="通过IO流实例演示DAO层"></a>通过IO流实例演示DAO层</h4><p>DAO设计模式中就是单独分一个层实现对象与数据的相互转换</p><p>按照要求有：</p><h5 id="实现DAO接口"><a href="#实现DAO接口" class="headerlink" title="实现DAO接口"></a>实现DAO接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *保存</span></span><br><span class="line"><span class="comment">    *作用：接收User对象并把它拆解为数据字符串存储起来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *更新</span></span><br><span class="line"><span class="comment">    *作用：通过传入的对象对数据进行更新</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *删除</span></span><br><span class="line"><span class="comment">    *作用：根据id删除指定数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据对象进行删除数据*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">delete</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *根据ID进行查找</span></span><br><span class="line"><span class="comment">    *作用：通过输入的ID对数据库内容进行查询并返回一个对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*查找获取所有内容返回一个list集合*/</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DAO实现类-核心"><a href="#DAO实现类-核心" class="headerlink" title="DAO实现类(核心)"></a>DAO实现类(核心)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.IOforDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"src/user.data"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*简单实现一个工厂来获取IO流BufferedReader对象*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedReader <span class="title">createReader</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        FileReader in = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(in);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *简单实现一个工厂来获取IO流BufferedWriter对象</span></span><br><span class="line"><span class="comment">    *参数 append：true：返回一个不覆盖写入数据的对象</span></span><br><span class="line"><span class="comment">    *  false：返回一个覆盖写入数据的对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedWriter <span class="title">createWriter</span><span class="params">(<span class="keyword">boolean</span> append)</span><span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        FileWriter out = <span class="keyword">new</span> FileWriter(file,append);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedWriter(out);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*一个专门关闭IO流的方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(BufferedWriter out, BufferedReader in)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(out != <span class="keyword">null</span>)out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(in != <span class="keyword">null</span>)in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写Save方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            out = createWriter(<span class="keyword">true</span>);<span class="comment">//获取一个不能覆盖写入的Writer对象</span></span><br><span class="line">            </span><br><span class="line">            out.write(u.getId()+<span class="string">""</span>);<span class="comment">//整型通过加一个空字符串转换成字符串类型</span></span><br><span class="line">            out.write(<span class="string">","</span>);</span><br><span class="line">            out.write(u.getName());</span><br><span class="line">out.write(<span class="string">","</span>);</span><br><span class="line">out.write(u.getPassword());</span><br><span class="line">out.newLine();<span class="comment">//结尾换行，方便下次数据的添加</span></span><br><span class="line">            </span><br><span class="line">out.flush();<span class="comment">//刷新缓冲流，把字符串数据保存进文件中</span></span><br><span class="line">            out.close();<span class="comment">//写入完毕关闭流</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            close(out.<span class="keyword">null</span>)<span class="comment">//finally块中调用close方法防止因为异常不能正常关闭io流</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写delete方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span> <span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in = createReader();</span><br><span class="line">            out = createWriter();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(String str;(str = in.readline())!=<span class="keyword">null</span>;)&#123;</span><br><span class="line">                String[]arr = str.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(!arr[<span class="number">0</span>].equals(id +<span class="string">""</span>))&#123;<span class="comment">//如果id与传入的参数的id不相同就加入list，从而排除id相同的项</span></span><br><span class="line">                    list.add(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">                out.write(str);</span><br><span class="line">                out.newline();</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            close(out,in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">delete(u.getId());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写更新方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">delete(u);</span><br><span class="line">save(u);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = createReader();</span><br><span class="line"><span class="keyword">for</span>(String str; (str = in.readLine())!=<span class="keyword">null</span>;) &#123;</span><br><span class="line">String[]arr = str.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">if</span>(arr[<span class="number">0</span>].equals(id+<span class="string">""</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(id, arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">close(<span class="keyword">null</span>, in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; uList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = createReader();</span><br><span class="line"><span class="keyword">for</span>(String str; (str = in.readLine()) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">String[]temp = str.split(<span class="string">","</span>);</span><br><span class="line">uList.add(<span class="keyword">new</span> User(Integer.parseInt(temp[<span class="number">0</span>]),temp[<span class="number">1</span>],temp[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line"><span class="keyword">return</span> uList;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">close(<span class="keyword">null</span>, in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">              </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>小结</strong>：delete方法的一些实现思路<ul><li>该方法中同时使用了读与写</li><li>先读取内容后进行分割后进行判断，如果第一项的id与输入的id相匹配那么说明该项应该被删除，则不计入list中。</li><li>上诉过程结束后，获得了id不含待删除id的list字符串数据</li><li>最后将字符串list集合再一个个写入文件，完成删除操作</li></ul></li></ul><p><br></p><h5 id="实体模型"><a href="#实体模型" class="headerlink" title="实体模型"></a>实体模型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> i,String n,String pw)</span> </span>&#123;</span><br><span class="line">id = i;</span><br><span class="line">name = n;</span><br><span class="line">password = pw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="使用Mysql实现DAO层"><a href="#使用Mysql实现DAO层" class="headerlink" title="使用Mysql实现DAO层"></a>使用Mysql实现DAO层</h4><h5 id="DAO实现类-核心-1"><a href="#DAO实现类-核心-1" class="headerlink" title="DAO实现类(核心)"></a>DAO实现类(核心)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.MySQLForDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOImpl</span> <span class="keyword">implements</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *保存</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"insert into user values (0,?,?)"</span>);</span><br><span class="line">pst.setString(<span class="number">1</span>, u.getName());</span><br><span class="line">pst.setString(<span class="number">2</span>, u.getPassword());</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *更新</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"update user set name = ?,Password = ? where id = ?"</span>);</span><br><span class="line">pst.setString(<span class="number">1</span>, u.getName());</span><br><span class="line">pst.setString(<span class="number">2</span>, u.getPassword());</span><br><span class="line">pst.setInt(<span class="number">3</span>, u.getId());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*删除根据ID进行删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"delete from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"delete from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, u.getId());</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *根据ID查找</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"select * from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, id);</span><br><span class="line">rs = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(rs.getInt(<span class="string">"id"</span>),rs.getString(<span class="string">"name"</span>),rs.getString(<span class="string">"password"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *查找所有数据，返回一个对象集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;User&gt; uList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"select * from user"</span>);</span><br><span class="line">rs = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getString(<span class="number">3</span>));</span><br><span class="line">uList.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uList;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>错误小结</strong><ul><li>在数据库中，使用<code>executeQuery()</code>获得的结果集，每一列的下标不像数组一样是从0开始的，即第一项的下标就为1，而不是0。</li></ul></li></ul><p><br></p><h5 id="DAO工厂的实现"><a href="#DAO工厂的实现" class="headerlink" title="DAO工厂的实现"></a>DAO工厂的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.IOforDAO.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDaoImpl <span class="title">getUDAOImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现DAO工厂后，可以直接获取一个DAO对象，除了使代码简化还能大大提高程序的可维护性</p><p>，例如修改DAO实现类的时候，只需在工厂类中作出修改，而不用在主程序中大篇幅的修改代码</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;DAO设计模式&quot;&gt;&lt;a href=&quot;#DAO设计模式&quot; class=&quot;headerlink&quot; title=&quot;DAO设计模式&quot;&gt;&lt;/a&gt;DAO设计模式&lt;/h4&gt;&lt;p&gt;DAO设计模式是数据层的操作，可以简化代码，增加程序移植性和易用性。&lt;/p&gt;
&lt;p&gt;在程序编写过程中
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习（1.2）JDBC执行MySQL动态语句</title>
    <link href="https://shuhaohwang.github.io/2019/11/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-2%EF%BC%89JDBC%E6%89%A7%E8%A1%8CMySQL%E5%8A%A8%E6%80%81%E8%AF%AD%E5%8F%A5/"/>
    <id>https://shuhaohwang.github.io/2019/11/19/Java基础学习（1-2）JDBC执行MySQL动态语句/</id>
    <published>2019-11-19T09:59:18.000Z</published>
    <updated>2019-11-20T12:09:49.388Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDBC中的预编译语句PrePareStatement"><a href="#JDBC中的预编译语句PrePareStatement" class="headerlink" title="JDBC中的预编译语句PrePareStatement"></a>JDBC中的预编译语句PrePareStatement</h4><p> <strong>PrePareStatement</strong>是预编译语句，继承自<strong>Statement</strong>，但比<strong>Statement</strong>功能强大的多，它可以在SQL语句中用问号(?)来代替变量，接下来可以提供多组值，最后执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//设置不自动commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*用问号表示名字和年龄等参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PrepareStatement pst = conn.prepareStatement(<span class="string">"insert into stu values(?,?)"</span>);</span><br><span class="line"></span><br><span class="line">pst.setString(<span class="number">2</span>,<span class="string">"zhangsan"</span>);pst.setInt(<span class="number">1</span>,<span class="number">0</span>);pst.addBatch();</span><br><span class="line">pst.setString(<span class="number">2</span>,<span class="string">"lisi"</span>);pst.setInt(<span class="number">1</span>,<span class="number">0</span>);pst.addBatch();</span><br><span class="line">pst.executeBatch();<span class="comment">//批量执行</span></span><br></pre></td></tr></table></figure><h5 id="预编译语句的优点"><a href="#预编译语句的优点" class="headerlink" title="预编译语句的优点"></a>预编译语句的优点</h5><ul><li>一、代码的可读性和可维护性。<ul><li>虽然PrepareStatement来代替Statement会多出几行代码，但整体上代码的可读性和可维护性都是比直接使用Statement的代码高的。</li></ul></li><li>二、性能较高<ul><li>它包含的SQL语句是预编译的，所以当多次执行一条SQL语句时效率及性能会高</li></ul></li><li>三、可以防止SQL注入攻击<ul><li>对JDBC来说，SQL的注入攻击只对Statement有效，对PrepareStatement是无效的，这是因为PrepareStatement不允许在插入是改变查询的逻辑结构。</li></ul></li></ul><p><strong>总结</strong>：综上而言 使用<strong>PrepareStatement</strong>就对了</p><hr><h4 id="预编译语句的使用"><a href="#预编译语句的使用" class="headerlink" title="预编译语句的使用"></a>预编译语句的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        PrepareStatement pst = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//预编译语句</span></span><br><span class="line">        String sql = <span class="string">"insert into stu values(0,?,?)"</span> ; </span><br><span class="line">            pst = conn.prepareStatement(sql);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *设置预编译语句的参数</span></span><br><span class="line"><span class="comment">            * 第一个参数为：第几个问号</span></span><br><span class="line"><span class="comment">            * 第二个参数为：该位置的值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            pst.setString(<span class="number">1</span>,<span class="string">"LiSi"</span>);</span><br><span class="line">            pst.setInt(<span class="number">2</span>,<span class="number">18</span>);</span><br><span class="line">            pst.executeUpdate();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *当出现要进行多次数据库操作的时候,通常会这样写。(不太适合的写法)</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *但下列写法效率是不高的，因为这样通过循环来执行SQL语句，每一次循环都要重新编译</span></span><br><span class="line"><span class="comment">            *SQL语句，这难免会大量的消耗资源。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">                pst.setString(<span class="number">1</span>,<span class="string">"LiSi"</span>);</span><br><span class="line">                pst.setInt(<span class="number">2</span>,<span class="number">18</span>+i);</span><br><span class="line">                pst.executeUpdate();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            *通过预编译语句PrepareStatement中的Batch进行批量处理</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">                pst.setString(<span class="number">1</span>,<span class="string">"LiSi"</span>);</span><br><span class="line">                pst.setInt(<span class="number">2</span>,<span class="number">18</span>+i);</span><br><span class="line">                pst.addBatch();<span class="comment">//每一次循环加入一个批次中</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            pst.executeBatch();<span class="comment">//统一执行Batch内的语句，即批次执行</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.close(conn,pst,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SQL命令语句预编译"><a href="#SQL命令语句预编译" class="headerlink" title="SQL命令语句预编译"></a>SQL命令语句预编译</h5><p>在上诉演示中可以发现，PrepareStatement的对象不像Statement一样，前者需要先把SQL语句获取才能获取到对象，而不像Statement可以先创建出对象再执行SQL命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*使用Statement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">st.executeUpdate(<span class="string">"....SQL命令"</span>)；</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*使用预编译语句PrepareStatement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> pst = conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="PrepareStatement允许执行动态的SQL-含参-语句"><a href="#PrepareStatement允许执行动态的SQL-含参-语句" class="headerlink" title="PrepareStatement允许执行动态的SQL(含参)语句"></a>PrepareStatement允许执行动态的SQL(含参)语句</h5><p>PrepareStatement最大的特点就是可以执行动态的SQL语句，防止了以往的SQL注入攻击，因为Statement执行SQL语句时是直接一个静态的字符串语句拿去编译，不法分子就会根据这个原理，修改字符串里面语句的逻辑结构进而访问数据库。而PrepareStatement却不一样，它是不允许在插入是改变查询的逻辑结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*使用Statement时</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">st.executeUpdate(<span class="string">"select password from users where password = ‘123456’"</span>)；</span><br><span class="line"><span class="comment">//此时当执行这句命令时对命令字符串进行修改后加一个字符串  ”or 1 = 1“结果语句就变成了</span></span><br><span class="line"><span class="comment">//select password from users where password = ‘123456’or 1 = 1" 很明显，无论密码是否正确，系统也会辨别是正确的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*使用PrepareStatement</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">pst = conn.prepareStatement(<span class="string">"select password from users where ？ = ‘123456’"</span>);</span><br><span class="line">pst.setString(<span class="number">1</span>,password)；</span><br><span class="line">pst.executeUpdate();</span><br><span class="line"><span class="comment">//可以发现当password要真正输入正确时才能返回密码正确，因为语句一开始就确定好了，你输入的password并不会合并到SQL命令中。而不像Statement你输入的内容还会合并到其命令中影响SQL命令语句</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="PrepareStatement的批量提交"><a href="#PrepareStatement的批量提交" class="headerlink" title="PrepareStatement的批量提交"></a>PrepareStatement的批量提交</h5><p>在执行循环多次修改更新数据库的时候，如果使用PrepareStatement会比Statement快的多，因为前者拥有Batch的功能，多次执行SQL命令时，就不像Statement一样每执行一次SQL语句，就要重新编译一次SQL语句命令，PrepareStatement可以通过Batch把多次的命令一次编译完成且批量一次提交，从而提高了效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *使用PrepareStatement多次提交的SQL语句只需编译一次执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//预编译语句</span></span><br><span class="line">String sql = <span class="string">"insert into stu values(0,?,?)"</span> ; </span><br><span class="line">pst = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">         pst.setString(<span class="number">1</span>,<span class="string">"LiSi"</span>);</span><br><span class="line">         pst.setInt(<span class="number">2</span>,<span class="number">18</span>+i);</span><br><span class="line">         pst.addBatch();<span class="comment">//每一次循环加入一个批次中</span></span><br><span class="line"> &#125;</span><br><span class="line">            </span><br><span class="line">pst.executeBatch();<span class="comment">//统一执行Batch内的语句，即批次执行</span></span><br></pre></td></tr></table></figure><hr><h4 id="JDBC实现数据库分页查询"><a href="#JDBC实现数据库分页查询" class="headerlink" title="JDBC实现数据库分页查询"></a>JDBC实现数据库分页查询</h4><h5 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h5><ul><li><strong>分页查询</strong></li></ul><p>假如你的数据库表单中一共有12条信息。那么现要求把12条信息以每页显示5条信息进行分页，也就是一共能被分为3页，其中最后一样的数据只有两条。</p><p>综上，可以看出对数据库进行分页后，当要查看第2页内容时，就只显示6~11条信息，第一页就显示1~5条信息，就为分页进行查询。</p><img src="/2019/11/19/Java基础学习（1-2）JDBC执行MySQL动态语句/1.gif"><p><br></p><p>在分页查询中最重要的就是两个值。第一个就是页数，第二个就是一页含有多少条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page；<span class="comment">//代表页数，即当前查询的为第几页</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">5</span>; <span class="comment">//代表每页记录数，即一页能有几条信息</span></span><br><span class="line">        <span class="keyword">int</span> began = (page-<span class="number">1</span>)*rows;<span class="comment">//对应每页开始的位置，第一页就从第一条信息开始，第二页就从第六条信息开始</span></span><br><span class="line">        </span><br><span class="line">        Connection conn = JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *sql语句中的limit x,y;</span></span><br><span class="line"><span class="comment">        * x代表第x条命令开始</span></span><br><span class="line"><span class="comment">        * y代表一共查y条信息</span></span><br><span class="line"><span class="comment">        * limit x,y合起来就是 第x条开始后的y条信息</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String sql = <span class="string">"select * from stu limit ?,?"</span>;<span class="comment">//sql命令语句</span></span><br><span class="line">            </span><br><span class="line">        PreparedStatement pst = connpreparedStatement(sql);</span><br><span class="line">        pst.setInt(<span class="number">1</span>, began);</span><br><span class="line">pst.setInt(<span class="number">2</span>, rows);</span><br><span class="line">ResultSet rs = pst.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getInt(<span class="number">1</span>) + <span class="string">" "</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line">&#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果<img src="/2019/11/19/Java基础学习（1-2）JDBC执行MySQL动态语句/2.png" title="当查询第一页时"><img src="/2019/11/19/Java基础学习（1-2）JDBC执行MySQL动态语句/3.png" title="当查询第二页时"></li></ul><h5 id="知识点小结"><a href="#知识点小结" class="headerlink" title="知识点小结"></a>知识点小结</h5><ul><li>SQL<strong>条件</strong>命令：<code>limit x,y</code><ul><li>limit 参数，第一个参数：从哪儿开始查 ； 第二个参数：查几条</li></ul></li><li>例子：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//从开头0号位置开始查，一共查取5条信息</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">//从第二题信息位置开始查，一共查取2条信息</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JDBC中的预编译语句PrePareStatement&quot;&gt;&lt;a href=&quot;#JDBC中的预编译语句PrePareStatement&quot; class=&quot;headerlink&quot; title=&quot;JDBC中的预编译语句PrePareStatement&quot;&gt;&lt;/a&gt;JDBC中
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java基础" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习(1.1)使用JDBC对数据库连接</title>
    <link href="https://shuhaohwang.github.io/2019/11/18/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-1%EF%BC%89%E4%BD%BF%E7%94%A8JDBC%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>https://shuhaohwang.github.io/2019/11/18/Java基础学习（1-1）使用JDBC对数据库连接/</id>
    <published>2019-11-18T00:50:19.000Z</published>
    <updated>2019-11-18T12:11:26.018Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java-JDBC-API-核心"><a href="#Java-JDBC-API-核心" class="headerlink" title="Java JDBC API 核心"></a>Java JDBC API 核心</h4><ul><li>Driver：代表驱动程序(一般由数据库厂商负责提供)</li><li><strong>DriverManager</strong>类：<ul><li>是JDBC的管理层，作用于用户和驱动之间，负责注册和加载JDBC驱动</li></ul></li><li><strong>Connection</strong>接口：<ul><li>代表与数据库的连接，当用户与数据库交互的时候，首先必须建立与数据库的链接，只有在获得链接之后，才能进一步对数据库进行操作，该接口是用户与数据库之间的桥梁。</li></ul></li><li><strong>Statement</strong>对象：<ul><li>用于执行静态SQL语句并返回执行结果。Statement可以通过Connection对象的createStatement()方法创建。Statement对象<strong>只能执行静态sql语句</strong>。不能可以执行动态的sql（sql串中有参数），执行动态sql使用PreparedStatement对象，用法和Statement类似。</li></ul></li><li><strong>ResultSet</strong>对象：<ul><li>ResultSet对象是结果集对象。当程序执行一句用于查询功能的sql语句(select)后，JDBC会把数据库的查询结果封装成一个ResultSet对象返回给程序。ResultSet对象具有指向其当前数据行的游标指针，用户可以移动该指针读取ResultSet中的不同记录。另外ResultSet对象还封装了一些关于集表的列名、数据类型等信息，这些信息一般可以通过ResultSetMetaData对象来读取。</li></ul></li></ul><hr><h4 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h4><ol><li>在对应的数据库官方下载对应的jar包驱动</li><li>对项目进行加入驱动</li><li>连接数据库前，先对数据库驱动进行加载注册</li><li>用DriverManager类获取数据库的链接 返回值为Connection</li><li>获得数据库链接后可以通过Statement获取Connection对象里面数据库的表单信息</li><li>Statement对象可以通过内置方法对数据库里面的表单进行增删</li><li>在对表单进行查询遍历的时候Statement对象会返回一个ResultSet对象，通过操作ResultSet对象即可获得表单内的具体数值</li></ol><p><br></p><h5 id="连接数据库前对驱动进行加载注册"><a href="#连接数据库前对驱动进行加载注册" class="headerlink" title="连接数据库前对驱动进行加载注册"></a>连接数据库前对驱动进行加载注册</h5><p>以MySQL数据库为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new com.mysql.jdbc.Driver();</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>两种写法，使用forName为正规写法。</p><p><br></p><h5 id="获取数据库链接"><a href="#获取数据库链接" class="headerlink" title="获取数据库链接"></a>获取数据库链接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai"</span>;<span class="comment">//链接MYSQL数据库的url</span></span><br><span class="line">String user =<span class="string">"shuhao"</span>;<span class="comment">//数据库管理员ID</span></span><br><span class="line">String pass = <span class="string">"991124"</span>;<span class="comment">//管理员密码</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *使用DriverManager获取数据库链接</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,user,pass);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"MySQL连接失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用Statement获取Connection对象数据库链接里面的表单，并进行操作"><a href="#使用Statement获取Connection对象数据库链接里面的表单，并进行操作" class="headerlink" title="使用Statement获取Connection对象数据库链接里面的表单，并进行操作"></a>使用Statement获取Connection对象数据库链接里面的表单，并进行操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line">Statement st = conn.createStatement();<span class="comment">//直接使用Connection内置方法获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*使用Statement对象对数据库进行操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">st.execute(<span class="string">"CREATE TABLE user_learn.Stu (ID int(0) NOT NULL AUTO_INCREMENT,name varchar(50) NULL,age int(0) NULL,PRIMARY KEY (ID));"</span>)<span class="comment">//往数据库里面创建一个表单</span></span><br><span class="line">    </span><br><span class="line">st.executeUpdate(<span class="string">"insert into stu values(0,'zhang',18)"</span>);<span class="comment">//往表单里面添加东西，执行的为静态MySQL数据库命令</span></span><br><span class="line"></span><br><span class="line">.....<span class="comment">//其他操作</span></span><br><span class="line">    </span><br><span class="line">st.close();<span class="comment">//操作完毕后记得关闭Statement</span></span><br></pre></td></tr></table></figure><p><strong>Statement</strong>类中的一些方法解释</p><div class="table-container"><table><thead><tr><th>Statement内执行SQL语句的方法</th><th>作用</th><th>补充</th><th></th></tr></thead><tbody><tr><td>execute</td><td>用于执行返回多个结果集、多个更新计数或二者组合的语句</td><td>允许执行查询语句、更新语句、DDL语句。返回值为true时，表示执行的是查询语句，可以通过getResultSet方法获取结果；返回值为false时，执行的是更新语句或DDL语句，getUpdateCount方法获取更新的记录数量</td><td></td></tr><tr><td>executeQuery</td><td>用于产生单个结果集的语句</td><td>执行给定的 SQL 语句，该语句返回单个 ResultSet 对象</td><td>一般进行遍历操作时会使用</td></tr><tr><td>executeUpdate</td><td>用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言）语句</td><td>执行给定 SQL 语句，该语句可能为 INSERT、UPDATE 或 DELETE 语句，或者不返回任何内容的 SQL 语句（如 SQL DDL( 语句）</td><td>一般使用删除、增加时会使用</td></tr></tbody></table></div><p><br></p><h5 id="操作ResultSet对数据库内容进行遍历"><a href="#操作ResultSet对数据库内容进行遍历" class="headerlink" title="操作ResultSet对数据库内容进行遍历"></a>操作ResultSet对数据库内容进行遍历</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line">ResultSet rs = st.executeQuery(<span class="string">"select * from stu"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*ResultSet里面的getString()方法中参数如果是整型，那么会获取对应的列的内容，也可以直接填数据项名的字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">" "</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">//System.out.println(rs.getString("id") + " " + rs.getString("name"));也可填写数据项名的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ResultSet</strong>内含有一个游标指针，一开始会指向第一行的上一行。可以通过ResultSet中的next()方法进行下移</p><hr><h5 id="测试代码总汇"><a href="#测试代码总汇" class="headerlink" title="测试代码总汇"></a>测试代码总汇</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai"</span>;<span class="comment">//链接MYSQL数据库的url</span></span><br><span class="line">String user =<span class="string">"shuhao"</span>;<span class="comment">//数据库管理员ID</span></span><br><span class="line">String pass = <span class="string">"991124"</span>;<span class="comment">//管理员密码</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,user,pass);</span><br><span class="line">        </span><br><span class="line">        Statement st = conn.createStatement();<span class="comment">//直接使用Connection内置方法获取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">st.execute(<span class="string">"CREATE TABLE user_learn.Stu (ID int(0) NOT NULL AUTO_INCREMENT,name varchar(50) NULL,age int(0) NULL,PRIMARY KEY (ID));"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123;</span><br><span class="line">st.executeUpdate(<span class="string">"insert into stu values(0,'zhang"</span>+ i +<span class="string">"',18)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        ResultSet rs = st.executeQuery(<span class="string">"select * from stu"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(rs.getString(<span class="number">1</span>) + <span class="string">" "</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"MySQL连接失败"</span>);</span><br><span class="line">    &#125;<span class="keyword">final</span>&#123;</span><br><span class="line">        rs.close();</span><br><span class="line">        st.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实验结果</strong>：<img src="/2019/11/18/Java基础学习（1-1）使用JDBC对数据库连接/1.png"><img src="/2019/11/18/Java基础学习（1-1）使用JDBC对数据库连接/2.png"></li><li><strong>总结</strong>：<ul><li>在操作完数据库的一些操作后记得要关闭相关的接口，应该在final块里面进行，防止在关闭语句前出错的时候没能继续执行剩下的关闭语句。</li><li>关闭顺序应该创建的逆序。关闭顺序为：<code>ResultSet -&gt;Statement-&gt;Connection</code></li></ul></li></ul><hr><h4 id="使用工厂模式编写一个JDBC的工具包类"><a href="#使用工厂模式编写一个JDBC的工具包类" class="headerlink" title="使用工厂模式编写一个JDBC的工具包类"></a>使用工厂模式编写一个JDBC的工具包类</h4><h5 id="JDBCUtils工具类"><a href="#JDBCUtils工具类" class="headerlink" title="JDBCUtils工具类"></a>JDBCUtils工具类</h5><p>创建一个JDBCUtils工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> * 用来实现JDBC的一些操作</span></span><br><span class="line"><span class="comment"> * MYSQL中的一些数据连接、关闭、获得Connection等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019.11.18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String name = <span class="string">"shuhao"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*这里使用一个static静态代码块来对驱动的加载注册，因为在使用时该加载注册步骤前后只需进行一次即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//对数据库进行连接时要先对驱动进行加载注册</span></span><br><span class="line"><span class="comment">//new com.mysql.jdbc.Driver()</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">System.err.println(<span class="string">"MySql数据库驱动加载失败！"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *工厂模式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Connection conn = DriverManager.getConnection(url,name,password);<span class="comment">//使用DriverManager获取数据库的连接</span></span><br><span class="line">System.out.println(<span class="string">"MySql数据库连接成功！"</span>);</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">System.err.println(<span class="string">"连接失败！"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现MySql后一些退场关闭工作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn 创建数据库的连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> st 待关闭的表单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs 欲关闭的结果集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement st,ResultSet rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e2) &#123;</span><br><span class="line">e2.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(st != <span class="keyword">null</span>)st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在外部使用该工具类"><a href="#在外部使用该工具类" class="headerlink" title="在外部使用该工具类"></a>在外部使用该工具类</h5><p>获取数据链接，与关闭对应接口，可以发现使用一个工具类后代码行数大大减少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection connection = JDBCUtils.getConnection();<span class="comment">//通过工具类获得链接减少了大段的代码</span></span><br><span class="line">        System.out.println(<span class="string">"操作成功！！"</span>);</span><br><span class="line">        </span><br><span class="line">JDBCUtils.close(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//使用工具类中的关闭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h5><h6 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h6><ul><li>功能：<strong>随着类的加载而执行，而且只执行一次</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    ....语句内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上诉的工具类中使用了一个静态块来对驱动的加载注册，因为加载注册在程序运行到结束只需运行一次，那么放在静态块里面，程序开始时只有第一次调用时会运行静态块里面的内容，以后再调用时则不会运行。</p><p><br></p><h6 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h6><ul><li><p>介绍：在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p></li><li><p>应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</p></li><li><strong>结合上面的工具类解释</strong>：根据上面所说你要一辆车，直接从工厂里取即可，而不用原地一个个零件重新造一个，而上面的工具类也是一样的，别的类中需要一个数据库的连接connection对象，只需调用工具类中的getConnection()方法即可从而获得一个connection对象。而具体这个对象怎么来的只需在作为工厂的工具类内部实现即可。</li></ul><hr><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java-JDBC-API-核心&quot;&gt;&lt;a href=&quot;#Java-JDBC-API-核心&quot; class=&quot;headerlink&quot; title=&quot;Java JDBC API 核心&quot;&gt;&lt;/a&gt;Java JDBC API 核心&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Driver：代
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java基础" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习总结-（知识总汇）</title>
    <link href="https://shuhaohwang.github.io/2019/11/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://shuhaohwang.github.io/2019/11/17/数据库基础知识/</id>
    <published>2019-11-17T01:27:16.000Z</published>
    <updated>2019-11-17T03:42:40.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a>数据库命令</h4><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><ul><li>显示数据库总表：show databases;<ul><li><img src="/2019/11/17/数据库基础知识/1.png"></li></ul></li><li>创建用户数据库：create database <u>name（库名）</u><ul><li><img src="/2019/11/17/数据库基础知识/2.png"></li></ul></li><li>进入数据库：use <u>name(库名)</u></li><li>显示库内集合表单：show tables;</li><li>创建集合表单：create table <u>name(表单名)</u>（<u>dataType(数据类型)</u>, <u>data_name(数据名)</u><br>…..）<ul><li><img src="/2019/11/17/数据库基础知识/3.png"></li><li>创建表单后</li><li><img src="/2019/11/17/数据库基础知识/4.png"></li></ul></li><li>查看集合表单内容：desc <u>name(表单名)</u><ul><li><img src="/2019/11/17/数据库基础知识/5.png"></li></ul></li></ul><h5 id="增删改查命令"><a href="#增删改查命令" class="headerlink" title="增删改查命令"></a>增删改查命令</h5><ul><li>往集合表单添加信息：<ul><li>insert into <u>name(表单名)</u>(dataname1,dataname2,dataname3….) values(data1,data2,data3…)</li><li><img src="/2019/11/17/数据库基础知识/5-1.png"></li><li>insert into <u>name(表单名) </u>values(data1,data2,data3…)//效果同上，默认以创建表单时数据单元的顺序</li><li>insert into <u>name(表单名)</u> (dataname1，dataname2….)values(data1,data2 …..)//dataname之间可以替换，但后面的data值要更具前面的顺序进行填写<br><br></li></ul></li><li>查看表单详情内容：<ul><li>select * from <u>name(表单名)</u>;//遍历全表<ul><li><img src="/2019/11/17/数据库基础知识/6.png"></li></ul></li><li>select dataname1,dataname2….  from <u>name(表单名)</u>//选择性显示表单内容<ul><li><img src="/2019/11/17/数据库基础知识/7.png"></li><li><img src="/2019/11/17/数据库基础知识/8.png"></li></ul></li><li>select * from <u>name(表单名)</u> where <u>something(条件)</u>//按照要求条件进行遍历<br><br></li></ul></li><li>修改表单内数据项的内容<ul><li>update <u>name(表单名)</u> set dataname1 = value,dataname2 = value….//把整个表单内容进行修改</li><li>update <u>name(表单名)</u> set dataname1 = value,dataname2 = value…. where <u>something(条件）</u><img src="/2019/11/17/数据库基础知识/9.png"></li></ul></li></ul><p><br></p><ul><li><p>删除表单内数据项的内容</p><ul><li>delete from <u>name(表单名)</u> //删除表单内<strong>所有内容</strong>！！</li><li>delete from <u>name(表单名)</u> where <u>something(条件)</u>//根据条件进行删除</li></ul><img src="/2019/11/17/数据库基础知识/10.png"></li></ul><hr><h4 id="数据库数据类型"><a href="#数据库数据类型" class="headerlink" title="数据库数据类型"></a>数据库数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int:整型</span><br><span class="line">double：浮点型，例如double(6,2)表示最多6位，其中必须有2位小数，即此时最大值为9999.99</span><br><span class="line">char：固定长度字符串类型，char(10)中&apos;abc&apos;也占10位，空出来的7位将以空字符代替</span><br><span class="line">varchar：可变长度字符串类型；varchar(10)中&apos;abc&apos;占3位，10代表最大支持长度</span><br><span class="line">text：大文本类型，详情见下表。</span><br><span class="line">blob：字节类型，可以存储任意数据。</span><br><span class="line">data：日期类型，格式为：yyyy-MM-dd；</span><br><span class="line">time：时间类型，格式为：hh:mm:ss</span><br><span class="line">timestamp:时间戳类型 yyyy-MM-dd hh:mm:ss 会自己根据系统时间进行赋值、</span><br><span class="line">datatime：日期时间类型 yyyy-MM-dd hh:mm:ss</span><br></pre></td></tr></table></figure><p><strong>大文本类型</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">大小</th><th>大小</th></tr></thead><tbody><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">256bytes</td><td></td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">65,535bytes</td><td>~64kb</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">16,777,215bytes</td><td>~16MB</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">4,294,967,295bytes</td><td>~4GB</td></tr></tbody></table></div><hr><h4 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主键约束：primary key</span><br><span class="line">唯一约束：unique[key]</span><br><span class="line">非空约束：not null</span><br><span class="line">外键约束：foreign key</span><br><span class="line"></span><br><span class="line">默认约束：default</span><br><span class="line">自动增长：auto_increment</span><br></pre></td></tr></table></figure><p><br></p><ul><li>主键约束：对某一项数据进行设置为主键后该行数据变为<strong>唯一且非空</strong>（类似公民的身份证号）</li><li>唯一约束：数据唯一，<strong>不能出现重复</strong></li><li>非空约束：数据<strong>不能为空</strong></li><li>外键约束：向外表进行调用，例如一个表一中的id有1~20，在表二的id2要<strong>引用</strong>表一的id项，则可以对id2设置外键约束目标为表一的id，则此时id2中只能填写id内含有的内容。</li><li>默认约束：<strong>设置</strong>数据项<strong>默认值</strong></li><li>自动增长：会根据该项最大的数值创建新数据单元时<strong>会自动加一</strong></li></ul><hr><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">=、(!= &lt;&gt;)、&lt;、&lt;=、&gt;、&gt;=</span><br><span class="line">BETWEEN .... AND</span><br><span class="line">IN(set)</span><br><span class="line">IS NULL</span><br><span class="line">AND</span><br><span class="line">OR</span><br><span class="line">NOT</span><br></pre></td></tr></table></figure><p><br></p><p>(1)查询性别是男并且薪资小于1000的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users Where sex = &apos;M&apos; AND sal &lt; 1000;</span><br></pre></td></tr></table></figure><p>(2)查询性别是女性 或者 薪资大于2500的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users Where sex = &apos;F&apos; OR sal &gt; 2500;</span><br></pre></td></tr></table></figure><p>(3)查询薪资为1250,1500,1600的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users Where IN(1250,1500,1600);</span><br></pre></td></tr></table></figure><p>(4)查询薪资在1000到2000间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users Where sal &gt;= 1000 AND sal &lt;=2000</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users Where sal BETWEEN 1000 AND 2000;</span><br></pre></td></tr></table></figure><hr><h4 id="模糊查询（关键字查询）"><a href="#模糊查询（关键字查询）" class="headerlink" title="模糊查询（关键字查询）"></a>模糊查询（关键字查询）</h4><p>在SQL中可以使用<strong>like</strong>关键字实现模糊查询</p><p>即：通过给定搜索条件，一个字或者几个字符进行查找内容，该查询支持两种通配符：</p><p><code>_</code>可以匹配任意一个字符</p><p><code>%</code>可以匹配任意0~n个字母，例如‘徐%’可以匹配所有以徐开头的内容</p><p>(1)查询姓名由5个字母构成的用户记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">Where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'_____'</span></span><br></pre></td></tr></table></figure><p>(2)查询姓名由A字母开头的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">Where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'A____'</span></span><br></pre></td></tr></table></figure><p>(3)查询姓名中含有‘<strong>李</strong>’的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">Where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'李%'</span></span><br></pre></td></tr></table></figure><hr><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">name</span>(表单名) <span class="keyword">order</span> <span class="keyword">by</span> dataname1(数据项) <span class="keyword">desc</span>(没加<span class="keyword">desc</span>那么就为升序，加了为降序)；</span><br></pre></td></tr></table></figure><p>(1)通过年龄进行排序</p><img src="/2019/11/17/数据库基础知识/11.png"><p>(2)当排序时出现了相同项，可以再根据其他项对两个相同的项进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">name</span>(表单名) <span class="keyword">order</span> <span class="keyword">by</span> dataname1(数据项)，dataname2;</span><br></pre></td></tr></table></figure><img src="/2019/11/17/数据库基础知识/12.png"><img src="/2019/11/17/数据库基础知识/13.png"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">name</span>(表单名) <span class="keyword">order</span> <span class="keyword">by</span> dataname1(数据项) <span class="keyword">desc</span>，dataname2;</span><br></pre></td></tr></table></figure><p>数据项1以降序排序，数据项2为升序排序</p><hr><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum：求和</span><br><span class="line">max：求最大值</span><br><span class="line">min：求最小值</span><br><span class="line">avg：求平均值</span><br><span class="line">count：求个数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 函数名(数据项) <span class="keyword">from</span> <span class="keyword">name</span>(表单名)</span><br></pre></td></tr></table></figure><p>(1)查询年龄总和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(age) <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><img src="/2019/11/17/数据库基础知识/14.png"> <img src="/2019/11/17/数据库基础知识/15.png"><p>(2)查询年龄最大为多少(最小同理)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(age) <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><img src="/2019/11/17/数据库基础知识/16.png"><p>(3)求年龄大于18的用户有多少个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(age) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age &gt;= <span class="number">18</span></span><br></pre></td></tr></table></figure><img src="/2019/11/17/数据库基础知识/17.png"><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数据库命令&quot;&gt;&lt;a href=&quot;#数据库命令&quot; class=&quot;headerlink&quot; title=&quot;数据库命令&quot;&gt;&lt;/a&gt;数据库命令&lt;/h4&gt;&lt;h5 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据库" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（7.3）哈希表中的冲突通常的解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/11/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%887-3%EF%BC%89%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%86%B2%E7%AA%81%E9%80%9A%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/11/14/数据结构学习总结-（7-3）哈希表中的冲突通常的解决方案/</id>
    <published>2019-11-14T13:33:03.000Z</published>
    <updated>2019-11-14T15:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冲突的解决方案"><a href="#冲突的解决方案" class="headerlink" title="冲突的解决方案"></a>冲突的解决方案</h4><p>冲突就是多个关键字映射到同一个哈希表地址上去了，出现冲突情况有下列几种解决方法。</p><ul><li>开放地址法</li><li>再哈希法</li><li>封闭地址法</li></ul><hr><h5 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h5><p>一个Key具有多个候选哈希地址。</p><ul><li><p>开放地址：如果这个地址冲突，尝试其他地址，即不“封闭”在一个地址上</p></li><li><p>实现：</p><ul><li>线性探测再散列</li><li>二次探测再散列</li><li>伪随机探测再散列</li></ul></li></ul><h6 id="线性探测再散列"><a href="#线性探测再散列" class="headerlink" title="线性探测再散列"></a>线性探测再散列</h6><ul><li><p>原地址H<sub>0</sub>发生了冲突</p><ul><li>则第i次冲突的探测地址</li><li>H<sub>i</sub> = (H<sub>o</sub>+ i)%m</li></ul></li><li><p>例如</p><ul><li>一个关键字映射地址为3</li><li>另一个关键字通过哈希函数也映射为3</li><li>那么第二个关键字则会检索4号地址空不空，如果空那么就存储进去，反之继续往检索</li></ul><img src="/2019/11/14/数据结构学习总结-（7-3）哈希表中的冲突通常的解决方案/1.gif"><p><br></p></li></ul><ul><li><p>线性探索法容易产生堆积：</p><ul><li>冲突的关键字只好向后寻找可用的空单元</li><li>结果又占据了其他关键字的位置</li><li>使得冲突更加严重、查找次数增加</li></ul><p>因为如果当前地址产生了冲突，尝试下一个地址，这样容易造成“连续的一大串”地址冲突，使得查找次数增加</p></li><li><p><strong>改进</strong>：使用二次探测再散列</p></li></ul><ul><li><p>如果当前地址冲突，“下一个”的地址不是紧挨着，而是离远一些，而且冲突次数越多，离得越远</p><p><br></p><p><br></p></li></ul><h6 id="二次探测再散列"><a href="#二次探测再散列" class="headerlink" title="二次探测再散列"></a>二次探测再散列</h6><ul><li>原地址H<sub>0</sub>发生了冲突<ul><li>i 为冲突的次数</li><li>m 为哈希表大小</li><li>H<sub>i</sub> = (H<sub>o</sub>+ i<sup>2</sup>) % m</li></ul></li></ul><hr><h4 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h4><p>若原地址H<sub>0</sub> = Hash<sub>0</sub>(key)冲突，则下一个地址换另外一个哈希函数进行 即：H<sub>i</sub> = Hash<sub>i</sub>(key)。</p><hr><h4 id="封闭地址法"><a href="#封闭地址法" class="headerlink" title="封闭地址法"></a>封闭地址法</h4><p>即便映射在哈希表上的地址发生了冲突也想办法在该地址内进行存储。<br>常用的有：</p><ul><li>链表法</li></ul><h5 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h5><ul><li>映射到同一个地址到数据存放在链表中</li><li><img src="/2019/11/14/数据结构学习总结-（7-3）哈希表中的冲突通常的解决方案/2.png"></li></ul><hr><h4 id="附加：判断冲突可能性判断（载荷因子）"><a href="#附加：判断冲突可能性判断（载荷因子）" class="headerlink" title="附加：判断冲突可能性判断（载荷因子）"></a>附加：判断冲突可能性判断（载荷因子）</h4><ul><li>载荷因子 = 填入表中的元素个数/散列表的长度<ul><li>载荷因子小，说明哈希表表内空位较多</li><li>载荷因子大，说明哈希表内空位少</li></ul></li><li>综上：载荷因子大说明冲突的可能性大，反正可能性小</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;冲突的解决方案&quot;&gt;&lt;a href=&quot;#冲突的解决方案&quot; class=&quot;headerlink&quot; title=&quot;冲突的解决方案&quot;&gt;&lt;/a&gt;冲突的解决方案&lt;/h4&gt;&lt;p&gt;冲突就是多个关键字映射到同一个哈希表地址上去了，出现冲突情况有下列几种解决方法。&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（7.2）哈希表与哈希函数</title>
    <link href="https://shuhaohwang.github.io/2019/11/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%887-2%EF%BC%89%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%8E%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/</id>
    <published>2019-11-08T15:33:35.000Z</published>
    <updated>2019-11-09T01:26:37.264Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>当我们对一个数组进行操作时，如果要进行查找某个元素，一般时用循环一个个元素与要查找的关键字进行比较。这样往往要消耗大量的时间，而哈希表则解决了这个问题：哈希表时通过对要查找的关键字进行操作从而得到数组内该元素相对应位置的一种数据结构。<br>    通俗地讲，哈希表要储存数据时，一般会先对数据通过_哈希函数_进行处理，得到一个下标，并把该数据存储在对应下标的位置，当要查找该数据的时候，则对关键字通过哈希函数进行处理就可以直接得到对应下标，通过下标直接操作该数据，相比普通数组进行查找时省去了大量无意义的比较操作。</p><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/1.png"><hr><h5 id="哈希表的特点及抽象数据结构"><a href="#哈希表的特点及抽象数据结构" class="headerlink" title="哈希表的特点及抽象数据结构"></a>哈希表的特点及抽象数据结构</h5><ul><li>根据关键字（键）key存取数据元素的数据结构。</li><li>哈希函数将关键字映射到存储位置的索引</li><li>查找，插入，删除的时间复杂度时O(1)。比BST数等其他效率高（最坏的情况O（n））</li></ul><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/2.png"><h6 id="哈希表的冲突（Collision）"><a href="#哈希表的冲突（Collision）" class="headerlink" title="哈希表的冲突（Collision）"></a>哈希表的冲突（Collision）</h6><p>上面说到，关键字说通过一个哈希函数进行处理后得到对应的存储地址，在对大量数据进行处理时，通过哈希函数难免会出现生成的下标为同一个的情况，此时就发生了哈希表的<strong>冲突</strong></p><ul><li>散列函数时一个<strong>压缩映像函数</strong>关键字集合比哈希表地址集合大得多。因此有可能经过哈希函数的计算，把不同的关键字映射到同一个哈希地址上，这些关键字互为<strong>同义词</strong></li></ul><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/3.png"><hr><p><strong>总结：</strong>综上如果要设计一个_好的哈希表首先要解决以下两个问题_</p><ul><li>对于给定一个关键字集合选择一个计算简单且地址发布比较均匀的哈希函数，避免或尽量减少冲突</li><li>研究解决冲突的方案</li></ul><hr><h6 id="哈希表的抽象数据结构"><a href="#哈希表的抽象数据结构" class="headerlink" title="哈希表的抽象数据结构"></a>哈希表的抽象数据结构</h6><ul><li><p>ADT HashTable</p><ul><li>bool get()</li><li>void put()</li><li><p>void remove()</p><p>根据“<strong>键（key）</strong>”存取“<strong>值（Value）</strong>”</p></li></ul></li></ul><hr><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>哈希函数计算出来的地址应该能<strong>均匀分布</strong>在整个地址空间中</li><li>如果关键字总是更容易映射到某个或某些地址上，称作<u>堆积</u></li></ul><h5 id="哈希函数的一些实现方式及各方法的优缺点"><a href="#哈希函数的一些实现方式及各方法的优缺点" class="headerlink" title="哈希函数的一些实现方式及各方法的优缺点"></a>哈希函数的一些实现方式及各方法的优缺点</h5><h6 id="直接定址法"><a href="#直接定址法" class="headerlink" title="直接定址法"></a><strong>直接定址法</strong></h6><ul><li><p>哈希函数取关键字的某个线性函数</p><ul><li><code>Hash(key) = a * key + b</code></li></ul></li><li><p>一一映射，不会出现冲突</p></li><li><p><strong>缺点</strong>：要求哈希地址空间的大小与关键字集合的大小相同</p></li></ul><p><br><br><br></p><h6 id="余数法-最常见，最简单"><a href="#余数法-最常见，最简单" class="headerlink" title="余数法(最常见，最简单)"></a><strong>余数法</strong>(最常见，最简单)</h6><ul><li>设哈希表中允许地址数为m<ul><li><code>Hash(key) = key % p</code></li></ul></li><li>其中p要满足<ul><li>p &lt;= m,尽量接近m</li><li>最好取质数</li><li>最好不要接近2的幂</li></ul></li><li><strong>范例</strong><ul><li>有一个关键字key = 962148</li><li>哈希表大小m = 25</li><li>取质数p = 23</li><li>哈希函数：<code>Hash(key) = key % p</code></li><li>则哈希地址为：<ul><li><code>Hash(962148) = 962148% 23 = 12</code></li></ul></li></ul></li></ul><p><br><br><br></p><h6 id="数值抽取发-数字分析法"><a href="#数值抽取发-数字分析法" class="headerlink" title="数值抽取发(数字分析法)"></a><strong>数值抽取发</strong>(数字分析法)</h6><ul><li>将关键字的某几位数字取出作为地址</li><li><strong>例如</strong><ul><li>关键字为6位，哈希表地址为3位</li><li>可取出关键字的第1、2、5位，组成哈希地址</li><li><code>136782 -》138</code></li></ul></li><li><strong>缺点</strong>：数值抽取法仅适用于事先明确知道表中关键字每一位数值的分布情况，它完全依赖于关键字集合。如果换一个关键字集合，选择哪几位要重新决定<ul><li>比如：如果关键字是电话号码、学号、则前几位就不太适合，因为规律性太强</li></ul></li></ul><p><br><br><br></p><h6 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a><strong>平方取中法</strong></h6><ul><li>将关键字的前几位取出，做平方</li><li>再取出平方结果的中间几位作为地址</li><li><strong>例如</strong><ul><li><u>325</u>483 =》325^2 = <u>1056</u>25 =》056</li><li>此方法在词典处理中使用十分广泛</li></ul></li></ul><p><br><br><br></p><h6 id="折叠法"><a href="#折叠法" class="headerlink" title="折叠法"></a><strong>折叠法</strong></h6><ul><li>将关键字拆成位数相等的多段，将这几段叠加起来，相加结果作为哈希地址</li><li><strong>移动折叠法</strong>：各段最后一位对齐相加<ul><li>比如关键字：123 456 789 12</li><li>哈希地址要求为3位数</li><li><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/4.png"></li></ul></li><li><strong>边界折叠法</strong>：各部分沿各方部分的边界来回折叠，然后对齐相加，将相加的结构当做哈希地址<ul><li>比如：关键字 = 123 456 789 12</li><li><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/5.png"></li></ul></li></ul><p><br><br><br></p><h6 id="旋转法"><a href="#旋转法" class="headerlink" title="旋转法"></a>旋转法</h6><ul><li>将关键字中的数字旋转位置</li><li>比如：关键字 = 12345678</li><li>把个位数移到最左：81234567</li><li>此法通常和其他方法结合使用</li><li><img src="/2019/11/08/数据结构学习总结-（7-2）哈希表与哈希函数/6.png"></li></ul><p><br><br><br></p><h6 id="伪随机数法"><a href="#伪随机数法" class="headerlink" title="伪随机数法"></a>伪随机数法</h6><ul><li>利用伪随机数算法生成哈希地址<ul><li><code>Hash(key) = random(key)</code></li></ul></li></ul><hr><p><strong>总结：</strong></p><ul><li>应该根据实际情况选择：效率要求，关键字长度，哈希表长度，关键字分布等</li><li>有些时候可以多种方法结合使用<ul><li>比如：余数法+伪随机数法<ul><li><code>Hash(key) = random(key) % 12</code></li></ul></li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈希表&quot;&gt;&lt;a href=&quot;#哈希表&quot; class=&quot;headerlink&quot; title=&quot;哈希表&quot;&gt;&lt;/a&gt;哈希表&lt;/h4&gt;&lt;p&gt;当我们对一个数组进行操作时，如果要进行查找某个元素，一般时用循环一个个元素与要查找的关键字进行比较。这样往往要消耗大量的时间，而哈希
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.15）二叉查找树的插入与删除（附加）</title>
    <link href="https://shuhaohwang.github.io/2019/10/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-15%EF%BC%89%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%A0%E9%99%A4%EF%BC%88%E9%99%84%E5%8A%A0%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/</id>
    <published>2019-10-16T13:59:51.000Z</published>
    <updated>2019-11-07T09:41:01.197Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉查找树的插入操作"><a href="#二叉查找树的插入操作" class="headerlink" title="二叉查找树的插入操作"></a>二叉查找树的插入操作</h4><h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><ul><li>思路：  整体还是围绕二叉查找树的性质进行定位要插入的位置，当移动到空位置时则会返回一个插入值构建的新结点供其父结点相接，因为使用递归如果要插入的位置为两个结点之间，则会先把后一个结点的左右孩子先接入这个新的结点后再把这个新结点接入其前面的结点</li><li><img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/1.gif"></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiNode* <span class="title">InsertBST</span><span class="params">(BiNode root,T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="keyword">new</span> BiNode(e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(e &lt; root-&gt;data)</span><br><span class="line">        root-&gt;L_Node = InsertBST(root-&gt;L_Node,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e &gt; root-&gt;data)</span><br><span class="line">        root-&gt;R_Node = InsertBST(root-&gt;R_Node,e);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="循环迭代实现"><a href="#循环迭代实现" class="headerlink" title="循环迭代实现"></a>循环迭代实现</h5><ul><li>思路：通过循环进行遍历，来寻找插入的位置。若插入的结点在二叉树中已经存在则之间返回nullptr终止插入操作，否则进行把新的结点进行插入二叉树中</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiNode* <span class="title">InsertBST</span><span class="params">(BiNode root,T e)</span></span>&#123;</span><br><span class="line">    BiNode* p = root;</span><br><span class="line">    BiNode* parent = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data!= e)&#123;</span><br><span class="line">        parent = p;</span><br><span class="line">        <span class="keyword">if</span>(e &lt; p-&gt;data)</span><br><span class="line">            p = p-&gt;L_Node;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;R_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(p)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(!parent)<span class="keyword">return</span> <span class="keyword">new</span> BiNode(e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e &lt; parent-&gt;data)&#123;</span><br><span class="line">        parent-&gt;L_Node = <span class="keyword">new</span> BiNode(e);</span><br><span class="line">        <span class="keyword">return</span> parent-&gt;L_Node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        parent-&gt;R_Node = <span class="keyword">new</span> BiNode(e);</span><br><span class="line">        <span class="keyword">return</span> parent-&gt;R_Node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二叉查找树的删除操作"><a href="#二叉查找树的删除操作" class="headerlink" title="二叉查找树的删除操作"></a>二叉查找树的删除操作</h4><ul><li>思路：二叉查找树的删除 当找到要删的结点后通常有5种情况，<ul><li><u>第一种情况</u>：该结点为叶子结点，那么直接删除即可，</li><li><u>第二种情况</u>：该结点只存右子树，那么直接删除该结点后，要让其前一个结点重新连接到这个被删除结点的右子树。</li><li><u>第三种情况</u>：只存在左子树，处理方法同第二种情况。</li><li><u>第四种情况</u>：左右子树都不存在，此时要寻找待删除结点的右子树最左端的结点(该结点比待删除结点大且最接近)，替换掉待删除结点的数据，然后重新在待删除结点的右结点调用删除操作，把最左端的结点删除即可。</li><li><u>第五种情况</u>：没有找到待删除结点，直接返回空</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiNode* <span class="title">deleteBST</span><span class="params">(BiNode root , T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(root-&gt;data &gt; e)</span><br><span class="line">        deleteBST(root-&gt;L_Node,e);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;data &lt; e)</span><br><span class="line">        deleteBST(root-&gt;R_Node,e);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//若为叶子结点，直接删除该结点</span></span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;L_Node &amp;&amp; !root-&gt;R_Node)&#123;</span><br><span class="line">            <span class="keyword">delete</span> (root); <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">             </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!root-&gt;R_Node)&#123;</span><br><span class="line">BiNode* ret = root-&gt;L_Node;</span><br><span class="line"><span class="keyword">delete</span>(root); <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!root-&gt;L_Node) &#123;</span><br><span class="line">BiNode* ret = root-&gt;R_Node;</span><br><span class="line"><span class="keyword">delete</span>(root); <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//若所删除的结点存在左右孩子,则选取其右子树中最小的进行替换该节点，然后往右子树递归上诉操作</span></span><br><span class="line">            BiNode* temp = root-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(temp-&gt;L_Node)&#123;</span><br><span class="line">                temp = temp-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            root-&gt;data = temp-&gt;data;</span><br><span class="line">            root-&gt;R_Node = </span><br><span class="line">            deleteBST(root-&gt;R_Node , temp-&gt;data);    </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码解析：</li></ul><p>有如下二叉树查找树，假设此时要删除 89号的结点</p><img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/2.png"><p><u>第一步</u>：找到该结点发现该结点存在左右子树，接下来寻找该节点右子树下最左端的结点进行替换。</p><img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/3.png"><p><u>第二步</u>：替换后，原来89号结点的右子树重复上诉操作被替换的结点111</p><img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/4.png"><img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/4-1.png"><hr><h4 id="总体实验结果"><a href="#总体实验结果" class="headerlink" title="总体实验结果"></a>总体实验结果</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt;* b1 = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">56</span>);</span><br><span class="line">b1-&gt;L_Node = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">34</span>);</span><br><span class="line">b1-&gt;R_Node = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">89</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt;* b2 = b1-&gt;L_Node;</span><br><span class="line">b2-&gt;R_Node = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">55</span>);</span><br><span class="line">b2-&gt;L_Node = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">12</span>);</span><br><span class="line">b2 = b1-&gt;R_Node;</span><br><span class="line">b2-&gt;R_Node = <span class="keyword">new</span> BiNode&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b1-&gt;Fot(b1);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">"插入了40"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b1-&gt;Fot(b1-&gt;InsertBST(b1, <span class="number">40</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b1-&gt;Fot(b1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"删除56"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b1-&gt;deleteBST(b1, <span class="number">56</span>);</span><br><span class="line">b1-&gt;Fot(b1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>&lt;&lt; <span class="string">"删除100"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">b1-&gt;deleteBST(b1, <span class="number">100</span>);</span><br><span class="line">b1-&gt;Fot(b1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/10/16/数据结构学习总结-（5-15）二叉查找树的插入与删除（附加）/5.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉查找树的插入操作&quot;&gt;&lt;a href=&quot;#二叉查找树的插入操作&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树的插入操作&quot;&gt;&lt;/a&gt;二叉查找树的插入操作&lt;/h4&gt;&lt;h5 id=&quot;递归实现&quot;&gt;&lt;a href=&quot;#递归实现&quot; class=&quot;head
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（7.1）查找</title>
    <link href="https://shuhaohwang.github.io/2019/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%887-1%EF%BC%89%E6%9F%A5%E6%89%BE/"/>
    <id>https://shuhaohwang.github.io/2019/10/11/数据结构学习总结-（7-1）查找/</id>
    <published>2019-10-11T14:36:56.000Z</published>
    <updated>2019-10-15T16:52:12.668Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查找的概念"><a href="#查找的概念" class="headerlink" title="查找的概念"></a>查找的概念</h4><p>在数据集合中寻找满足某种条件的数据元素，也就是根据给定的某个值，在查找表中确定一个<u>关键字</u>等于给定值的记录或数据元素。</p><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><ul><li>数据元素中某个数据项或单独关键字</li><li>关键字可以相同，即不一定唯一标识这个元素</li></ul><h5 id="平均查找长度"><a href="#平均查找长度" class="headerlink" title="平均查找长度"></a>平均查找长度</h5><p>查找就是不断将数据元素的关键字与待查找关键字进行比较，查找算法在查找成功时平均比较的次数称作平均查找长度</p><hr><h4 id="查找的类型"><a href="#查找的类型" class="headerlink" title="查找的类型"></a>查找的类型</h4><ul><li>线性查找表<ul><li>·数据集合是一个线性表(数组或链表)</li></ul></li><li>二叉查找树<ul><li>数据集合是一个二叉树</li></ul></li><li>哈希(散列)表<ul><li>根据哈希函数(关键字映射到存储地址)存储和查找。类似根据下标到地址</li></ul></li></ul><hr><h5 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h5><p>主要用于线性的数据结构中进行查找</p><h6 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h6><p>讲线性表中的每个元素和关键字进行比较，直到找到满足条件(eg:相等)的元素，则查找成功，给出该对象在表中的位置。</p><p>若没有找到关键字相等的元素则查找失败。</p><h6 id="直接线性查找"><a href="#直接线性查找" class="headerlink" title="直接线性查找"></a>直接线性查找</h6><ul><li>实现思路：通过遍历每一个元素进行匹配要查找的元素，如果找到则返回其下标，未找到则返回 -1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> TKey,<span class="keyword">typename</span> TFunc&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SqSearch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; <span class="built_in">array</span>,TKey key,TFunc Func)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.size(); i++)</span><br><span class="line"><span class="keyword">if</span>(Func(TKey key,<span class="built_in">array</span>[i]))<span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用模板函数使查找条件自由变换*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TKey,<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEqual</span><span class="params">(TKey key,T Num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key == Num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">678</span>,<span class="number">90</span>,<span class="number">56</span>,<span class="number">89</span>,<span class="number">100</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数字2的位置为 "</span> &lt;&lt; SqSearch(arr, <span class="number">2</span>, IsEqual&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数字56的位置为 "</span> &lt;&lt; SqSearch(arr, <span class="number">56</span>, IsEqual&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果输出：</span></span><br><span class="line"><span class="comment">数字2的位置为 -1</span></span><br><span class="line"><span class="comment">数字56的位置为 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h6 id="二分查找-折半查找"><a href="#二分查找-折半查找" class="headerlink" title="二分查找(折半查找)"></a>二分查找(折半查找)</h6><p><strong>注意!!!</strong>：此查找算法要在数组已排好序（从小到大）的情况下才适应</p><ul><li>思路：首先待查找值的数组已经是从小到大排序完毕。存在一个mid变量下标，一开始便定位在该数组的中间元素，然后通过要查找的值与该中值比较，如果比中间值大，那么则只需在中值后的元素进行查找，小了则反之。重复多次直到中值与该待查找的值相等了就查找成功，否则失败</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> TKey,<span class="keyword">typename</span> TFunc&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; <span class="built_in">array</span>,TKey Key,TFunc Func)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max = <span class="built_in">array</span>.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(min &lt;= max)&#123;</span><br><span class="line">    <span class="keyword">auto</span> mid = (max+min)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> ret = Func(Key,<span class="built_in">array</span>[mid]);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">0</span>)<span class="keyword">return</span> mid;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            mid = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> TKey&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEqual</span><span class="params">(TKey key,T Num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> key - Num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">89</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">678</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数字2的位置为 "</span> &lt;&lt; BinarySearch(arr, <span class="number">2</span>, IsEqual&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数字56的位置为 "</span> &lt;&lt; BinarySearch(arr, <span class="number">56</span>, IsEqual&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">数字2的位置为 -1</span></span><br><span class="line"><span class="comment">数字56的位置为 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h5 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h5><p>什么是二叉查找树？</p><p>一棵空树，或者是具有下列性质的二叉树</p><p>（1）若左子树不空，则左子树上所有节点的值均小于它的[节点的值；</p><p>（2）若右子树不空，则右子树上所有节点的值均大于它的根节点的值；</p><p>（3）左、右子树也分别为二叉排序树；</p><p>（4）没有键值相等的节点。</p><h6 id="递归查找算法"><a href="#递归查找算法" class="headerlink" title="递归查找算法"></a>递归查找算法</h6><ul><li>思路：类似二叉树的先序遍历，通过对根结点的data进行比较 因为查找二叉树的左子树是一定小于其结点的，右子树则一定大于结点。所以可以通过比较结点的data值。来进行递归操作，如果待查找值比结点的数值大那么往右子树找，同理：小了就往左子树找</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>&#123;</span></span><br><span class="line">  T data;</span><br><span class="line">    BiNode* R_Node = <span class="literal">nullptr</span>;</span><br><span class="line">    BiNode* L_Node = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    BiNode(T num)&#123;</span><br><span class="line">        data = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">BiNode* <span class="title">BiSearchTree</span><span class="params">(BiNode* tree,T Key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!tree)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(tree-&gt;data == Key)<span class="keyword">return</span> tree;</span><br><span class="line">        <span class="keyword">if</span>(tree-&gt;data &gt; Key)&#123;</span><br><span class="line">            <span class="keyword">return</span> BiSearchTree(tree-&gt;L_Node,Key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> BiSearchTree(tree-&gt;R_Node,Key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    BiNode&lt;<span class="keyword">int</span>&gt; b1(<span class="number">56</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b2(<span class="number">55</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b3(<span class="number">34</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b4(<span class="number">12</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b5(<span class="number">89</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b6(<span class="number">100</span>);</span><br><span class="line">b1.L_Node = &amp;b2;</span><br><span class="line">b1.R_Node = &amp;b5;</span><br><span class="line">b2.R_Node = &amp;b3;</span><br><span class="line">b2.L_Node = &amp;b4;</span><br><span class="line">b5.R_Node = &amp;b6;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (b1.BiSearchTree(&amp;b1, <span class="number">1</span>))<span class="built_in">cout</span> &lt;&lt; <span class="string">"找到了"</span>  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b1.BiSearchTree(&amp;b1, <span class="number">89</span>))<span class="built_in">cout</span> &lt;&lt; <span class="string">"找到了"</span>  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">没有找到</span></span><br><span class="line"><span class="comment">找到了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h6 id="使用循环迭代来实现查找二叉树的查找"><a href="#使用循环迭代来实现查找二叉树的查找" class="headerlink" title="使用循环迭代来实现查找二叉树的查找"></a>使用循环迭代来实现查找二叉树的查找</h6><ul><li>思路：总体思路也是跟递归差不多，运用二叉查找树的特性，循环中如果结点不为空并且结点的data值与要查找的值不相等意味着还没有查找到值则继续对结点的data值进行比较，如果大了就移动到该结点的右子树继续查找，同理，小了就向左边移动继续查找，循环上诉操作。当循环结束后便根据最终指针移动后得到的结点情况来判断是否查找成功，如果为空那么就没有找到，反之则查找成功</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BiNode* <span class="title">BiSearchTree2</span><span class="params">(BiNode* tree,T Key)</span></span>&#123;</span><br><span class="line">    BiNode* temp = tree;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(temp &amp;&amp; temp-&gt;data != key)</span><br><span class="line">        <span class="keyword">if</span>(Key &gt; temp-&gt;data)</span><br><span class="line">            temp = temp-&gt;R_Node;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            temp = temp-&gt;L_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!temp)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    BiNode&lt;<span class="keyword">int</span>&gt; b1(<span class="number">56</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b2(<span class="number">55</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b3(<span class="number">34</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b4(<span class="number">12</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b5(<span class="number">89</span>);</span><br><span class="line">BiNode&lt;<span class="keyword">int</span>&gt; b6(<span class="number">100</span>);</span><br><span class="line">b1.L_Node = &amp;b2;</span><br><span class="line">b1.R_Node = &amp;b5;</span><br><span class="line">b2.R_Node = &amp;b3;</span><br><span class="line">b2.L_Node = &amp;b4;</span><br><span class="line">b5.R_Node = &amp;b6;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (b1.BiSearchTree2(&amp;b1, <span class="number">1</span>))<span class="built_in">cout</span> &lt;&lt; <span class="string">"找到了"</span>  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b1.BiSearchTree2(&amp;b1, <span class="number">89</span>))<span class="built_in">cout</span> &lt;&lt; <span class="string">"找到了"</span>  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"没有找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">没有找到</span></span><br><span class="line"><span class="comment">找到了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>—（本文未完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;查找的概念&quot;&gt;&lt;a href=&quot;#查找的概念&quot; class=&quot;headerlink&quot; title=&quot;查找的概念&quot;&gt;&lt;/a&gt;查找的概念&lt;/h4&gt;&lt;p&gt;在数据集合中寻找满足某种条件的数据元素，也就是根据给定的某个值，在查找表中确定一个&lt;u&gt;关键字&lt;/u&gt;等于给定值的记
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(3.3)typename的使用场合及使用范例、函数指针参数化</title>
    <link href="https://shuhaohwang.github.io/2019/09/19/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-3-3-typename%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E5%90%88%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%8C%83%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/</id>
    <published>2019-09-19T13:19:55.000Z</published>
    <updated>2019-09-20T07:59:05.526Z</updated>
    
    <content type="html"><![CDATA[<h4 id="typename的使用场合"><a href="#typename的使用场合" class="headerlink" title="typename的使用场合"></a>typename的使用场合</h4><h5 id="在类模板中存在自定义类型时-相关返回值函数必须添加typename"><a href="#在类模板中存在自定义类型时-相关返回值函数必须添加typename" class="headerlink" title="在类模板中存在自定义类型时 相关返回值函数必须添加typename"></a>在类模板中存在自定义类型时 相关返回值函数必须添加typename</h5><ul><li>范例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">array</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*自定义类型：把模板参数T定义为 自定义类型名Size*/</span></span><br><span class="line">    <span class="keyword">typedef</span> T Size;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Size <span class="title">getsize</span><span class="params">(T i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*类外定义的时候需要添加   typename 模板类名&lt;&gt;  来指定该模板类中的自定义类型Size*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">array</span>&lt;T&gt;::Size <span class="built_in">array</span>&lt;T&gt;::getsize(T i)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size的值为"</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">    arr.getsize(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/1.png"></p><h5 id="在类模板中存在内部类的情况"><a href="#在类模板中存在内部类的情况" class="headerlink" title="在类模板中存在内部类的情况"></a>在类模板中存在内部类的情况</h5><ul><li>范例:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lklist</span>&#123;</span></span><br><span class="line">    Node* head;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">      Node* next;</span><br><span class="line">        T data;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">GetNodeID</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> Lklist&lt;T&gt;::Node* Lklist&lt;T&gt;::GetNodeID(<span class="keyword">int</span> i)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"测试函数传参的值为 "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">Lklist&lt;<span class="keyword">int</span>&gt; lk;</span><br><span class="line">lk.GetNodeID(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/2.png"></p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li>上述两种情况，在类模板外定义函数时，都必须要加typename 目的是通知编译器，该名称是一个类型名称，且为类模板内定义的类型或类。</li><li>上述情况只能用typename不能替换为class</li></ul><p>其余范例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> T::<span class="function">size_type <span class="title">getlength</span><span class="params">(<span class="keyword">const</span> T&amp;c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> c.size();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">"HelloShuHao"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span>::size_type size = getlength(str);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"测试值:str的长度为："</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/3.png"></p><hr><h4 id="函数指针作参数"><a href="#函数指针作参数" class="headerlink" title="函数指针作参数"></a>函数指针作参数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Func)</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testfunc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k, Func f)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"测试函数指针 两数相加的值为: "</span> &lt;&lt; f(i,k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    testfunc(<span class="number">10</span>,<span class="number">15</span>,add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/4.png"></p><hr><h4 id="typename使用范例"><a href="#typename使用范例" class="headerlink" title="typename使用范例"></a>typename使用范例</h4><h5 id="改造成函数模板"><a href="#改造成函数模板" class="headerlink" title="改造成函数模板"></a>改造成函数模板</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Func)</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testfunc</span><span class="params">(T i, T k, F f)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"测试函数指针 两数相加的值为: "</span> &lt;&lt; f(i,k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此时F类型识别为函数指针，则使用函数指针类型</span></span><br><span class="line">    testfunc(<span class="number">10</span>,<span class="number">15</span>,add);<span class="comment">//依旧通过编译没有报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="若使用类-可调用对象"><a href="#若使用类-可调用对象" class="headerlink" title="若使用类(可调用对象)"></a>若使用类(可调用对象)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*Func)</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    TestClass()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"这是TC的构造函数 被调用了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TestClass(<span class="keyword">const</span> TestClass&amp; t)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数 被调用了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testfunc</span><span class="params">(T i, T k, F f)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"测试函数指针 两数相加的值为: "</span> &lt;&lt; f(i,k) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此时F类型识别为函数指针，则使用函数指针类型</span></span><br><span class="line">    testfunc(<span class="number">10</span>,<span class="number">15</span>,add);<span class="comment">//依旧通过编译没有报错</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    TestClass tc;<span class="comment">//此时调用构造函数</span></span><br><span class="line">    testfunc(<span class="number">100</span>,<span class="number">150</span>,tc);<span class="comment">//传参是参数临时对象，调用拷贝构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实验结果</strong>：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/5.png"></p><p><strong>结果分析</strong>：可以发现，当对象被创建时调用了一次构造函数，然后传参入<code>testfunc</code>函数时，调用了一次拷贝构造函数，最后输出值，整个过程，T的类型推断为int整型 然后 F被推断为TestClass类型，然后该类型对象通过重载后的()返回两个整型参数的和值。</p><h5 id="此时也可以通过直接传参消除临时对象"><a href="#此时也可以通过直接传参消除临时对象" class="headerlink" title="此时也可以通过直接传参消除临时对象"></a>此时也可以通过直接传参消除临时对象</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//TestClass tc;</span></span><br><span class="line">    </span><br><span class="line">    testfunc(<span class="number">100</span>,<span class="number">150</span>,TestClass());<span class="comment">//直接使用构造函数，可以消除临时对象的产生</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/19/C-进阶学习总结-3-3-typename的使用场合及使用范例/6.png"></p><hr><h4 id="默认模板参数"><a href="#默认模板参数" class="headerlink" title="默认模板参数"></a>默认模板参数</h4><p>总体跟函数默认参数类似，从右到左，存在默认参数不能有断</p><ul><li>范例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> a = <span class="number">100</span>&gt;class A&#123;&#125;;<span class="comment">//没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="built_in">string</span>,<span class="keyword">int</span> a = <span class="number">100</span>&gt;class B&#123;&#125;;<span class="comment">//没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="built_in">string</span>,<span class="keyword">int</span> a&gt;class C&#123;&#125;;<span class="comment">//报错！a没有提供默认参数</span></span><br></pre></td></tr></table></figure><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;typename的使用场合&quot;&gt;&lt;a href=&quot;#typename的使用场合&quot; class=&quot;headerlink&quot; title=&quot;typename的使用场合&quot;&gt;&lt;/a&gt;typename的使用场合&lt;/h4&gt;&lt;h5 id=&quot;在类模板中存在自定义类型时-相关返回值函数
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(3.2)类模板</title>
    <link href="https://shuhaohwang.github.io/2019/09/18/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-3-2-%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>https://shuhaohwang.github.io/2019/09/18/C-进阶学习总结-3-2-类模板/</id>
    <published>2019-09-18T15:29:16.000Z</published>
    <updated>2019-09-20T07:58:58.939Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><h5 id="模板参数类型"><a href="#模板参数类型" class="headerlink" title="模板参数类型"></a>模板参数类型</h5><p>使类能够根据给定的实际类型，来对类内的一些参数类型进行变化</p><p>编译器不能为类模板推断模板参数类型，所以要使用类模板，必须要在模板名后用<code>&lt;&gt;</code>来提供实际类型</p><ul><li>格式：<ul><li><code>template&lt;typename T&gt;class 类名</code></li><li><code>template&lt;typename T，B&gt;class 类名</code></li><li><code>template&lt;typename T，int a&gt;class 类名</code></li></ul></li><li>注意：<ul><li>类模板成员函数，可以写在类模板定义中。(即：不在类外定义类成员函数）其中这种<strong>成员函数会隐式声明为<code>inline</code>内联函数</strong></li><li>类模板被实例化对象后，类内的对应的实例都会有自己版本的成员函数</li><li>在实例化类模板对象的时候，要在类模板名后加&lt;&gt;并给定实际类型</li><li>定义在类模板之外的成员函数必须以<code>template</code>关键字开头，后面加类模板的参数列表。其次类名后面要添加&lt;&gt;吧模板参数列表里面<strong>的所有模板参数名列出来</strong>(多个参数用 <code>,</code> 隔开)</li></ul></li><li>范例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Sqlist</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">  T* data;<span class="comment">//使用模板参数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*类内定义的函数会隐式声明为inline函数*/</span></span><br><span class="line">    <span class="comment">/*inline*/</span> <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"这是该类的func函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*外部定义，在外部要加&lt;&gt;*/</span></span><br><span class="line">    <span class="function">T <span class="title">func2</span><span class="params">(T a,T b)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*要类模板名要添加模板参数列表*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; T Sqlist&lt;T&gt;::func2(T a,T b)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"这是该类的func2函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*在实例化类模板对象时，要用&lt;&gt;来提供实际类型*/</span></span><br><span class="line">    Sqlist&lt;<span class="keyword">int</span>&gt; sq1;</span><br><span class="line">    sq1.func();</span><br><span class="line">    </span><br><span class="line">    Sqlist&lt;<span class="keyword">double</span>&gt; sq2;</span><br><span class="line">    sq2.func2(<span class="number">12.3</span>,<span class="number">14.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/18/C-进阶学习总结-3-2-类模板/1.png"></p><hr><h5 id="非模板类型"><a href="#非模板类型" class="headerlink" title="非模板类型"></a>非模板类型</h5><p>在定义模板类的时候模板参数不提供模板参数，而是给定实际参数</p><ul><li><p>格式：</p><ul><li><code>template&lt;int a&gt;class 类名</code></li><li><code>template&lt;typename T，int a&gt;class 类名</code></li></ul></li><li><p>范例：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> size = <span class="number">10</span>&gt;class Sqlist&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  T data[size];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*要在类模板后的&lt;&gt;把所有的类模板参数列出来，即便存在默认值*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> size&gt; <span class="keyword">void</span> Sqlist&lt;T,size&gt;::func()&#123;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"这是该类的func函数 其中size: "</span> &lt;&lt; size &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*存在默认参数可以不给size的值*/</span></span><br><span class="line">    Sqlist&lt;<span class="keyword">int</span>&gt; sq1;</span><br><span class="line">    sq1.func();</span><br><span class="line">    Sqlist&lt;<span class="keyword">double</span>,<span class="number">100</span>&gt; sq2;</span><br><span class="line">    sq2.func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：<img src="/2019/09/18/C-进阶学习总结-3-2-类模板/2.png"></p><ul><li><strong>注意：</strong><ul><li>浮点数不能作为非类型模板参数<ul><li><code>template&lt;typename T,double a&gt; class B //报错，double和float都不能做非类型模板参数</code></li></ul></li><li>类类型不能做非类型模板参数<ul><li><code>class A{};template&lt;typename T,A a&gt; class B //报错：类类型不能做非类型模板参数</code></li></ul></li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;类模板&quot;&gt;&lt;a href=&quot;#类模板&quot; class=&quot;headerlink&quot; title=&quot;类模板&quot;&gt;&lt;/a&gt;类模板&lt;/h4&gt;&lt;h5 id=&quot;模板参数类型&quot;&gt;&lt;a href=&quot;#模板参数类型&quot; class=&quot;headerlink&quot; title=&quot;模板参数类型&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（3.1）模板、函数模板</title>
    <link href="https://shuhaohwang.github.io/2019/09/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A8%A1%E6%9D%BF%E3%80%81%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <id>https://shuhaohwang.github.io/2019/09/17/C-进阶学习总结-（3-1）模板、函数模板/</id>
    <published>2019-09-17T14:54:58.000Z</published>
    <updated>2019-09-20T07:58:30.842Z</updated>
    
    <content type="html"><![CDATA[<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>所谓泛型编程 是独立于任何特定类型类型的方式编写代码。使用泛型编程时，需要<strong>提供具体的程序实例</strong>。</p><p>模板是泛型编程的基础，是一种在创建类或函数时的一种公式，根据给定的类型来决定公式中具体参数的类型值。</p><hr><h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><h5 id="函数模板定义与使用"><a href="#函数模板定义与使用" class="headerlink" title="函数模板定义与使用"></a>函数模板定义与使用</h5><p>会更具实际类型来推断模板实际类型的函数，一般情况下会编译器会自动判别。</p><ul><li>格式：<ul><li><code>template&lt;typename T&gt; T 函数名(参数)</code></li><li><code>template&lt;class T&gt; T 函数名(参数)</code></li></ul></li></ul><p>范例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">add</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"12 + 13 = "</span> &lt;&lt; add(<span class="number">12</span>,<span class="number">13</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5.6 + 12.3 = "</span> &lt;&lt; add(<span class="number">5.6</span>,<span class="number">12.3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：</p><p>实际上，函数模板会更具你实际给定的对象类型来生成对应的函数。例如：如果你给定T的类型为double，则系统会生成<code>double add(double a,double b)</code>给定整型int则会生成对应的函数<code>int add(int a,int b)</code>。</p><h5 id="非类型模板参数"><a href="#非类型模板参数" class="headerlink" title="非类型模板参数"></a>非类型模板参数</h5><p>在模板参数列表中没有使用类型参数，而是给定实际的类型的参数</p><ul><li>格式：<code>template&lt;实际类型 T&gt;</code></li></ul><p>范例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需要在&lt;&gt;给定实际类型才能调用*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a,<span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*混合型*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">int</span> a,<span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="function">T <span class="title">add2</span><span class="params">(T c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a + b + (<span class="keyword">int</span>)c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*特殊：不用提供实际类型，由系统自动推断*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> L1,<span class="keyword">unsigned</span> L2&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charscomp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>(&amp;p1)[L1],<span class="keyword">const</span> <span class="keyword">char</span>(&amp;p2)[L2])</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(p1,p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"12 + 13 = "</span> &lt;&lt; add1&lt;<span class="number">12</span>,<span class="number">13</span>&gt;() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*不需要在&lt;&gt;中给定实际类型*/</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; charscomp(<span class="string">"ShuHao"</span>,<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>如果要声明函数模板为内联函数，那么inline关键字要在template与函数返回值之间。例如: <code>template&lt;typename T, int a&gt; inline T func(T b){return b+a}</code></p></li><li><p>模板函数一般放在头文件中，再多个CPP文件中include该头文件不会出现函数重定义</p></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h4&gt;&lt;p&gt;所谓泛型编程 是独立于任何特定类型类型的方式编写代码。使用泛型编程时，需要&lt;strong&gt;提供具体的程序实例&lt;/strong&gt;。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
