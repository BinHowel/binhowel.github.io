<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此，却永不能触及</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-09-02T01:46:36.600Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++进阶学习总结-（2.9）移动构造函数、移动运算符</title>
    <link href="https://shuhaohwang.github.io/2019/09/02/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%A7%BB%E5%8A%A8%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://shuhaohwang.github.io/2019/09/02/C-进阶学习总结-（2-9）移动构造函数、移动运算符/</id>
    <published>2019-09-01T23:00:24.000Z</published>
    <updated>2019-09-02T01:46:36.600Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++11中的移动构造函数、移动赋值运算符、相关使用时的注意事项（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计（二）</title>
    <link href="https://shuhaohwang.github.io/2019/08/29/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/08/29/概率论与数理统计（二）/</id>
    <published>2019-08-29T15:09:59.000Z</published>
    <updated>2019-08-29T15:33:01.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="条件概率与乘法公式"><a class="header-anchor" href="#条件概率与乘法公式">¶</a>条件概率与乘法公式</h4><ul><li><p>条件概率：</p><ul><li>P(B|A) = P(AB) / P(A)</li><li>P(A|B) = P(AB) / P(B)</li></ul></li><li><p>乘法公式</p><ul><li>P(AB) = P(A) - P(B|A) = P(B) - P(A|B)</li></ul></li></ul><hr><h4 id="全概率公式与贝叶斯公式"><a class="header-anchor" href="#全概率公式与贝叶斯公式">¶</a>全概率公式与贝叶斯公式</h4><ul><li><p>全概率公式：</p><ul><li><p>$$<br>P(A) = \sum_{i=1}^nP(B_i)P(A|B_i)<br>$$</p></li><li><p>P(A) 要发生的事件的概率</p></li><li><p>P(B<sub>i</sub>)为A发生的前提事件的概率</p></li><li><p>P(A|B<sub>i</sub>)为B<sub>i</sub>事件已经发生后的前提下，A事件发生的概率</p></li></ul></li><li><p>贝叶斯公式：（逆概率公式）</p><ul><li>$$<br>P(B_i|A) = \frac {P(B_i)P(A|B_i)}{P(A)}<br>$$</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;条件概率与乘法公式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#条件概率与乘法公式&quot;&gt;¶&lt;/a&gt;条件概率与乘法公式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件概率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|A) = P(AB) / P(A)&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://shuhaohwang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计（一）</title>
    <link href="https://shuhaohwang.github.io/2019/08/28/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/08/28/概率论与数理统计（一）/</id>
    <published>2019-08-28T14:43:55.000Z</published>
    <updated>2019-08-28T15:39:12.051Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事件运算及概率"><a class="header-anchor" href="#事件运算及概率">¶</a>事件运算及概率</h4><ul><li>事件运算<ul><li>包含事件<ul><li>A</li></ul></li><li>并事件<ul><li>A∪B = A+B</li></ul></li><li>差事件<ul><li>A - B  = AC<sub>B</sub> = A - AB</li></ul></li><li>交事件<ul><li>A∩B = AB</li></ul></li><li>互斥事件<ul><li>AB = ∅</li></ul></li><li>对立事件<ul><li>A∪C<sub>A</sub> = S; AC<sub>A</sub>  = ∅</li></ul></li><li>独立事件<ul><li><code>P(AB) = P(A)P(B)</code></li></ul></li></ul></li><li>其他：<ul><li><strong>A、B独立：</strong><ul><li>A、C<sub>B</sub> C<sub>A</sub>、BC<sub>A</sub>、C<sub>B</sub>互相独立</li></ul></li><li><strong>A、B、C独立：</strong><ul><li>A、B、C两两相互独立(充分不必要)</li><li><code>P(ABC) = P(A)P(B)P(C)</code></li></ul></li></ul></li></ul><hr><h4 id="公式："><a class="header-anchor" href="#公式：">¶</a>公式：</h4><ul><li><p>德摩根率：</p><ul><li><p>$$<br>C_{A∪B} = C_A · C_B<br>$$</p></li><li><p>$$<br>C_{A∪B} = C_A∪C_B<br>$$</p></li></ul></li></ul><ul><li><p>加法公式</p><ul><li><p>$$<br>P(A∪B) = P(A) + P(B) - P(AB）<br>$$</p></li><li><p>$$<br>P(A∪B∪C) = P(A) + P(B) + P© - P(AB) - P(AC) - P(BC) + P(ABC)<br>$$</p></li></ul></li></ul><ul><li><p>减法公式</p><ul><li>$$<br>P(A-B) = P(AC_B) = P(A) - P(AB)<br>$$</li></ul></li><li><p>对立事件</p><ul><li>$$<br>P(C_A) = 1 - P(A)<br>$$</li></ul></li><li><p>独立事件</p><ul><li>$$<br>P(AB) = P(A)·P(B)<br>$$</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事件运算及概率&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#事件运算及概率&quot;&gt;¶&lt;/a&gt;事件运算及概率&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;事件运算
&lt;ul&gt;
&lt;li&gt;包含事件
&lt;ul&gt;
&lt;li&gt;A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并事件

      
    
    </summary>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://shuhaohwang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.7）深度优先搜索(邻接矩阵)</title>
    <link href="https://shuhaohwang.github.io/2019/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-7%EF%BC%89%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/</id>
    <published>2019-08-21T13:26:44.000Z</published>
    <updated>2019-08-22T07:42:47.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵的dfs-深度优先搜索-代码实现及思路"><a class="header-anchor" href="#邻接矩阵的dfs-深度优先搜索-代码实现及思路">¶</a>邻接矩阵的DFS(深度优先搜索)代码实现及思路</h4><ol><li><strong>实现邻接矩阵DFS算法的前提</strong></li></ol><ul><li><p>思路：要实现邻接矩阵的DFS算法，首先就要在邻接矩阵的结构中设置一个标记数组，用来对应顶点数组在遍历过程中的访问情况，即已经访问过的顶点将被标记已被访问，没有访问的将被标记未访问。</p></li><li><p>代码1：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"> ....</span><br><span class="line">     </span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;Mark;<span class="comment">//标记数组</span></span><br><span class="line">     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建标记数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_mark</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//避免重复创建+验证</span></span><br><span class="line">    <span class="keyword">if</span>(Mark.size() != Vertex.size())<span class="keyword">return</span>;<span class="comment">//Vertex是顶点数组</span></span><br><span class="line">    </span><br><span class="line">    Mark.resize(Vertex.size(),<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><strong>遍历实现DFS</strong></li></ol><ul><li><p>思路：根据标识数组来确定是否要访问，函数参数可以更加顶点数组来指定结点开始，并可以通过函数指针作为参数之一多样化的去遍历图</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Mark.size())<span class="keyword">return</span>;</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    vistit(Vertex[ID]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Vertex.size(); k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edges[ID][k] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[k])</span><br><span class="line">                DFS(k,visit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>代码解析</strong></p><img src="/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/1.png"><table><thead><tr><th style="text-align:center">Mark/Vertex</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">false</td></tr></tbody></table><ul><li>邻接矩阵</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><ul><li>第一步<code>DFS(unsigned int ID,void(*visit)(const VT&amp; vertex))</code><ul><li>Mark[0] = true；</li><li>输出了A</li><li>Edge[0] [0]不输出，输出B,C,D</li></ul></li></ul><hr><ol start="3"><li>堆栈实现</li></ol><ul><li><p>思路：通过堆栈来模拟递归实现</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    create_mark();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vertex.size(); i++)&#123;</span><br><span class="line">        DFS_(i,visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(ID);</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">auto</span> v = s.top();s.pop();</span><br><span class="line">        visit(Vertex[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; Vertex.size(); w++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edge[ID][w] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[w])&#123;</span><br><span class="line">                s.push(w);</span><br><span class="line">                Mark[w] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵的dfs-深度优先搜索-代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接矩阵的dfs-深度优先搜索-代码实现及思路&quot;&gt;¶&lt;/a&gt;邻接矩阵的DFS(深度优先搜索)代码实现及思路&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.6）图的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-6%EF%BC%89%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/20/数据结构学习总结-（6-6）图的遍历/</id>
    <published>2019-08-20T03:53:51.000Z</published>
    <updated>2019-08-22T07:47:14.507Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的遍历-图的遍历是图的基本运算"><a class="header-anchor" href="#图的遍历-图的遍历是图的基本运算">¶</a>图的遍历（图的遍历是图的基本运算）</h4><ul><li>定义：从已给的连通图中的某一个顶点出发，沿着一些边去访问遍历图中所有的顶点，且使每个顶点仅被访问一次</li><li>实质：找每个顶点的邻接点的过程</li></ul><hr><h4 id="遍历算法"><a class="header-anchor" href="#遍历算法">¶</a>遍历算法</h4><ul><li>深度优先搜索(DFS)<ul><li>类似树的先序遍历</li></ul></li><li>广度优先搜索(BFS)<ul><li>类似树的层次遍历</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的遍历-图的遍历是图的基本运算&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图的遍历-图的遍历是图的基本运算&quot;&gt;¶&lt;/a&gt;图的遍历（图的遍历是图的基本运算）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：从已给的连通图中的某一个顶点出发，沿着一些边去访
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.5）图的实现-邻接表</title>
    <link href="https://shuhaohwang.github.io/2019/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-5%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/</id>
    <published>2019-08-17T16:31:21.000Z</published>
    <updated>2019-08-19T13:02:41.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接表"><a class="header-anchor" href="#邻接表">¶</a>邻接表</h4><p>邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承载，通俗点讲，就是把一堆链表用顺序表进行存储的结构。</p><img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/1.png"><hr><h5 id="邻接表的实现及思路"><a class="header-anchor" href="#邻接表的实现及思路">¶</a>邻接表的实现及思路</h5><p><strong>邻接表的结构</strong></p><ul><li><p>思路：邻接表结构是由一个顶点结点数组，和各个邻接点组成的，其中顶点数组中含有顶点数据和指向邻接点的链域，而邻接点由邻接点域(对应顶点数组的顶点下标)和顶点所连接的其他顶点的邻接点地址。所以实现邻接表结构，首先就要有顶点数组和邻接点结构。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*邻接点结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点数组下标</span></span><br><span class="line">        Einfo info;<span class="comment">//保存权重</span></span><br><span class="line">        Edge_Node* next;<span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">        </span><br><span class="line">        Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id,Einfo info):ID(id),info(info),next(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*顶点数组元素结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VerTex_Node</span>&#123;</span></span><br><span class="line">       VT v_data;<span class="comment">//顶点数据</span></span><br><span class="line">       Edge_Node* Edge;</span><br><span class="line">       </span><br><span class="line">       VerTex_Node(VT v):v_data(v),Edge(<span class="literal">nullptr</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VerTex_Node&gt;Vertexs;<span class="comment">//顶点数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;</span><br><span class="line">    <span class="keyword">bool</span> undirected;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>添加顶点</strong></p><ul><li><p>思路：直接进行把顶点加入顶点数组即可</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span></span>&#123;</span><br><span class="line">    Vertexs.push_back(<span class="keyword">new</span> VerTex_Node(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>填加边</strong></p><p>思路：这里要注意的时，邻接表中的邻接点是以链表结合数组进行实现的，所以在添加边的时候，要对边结点的链域进行处理，这里可以采用链表中的前插法，邻接点一个个插入顶点数组的链域之间。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2,Einfo info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id1].Edge;</span><br><span class="line">    Vertexs[id1].Edge = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id2].Edge;</span><br><span class="line">    Vertexs[id2].Edge = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>修改边的权值</strong></p><ul><li><p>思路：这个操作的思路比较明确，更加要修改的边，通过循环遍历该起始点的顶点数组中的链域结构即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1,<span class="keyword">const</span> <span class="keyword">int</span> id2,<span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id1].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id2)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id2].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id1)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span> &#123;</span></span><br><span class="line"><span class="comment">/*邻接表结构-边结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点集的下标</span></span><br><span class="line"></span><br><span class="line">Einfo info;<span class="comment">//权重</span></span><br><span class="line">Edge_Node* next;</span><br><span class="line">Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id, Einfo info) :ID(id), info(info), next(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶点结点结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VT v_data;</span><br><span class="line">Edge_Node* Edge = <span class="literal">nullptr</span>;</span><br><span class="line">Vertex_Node(VT v) :v_data(v) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vertex_Node&gt; VerTexs;<span class="comment">//顶点集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>) :undirected(undirected), Num_Edge(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> VerTexs[i].v_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span> </span>&#123;</span><br><span class="line">VerTexs.push_back(Vertex_Node(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id1, <span class="keyword">unsigned</span> <span class="keyword">int</span> id2, Einfo info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插*/</span></span><br><span class="line">p-&gt;next = VerTexs[id1].Edge;</span><br><span class="line">VerTexs[id1].Edge = p;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;next = VerTexs[id2].Edge;</span><br><span class="line">VerTexs[id2].Edge = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1, <span class="keyword">const</span> <span class="keyword">int</span> id2, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = VerTexs[id1].Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id2)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = VerTexs[id2].Edge;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id1)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Agraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Edge_Node* p = e.Edge;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;ID &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;info &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接表:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Agraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> VerTexs.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：<img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/2.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接表&quot;&gt;¶&lt;/a&gt;邻接表&lt;/h4&gt;
&lt;p&gt;邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.8)临时对象处理和程序优化探讨</title>
    <link href="https://shuhaohwang.github.io/2019/08/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-8-%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E5%92%8C%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%8E%A2%E8%AE%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/17/C-进阶学习总结-2-8-临时对象处理和程序优化探讨/</id>
    <published>2019-08-17T13:00:49.000Z</published>
    <updated>2019-08-17T13:21:17.851Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19Zzcj+bvXa0tdJ0k21UP9pcQozh6PTAC2vNs59oTlALmwQqyfRprgBmtgx7h7+YpDdcjA5mo80sQVnHjmwVdin3nJA2Jzp/O7iFkfNy7/o1BMkl4zq9ruWug8d5QIz4LZqVGIt4U6bKLndw/L4LbjdnCIfXzO8QpfF51b1KDA3/K1fhkM3nL2TWicceC9hzPmFX2IxcaySAeLLVSB2dWM1EccnLc8XUqW7to1i+/LF/NCOj0CXzBH2aCp59wHDUGvMKM+cnJ9wdM7OL6Ct1YJxYjmyTTFAi6cH5eGT1D21QpAd/AwpzxkXSc7BOXvfMzf6brufe/QvoussqYm0d9Oc540zPaJHie+EdkwkErM93xn9UjF14APkxkhpBDsMUakL4TgTiysiMOaDayLva+DJWl4Akp+SOmG7uoS55B6VxaUyM0l/bBrufwpcFDnoT5WHj+JOzIzlAp33JQ7JHDoZB2YuHnXRZIAwWfCOZoIlAiYXqjrSqC05o/e8TV209ouLZjjdcvFw5MqDWwJSCE4THUx1IR9OTQfluQo9a/ooF4jgdJDUNfpP9kf3tM/ueDUY7MqkGiHHTKSJiptnBpxRW+6yu+t1La83zI9cQRv13Lq4FjqkZGSmAct/DAKrBlmwp/j3qQOJIo+9SKN/G2TsuYeYWItyil19NsvokxbXdnJ/3L5fd9s12ElYlo5mykKcCj4LKe9cPG7XXcaNzSsCJGs+vOacFL7HRYpoyI1VxNPE7S4i7lmpZg6U6KR8rAxIjkSzQwbabapOCQGWsJB4vwOjE7Z4LCR2BvRreBTcmXUBPlu8z0ebVwQ6MUc4YZSI9oqlEMiZ+9cjKqgOQEW2VC3/98S+fUo0ppgjgMtWSdUzThSrEVb49e4atlxj9xLZTO/ApSHknkcwxJl1OVBFqQyvEOQftXM0rQp0ji9IXdZhZV2E5aDMTSxkDXPVcShFXdIWknACjL77gS8ND4qLOpolLW04aFbj4YumrYFBLgexOAmJh9FMVpC9BIthgYS5ajaCzrq3ZWhAsH+LL4RqJhE89uhZ4vbXcpi730bFYSSuP0+Gw0qpxcPzhhePK1fUpQF7hV/nahqkKAHVcBpq3rA0mY5azUdxAl8RjOc3zys1Y35aCdQiMFilbITHYzO2A/gyl7u89AwEYUP53ppLxjiGITqJrSxq8QWp1OvubW9cQVV6L6p2Yi5w5FiaYIVUC1isSJTfbGmcSnXcyaq5oR5UIcGLOkPzDmkni6f62xefy9SSstoFg6f3VjwO9t0DIKmaUWSQsH0UNyvQY1E5YJuncnf/AdDpBKErSqTDUloBQJVbwE+y/LL+BENVqYB1q1uBAcGxOPXqT+AmghhUP6UB11e6HKfpP36BRokGUydRIugrerlxA9Om0slJpJaAU8Yf4ECsNaMHRMLjEN65KwH2bpiCLLJ6h+jzwpB/xWNiklwas7Bu2JVKrGBTMo5kf4sbmrDAro3KVEKoWwnrV6y97A7VyoH5A47Cefnxwgb6JfdmKxT+mVRDrr5DL0VHlMQOWlPYI5v6zGqoAPWaxpLvD0qs0cbE2tnd0IdrfWj397RWzUoiT5T0psPJlLNsdOLfXQxdp3ge6N3mcu0E4vxZIzjRfY+yUdtP8n680wVtHBK6lh6Z/9KXBbGfWpc92i3Xnm0Nv4yyYyKFrbobh6S3sMBaSrz2Nuj3NJTM58tGX80Q4JAK9MoWB8PaJsN8wFQNPnFZb114Bc4e5JYYZB4UvdNixLFXef0/mLIiPZ6W81vufPlzfkXPkoCCpT61MMdrXkXkFa52imTlVmFzgh4NxZ/RxK0eTlEGmu3IEXvdYo7qjKms64yWBXqKLzPvXCVe8G+G8SFwK7e+t+ckTeXFrYkMcx87hY3CwwRkHNPsJ2c40wQjTMHfLRWjeH68UqWOzjTXbEz9rXeyBN4pYAnFL+aUpD1HYao2s1xYuU0IK7xZeoqmY6oBFS4dJzGDs3U5PNO/bHSHNiZLn6TgWFDurKNf1E8dtMKiVz58RvdKJFqmZSSkphNaCrqnqoTuPT7Klepy4aID0OfMVJpAYPG0kCiuun8kAtryD4j/86Q2lKxORmlPs3WAK0NvuPwf2c5Z6S25mdP2EcCuvdFkQVV6eyazwQ6CNLDx+kmqp3t+6f4xo2heUavdDSZ3m4LgMvXY2CkFlEbVAO0bUvtKpyASXg9SBCr86Z+B9YkWZDOzDm+6uqNXvykckqzb102AFkWbI9a9ZAbez645Wuu8CRNoKb/vw6dMyJD23jhpox7ZOum5E/Q2FIGqIknkrWwswjvq8RPlJZ3TLvpoQDIYRnXZJJ1KC8R42kF4O3FW/8fmRz2z6ZC9CGZr6cEBHl8hjHo8DHZeKOfq2o+5qV/GgUr3Pf2V2an/WJGEZ8wmKhQ6JDd95zSzVGkXlqg0S3Jcr9JavpKf16JKpptOoX24fTqCOmVotaXSa/MNX90MO1HDSQsuQyui1HERgTAosPoiKOSXe4QT550Cqnh7YdvbtxjJm2BGzqtNCB4CdADRcuZVzzMBfVc9hGEels6/W7hnXSFCxe9WVlQykYTnTYpDHw6Lz9fmwhZ8g2+liM8X4GwES3CEe6QpFwFHcW5QpjoshHCxuDcX8aw1IClHEoV2z5aEcT5XXvePXKyGc0QMc9c5y1WRuvKOqeiRj6zd0YTESTa9N1O8jzrCcMPDMwSDQBhIwwlhqL/SRiwsF8CmIiwpCM56ruy/iE+SI9sbBKPeyh1kfdZ71uALirzg3zne4tigvPBiGFN9Hws2XU1CJMJ6hf8UivYYheQ5d3PMp5upWrPgD6h/gdTgTE1f/hJLtdVJ5Dwb4x1QYZ7b4fM4SncFsGgv09lu7dfyLq3QRw+NZlHJpfTt1wL4epFrBPtpHnqHT7FU9fDPC4RepNQcynS/0hZwwMEoE5Zv/YVi0kI6qEpyrzKZP5vEMRwE4xB7e0GVaL94DPsExTCNlpJAKjJJi95eIP30wfYrj2m1LUheQvLkaU8wxdmy4atJNTiOGXfU/tSy4UBWEK+u345QoXjLFEI3v2EnPvPT7ebyoVAx9sNYxp0xFOuwkcikSAjWufPTiygKoQZT27G3LYdS+OsKMqRiTVxCH+qJJhGTwqYrcSKxXcxq+1xcRLn3NNOPjKfv2d203fvV1ODhLYG7LXX+oFaNSY4T6wgYs3QK08WYApy2Eynlo1bZu+ULRatv+U/dqv7rLGk+gEr5IT3CeNeW314mik9ubyNIzWYG9gGEVWvKzqvYl4AlXX3zUtUD7xmWBX/IEDAsPL3aKZ0Sx9fUid0lbYARi9tFnxSOdidALfEc09Gixrq15MroFcZTSCAGBn9jn/SKfMtqkk/s8ho4kaA6e3Nf5tomaHXjxKCHL+pKl1+kTmDZnz0w4qSvZoCXWiplsrCWrGpVsjMgeVu3Y8d7DC4IZJHkVz2Hyrf/1ICSv2xR9JMsmsDliixstnQZPIg3URJoiU0g5lsE8PHSOHH2/EOcR3N8u7rdZchvNyXYTIwPoGFuQrLKnGbrdQGhDwnBu1hRxXYj0P14YaPFZWezTSdu+HBs50rV+V3Fd8x6BgtbBIkx6+T0vLv1rL++0j/6DXCSZa2K4lxjAgvC1IAeyKhZB18HbMiEfS1gZz1e5eI+/4359HGRRp49FlfKiluWLSzNutijUxt8OG38EVZblHGhfG4iZo5fMoq9jgXrX//UdaVdicQ8amnL3GBQAMHV4MaHLhjVukYX5h4gSOuLNLa5qHzu6Ebe/+w2HeB/PrgX2DiwnA7hIFGmjqkOdLpa+z6fSOoC8s7QY3c3AhMjUX3ctTrctCdFNlwT9ML6sKDLwMPl9k9Qkpl/6TO91baRBrwgy0vs88dJBkhB4SBvCIUqsZsVS8A9W3FYBi9Ko8JQa5ekkO0SX4FOPYpUqfQFrGfN1HjQCYEnH5PHwKOuC1ogowdqn2ruQflatPg3xW8aP193t6TQChMo8PYPZIEyWz8znEly6cH6J1AlyWPTVsGsWJpRxiziVIlMeFFyVuWfahNV4F4SL7F80InkwioE1D8TcVcHE+M5xQ6tXEDVA4C7gecuY7WHGkPWMjHgbaCZYqOW6kFUFxbQJUYsUACxQFvWd1kJSIitXM3uWViyLcMjosClQ0ARmd4sigr4EYmcS0bEqdH4IAAcPi5SSugVFOiekIGUJ/BSEFPbA6Opkhxzs+VWou/z0VaG2HrehRwO4nP0+L8i4e6i/DRhxzI5A5NOYpin+OYrdJ0F6FmWq1uJFg3GCkz8qjsQge6ZBG+hM2Q38ZfIktHbgMTIy/29Vz34oqczMk3WQnUh4d/T4+ZLoVF5nuWOlHtMQTeT7HN2x3QkPO2xVe+YM+KGxNOertQnTQFLlzuZo1TfTEsSVJw3Uvtvzb7+FviHfcfsIt52AtL6eaaiCUPLs1VG2P6emfNVPfeH+aB17l8I5G4q2c7yRhigSLo4A0eHAL4YQh0kcNpt7NGb4u77F43bOVZIpJ/BCochEafJinGUn9wkyucY1yET30iqFOYfpoePK6FbsF9NVawI7GtNXKpfbYrUsVEy+bVN5F934PGmoOBaqCoWfJzATkuIBlgqJnrPn5BBDeqja2H7bW7sID7pRZIdhaPVISwF/fqEX6K5TMG8zX7EP5LYRTWPmOZnU4m4C88dNWJMfXG3+aJRyz/0McSdHMs5AaFkXtRoGN/4nSVxtBfVI5sxY4CMWT4ioDTkKQTSXCb90MRxs2yQFiamm+0RGXN15NC+9VV+a5EGPj8CGmBfl0rSemZFvYOC/w2s+zJOpymGcnbU2Thupx/7Y4X3qKD50OPiuopK1TbPenJcQwwS+dYAwExjC3v6l0iq/VdJiloLgqtxwvQG8Cpjcuor6k5PRblBubY065uVz70LEiKAk1/yVPDj+STSUYQZOWTiReRS/BJ3JeZ2V9S4WcnmUokjCXfPjNF1cxzbZoXMM6WOyxb7T99/oQvpjDQffhGcM+6ZO8hSjoMaW4ZXsA4I7MzraRUYLDQ3jgK5/ek3rhVuTEUqXtzBVOIpqGZuu91xLIsPd89iJfUBfP4pF2w3UMmQ8w/HhHBwiJOg9uXWfS5DagpYCrXCAreNdtELQ42si83hLmilJnIIywhwMRNrHtiOCxKuJqZi+lPit5ezxp61O/ONjGaxMe/1rH6IpeYxiXDALR0s1QBBiaT0hugCS2a74i3s5j96EwMpU16053lTPduBTZ+dYmcLzYoMBtL3vF4eUBNv5yunl7Y1rKEr10l30/BuPfymoaj3smgmaykDkoIMLbsLFr5PYsIU/AZENkLX0LpNykVPFEJ5v1CuTUhKveMrH/jhsir7tKBa0TAdCZ2d7TmHBejFIWpToDlXp8TcxSK+Z7FK7KyX568sf8JgPJYThyIp6bTrT/TtJlA1x5SQENLQ8hnMFWvA5vUPyhvjsD3eH4XSCJw2JsBvcm3vYYuvJBaPs5NlZUEOkE+3V0S+D8LQDCjGvBmSV+GDJ35abyMGaLD9VB7nAbRqux6YfSVc8gEJnZmFAYaVanX8jf08d6JxR5t9uJQacg8a8V3asq55vVKldcool7lBO9qqMWrNkLNdBDfTfzjXoW3fqv9bgxdDn/dxBOoS/RpZctNdmPgAjRaYhm7n4f7imzbz24Mf4tcogPtCiiVxkQ81SA9ib0OihV8dxa2QLHAZC0Zqm/eFCngaXIlodftf646gk81UlQK9nMxPMqXYngBo0p7oLp3f4MizwCBXmJGRFIbH2us7FrsV5rAV/h4Lax1FcV+6ChgdIFg+4oHLFTs1Om0icbjD64rzSlPGCKm/LLP7mSGcZYobs40IK1cijag9agzJONmOIXTXs7AZ55SppmhUxh1W2ODatvw6qYjtveUkOYE83h86UqDf5lMQ7ZAzFZAveehKmNywkZMeuinm8FRDE/fedUdYrYkVE3SCRYo0E4nmBdMoQh5aSLPxygjnv2m5dZodkwpvi75b2niE07Jti3gJCWRYFJrX2jjlVVuv4sZCVHkWZQyYLFWsXjPYmnZrNov3Z31DweT0HFfOhF3TZUT41wamv+oBU6jfke5xTGX3i20xvywpduynBtwNRZgaS5gpNctURtjNEATGZGTPad+X7OrYf9XbY9Cn8AqWgrdwhUdscWF21N4+Nsy9zpMVX8GMVp3Ea5wFcElzNZqcOru41yxeoU6czZoZMRl+o2PnHtKL00qrcixqaWvdOSgYakbgzsSbDRbefP9vp33Z/sum5wtsTAa8tOE2/kd0jge0/dhm/tvuW6E3y4bXNAaI5sRl5uD1MCFCvZSPy8IfV7QkmrLI+tSPvfRLK8leYjN2lDyRzI9aAAsJv74fS0n4a6+8IYmfkvS980FmRl5Vv7hk7T1ayPuYO/eBjg13+Z/p1BEy3p800P/WJD1q18r6pMJuffJb40tfWbrmxIM49BLlxFojrujTqdZ6VzFjGbeddppBK5gnrsn8+RdHvB8X1pKqrzH3BMBSiuYqMfSGh+hvxFzvbBgYmPIN5wl+8SLTGuyvzBmkbFqnDt9/WDbA8cEErhc2FPG/EZD4lOYOXSOtC+hoqwY8dl6rL+3/zL2hYekGUp2p0iOrMU9cMHlexKipqSXb+3mA1iuQBFhQJ/z1DokrPIDiQQePIDHlyJZWsk2CocLGLANXYh6eSIzhCcCaOihY9Fp+tF1CqdQ54t8CRD+5r8ebUwEiEoRK3qvlsPW67VRu8e1LF1h7N6q05Dvx5a4VH98EeNtQptvkvM65mwkAlXZYQZyQD17dIbJdAIhrRI/+YP79YCQ4IWrobDbhFmGVlC9KIc8QxmuYRNAviNBJp4ScoguumJ0CBYcj8IhdYAqlGdJ3eY1WUsWRt1WM3fMeW8IDCVBPf4jdE6nKUZRYJjmKFa1ilH8VwvoRIIheWX0DWb21NK72x9heFDl9Fsr760uYgngJZKwCzUrjV6E5kcZAI50tvGbLNUDzpUiqCQSN0zxUbXfa88i6kAE5TOwOOxrE3rfC8l+v/bO/hHvYxhQ7jfcbQH/c1kENBeWRJDlGT7W3LWpcSBjV9Zcjyg9T+YcgBwU73vVod95FeIewvJDLV3kNzjOl8BgW0oG0AYCLJtKsWi+HsqcRB2eEB/iTLgO3AeDDo/4ysJPNy3FHvtDTBpbTdilKzNChUTEWRZ1qtJJWOwpS8jPMIBHlV8Faqbd7l5j2lvy2D0onKqKG+3Ur4E/iSbJDAxFqqXDC/PxxHIgQGgu1h8l3xsLgxAwXt+dulgKgzQtCPFffnzJcBbcVJUq54QkIoRmLQTmcIQdezhErXl2r/IN1LBLhQJzeIrE/KcNaTUzIqNIzOPSOeHXUW18GOLGQNtEJmsCWxUlLkHeMTA3zeaH1VuER2rsxYAvLI3oLAE4ggA5iUTryjZCWAf+6xQrBbXQLSL1vjH/t7Hhs2mOtnbbQ5B1zCwM1sU5q7AXXWtoezWv8dOBJrC6X5fHSSCdzpnoKHKHXfOLR9KfmdFeU2DiJhE7KOb/wBE/wVHU07HC9fKJf3IV/eI55fk/V2y5UhVuNaAsU+PBtD8vyA/AL0QsrxQNZEI6YRxQ6khilwZ3UIV/IeoeGAM5hHzANxvTTJX62IOm2waU6aWLeibhSLIfFRVWds58ttr8auvWHod2MRLv2mD4+2sTMNuuKJ6Cy8jX0BlVGaCk6Mo9ljj0qdnNQpHkL2MA2gigoIITtMNqD/St69pYx2F1qoKXKRqLhzQRTAnP8ngUPFtg/ZJ2iikKnW35pTrl1kN0N2hokaE8MRVhIHUhEdIL1cSlPPl4LDECA1oQfr/HxGAA3PRnnr/pEbTY6oadRENvXjUArF0xYQ9QUg3cu/YYq/HdbuFCOXkhFjpSxfB5j65DRl2wpZpW4otAOh3gqlCvqaiAse/EM2qvLFm0SxqpGLF1Lu+sX04I3TTOh3lBWyhwvLPnyZR45hOc9GKezxYOH5OAsrTVGUt2ATsXymAS499IV5FRw6jBER+9oe/aTsXDE6uVYcMuejRYn6DtTaDrK8H6f4cXh513iGcEo4TQmOe+iswlxMqyEikAgrijsbw7lhQS2vCLN9V8TUAcjcHRPz0yw14LccekF1maPtmzn5DDHCZjy/XrrEGuF16wgR6htoStsoLxVhu3OGvMF+6tIDaFO0OzPTete+VlBEH/HQ4GjnwW87Ovc9/0Id0nm8blzICVAwj2RRAEvlUS5BiMi0gbn9nODd3APEfci0dU+yeqAYEnlHdeftK5k2bfN9xEEcRwdqBF6E1pphwVKg7sYk3CXgMQcwOIz8QC/GI/u4tRoiuxdcTLOxWlFUBrS9Ybjy/7cYwvumSaeGKz5DLVAdxPJdomM3CxfMU0mJ6tarJhEiKPLOJ5xgPOH+yJXTX9mUwekFVWizbEo9qEYDLgxXWsHgI8gSE2xpTsB42Fcgy+apXrCRfm3UEcwYYMnq6QnmO0doFVtMK+ssUGx7q8h0eWiMFTI8UH7G9SVoCs7NPirz/trHjSq8CWVRaL24gb1cENGSrugc6Q6T67wBp9MVhHRy/ck+zquuzRBIEgDS3ypVM7EGdHwb/gNXDIoJQa4xjtGj4iqUitTOkutvlmF315rtWTXnVxq0iExp21k7jDIfCLbZZp9gfix2e5HRG8YMpAJ8HIzrcTkBfUUUmhRpSDPoS55l3xhkmrrTiyYVE9AcZcKqN+KFRXLp25cUFpQoKecj1zUDmFAc7iwqNG3Khd6pgEhlSQmC1zrrEFGHE0Si4qHn3s/4em6wFXvoDKC92sqsWFMmAhxB2hQqU0LtWMZi45UX7yYRSi/k/z2vxxfm2nBQmgmvubCo8tu4FhobRK/YBMV1dYYlOCWOyLAJQ2Z8xWkNtYuyG03Ca1rMzCBUnx8HknF/08bc4ZI+f27uL5ejJvAhoneoxR2SGFBdwsiK2osK0yB2WS1yrvZVkU8IzUQCZihWb9UrakC8jmEwVx9TFlbvuzvxbHkfWEhtsrcmuEL1mQWioYmURAo9X6QcCLFIIEiYBfvTdqqs78wnazloV9/3BVYzM/m8+3FPhiKyvaGfNv5E014OZ2ElCy3OxRNQe/QAJRn0/lfdq1zf4TgyyCAU5UbC0i/0SY+W4j+yiuUEcAnx/ro7A5PS13cMpSXnUbPF4QcAhKGR4+q9HWXs3cIjVz03QZ+HbhGehhVzh2Vu+MB+M5nu6W/9QBx8JAu10I9CDxEaNMfizlj9je/6WrWLyNofb1bBm8Cm5yPACvnx+xYRDMmi8mw/QSQmscG5RxS1HGtWmcPIl74VO2OGzO7sWh+/k4ZCqdvNbJVhE49aXjzUZZoOusvGY70DkGYz/CJpy8cuXxnhQWljSFYClazC3tBssMhsYQnTi5ylR3/jGtYeRdY9rWSblKALM7uLKKCP6wMiS3iniz/f1+f7lmsC+S9wL295BNOF5cGIYQtquk+aW73brrA1+JnPiyXyD23Y3hoJ7We9DlEe4yeycv5AsofGvBfXPLE7wjkpYwjL/+50s+ZUbTIIs38jMt/sbCDkG17zUbyYKw9xS0+38uyvMFgbbqgX2NaVmRZ58CmRluTWVAVCbzWlmWWXmCUD8sORUQvZ829tUVE4U9B6y6wnaIXwL6baKeYWcmBoD4pc4EsAmbao43SXPhfJm+HO1FiuWfbgdOP6Af38t0hJnA6oWs0ZDVM1oWFUm2wd9IKp9PjNbUipEZY4AYCMPyF1tJELkg3GeYB3VS/Bc+iBkBduoeXnwfnzJUZ5cKntgcV1ouOCaqveP1WRxM1DIKzSswurptFz1eMKUobQRcZXRsQw0xET1LA/QAbz1kQOdfeXadnWMsf9vwWACSbYh5JX3i8YrTlwj7xnpN7MVFP7tPPEWAp/Gl8LkgS3uFTcl5OntXYRszrC6g/Kc5N4A+PuzIZmo21cPV2s3jRwBI1gxJyi1Mad4wGf/aoIf35VGoa5PYnIO76hYyCXSOlDX3KhNGr+jfjdtGreMl7g18geFMQIS340I0511A5VAe1d4JsQiLvMb4lcE70Dn1Gr2KZ882vityiqpZ24ZpR6KOZv2dNWrHiL4YD+CWZ+RWJAMWSWV+Fm5X0EWsGxDo92pIVKYA2dlO0WG8oI+Vfm1K+p+URUslNN7DZuAKBbvcwC77s5+p1kCTqN19Ii0zsGuZ6dPPAdyfl2ZpxtG7Cqoc9NGcDTAJNpkpD1HXGAPxDztoup2s/brtHCoTMl76HeIYLGRSIApxgP+KLIESBJCIP5vehWG52H5krzW5W2tZzVjalZQhYSP+waH2dxaoVnSIDt86biGirXZljl9uO0PQINt/2rqmsOqb55wjXCiVRMzO1I1kryUxE10EKYE9C69K4/JE11Ck/y3NERbU04eNxoP6FV1YO/80zuZZxJ09TK/PshMSSbnQBVejXTnU9yfZ2puHG7tDh6La+bJTG98jCfUeDiM1y9qaOXzSOz4z0Dokq/plWCpausVWCsJYRWvmijFLh/O0D39vuwSsj4pNaQ6CsZBt1nBwjGWoDD70u14F911WJxE4OwQFpaxlADUKM7/qn38j+VJkyE1sZs/HI/O+afKBpYp+GPkS6jg/y0Dja50XNGqbRIgTjW/Ls1HmGplT1aUH/2ZduCmAZNR88Fo1S9Xt9fcSgkhnV8+gUIzLzMjHPXvMc1MkHcmovu1MD2v5JDrxJlO8DppfVhl4UM177ooE6w1e6LlBnpa148+V2x59X6hJzGrb+b/spl0iAw/BBqtamdu9T57Oq9dZhrA6Ca0w9sKqQ76iQScaNe70X2eU6/8rwhaWxR4kGeh1R8tdXEU5kcoxpVGmlwo7IWu2t8Ytd4u8g6ASF6wt9q0JPNoPDgoRjffGHLN4lt/TRIAgk9VTTPcOV9O2kbQ7+SUZcqt7BhRLOqwh8+zMt7ifZjrGnILKjBf2Dwq0hyAcyoql59j8p8zONQewDno0PLuDXCHR7DV04mN1SjNCK7ygW5fsFLzoSMUvkJhxGBpB3jCJ3r6p6EPrya4x7NcO1eM5nXXIp5MvkvggI6HCO/GnmxSd1jS0D8Zs68Z2Vl0Ua4piDQ+SsaVBtNLY6nT8lNvo84B5SXWMiPjM4WaPg4IIPxDYMOsReiTtWmG/mbzqitHYsJl7VCiDLfQcvAdcrMNOwjEzPk8rzHYdtjl9qwIEjpuZeckOFkCRVVn/5hG3ye5aeq6pWE4dXFJqSJj4ziEYKAKg2AHfQdB4RdYB4dBUNF/e3vECajE+lJY+BBsMWijFNmXcw4fC6I5PTGZe+bMIAncf8w6D1AQjN4/f+xfSZxXCEowCt9SGeERC+o5ARmWhCqdFfbztSR6foMLlgTTnk94lw7QCHNyqmMYWup5vPlksm15of9HXeWWMJyaN0bem6Usc8nNI7bOnhnE3MpLzgF0GdbraZe3af75TwB1LBymjWKaGfS6ySNeLvel+LjdZQO3JWJEYkht5+I/pk8utvMHJZcPqVn7z3PfkTK3tgI1Cu1dmAGLy1tUPOAk85rQkcPtGcq1HwseRd4Vo/+aHi3NlQUlwuOxfbrLaTFKs1K9F8z+lH7m9iLaadERlb0bdZjg4FQMZJNVlBvT2PG0T0SHmgs0ZzkmiNlN33uuhue6eb1v+3y/0QFLdkxCBRKR4uVgBGq2lkkQxfiZWe03PV8EFdxSV0TS+2I0CnUNNLtuzMDava8jeHQXgpI+gXu0gFx/nYlvZPf4RpoO9rMYO1FAfLouTMAx0db3KgGxBvHRL5A7AemAUIDpmF1c5SgYSP8NMPKVSxrxvSQLeJdsSVxsEY43QhHNKckhp8x3J8LkXN6E+lvwHsI1/Ckt8Nw4i0nyKidecoFq7e65I2sut8BbaWthh5h8GanC/JLSPBqmzniwaXnvfthoOPWiOPz92zP1+ZV5dcIUKe8yB3oBaWO4/9LES2+1XW0Ha6kHrhRngGsYfHaWJqeCd/fmkf1lT0qS3gxY0Zj9Agxvi+YVWPsm0zbtus2Nc8wgmVQ5ZXbFnnw+gFo4MmIsSD+DGYxjh/clksq1lmhMHGzByiFESJ2Qonis/SbAt0h8PLof9U3/iuuZc7t1DPGIfCly67bVeR/3L6pKGDAVR98G7rbpWJ0c39pUos0vMvD8cuiyuyxFYM8rLhH1k1fkOi+QZGmeV80LE+CkvPeQigOVGsl0h3deljlistRzvyQBhFax5yIfBIQ9Oyqth7flW8CjYlKgDhGRcPOMEdrmcAGb1CqD28Lfs30VoBu/5rnZWj/W50xhvNbb8O2+d6EM9mBitpsz3VQeH6+cDUrVjuj65wKYJu5zQ64elU//nSAaP7ZXP1FnHKR04+aWcdj1/DW234IUvn6glsn3aUSmcaVc0RtBxDsBa65sGRjJnVPVzTDkE4069Quyv5LM1ZkHN2HEGbbLNLyuParKAuzJnk6xcJjrPxQWyYvl/HRuFVKcl/pRQM6cSkv0Y+PLHkcl9mfF2jPuZbu+A7zkRCVlWUdfgqCNU8HNA0bixphEnkvcC0AMyKobKLctwOdHQdbyN3FEIjXh2K321ICBMVLWGMPb1d3E9V6iQ+n1+Pkn9UJ6G1rowQCGvVbJFkGUdFYPGHUD4AWakSHogqfYExRqjd2p6iL4Q6lMACxwTJ15l0ZmSIoooge3uP7M96dB3aFV8z3IiMEk9rmN2SKl0G6HuhUAnj8nyGlEB2IQa5wIwMGfC2JfOcio9qg6AS0OhaY4XRogvbeEGuEA2CC/rHDIirEIy5Cy4MZ2jKVVvgnif6YHhy/7ajx8urs/1fcZ1ghtGsRAx2/MwZC8uS8XqPMDlczRGnbWjtIN8v4oaXwgGASCLJ76zUDrFhw/uClS0wasSXuzfZCPY9myqlpBQfkdVkgVCARor3Cj3KKAlivvIe4zFJb3Y7RQye5GMwYuBF3dDU+pzEMq7FzxaTp+vBQ56EWuQoY2SjSnDF56Q4eUGIYmKbl4SgvMVs79JnSegAzmCJRBQCEihLX0+A5vd7M9+bu4O4vdLejKKUpg21N/UgoXBpp19YyGwxVODc6oRDDdLh8xuTz6a278jixxnkbW2C73YtUYj2FbT6oFoIiBsqUH8WTVOTOHa6M2Ln0wUE+SVfgjGotU2kEUCzpFYA4d5SVanfyOx7TWJJ/f2U/OcaIabAlwSGTcqGLyupT0Swy3nWFVG645AiU/RqFU3kuY8LIB5S8lglmFBPFuS0C8+HidpLxlT/e+CqUHSp12Q6fE1u0V7AVogr6c/uHliggIAKUus7Elbb202ZJuxwb9QvzAuDvnHDXiB+KByynjzYvPzN6JJ1hTicYDD4Wm4Az7tYYFSavcpJ/epFm1TpDpZM30Wrrni8qfkWmwCc/xakZpPwkGUJI+CgVRGNwX/sMoH0n32h7kb12OhUjuiwf7br2QLLPlKjpgOzdGP+EjL3Aruvn33YrBJRQPKsGI//6m0z7XSZY51PMpCZg49MsRxfTuQPyLaZzSAvRQqiOGmn/No6qN62xtae9b7aa5+UJG+J2BkcoAaMXQY+DwoPwFXr5IOcDhi463YkyLN4jdjMHpq/wGq2ETHkkbJcP5q7UsYonDz2YcbSFvHJXEMhFxxIlNkYJe+UhcoDtex6mg5NM26LPwUZWOLUjgd2v3RrQEOquQxA/I6bI0FPmdXj51FbSYdCdkRd6OKzI9kJsMoILPCyZcbngb+fqnfndQ/6E5z0G4Ke1luA9N+2s62XcBr3CpBA808B9aB9VlzxBiuAriFvQFUPtXoqabIo2s88KgmwySVbYDwxVAD1j1xeB7FEE4epHXTbwqZNnNnXMmLvZZ5YUhlzbG1KhUhNIUWKgCEaqjnQTrcUZQfb6aPETeQHStb5yjKyD6/0VroJjCae2j9V7nPqiVrFgMy5R7Yp2qMjUiG96d9w9EpLpeUjXVRNRL+3mlKX1+RIPQTcC/0QLtXL1puKcL0m9bH0hQhxJ8K0XZY7/SB0Frs+aDJHSKvvpxgiv7UpUl2lhC2V0L8q5QMniSlZtyhD/unWVv+cdawzYpLKEKw89PZOgcrvcgPXAuYtmNilYhji6aOsJIcafTZh7KSq+IXu9xHd871W1+UiuJIITSpHov69jpx7/Wx4Sf2QnjqNlPHRN51PQE9yCYwdx4Fdk8vz0vpVTpCcgzV2FqyfIRsvkoxPQqGT+V33agd1Y6cuGgfrQoAisTzCvnPLrSIKe/Vg3NVjsN0v0josxY++z3wXqCMQf89QczERfGmmhJR1BFApxk5iiMSb2ocwU+mKis++t1Ud1Plvj8OQL8MX4vcmNWTe9zo3f+BMw1PviIq4yApkijBmB9jkJrcxB94aP1A+OExnhoCl2RVFDORwtOXifVS6ZhM8SjtjffaiDxeCVRlUVElxcIk8Nd5ZWiJrjMYAHxn67jxGiJYZXia7PmvIACRBY0bTGcCFFu6eg1gSx3+4jlpG9+3J1nCxHjn9U6qRrDHqjz5sTmt0sjxyAZAwSxHDji0EsdePBKtdoi4bDvvtTQRH3n+ku0ekPDvfEULqcZIGLb7T8FSGKoyOan1887QaYwUh/cO2uud9pz9oiL0ptY6ajQ5hgoTaonl40u7/oXLZKVk9d7Im4CoXJ4rdkbBZc9DpfUVRn5z9TtQMNSN2H67TJqfEe6lLqT5vamaPNJLXEjxUi3ZR3bAdG3JnBIRbGFdmlTd6gSfl8cNrj+y30fkb77ExERig7GG96jzTYm2Yo9WxjL4kvupuX2dTLMmjZM2O1+Ww4O7nr+52e/+LXSpzB1IPPmvPvdSJsEJDwghaJUcwO0lbz9Xcnc+JjAL4ihYbx9EnMaj+0QfSh4QZFXoH/tdj1iKi7SSwjWsvD77MXwllv88Hnqei/bQyDK5EZFPMetonY3zyijyjaG6WIz+bclbzmMZBTJ6mGpKyR2s0m96q7z1JKTuDajsUn1vXrT0Nq74SAkm+SJ5xfx4sX86UVUg+W8/BISNizS2/BvBhfi7r10fcr8Lwrk/ax1Nery+zgDiW/vSSybPK5SgeUm0lb+HpxYR5qDW3xZStpQylRm7+WckS0XsfyKXr9JA3l/Qef8b6TrhBJC0RvunDGhPE5YmKpLiWdTWqUsQTC3c5BAT3ubUFfQ8fmWl642N7JXiNPtnpA9RMpjTxlyI851vGXi/87bWqYO9tFda5HJ+t5rF0ZhlDLlr5tkhXas7yVKCUkVFuv0x2iesnoYkelMkIyWekqSGMNgTly+dNSgCuHHJqiZ9m6sLSDqwl0YtprrWCggaQ6H7/kBO9lhmam1MRq7L2Acr5asDFvVT6PIwl5UWm9QWViJte3HbuxpEwYMnJYnLTPJ0EN4HHuqrn4sTnj4jidcM9W53aJheLaM2LkgYKCDRH3LFSqu/9bhSFfWJ2VbBIPEzRf/v/01oMlo0k2g7nXJL32Wm/BOhtWPG82Z4LgMLg7+PebYWN27lYA21qjacvkJQDdoz8itjdH2TlgYSCkcwiklSXnoOtWd6bAvB1y3HB5kn+sla3GJg2snYDxXmeTyiWPhvTFlb8zAgrsoiRMAfKdNcMbm9LDtiwQ0MVMUm2QK4tfDD+hwN1ScUU9iBfLjiDxveS6d+rcnc1ZdhcCoWGQUbEz8EvrXJxoHqWo8K/eH48aun7NtsopxbPKWkmJUFyMqxd24dW/xhspaJuIJNZ7csNQ/wxD7bl1NC1edpebqNUEIFFxFA/Brxvja6NCUErXk5kQduPUx6s5Q6C4IMebEB2UZo+6goRd2Nu4JCMs55gueefnPMcWUBkEAirlJRo+JAjK9tHFTWnCxgiyJNWrBAivWur7xM9Sz/wybazWOuiW3em0giUwtMJplH/8katFBQun5mfGyUIApdHUQLHvfgcbLZJuVat8aSRXcmeus+ZEw/wYRtHK0zM83DwKi7VMpJIsxz3gfx/9DiOOqD7swxssOtU6GIT/7jpmb4JpF5cfAYbgkT53sYwzuB/9IB6mr2n9CF8dg0S/9x0H55LTGUP7RM6txNV0ZWDgL+8XtH9Z+eEJu51OlEBzs7dKT9cAVFERzC2SiRgAT3kqaNwd/OUspgirsMNi4AWDe7MI1fNMjqyOvVEY9Gv143MimO3NpJgM5dvarfw+ig5xFjgopeFH8/SbQf0SY+hYvKutlPg+KuWcHS6Nj8++8Neq8NzFPQpVUOKdG6YBBzhWQjqRf/cUiOAMG5BeNo4sI7WUSNWtPTKkhTqE2SH0Eyi39ZJkt14fzQGFro7YL+lbYgxjl6jCd8HiMAC/t0Nq+VxVHtmrgG3IfN2PlGNoYbgjQHq3ycsFRBwzMV5hZmu+Ca9i7PgvJcjLi61Cv8K+QyWvNFyUS4/ZCAQkwulgKDwUqxTjKEKXC+M7hzV7trOZM06Bddb7RxRw/jk4l57Xf6tSQ/MLumEPkist+nO4mf9q0R9klzDJRjHfxF8KBETFSreE89n4jNGekGloDPcOnlAxkj87VUaJrIbXnp/6BwWuZijWwsO3oXAetu1cfNLVqw9duDv06cJ3gxPDe4yrjrA0/QBXJoi2lbffEg6+m+2z2QvNSezwzoHBLNi2isyhqS40XfnhP4HSEtQqFuzjX5HJ5eghib1inD2CEQECcfCWSfTxa11WT7JfMjUD+PpWf3twU/Ru6lhAuALIxkfCoj+E07pzko5TrQWSmuQSPxcfD6JBfyxgTXQiq//mG4/ZQQ+1KWIbz2GdG5Q6AQXTmwOCYK5KbNmKP+mZ6xUWvqcZRvY0AeYPp2rkCwbmczcACMjM/GiQBc8dqpd2xXSZK/DzhDYQ2DRjD57gHVo8aDnPjpZLEWheTHmx3SU3a69jTUmGsrOFtXoP7lp4PsBy1XbV3QAMmi2OOIzQILqjZoWpUWTzZ4QbJN+LiHJatjKb4WrvINP4IGsfjkYbd+VGvsNDJNQCFoZs7+3N35R82lOK6/sEXJmGB5EIKhZtpR8Fsa+6jaUM9i+0qx9D61ugB9svkPUMuFEw/YYxFlDpMEnu5qBZDF5iksq6W4q5H+Tq5W1HBs4DGd5f9uETVsB+nnT21x87YBsikWG6tDLVRe7FqJkbHkcTBh0ooOd7/mlSgtuSQX22PRSgzkYDC43nGWcwiqUugDaNBR69jnq4Ta9nofsGzjT1tosfuybhO9Hoc6MM05Gin2+NrAzn6SynyGRHN6aczC7KRomi1Pc+NQwR/EiEAL+Y5+/UsYGwE9JGgBdpfPznt47SukE1wqhoi6/R4jzz4SkEH8aX/s3uj1Yd4niw5Gac7uOcdIsDxXnwJbxNltOkk3IaCovwCZwjuYLuYdbjACTw8G6/9EGSg2nbWbnONAMQ0P/2FCIuoQi+aOpGFHw5Kjb4kmABSB0CXQt4F4YT3eUGeHCvGEQqWgyMubNCIjZiJEjqzCb1/T7bA1Vy7EQddUps6yTQucEn15dn0AjF4KQ5XRcNdvZFvlXR6ZFQUh7zU67Wl11kpIh6StUIePSstX4K9YPcK/SDBSaSwlPEhzgfNRY8eATu7DsSABk3Y45g1zWm9mmSFVSK81pT1sxJUlR8A+fgdvurttu6khu6s9x9tow0Rg3gr8davpoV7XeZbkD5mcDPDKPDm3fBiINpZmzBiXwuVpg4a4w7qU6ilBXTucG91vB5kLU5GZyuBPe1FuCM9HAUOoHvFsCB5Tykff0bL7nbsguo/QiFnHE/fjbgYRbG5meRsVhq00NblHd9BYNgZPzoeuiLiQKGuKxMox+z87hX2UJX4lpN0gm4kyhlX7qLLeOhvUg2dj3+T+kHcxjaWmzxKTROhTqX2GpTO3b72KoHQrOpegVdFD8pghsvaC/o2/ymmrXTftQqKeL+JFTWz64Hs4Rfcgde1qrGj6pPX8ryChJJIfsSW02eFYgkDwtVHIckEDRmB7ub57m60yYlczmfxLuHeGULJgxfHlvjLU/twpZAMbxDExdM+9Fq3kHNMsN74jwWmNjllDxDvNgEoWhxgPPXt4q+VN0Gof0MvU+dgVF2VEKtw1LVD6IerT19okXPJkBnK0+bJdVkXcFFLg8ui3nqgXTo+VlY87gGzBCrpu8bqZfSREsn/FAtsPtMNlyWJU4yimg5bichef2iO2nZIrLmYbZ7aLx2wDG2tqk4Z5VlQ3pG1eizTibZY/FjF6+VQBCfRruWyGjbxbkVej41RiPGV/BYpzy8l7MNX5FWyLJ7rpFy2XGYJnr6sYFoI5yTVeIiFhGKRjciH1/y6agAEJ6yKwuUBi6bLoOIxmRQisFvBh23+5Dt3qlLEUgRK2oyHW+CR/RwSVtxXMUf9vM2fI7bc8leG3zSI4JBUltJON6TdPGy/VSJXqxfCDY1ipGgFeTWukAQmXDCOO1pKGJRzuCFpIgwXOaeogVJbbyqpmhNH8Id0qMzUtOe1HS8dhz4fvz585ZJGxhxGnsYREaA2l+4h94whq4vi44EJyqh4dR3jObDJVX6PeTrI1mjNZyUcm+bFwiRBd3hcPyNIh8AxiD65gtHiqT6JmQsmQZtnU4J+9/fzgljfALkhI28KP0luldZ48gq0rMYlr1iNUgrq8Lh6em1cRjWzSsgmMDXZ0OJxRzXKoijuL8LRNZPLYMBZ5hywCFIPhbkmz+yJ9RH7PImlm4fH0zXM/MpKWxw3LDiGO7j0GehyITwopC1defTJl6YdzxSPzzrraWnuJVx5UpXXtHsOP3rQq0foiLJMp68M54Wc7z1fy3w7GiObCwH82QA9TWf8X2WFVQ/jf846j41EjhZjfCUUlrPkgTPTRAGPShm1twTYpk5uWnAooYqhlSLntH06aNWvhBTRA9SoSz1uRzgYEKkgfQ8rmsojg1tD7SYBG+dlP2BPdz+DVQ0ghFZKBdlbEgNP0cXC0Yva8epoaCbdrGC7cEO+PdIzscg1FKl45Q+FmjsddrZatqtuXvaBxs4Of4x60dOaywHmBQl1V+SoSddkIPJGtj8H4CkXJqkhFHYloShHjSwsemqtc5K+DuV7kyn6U73c9GMRAd5k5LFTQybimJgCATddOOn2ffrRyGP3RMv9Aty8jWu9KZXzqFU88h+AXzcXhpbbZ/ma4NZ30hz1mSsEF1WuNJLiy+v23LGjlmmCB1EPPGRIVy7ESZB75i2MwSULHBvl9rUeqazHksvZ/pRjS9lHQlViBXOS6hDrQQuoTWvyQs82d7EaSaCFMxpl5XLIqzklsACPcoNtcdQ8ykxD8wykmnu6Hb/IWt8+5ple1DlyHKvhXNktuByPxrLkGXOo4srqAuTNvpXH2B+pV3CU4L3p05xBY3TRqwP5joDqbkV0pjO7oHYYoKoDbgr4ql47tFkY1jpLzQo+Yj5ebTuFvDu0dDvmFINgnWJDnNigomyopjsmnJrOxkAIqHjpE7qyAmLyPGeCSfrx7qLDkRTiV8EwV5g1GOX/vmiTTdB604yjk/gJQ2P2Ld4gL/Tj5jo+jOKyPjg5DRMmUU6dwH68Yd5DR7MbBS+dwM57X6DudmfZ/X57KLjukIs0kxKq8xNvZbCk1E5Ob0bMmQhpfziSHp+Umz6Go7OcuFXyeNezvQFMUF/jqZU94JwjNiMMVimV/B5raAJtBVXvrsJlYE9zkg4z6har+MQdKDJZa6RnfauPKeHmCqvIVxwtJPev5LasAoeGw4wR3Trlon0PlR3rBJOk6WeTFw1mVJmU43lkbqLRuSh4gZPFD73gWxYb/0S3JHt3oOJJlsDSf2hfVtKC7Fb7SqxMdIO5CTC5xPBjsMBv5SIAuxC17yDp6dKXohv5fAq9Jm9tSSTl2MnEQ9a/RsZzhYIHxyN3ONIcU61Ob8mjNxsszVea0DIAN5LMFki4OBKJ0X975pdfSzRzfeObJRdLFvKCwOEdZF+yy+zvnqZDzc+uGeQB87dQ0rdQ/CC3b22MLKVwtV3kOMUTGx9pjpyosLcrwa1dhYXsz3dFMwTXU/Nwy0ZVkvx3ixIpQHK/GFeC2EZlEn8YFKnlh1eYkJHa7i9A5R6KFDz86TVLH0SsVbkdvtU+IpatUm+BL9jQrGvhzmzje2KQngHx6O5rUzWS4xpdukOsxDZ080/CDCgCuP/7Pd6M2wlJ+JfMBqxGSsXQrYBwv+5PPxUvwJxFsBIyR3IS9fMNKUnTVYMDv2Ov9mAL2DuXuTvpNVfiNQsaVCpOieqdbr7M3gsNUxpMNkWU0FomxRjd/4SB0CShhnwPIgEVB8jGlNWqrciN2deqaPWTi0O5M5E6ZACbZXl7oM9p4JAivfRR/l4HXvqbZG8lL8pQRD8zQCewujTqwwFOAvfnJCnYJFUVRwwHBGTZ6504UsDRMmsoH1c2vIz6RZFIDC9Z3slBIaLqz38vMsIiWJ99iy5ZiBD9VRZ0/ciKfjYcBFSmZdnD1Sts+N9hb9Lz/yCLPdMsIhE5zuQ8cvRxIserpIry42un+JkGMdp5ok55TgvKuqgB1gdB92zSvgpUnmTayMr0+MJ1XOpioBV64xMZF+/qPgX3Piqfn15UQujhrGqgm0OFjkhbIuYZ/vbdHY+7pvIcq7rcVPbgA8+ox+WwjG5wJp/HWTzy0I1WXmUJIsUUEHqUu7Pq+a+2gOehvV9Z+a0gnCWMmxt9+2F+cbIMSVrPm+UkdX38Fdq6U9uKbPFZTU7e1qCFyoMTLCKg+XZ6yOALR8CC63INPzZZE7/K26o6zhI3osU84qGUkwAsk5KLqA/Tdnptoy6lrUhAouJiDKxd932UF25EfnWf6AAtICNsyoKfR0iSROflOpFLBF2ti+0H6W5BLICiFMcH44MuKfvcm4oNnjG271THBFvwmbm6GMOO+aVwM0Q5277YVnY9ee1ARQymCTzFuc2d8K4ilFKWCEW615jojdXS+DFwIZhgm1WLLFinBxyW0DrEoUCR/yBJPCEgUYHUfwfPv6eNgSHtBrb+ZMSKeQSAZ48RYuqnZyRt8lMtNQcDGmCS2hD1VkPX5bJu3Dh3bOzAfjYpChmXJjU7sA5YCp9RB4LKPklBIgvD8B60OVzBM6yQocxkk6o+BbTP+F7RTY0a/0Wl7BNvcJZApVzoAcFOGkV2+X1ix9o5rV+JKPBhbWaLgBdZID0HSgIjALpsmzCQnNPOoUJumOCjHig0LcYz1e+VLntl1MvHHUa34OPG7nt/LhRG3RUhV46Pn2XDWSoGYtgFh6iYfK8z/fTA4TQNzLTZof2Wn6K7TV4xgtza6QIMUEpnp/BkeH3wj3nUSEEbSFKQxUveLTCd8NDToPwbh0jwpnbq7lsGXsNiy02qjUf1SkCD0QJ0xLWKIktUyG56tMFm2giPMFbvm+5mFGcbxfR1TzgatLPmwJweS7aUIW1urZCShSdkXG6LUxXHjTEyVaAw6eTg6C8pNA6P90qdScvLem9Od65AZkURgyx6wyLzFniMPbwdtMjLV5IH1SIFQQq+kt3YVCJjmh9stZ7I35J+zflTGxUkD4plx87wgHR2s5O5Lq1+u6fxgBblPuDVkY7vGqtDT9asdgLrqfsv8q/9WOcQA4MueAtiP+oTr2NlqdM6RnI3gGiFjEziyYbHXwUoHCedEk0eXX0CbhMUsXqLx718EExaqzoL19U9oTar7Pn8FdJBromfwlsqRkLA31sfjHnCH1XhjyHuPg1Ql4+N8lchW4+vgGxZ/BMY/UDbTv8IFQoHaHrujFrhQ2TDV8CgscpLZ1j0uZwWBCtiPPr21Lqk7qC2J8t/ClN6wvAilW7fYuXBy7tXjabZcOvB0ZBg2/RV1d20rH7faTXiWf1I+W4Dmw/3PIuUPN50BsAYvRpY328dkdRYMXe1Sp3bjFibh3qgXAVaxnT0iOSNDtmi7QialBIIj66YjJkddzX/8bz7P8vTXmfTE7fAdXpKDrYkCQGekcS9F2UY19MLbtN8PmOZDvdOfZRFCUD2HWVVOfG/t2GbDSIA/uhE7CdrqzN+HYglJPOynxQsy+8htGTCiUgwWvftBAWFwsPQfZtI4HH6gnku2elT8XbnXa8Tt+e0Bc42F2e+yVrGz1+u637N86Z8yNBUoU+PFJ6QpIP3HZdSPpZOLPSvt2HfDQNzvVvvvshuRvXyAa2wkteC8K5JR8PX3Rpwk/7hiDhEXH69n4Y8lpbOHeHYLFi2TubqRK2aPkQ7F5SXExR6/9hIXMvwRsng1XdRtLCS/khZZJE23T54MZlb9L9H9EEe5LGM6O65qGDkS05wADvlBmhgCAaX9xhy0K/Ob34HYIPBoSsfoNYGKbNgZjwgcukGean+9uhGk/lACMV1um1hCAHLB8YEGsi+apoeAOZnAeiuKP3bADe23Jrc6vQPaneH++lIV82fR0aZZQ0V+ge8UZV45hFi+RuhS8InnFZDMtOIUSooBeQfhP9dPAv7L7bvtaZeH9P7gMRt99I2fXq5KCtw7Ee8XummWyeSAAGZ/l6iEtcCQsrUJLYe4lxJgilt3GUodOtY7GtKQJQAN6mo8dTdyDaR0DKgRlG/XOS4SR8Y0ODJN+pNpQHJGfwqxrmQfEWJorOKxzVSas35e8yGet2pNIfvF/RBnJ1eRQHxuY35C7Ahszg7SIVX9cTiUjbz67bnBzRtdiRfw++Rv/0DlftGih5F8AMDpS04w7Re4fnTLaM9+ltsK6zM7jN4iv9Rd1EOekldLM2/7V+IESksdwEcbVFhsFvmEvtsLKJktyCPsFzA2capg/CSenokKOmrwIn5/cZ+KhInwA/0f2KrLW1/ncre8dIZQEqu+C/qpR0zegd1gzoFCQ/0MvfKNL3+yS8BOsHVl5Feofw2MlafS0vVjwU8l5z1kA0UJmC3dEcHk8EsSOQdTkz+DNYzqdCa0CPP1NoofmQLly6tcwr64uBWH2VLcz+anfJ2cba7laqJOMP5btvijc277j9OuDA2tlWv8bdqcGhAIkmlcWBLpWu8S+IWcHpmi3cXAfPGNCykPaE8isPVsYG8jwuGRt4hnPEiIqwuEjH3/6HaZRBas9c6kK5FtocEFIuXWhgaqEWPry2jxP3aIs65bii6ytbsEfCybsrkuqc+Pv422Et/3JoMP6D8S6LBthECtkYpIHevG6f4AEnAdYrOuoqZKj0N4CU4YgKOsDcvo/KaCyhQF81fRpq1A4Nh3ne5rynpHFyP4XqmP/L7g3/QaqxfdqjdjfDwZJy5uXE7cKHxYycqM/eEoSdpjAkkzfYQErJAopY0ppVDpc+95cWOsxb8iyUOhw9d0fdaq+jsQkQRg6h20M5VQIS2fa/N7bMB7CMN9iAT/TrKsyVpGcbV8cJLRSTF0LCaIu8GHS5LguzvHiZL7KBrQqCwbF7dsBtfRiMLnlpkU/1Ceyj7tSEsd4fbEPilNzbyR4oQ+Q0P7ktKg63o2vIwyqk4oeyT8dabgbxWb8QHUwAA34+AnytM2smyUAfLHxZovBnV5WLCtqOgS5234XNplklQrG6xZd/J7nbbBugb3zq4N1XDN6E1mtMLyGVg+S0b05K3zy+n+RqRjVHTKdptCQdhsZOA39PkfFhX4Miz9mLpj7lMUZtxc63KhYMgQRVHJ570UgAp6tP/tS4MDZ4IONdQlBuc5cLtkrwdM/RR+D9bzgVby4ncv9VgLmPCldru4fmwZqdPPanVqTeL0lCQNSIv/z9ZeqqkQdqXqAeVjAuDjs5j3njoV38UgEIE/chCgpg/Rlot25PQvPIB0HHW0huPVRlVtaLbBgk3q7ELLx//1GTv9uTUlBb5avHCAl9SGoEOUg5NSoUCWiNy+Feq0/4C/5ldGH+w75AnrvwCfkpnvx9CmQnZ8Vdl0lhv05CWeKHQATOY3n1tPj+0itqtrZBLxVOoyigtJtJMz72Km2VwR0Qtviq0iVCW/C3PofmZsIrW1P+tCnCblydHOhs8UNcl4zO7NR/IOga3v5CsjO66hhu/cCbpyx0py5mHkrv9c0bNWjJH52JPIljMWhBNQMeJVzzZ11oOGgg/zQkItAiT3AcyT5fk/bQdwrmHQ1c3Qcp/vVRp7GZ9PtKcucxoYRTqlH2cIDPtZPXhDVW7//e+AdOdRX2lgiu2MfJ7AlKMLlh0EXa0fecn9wNnTAhnsATomA8z7Hrwj1r5CbVjjqZ8ErHGoYH+13SmkFzD7Em6eeYXGm/Z0XfYCLIvKNMYSaWJUsbLtbjbgl7oZaCAqXg9SsdCsFUvcdd/vT9/bVz9PwoGthBBRw/kt7H2/JutgfecVp9SS5S5piodFmopOUYWf5cVxW5ts34RyqeLICDwvC4b3HwXRCPs339yHcpatbRZGr3l39fMVQ87WQyfezq/29eys0KAn2u4BIIxguOkT1Q1Ml4NKkXSMgEzPdjIDIF52lnH5jeXuxrdvwVJDitLwEUDvEWO4Xu0deQoALyuiuRAxa2E/YKjh+ToCOkSoNl4Nla5ccI6f/JLh14EEopzwOAzOYm+k9TWhoeheoA2LBbAjLmB+p18AUCs4AgbMclPdUb72iOYXg3eyqXO8hC11uP09fu7tunsPAMjQVRTu6J2L4/nXPfled/RiO7wGcfSCo2FaouSdkZ4OVMpcxxBPt7VMKGPK8l4Z+6CtPD1YlMxBbAYvy/Iqto0FtDcxMgS6nOBghasWJamLVbT6FuXknPipoWf4C1jH7pweYWfDlVPWwIP9SzBpidvvoRES1ESwzeasnP9NkOlGPrCH/XWb5VkoQbl7hge22j/WvFQ6j/hPJyx5Cr1HtCi2B+eijG2qCPHbD9m3U9APcccYmy9+0CR/w1+xpc6reaaVzFBQ+LMEpqMKMpoHETkXGFBLjf5Q5rn1ndNHUgaknxK6KK+EgowTefe+iFfjepD8MuU8Cigd6X07VPhn7RbU4Gf2BUYk90aBFmjOM4tXPA05AFsBoetiZEfAuYs60DJQNh6hMRh2cUTNV+4ibiZFRdqB+/UwdyKDYr8ahFyCJuCeyqe5qoJTxafwbfr53dGGZaIEx1AvuwwMhpyNcgMUgFtx4x2+ZrsYt9j2PIlT/8MvsR/nwGMR8U4MpyrgwG34gHRGkbT4xyPGFHIZMNM+62mqlJpkd5vMt+d8IBjXtlXPg0WcpRHZGDNZN4mquccEwKgq5kRwjrNdfL269JCU/2OQkEZ/+Yhcz2oYJfe/R7hCDxxJ7tpeAuXNEGvuYvvLFDFEIkOaOWHIhCr4zH6iPfqv3tlOrx6Q7vpa71gc4LE8IN8Bp5U1IgFEraRCnqKunGwr0sXhpeuOrGPB2IdZAKyYDz3YsXYoQfDtFVi3g+MaYEAoDcGbASd3tSIntKb+5QHMe84WIX6WEmLd4XDkAox6gOgZQO//QbtzbN0we2iMDvwBKeeuJ8zfvyGvJ0vQou67OCS4XB3pi/9odMaJCXTguuCwdH2oGKfd+8oxLwwmlYBq+ROvRaKtEMkcuYIne3CmIdtINhK8TPWnTwY/TsEF4LxJtgHzdck/fh9qM5oIwszHnB7K2vT611PNDO9r3qGSmiuRzLZZfRByJm82hdnvZGeSp/uL26lvPFN48LS91XHW4FsEjR1HgGZjAyvNHY5GvY2E3mQtbB1znvsCsBWIwY5svmG15mvyGMSH2g8RG9/etxlZ9aq0QLUT1NwHVjZSC/wYREd4aVKdTMVWW6CYwV3deMhy//ZRroPqD1/EnmWzxn9UE/9/PTgWokSPeYHrF130E5Xjdd1HBhvaLXP+jmgNCrShdbMYplZmVG81d7UvshCdEIgYgyY8NjriNYjXoOI3pF1F3XACKZGPYSlpzJaE9LD9lSZcuhy+eTNjsFXokN7teVQTS2Yzn8CmrwDIdRgDxPcW04/MbX+hiU2cEePzHdNbg3GtKZeGll67ol0+W/1MKKsYabE8kLKJlgCKcwvPMVBkjBk8Z6zLisuMrbPxKOZ5ddj9jZw0vjQVhKksVB9t+Iq4rsFGV7OFf7RiT9H+IWXN2ZT/gT4HnXuMYVdbAV73VBFCHLoRCahLuJ9dDRD7S3v7n72d1RjhjqZR5K9r8yDrxEYLGx3sPx2VYI3U0HieFNEZHV3JU4gQLRTAnNXoNbBGIQqSSL/Kig8z0RpSv64B4oAamRVo9ZEkD27VQXayCKNR2ZFsiYosj88YJy3qPdSASSRgUfGahNp+fGBmT9FpfcWkHYy53k8aizq5ohyRgm4D0ZsD7mlr0y3aUytDX7FCtzldpfvNlP0U4vxrR4EzS3pdo2mW7jj6mX30R04nZKGbBF2OHR0/DVKnKlZ8IYnV9d2QkqUPCNEJxmqJxq5wQqVu9YvSAC0tXeXSLR09EmDmcFzMw+vnE1j0hTU4/zPDdU160ogHaUmQ1At5XfjRmhviJxCJ36bpWaEBQxZQuyy59ZBYJTa0fAh6ppfrjvtLE88LHxoZtJLjvVnmHkm/LP1p3F2LAs5D1lwuKknOTw1R6xhdgtVyJ7KJUjd/3IKdTuHY0NopdjF5ZxaupGEF7cfdSAn3gBlWcNSJAOVzNZS6wymHy45bVIS4LKa+SIGsmKExELsg9eQGuPvHYhk6CeOTiLbm8V2jodKhGPfCaE8UQ7N/omAvv+wZyptZ5vbO/i8Dkn1O4XwdMFVcJZcPV5saKcssuctmUBeafWcOm9hqLD2JIHMgSROmwVa6MTMOSf/e9/dBmGgbhGa1yfNvuVlwJ+bx8whqOZAeimXZjcC4s4rPH278i4FnO7NTjntFRYOVNJN7qzU02mkjhmxU9BV1nujB6ZKNSXm8u3m7vSV7ykgY1ZCOmgNU56QJwtd00osprIakEJ6pwkF5USh8FCUNddX27SU/r7EQjzT+1vE0MULmfmoIAzb3HhvnB+0XB/55EzKOeKFQBlEVH7rqDzJz4kYvbNvFNtKlPPmCfpDAl4ACs8Yeh/7gP4lBtN9sODfYtWtqyCzMRFwlwyr0PqooZ7z4HQc+BjtPiTvE9H1F2aSKTomjdw5Q9KW3JqiFtTjqPI/l9wsoakAl1skof6Fa6lHDBOMzKbttcwzmfjI5ytjW9L+LYaeegZw3WIYrrCrHCsd8KrYpJMrGBnNjMD2FKACCbUm+V6BdJ7w4Xz0SpStb2sj0YxXiTRGvvG+ESEXxP5SaZePJl/vz3iqhUw7EKGacAnmcFCFn1zBeT8KcmfDIvdI0Ca6loIIcwq7sd6Y/xpm/fq/TI01zk1rj2ZbFtRF7GuPV8+KN/OUFj/A9TdihqW7UG+x8hGHPBYyV522EtElq2gzbipRTg/nu89A7p4wLX6iut1u/flwXQ7CRKLCUB2xnuMe9mnpt6slLwtp+iW5y4eQkWcyCLuuHANo5ouRpNVr8DDS8JRgUcprD240cqFOD9gmQ9V//6Ix3r+WWJGDeWJwBHi3RpBZY4MevFu1luiZN/9LMwfRV+mpkWlghV+pJN4f9JRWueXzZ8YRtWvwUkapq23Tj37FtQ4glBkeEVAwvruAzR+NbBngbb696jBz/ifpdcaG6v35ebMi5Hh9jqBWyX9KamV82U+3YbOYkwV2wYwL++oQ7+ExuIImyXc37YAwN0tX4BxTx3/QZ/fXWZIbMMbxYJMLJh6DK8TQUGxFPPIszaMNahNQ7QcoE9+TZqmkYVfHsjuQxsj0nFnUbbmGvNRzDvPW9uXHJC4nokLsZRGaWwliOLUGWtZpYCrFuIcgUB+53Ekxcztv1D1AFmxBjc0p3hpwnxToF4AaKhJcvglOQgfxtdtm/N6tAq6Nhy2uRsff/xeV/9jaP6w3LVixXxodcqYe56c+72OEHV/Ail3dQN4CtEAeSmkbRIzXLRm6OjVF5uc+7aA6BnCB+pFkx+GI30Mb5LnUptnOmL93BUYltMHxoey39IKTzRk5SoowVq8q1ZqQitEwbf70L+Yn7fq8wi3JsokhE45BFCIxYURly6cXRiet1f04qf0JV2IC62RDjvjHNKr4WWOjUsOed8lOzDxgdWsMjLtr+CPeVZp6h4EEyIF23XW2uuiecxPBlEoPUSiQEJq3GafvtVh35kdRnR7u+i96IFz7Vdk5A/3ZdEOI3PgghATgZJqP9Va+nOhOjHgp0NJzqOSGMPhyaftl/Lszwzeisz1uSdW/NrAthQivf79n7EKdc/u2G3i4PwkvDrS8jQ8DYZxOkQ0i+fxrO3MtZokI31Ds4XXItU4MbUzNMVQ37EM/KykZvSAvgtXRIOdrOrOYfMGjr4Prs3RBG7JYqyIwZdnHenojF4qZ00/8UpzCGKmtG8MdDd7KQe/OR2hL0FxpB8z2thu0o1W1cusaxe2iMUcxb6OLny9/z3KXdp6Yn2Bo648DZ3sDkNUQV98qk059uXGrSzM5pSlpXe9vZ+RF4xjmSXK+j7prZj8ZNBbLMt0i7Poa+0iqpUriBS6PDCKsYgJGEoYGOe//sVUUP/UXan1yOok7oEVBpieMIx752py/2kUsPN9dz7GwgDQ3j2kWP2BzIoJmM9O9hpypuhgOo/M8viDIBiQBmHyiGdlMTffFsqf6ubOp4yNUu5ueoW/QptYrP2/YIoU6+hBCTWJyqMEP9BMfyQwDYNVPFQnfknqAXwVUqYXZBlIZRZXFRgk8PoDY4tgxNlcO0px+8qt7ropZozzAxK9PnGgcxFcoY6Ya3vJK+I+YX1QJfgmmHGDjR8tsS7Ev7o8bQcmvVyEOvMFssobDstOq34lCkEJo1dFTAmte3306eRjBGczGyzQsj6MSNLOJ+kd72EoSbstbM3SQhVpjNg+of5/vJL+jdEToSuIoQzB8MtTfffrVGWsHzAPtjrrrsAs89rUD0ALRzZLTEzkADrDax/ElxktJit2DEdIuSexYbWC36zcLlyT0AplgTCdTYIpJtiCzal+cVypqPk38mtb+sROGoPlMMFNptTQDTU9P7iQOoIWxUheEgQtiLrb+kZKxUjjEbAGEHCi1os6zW1wpFxGtpP2cd+56CZWGOTK7SPM1MSxJ6oyh2FDsT7VZkwtDI2LvEz5evLLoOVjQSjcxBUjuO0PeIne4KwUyKZUa1Kjl7wlPlmdOdOl81qjOZN0DoIon01yy6RsW/rG9g+Hs1YrGUB1Wexb9Ux2ediSWP18bicswYFR+UpwfwZA2mngQO8H84/PCBo4X85nF9khK0OHdqfaGAmRTFFA9Tqcw2Tbkc0jbllYWVmmCYUszcakXCW35I94I6NQqi+2eFJ+HqDqWbz9Z6Wzw2ND3dgoLAtwkCjiRaHakBO0a2CQW4EF0qBEGzyUEQWkMKpwCVcyCUPXPxQwE8jH2iH45nRRSOZ1WU1rttYOhNq5zYg5ftyFM+7y80T+4QfFx5y2IDr+sSBfKDfqqmUjBGGv3ZIewg/olIKikxh6VcbFKHUPPeRHCYBnqf0xef3iZIM6ETrmf/qlBeBtYbwpjspNQLMKVu6n6+zq0kyfdP3x/NfY6j7lqO/rGDHxMbe6VKmam7mKTPrvD43WGU34UIO+TZpvGIKDe+O+217c/k+oV05zhnGVlIQCsH2wpf/qaMi8+9k/Ai/bW2ZoKgIxGizF7o5twFyFRcQBZsTQYDfx1F2sgFgtslSEC9bGS8uBQnocVTH/BPwQ7LIWpNlsXpHyfiOP8eAdZ3+vhfXXlahtiw1Gxav33W32nEROsHOJ/o+I+3JuFk9t4sH0q5FE/+g98gOMFAMJLskcs90UUVcxDQ87RfucUBf2thsDCyorLkQcmzCpQ0RNspGuwMS01LHsNcOpaWd6PYxGw4eHoCVFYDeMJsoLSl97RWiOoZCQewpSi+6z+KeewEMRZdI0ymVNq/yHk4/aVRFGptUSySuCEoB+VAWvTmkOZazohs1+VXwIhWHXhtQqwIF9Jj/SRu9iGTcyN7fRWRUgqbYTTaYB/X/uY7ufxvpcjH6DwI5v5BKNMF7eiZIdXwo7GdrWnb34UCRSMpo9CqkBVc0DMZAkKjEI9ScVmTKZmgb3x7kWOKi+r+oVARBP4UZna06x8uP5JHjEqr83QQQX7JtLtCKuCATfOV93opZeMxvsbvOEsl7IChzMct2nDnm7oho9Ve09DojmUGx0o0dM5l6QD1Is9R4ZvkIfEG6GK/ejRps4I8KT1OSfiaARw85mt5A/oioE8qn5udR9MHQk1nWFbI/414GldMeln3OqJFM1fQlxEKqAYkL7UxNwNCKyujxjFK2bqjCW66roPXBtm4hqgVGbjmYMGSy7VbMVeRpRf/5zFXkdlzc2r6mVdFiDyrC46qY8xs0Zowxfp4SGNpqSXxVFRzGRe4nCfDFDIWVBK226mNlqs2V/qPBL5Qb+u09X/5b47WZ6Wt3AoLVj4xqnbCTH2mXdeJph6c+GDv//V8vSTQV9ksfiFARDt2NdStn1ILUoxPmTmmjS88EdemIEHFMc0N9I1p51eLZf9LrMtPneggC2t5v/xiALa1VqLQekD0atHHFSxZESdy1jRDiSPrXq2snX3HhQxRVrUFazRhN4o3BSx04kO1jJ9exnuZNWkZ5mhhQYTMCqoQYPEnYa0cHyKdvVNEm+e0Pkh7U5Fuc2828KQyl5e7B34iFPRTp+FOh5/kXoa4kbDNx3T4nnBcAi2/4onqhgjegkwJEAtuTLijslBMd1LuIbt3MQVTpfqyu9eHzBVs7G00cYOWLV9arF4Nwunw2sSEjvdehFrHew7PQO9E54I4HlmuEf18YTNH5QAlZ4f7+Own8h0wz2eSUHgEgTzdLRbt6IbBWYN2yohWJsuYWSaU6A9qs7D98zd8gqvJ6G5l0A8ibjAiowKJrEYuMIO9JeBm2sF8bvZKIrP1ehNT4bpmKDas2wdqmQvZ/1dcWFnBrHMIZ6wo0/+4rCuS0FzUZ7PvpidTrHz2kblevPfLBuFli0dJ/FXMLKxpDjrk7Sya4kp2r73a9fh0Zyfsv6mBiET8lb+DOc3IcAunQYh6/bBDGOODvRAgeHG0L4c1TTWgaJIr7I9NF3goXIFxn73jjd7AirpIudT+6AW69/Y9nRcN6KzPk1abB7nieEMvqfCGc2BSuYhXdp6FmijmD4hbbBBTD0o6TSTSG9rougTXDxJ25HFGoKgAG/vXvrUiYypzWg+XMvwus/fkJsBl8KzXaFJ9DIaTZrsB0pUHIiHbVNF92JNoVqW6AOO3sb0UaZhdktccDbOJ/x5aPqJKXSJ6judjXQOc+h6I2J1nLXJN+8RJnN/ZxNTQBOXhyr/rYHzkCDOPOviBZEkQoE1zPPjFvHAosLTw00+rA6AwTldlzw4uEtqIqNS2y0YhNXzQ77o+eysoyFG5vjR6yFWsVPukVQy6m1zCNsybOlwhqhIAc0BGZ5Z6A1j5vQCa+pVcTBXQKa9pNSK0Ju4pmvyaLt5ZEG0fCCWHjcGJwYsbkrRpTCGS2fJu0XWDDmCZvc1d4Ynw4K6gGiJIcXDJkNBKsSvImSpPnsgFbBiCBvanZJ1F5KR+uLmDTW/YThUB+R0kNzRAcOCJQhkBydsJ6C4WUpZ0GqG7vXMSaGV5Xr8UUL/sVUcU+yN4nb0SaI/6Xe4PYLTCaYVUq53e51uGJvZtq1Ep3897g5qESg7Hri5iww1wlJ/BQzbLNa6Fe5EeVoFIfJsPF3vXS7DGnX81wnGJfws93SX/7S5lOjiH3I8oQMvPErKN8GBmUs0Piepbt8MDZdoBjjJULARkpkPQUg0EMqH0EHMuVy+xZ03gMA42gWiQWzyJCpBgwD+04pRF93yQykRmGDTs1oaaTLp7CU0xTszswTncTWl+xj0IDh1VW12PRvrEHWkk2CBrq871K7Y5I8ubgQpqsCkeNFq6/N7bw4nwHZLA50UmGi2Tkq8xzwewuhOUw0+5ub4gMvECUF9UMy7uRgRV+ExqcCyz+siJKRQLP/fAs1/8X0YDopUsgKDsyj6SYOGwm/4nAVkhG4r3Azz49qvwqOta8uHCAY4uKPpeEwczEHayzb4XlSRzFFkwsSiP2x3Hb4Q6hQY9eBUEn6Z1mjSeIS8A8IvA+FrszUYctg2g99eagRctDvIthrOea5Yv9CUEYPqrkvo211k4dEm6qcE95o+iyxJFocDfQ3dhQVjIMAY7rQSW+NX58XKZ5TXBAgMoJOjWJn/xFlSZZHXfAok2ZpbsAHyqfqFc7VhGWAv4IOVVtwRIqvvMFAd/JTcwmbTBA6rTXk9NSJ3tad+Vr1ccBlr5NOauOE+D+1L5WkNMdi9Sy8AXrkJlYzgdjHlNh6hDZZmP8SnN6IMFoCZoDZtdH2HECrxD6tsrJR4sO/6T8FwOvwHiMtbOPw3abCtPHOJJbLKVsooleL9QY9yHsZDCMvDl4ED2Axmkffkc8YkkRhGOFkiLd+qmfcc5s1WyAJz6sn/FfXQBDtdotW6IqGDvXmM/W5M9UyPxZNpVTnuIXsK8cJaVswMsA9RXtbIW0JnWK/+fneKg5SXZIyl6lxL93M3GJRM04g16hrcU2Q5TdNOup6DTJr2WfJ/tLyLn0MDucp7WQnZFwA3Cmhn00HqYEIhRHbomOq+k62P9bR5CMFfqBAjEiZxX84+GNJobhSqCAeYoy3K93bq5c9IV4Yy9gr2EWKPVfB4UVpxL9OS4rizMeUwthGYVjR4chY/VnDsqfq8tP0iXpr3j71tilaM0U+R9Dl1HObJZXVMmzV+9JqAf8iQDnbix0yeAVD/RuVM+Q+pTUM3ngL7pW3/JnveZkf0N0u4/vaHt/WFRjp2eE3/rILKvpduDIHVOmoWoi7N587mcY23OtN3wGmc1kERVCRDKzQYx8thb9rjJL/Xqrxzq4d5lfzOHB0bAMsuSwBCSItsvl8f3b4gyRH+R/VS29o6AUu1d/HHxyx39fI1gnuDWiOZNFHykF6t482yDqwizD8BOxtqtd/MyyZCK9gCd00IzFKTttdilosFdH2BH2/1aJMmQ3hTit6ZIhZT8kkRI+zY5qiWX+fX0UyEBvri3GY5j3QzzedqrekIEf+LiJT5zW5D7w73vzlG3fOAxK9qKMeSI4+g8f5vkC970EDnznzNsWMhSve9+weI5ydV3jGknQKWER10rrkTisHF498ZPIc9ZKsKqUcHKchMbEqh4/s3cdxxqluHXM/jIaPmi5lo7jFyJ51UfgRIx1QSTbzag20ontdUTTutMvRgEl0nzudi+lxi3NegfuZ07XkCCbzKXJ0AwL7l0TPuZounWw7j/3+3mxxQG+u75y3liAPnZnG2OxdYsdvhz1rdePBiA1wWoXLLDi20y4C4FepdCaTO3cg3DK2gzWHu9qGAgtM6Kf5ct+ag2nDQs+EOMgeYqH+Wv2LATmseMm5mEPEL21oP8MUb/omURmvJW2J89szGv/xK3u+Kz0ToybMNm+ZY8GIjQolaLIcejzFllI8tw1Ocn9FEL/JEiAFC/sxMfKkjKtHXWNt+XcgD4BY8rXZ8uLm4zxyuw1LUiPacaNswpoR9KB+H38nNax5kExkHSJ4jZUaYqzDapmuffUmsipaq3ybV1FWv5VJZKUqCpTUG+5cVWeV1xD+8yCTu6UKSvdnFN5q0cynL6+CJCYBFCx4jOvBUJYKkFiaisFLM5pOhbIhP3kFXGNmj4etFTlSQPFNLk837AwszIUdbD5MXzQHvdW28yucSdWTAl337qQcC3OMzDlerB1FlKuox0CxU45KQpy/7Rx05HfeCint9DQefR3VPIMfspt+mtoCY8ZqXQJQIt8v9bGP9RdJX4A08zRfzVHdQpXWsuEcMoYqh92Hj/ui+pzdRzxh+RDElyqE0mm68+f90GJOh+kYLjDhMkvk2zCg9ilAAv5rBUukl97DqYPQ0YRu4xtZyxMVDfEPGZ773YGnxzwxnlDj5vuHHDlvKRZjxOYPNHiwMBsO11mOltM/cqjVh2Elsk3uXSBbAgYPP6mt/VFW15aDOffrgherEZRcTgwUmE8sWBTKyjzdnndm3rUbyqtDUqEQiqDSFGkphwbhpkZPkiY5nJ+5ZLDOlKRUQ/culQk7zJPj9OpMlNHbaL1VA9vScbP2F0gGucxqwQy5MFaKg8+YO4oIhwd6Ujwh0bh3TKhPbZDcUlf13AaAkHZwQrx//0Wfq5yVd3teoi7FDDUD7fkf5AxDgtvWvQtAWITzvisrDS99DONLWqHVIfKrQ7NyYwLDvTidckL3dXSBI6N16+in6kVkKONWknjfCQiKMzrT0rBNIkWh1I9MhieM1JnjIZPcThJtDzOD7w3z68kTfKsA5AadZ8hcVS7EQeWtNlAmHD9uCdz7jGNRVmZsiFs8Pvyx35zIew3bNX3FBzOW+AzvC8wrFiNtQoxk1IxEmd1X29pE2c0qXkH7X4IIpEglERDrVCZSmLqagdZk6zooTLgWF9V8HRt2hSFsBel2vjLYMhkhcudLGqKsUxG+nDL7inOKIuURddvn/qzi5ACjXr8uEtP/DPH1g6QSLi00t0x6sjgIwDKqxl0Z7hEx+lWhmlzNKy2fhj9r0PlvHwI2pKJOdkCcbEvIIxTIrw6J6bwdgw55PngKvNULVv8OPlkJ9FVwsys6NDFKKOt+xAiVokq3hpmmZy65x343Gb59S48LEp5tMTE6iiGMGPxLAyGqgPFfcjVqwuM3bWKp2kk4ZbS9iXZuc2wcwGMl2uJJGNLdkMZm3JH1D39VFHkYn37ZezUAzmaRFiAIYmYM60Txq0Gmo499GhCNfQSU7lqA0vqiFRXe1G73LNf14y13vC3B8iOf4D9a7Rg4/WoKgADy5f+HK0PvyJbNRt2e0jGGMCgXz+ubSvFbS+sFda8n/NnbH/PMtMLpzu2p1CFTn2/237Fjw1qnXhS6TMI3HPoA/HUdSoj8JGSmw2AV69f3P0eAmC4ybWnSeSq0IhV+SvcRnDY3obaTiojTE7Emw+LRkDRTkNQgCHOAo5EbQEGrNkBybROEyaY5wWdg49RKbtSd+NbQpndFmZW0QyRTIpBgYzx17Ji8mFIGqEDSknBKaRTmUX7xwreKNhOt8xbF2mfVErW4sXMnh4oCbZUgLcM4nL3R+nfdmB68VUM9GMfGuMGEXydcTUOe0NuJLp9XkYzGLnaOD/Pcvi7tSIV3PCUi/tuZtt1+QCWmfMSOgfgFXfGHk39yU4Q7JfdtAI/XrtY62/MazIF4/rYJZ2S6d5iW6/TEmdlP3l2mb7Yms+92mII548GVICTu6IRM9OEaPCScRKHZQnEwij4244GVPcDtUbbHgjYbgBzIA9eDJF5l0GdhnUvCQn8zb91xpEMWYcM5XfCRdXK0PRgGUZldg9FGY+1dXuW/THRriqi74SLrVVDCYeD6izMv0lNoFEE5OS5tWB5f07pfWv7IQ6t0WuH1MUHOAWJsGrv5Hym54EcUBAvkCHYFkwJ0k9PFjhSYOQ3nEAzSpqi1imtkvJN8aMXR6FPOgrhjUeSwtWIjTjVMmQiYdHjQb9aW1TFiXLkRFrVtbzV33I4MQAW9OjFYT/Ps79Cb4BQkEM43z1YdTR9ZsqVIRBuEvj72p/LtS6SidXzYrjgEFweYuDavqzCS6J0Wp0af/zWP8yJQryd4HkpAEkNYJjzLStc5j5RnkyvQyvCooj0/ai0hS5f6P3JtP3ndE7ukrCH0OqQ+ZuCWCB9ZZfzFEYEIYoGJvw9/9y7d7nCV56ME43nzbJv8p/x2m7WgTqnVUf4yghZ3KjLBbXBCWcYxJ0w14Ojn9QTorZ3FxzZ5zex3xMslzjoL6sjAoml9sakwSE9lBVv66oq4mV9QOEQJgnXuq6sQLoLdAepvO3S8iTqIDchMdaj0X3shyyoPQnDk4sOvTqTXTkhEpwkC81ZFwwJc9qYRCfc/Pkwj9rTQIxLvcbWZ11cnR1yW6tWG1JC1Xv+DdahosofpxCdUJd+SWBkv5PamzAXIK268DUvy8vnQYxCmgI1hYbeEOgSW3+UGLIRc116pX7N+FeGEXRwQvyNki+DuQSOgoXHFOPnWsUlnzvaFFbWE+Q12J5yd4xGpc2IdwacjuBb9fkBD70bafW6zpl45LU/AQJNPwNXz6H6H9B7v1h8EERk/Z7uBdASU3Ykn3D9Mh5B5/uZ9KHSC/PR9S5DTG7azThxNoPeM7tstlzLVmo0h2jn0YgYt+8LSb3jV7I14n6wLCAm52FsLslCRz7zilLWRCT3lH1L8aeZXFqXCHm6lhR+Auz+2eSOe5sU1midPZxISBD9MpSRRodBwZL3TGpz1VGh0/yE0VcodydBkvyoMzWd3pWbcwicpPgcyoTH19hvwBbHgDfJ9bb16Gpv0QQxYqovxxdjxgthv3p0t8RmGas67/V66zPylbO3SifbsU1hOyE31JExQBzHMnYe26CKb19J9Zt5S8XzHbM/7D4ESqMFIHLwMkba+EiXWkmY0xOcrR5bGPWBFBX013NQYErFG509sOYxZZr7Q1xGgez3oipcsW7a7BHNyLsmKkN9UcLMQpTQm52qKXfKAnG+I6tdJrE5uYBT0sNBEwq/ostvyeg/AjauDiEfBl+h/JQsKKiFeIu5FYGp8uRyntfSL2voV7YP15QcoK2LfQpA5aozuaA8+jyhN3mqO3OFaGnCMRv9lqS2Ry9e+EnLLUkzHzoYDTD1tCfT2nIHl0RCteBUulFTBwqsJVrOEMXvN8XNNErcoKanrsJ5O4LSdT7Dkljjcgagq87KYalc06ns9BIOJCHQt+1nDHU2YxOoPl9NEOOWgeH5aTKA2jZANwI4MP3rc+7ahXFxQprSznbc9kHHgdXssq4QpPcoUVQq/z0PWeJZU2zHPWDJKkNvogt5KUzxgjVV7fbPUs2RoLKrY9cLnjy4UL8bfrwNg58fvNb2y+Ml57UkG4/7qWGu3SrVRIYhu7L30XziqNcAN3Z69/dBGDA1fX0XJM8+zUqwQ5KEjOGaD3ugYsB534h9wJneZlBqO0i7sFc+NfBfdESVSySaQ6JIU/6plyV9/jVRvLLrZQwqF8D7/QqxYVSYRKHTYZ7anz6WWT0UwyUmunB3qkt/Jwx3hgCbmSrLxftLSTkphnL1xeeaDRiUodNCmKjgZLmVD+RF1aYAFsRV0Vb4E7Z2RhRPGp9Kw/53oLqJRZUSqIQOTFKr6NoeueaZabbsidDdBVXeoQavwbgPWfSNKI17ktjdc/T26ERyNj1ySJEf/Favlz8yAbE++JGysJPgiW6Hwe/DZ2jMJlRpADDhPT7AHMUkJfk+RciDY0fVO7aC2mbGdJjG9yoHF+KkOC196ZG26pUe8foZxbMvnDImp6OIPN/GKnrqraBKeXNzZ4HMhtCP/WAeUF7weB/SzmXMbq4C52OLTHE2F624rHkzb7bJCfeJZrhVHTxu+0aDDxZVJ0G8tHfPrFoWQRplbBlPMfGHEpOY8pXpLoYN29ItBoF4TmkgHHIq4UfrW3yNDD9cULADB8GLE6U+WxjxR2IPHKkBLq1y6gK4jUNNt7JW4Vs193S6QTTKpoeD4KfMcvxZOsnuP3WkXzTmhlE6q2IKVvXdUKsmNvZjf7bp99XWnwhdOcqBUie0TyBi4YJmycm1KBnkYb9ZZXmx5P66UsI7N9Gd4sB0FNdIVYs+ma73TYekibhztNmfxkWxH8l5dY91gDeetI2QPrM1g6hPVE31YOWXcVVt/8vXrlPfwjEES5wDkD/XehXYRyIapNeau3S6H8L/9HBPAG/ESjKRN2XmO0mxLf4KFsUc0Aj4Nudj/THy8wsFRKTKV/EjI2sUFvkyM0OJ6JRU5IHYEXjMfEIroSIXTE0EjOveLMmFH1wJ2x+t81JntjIYlrHPDxj/2z89O+IQR4s7Guu0p8dKy2LMtGh6BOktiGtnLuXDb72481g6ySozdvx4zaDCDl+7bP9T4+ORdq41xgEN6ZjSuV9SEZFeYgjm0zQNjp17h7kdxIaBBvx+vFTWj8j1Xq0zITtXnyzmue38raMHO/wFvJqWH8xbYaq1RK2gBPy3YKZUN/ZQnIo7hK1JgRZkzdDv/lx7wdNZTFuXSwTBw2cP7+3yJ641TZBxaRp3aeWRFj97WwAdy8Ls2MwSDQdfF3SVwv9Og468W+GUkngY8i+tfrM3MhPmHdUC1vLqb5zjQfi4t9Uhf/+zAm7IabH11WMujYfW9ePfwstOJ9bwyAIbk4Kjh4Hr/2WZNywB0rgO9dJJbYkhJWrbtUIvq4p3lj56BXGkL0pX42u+uTyQDNmCh00ef3dsrpputPJZUt1SGTIgn1qnPos92LB86svhqUb2ha25EpaKxluKA0mrZzSovQQZeHd66KFOJPTvQfKTg1zSzcCVuxCa/ddjfZzIA46Do7aSPwgseShULPplt/mOlbDz/ILYEj4P+wW4/CM6qT2NrgTzLcaNWUal0AaUcy108LnOs5jJnTjHLstAC9MflNlqzuYErk5zu2BHQtx5Y+y9tmzFfoZTc1YDalKKyTAx7CMMDh4oxX+kNQBwlB3wfuuKLvRwZPthnqzIYpmCIS/X1ezWwsBPH3pa/H/2mSjKP43ECujE7f2M3U/maWcNBd8glOymONLzo2x8GPW3P3U7/xsPQB74dWsIU45iEHYRqK6KeEKs2sZCe3HqFB8V282/3XSe1ORRUYA5hURPvX1qKQy41GKq+aim2NJFatZZSKvPHfjgGnxKZ5Ljkrqm9TcbMajMExXOQN9jE1NMbnetGrN+HUxmSPFd5N+w5sAPKILCj/yZmQG+T/1d2BQenTpzbY0w9/usFs09atsiWhPGkGyMOri59gFy7XS5yxnFRQeWQSSqKhh4y+/GpmnAFsTpbuQ2Bn7FqIlRInj8Amv7k8BEYacyUElYImvASgO9zqWoXXBVPsRBUlbGeTXV32/aA33Ar2BSusXF4BtZ8IQ5gDm8AVRUuwppBuOoYVg1NyR4ck9v/xbHkgw/ZImbmV/ZzHhbqHV+VEVcsnvhq8KTwS4//Oqq93SRjR1Xt1zx7LGovQzHMBr1AiKjYH0N4CwPgTVRaYtehQH6fk2CdCzzuIzQQG5GrKYoJ/WubnHMu8gzxaXJSjS89rcJR2WeQM4okVny7Qe+Z+Oa4he9YYHABcb+7Z0+QoCZ1OKWg7+PoVLxL4m2FrM5+hjU5v4rcM347+WvdiZUPgjhZnHb2jaXLJLNpwxj7Br0qgo0bkeOyVOiKbwyjfPBmnSX8UxWx+ZG0IWthsneGiKJmUsfe4fbxkNIhsDF7xU3KrrkIxEW+6qOd9iaYq1YOjXyxE5eUMPvihA391sANJtPYpGEsO85Om2Eb7HQNVy74ZUtOdSDy9+1CkGgJPTvJ9Afev8tNJzV+K1M0Ja4RLaK+mFnm4U7kLh7aBY93+scAoSlgBk5w8+7JdMG+QwhlwDERVRIDDJZHCP0/NBGnm+2LQiXLEckWe8wUhoN/wUdGRr5Y4PMnOF7j1Py7c3wbVdVSC8FplHFItjifrV2gmUbMpnUp4z570nrs0Y6dWySXV9+snO+PUwQEqAg8/6rcn0uQL8i6+TvVIZOtwdHrG5VzcYjSEyFspkbzbintNsisUJIA0xnDptZrGiqkHBm1VynjmGX9ncCOTA3003yBh5nP9zVlB2VwsexbMk8EPr4RXSnVXY5mFO10ZBkWwG/XMf75iNkvmpvbZgLqX7PN3FN5UXywQefPXCsTgiOu83dk5pFWCuFtS17fhpq8MgESluvAA6PDRMg8JRZHw9Y0FY4QRoIbe3MT+yzxL4cBn5vD5/7a6De8YJZ5bOiHMsyk4om4VrCSHwh5rtAnBi0CaPWhIyn6mqmitucBZDxumFI2IprKIuqPao/e/83qzZtqxe+jlxKNtS/SERfT8rGcs1b0lx/uFtSX8EUPOYcKZUaNESqThrdJtIGxKFmH2C8hWRS9/Lhnm2uzpOgciUaVYSLf8rwkNcDGmw8KtQzIcP3X9p0BBxomiCVnwPoj7KQJ88YDq6g9+JMWbJsBeboEQAmy5UgrqVwOjXRcDC7drbGxqUfgPHkw1W4WoiZATY4enkJc9UYbutuD2MAq92GJlB5atfzYE3F7FcTY8oAjJeiHINF3aDlvQA+WRhJux0rFt4priIi6QiIdWSgnotmsKq1Zoy5PqcYvWwKosyliV8yLL/fJhruqxPmLXZ5bZ7Ib/g5/WQY1PUYqfgcrcxXYbHktCO+05rve0iriQAoelPDIcpdHE5gzn0rZyPhgP/PBS0DTgsMX8r8pNtSDoeZnkGRcd4Ss/Z9A3Xy3MMbHSFCQVuiepNeQZFQ+Eus80RDXQEpk8wa9EzRh4rW5clecuq5GxFBzE/imELgal12/wPcGcwEfjLdrzQTT3teWQkk60QkTTp3nwgMiBHjtC24pNm/mpbuunNDFcWKWPmwTgVyOI37120z0sxwSdTgw1ih3LObJC152HDXikwT7eCusVuuHvxXQm9wc3Ds9iwgUiwNIn50OF3nhQFd0JBr7qE2f6+Dby7Pu727ZEzIm5mSojapAbjBFoAf+vN+f0gpabJMSIrQ8pAfGL4rq8DZm/RK6sXBMxA6NfXe+bgEQaWYovujWLkAbW36DqHdAkpPxIoeCPRwSTYfbdC7dkgZcLuxvlf9jdn+NcErpAm4rKhsaK4FbMVg1YriFjwjOGtYCdoxl+94XpNkYIwvkRRY1lFNhNBcYaOS4compBKby8/XCefkcPZ2Gzorm+bzUw14kxlf/Tk5RQmpFK5hiV6y6gGQPzxcQHGfnSUgYYNfqar46RMoThKgUU8WQaMJteoElp17mhlH+rbc8wRsuJ7fjqTrakd+YfvflRsoSj1ULD0gJ3m7TKa9cqJmrtq/kHoB/yzus6vYni0AJyoY8VXtC4wF07eggPiXVzHan2liW2sxr4uiS3v8IRT4rlM2MJjqAi3sRGXoMdtV/WsrsHtK/pvJxc8owhW/sI3+csCsCHitbYlCCidQw0GDmhc5+WNaAOb1F34XJx/T9VOtFADl2T+sNc5Qymu8wTEAMXyio8w0K+i8ElQw7sjx4gFEy0ivPfvYsD2uNfFtd7vc43pt+RTpIaoEylhi6SLHo4mPuVXlN+BlC68WVMuTxWGmJ3QwiQ0Jpg7Ox3OJVcaVzGvGl9eQWyhq6z513IzKVedIyb5JAXf2q3dnrG7NxcDepYQjKIEqJ/x+vVV/SpCEnKjBMFqtccyUs9mVM6layM5KSOM6rYjgjSqzqxOmFYZPk0YCCrT/b2AjpMKyt2eS66StkyN9ZdUe36+5YOEBVZE2eDJ3VwbKDAY93LtWXFW+Tujt0fyYNZnOfM4OIirYcBWnC4ABbFZxmTo3a8GsjJW2bk7kZoptz89ZqAqDTzS9i6gSkBoklTA/P1nedDU5ZXJ7E/o4WYel4/cpXQel/2jhrPGwm7lAFLPXtxXhaQRFGp0acayAkR3GNcS21nZqRg9ib/uy2hci0MNXGESBMtv8hu5YujrpE20qWLM3GM6ZdaKfEAUp9zY8OdSjwg34aYY+P9O9NzCxon4A01CIZwkl4UKuyDVKSfaQXlS6hH0JxPqo5uA2SNjytVG3h62ael1Vpzm2YvNUOgyMXrroI4XcfMR5JNfjRlwuLna0dzOh73rB0ZBYRe1QTETkJSIzMToVBYJSCMSxi7ppLSvrbLSuFBZA8DYOTrY4iuXe8tHYx3XzwPVG5fcwTQOi/mSVczC3jlwHsUtTspR2lsrLdP7OQyCwBMI+6pfTB1HV4sI1L8A53d983oLjhu0wyvkFPeGS2rqiQZNprSZBSkkS70pPsCBvYbqZAtElEcR2PnuueOQkir7BhkmdrJVikyssCmmiGKiATHosVl7Wh7Efj1W1a9xXHov/flRFLvWUDNP43B9Oq2JSv53fvEPA6Nr7mmrk8TCC5YYVhXVCU9g8/oWoglWWUIyMZq3cv7O5Nh5dDeF7X4/pSiBUO3MDlSY8epuLDDANU4ViKTLjnM7S8w/mlx177GVcKriwO5Es2CZRdQt/r39XJu8O+Q1I4h3gVwnNx56KCfyIx0ijAr7wt402mTRsu7IDZFbTeaZpG8n7PojF+1tHllX924asHpNBdFoYa14qprM2se2AjIkD4O8OKXvAT/ZgGa8JijTZXHtZuCnlwb9dshVF4V6VjhP0FIvqrKgEsLkS0AffZNrDiC5MCQJ/sWSjNsMV6gsQI1aSyZzjnv9LaR/M1QGKvKksmTfQyfXe6XPs5tzNL936zl1BNDnpAHarGqRmFsUbM2T7o7kMZBJrJMW4ESCIjtLGTwEEK0qdchKGmXJwe6MVYEGv/ytV/qdbALNwdEVggCR7tingKh3ysa0L+tVa+U0o7+IAu7cHTXSPlnJoM82DTKw/yik1HZcMPUXtmc3Ixybc2Fb7kM2Etw8+VLiBJQvxqC/571gfXsno0xt9n0ALZgTGcLGV7Q+4R3H2BDWxVMSyGHy1efkr6uhBdP6mqhoXGyynF3sVL3YdecTZdchxAZZuCtATSHsXxxI/oso9BPPNZsrvIlUKO9+HdrQ4znWDnZT/xbiz2K+u4rGQICV/jaSyFvYV8M2u02lIeXcwerYGOUJcS8SybDMKcFTSin5iTSzYkRFsEhPF523UBn884GBejC7XMxTZhEvKZ3cnDGA3fxmQxKSMu5Rg3tFAjZTCTfOCEXbw8a5q4IVTLjwNAJpMpaHWCCgdTX8X/811+aY0Fg08soxEFHbAFmpSabFbI2YogS3oGI5W1ZEbl5vEEnFt4YtLReuNSeGAtYxfEjBhWJ/P2Pyw4ShB5LYvS96laM+RVqYdRJVSQEIi+BE/YzcQDmrOPDAuVKiZBdlZBwbppbJ79W0ZGbqTpoySHLvnAS0Pppw17FhGqH97uBMJ0Om2AaWccA1mZKPZQFwGVufhPhjcQvkT8FSpL3oLWJszy3cGx2u5o51EfZciU3dlvOB2U1mvKRODGfURSYM017eHByG+GZ1TYs18YzrYLxptBo2iAJnGTZ4NWSh7D7JKl3qg0Grmj99RtLxJ8//zxIu7H352QHE508FipprRMDpcVjlOPfcTksPYbQL2OX86cnTz2lv8WocVOiZK81E1ts+BbKQYqPJnUl4AbfgQlJS5GckpL2kx47nxDquMq2J9G2nM1MnB0M0AZtTgFqECko8LTReH0Jgk5zNpszmLPMEJh7b2SFp28spKm3NIUMrAOseeuAr4Afe5/9I1k4D4w6iCAKlLL3cZmmCZ0Uz4msbGiVlI0ueHTyE8KA+PEww0KIvKdXatC1DQvvqxFk7Ckk/jRqZYXxz82SA/zObsqssB4dh1Nmun8CgAT5vni5uVZJxxr0DcIZkGd7J6XYqv3j0F6OjwwlpdmOJ5dxAhdAtBR6Y3fXbD9x3lkaJJAXeVEW1yQOJZfmEHFa4tJbKBA0uBxp3mYERis8yNWZifYLHsQcGoGdvpuQ/mT2V3oZlnKQuwT5x7xVP9Iem4kxysq45b13MND0brPT3aMGmj5x9482Zqq8oWvQ6zmhizfrt5Q98NlVFFGGfBwa1fpKquU6f759hLVVTMkZbFQ1oun70qssYesegI/N96fQbKvfskUreguWJnOpwtHuPFEg8DAqF+KDy4yUmJrnZ3T5UEiJboCaLgumHXIr3R1iNYyBCgec+o/5D6nEpDe5MB7tg1r3ObrAszrUI9+ka07tvMZvMFQac3f+w++yVeFF/2O252ug3dj3Qmx9DakawdhGKV/aiHmnZhvA5GBB0ldHJ81fg6nHt5jz5giOJ+cTtMxdlr70K3VLoFYHYiuJkoyjAjlqaB/Q6hdJQ2jOKcUgmns8kmUX2CgrnyfRruaPOu3GC81b4krivyv8XK036Nv3U7lf2lWD5yE44ovJVrWqoVrzBDLKHlVjkK5iO8wNrmodSum5digK28p2aVQx3XRh/2QM33+i5jUBOWjnMH2Tud8eJR1pU6C3mIeNbQafLeMBAR8m5NgpGB+SwP9Y9ZWD+nuOea6Amns2xy4ughw2bXhGDc9iW+brqhhAXUqSbgcfishLEFYB4xGXsvohqfKcMgIOb2BtDxRq5YzzF3d90hRVt72zMJvgmAM9MIj17SpVvelsvDk5RwtQHme772A8cCM08t1Q6KP87Z3OBDX7cv4M1EH3/zzrVAFKRNPyhm/l9jsUjHt9xk0JunQ83cIa8MSzH1cAy961j1etK/c2c5tg2BCFWzIcfHBb689cd9JuBmiet/lE1Yyoc2JokFq5UGI3ceaZHq3WxWOjWL+Y+NjNhcGFJ50LT3fHeG+19J3UjtJGpY6hUBM8hLooeJnpaVIoELWHFnRy4lpF15ObzHLySFss79IQlQcwYTTdycKYmPTHdYPQv/lz3LBMnwdgVHthChnjPgUrBEWDzKiApXVZYj5RJejQh5dlBcEwM2pFL5iGsBPTlokdl6bdcvxAkEkAIImbJaHseb9phAru2OB6PK1PGpqS74pkJiE44mv+JXcfM3FoVpxZkX1BDY69ZX0yDW/Y39A8LYGTLohr/9KIAVry13GrEjYMP7XMUUAUG6P/RZzr7XU9+hh8ht/p6UinJJ83iSIzzgl9eXWUXrCdyBx9inTGIt5cqE/6hv2MIhT10EpZB4479e81jAnVAUeg9GDdTSY/G/b1Tyw26MX8wq/s3nPMhILtmnlImyIj6ySitZafceEs0WG1f0gWxVzyrXxeNneWE86k5SzsyfVz0qAGAh5Ua0coGbLsnj1FiRA6nBJt4iqFS2KrbaXYrTgRd7pfl3TplA8bFe4YL8i/6v/BmxUEBU3YD6F5pKKv4E6S08HQvytRwt5KgDrin6MEl/5PYB7y55gf4xdQWO3B1rED9k4jluEqqw04eHq+wyf7FvuICVPmmXTYnl7kq76qfIwxnDqJmS3WzFevkfQWPtsHTcY0xQccYq7WLQfCc0Y/NSDjrW5v0XL6xy7tVssQZ246x8lRbgE940gvTc9fsNy83ulHi9j/vneJPsaw0KJRsYoWKBToAAe3uG7ARD7KN2jBvh8/uWkT+BuG5guyUDUT6m4I2H+CWZd65QW499PL5IWTKMQwH4G1mCthlWDG4ovxuMxwWmxdBfdrD7umJEqq/pbalXgjVyzVM62CKLF91DKpK6FvqTH5Kr9qB/JlQMM1iUTFvrW6SBT+gyEz2xmVoLQVO6uW7F+LppS3cbEDvmuUuq2fzIKsS3OIpHrU+49fjZGHCT3N6N7CZ/G33HWa85fREH8lDvdIB7f8vi71Z2O0a5U6rihd2rRb06awBih1d70vGWyNCVV83aL6QdBPIdFBcliRH7d5LltG3/P9K5/Tk1Hg3KxTUi1X+e9xsRV05Flthg5sZE8ZAgxwuuQU7cgsBBTP5lwqqwrKUZQDKbW51oJKgCbRuFh+lIIcveMTXpNuD5jEjaPLJCFEcRVzjCUw7PjDSCg09KLSpf6XborkawkP2gyx7HdJ/XCgfje4tNiEDyD2O2lnOFCtrML50uc2rKWOBcL6cP6y/jwcAnGVeOnPk4xEWyey+P7KXXNhXP3NHDDrDFJ54CEeEt9WrMrtjJeLeKK2dgqRY1CmFeSJwGiYfSQxDZKLCNzuX9Jwjw8jnPJ0KmLKEovB5fpYgZ1Rj3qMhjrtUVRpXVdO22kwr7EO8+d5o6V1BvaqgVYJKEs37sBUCf/yq2cllizU267p+qpY2pwVg4D4q2Son4hl0YTL3jqbphrk0fihjEqOnp2LpLogfsTJrpZVwLL1RpYAdmkpUfnLZQJ4uNSCoqF2dEEPu0zvtDE2S7AIqwyFAKRrwvsjZxpdsZEr61eUqqjD8UW5rWu5rAiAX0wr34Pa2tPr1dY68+eK2fekk1YYIjE3NXNJ4m/3BjrB7SEZK/1xqalHp6YatMVMxLoUbuwjFOZ9WtvYu4BRJbz3CHAo3Kgtip5YwmOHphz27dE8X3NTSsZSrVzuqy0WxvxCA17mhpUf9ZmKvemtQRAZNQtbIIkF3T5SCG0dsz4YEV6uUH2l5/M0MUob/VxD+YSvCGdHeqBJHtaRXsYAVdsO4LUjYCnYApAj4o9Nzzo1Te23pFpXOu6iVzguNL8o60ea6aGG1WK5KesGs7x/hJ1oVe+lGd4fQQFJtyDTnegS2iioAOZ673B241E5ChevlUTekDZHGthXFDqIoMRwaFk0NT+LU0FFZ1J5Nb8EE5yzHB3ReX98nHpljXdhjhi4QvQKM2CU+/o9wdnqAO/vUeQprk70vyMIU0c8fFFOe+dmlTw51VZhu49DgPmVxuPZp/Kd+KPfKp4MczSBLzQ2b22yTEn0Z0idsoYCYkJAxmajitpSCGxEK+Mao6zuWhU2dYez2mhFflh7riZYvvTC9wyQjoGc4xPtxCmYBAIGjKsE2kfRhiJSeaCPN+SIFt9P7f7wxpKtXBfdNncbGo0OGyjj3zUZNFkQjXHjBAVrkB2GM/yzExV2BsF8A8QaKPrMsB8ooBqZAuR+jTLpKxyGph/Zm27MjxZJp2XBAC7q3PQa+yTwzgKDn89Y9bl7kB/gpgGVMCs9kKMlI3DUNqGOYeOu4nKAyBNkbvrQUlT+74dbkwd92Rj3oKxElj5xba7R5/pSHXWFDLHwiaEuSUAJ/Tz45lWuMHqON9NjR0OPOhVUKh87ILr8C6fu/cIH0TQtfTi3tzKd7bOW5hyt23L9nlEqqPQMEH29NEwYDBdX0QDkoyN5qvrmiBq/uprTS49zK3x6jvrMNREsIVN64hj+Y36YbES86VCbN9d2Btq17rQQ12C9KnDwiTyi8S2t7xZtbwHa84ZbLfjUzy756qS/h9/KDo0PcTsDClKANYBBhQblvLjtWNG577svNxvzmYIzaX84pJZJctQyDw76gSSxCLWUVZZHht1567RInB25zn5GGFb0LsEPhXhW5oNrLqt1sHmFL91LY8CDzkZQVc58ctrjMxk7b43aAz+dg6IpB8NcrxWZnuoBTphIefXYaXWb1n4F1WFZviT/LQe0OATT0QWqSeZ4ZZkOUca+o6svEuIhpB6jv1aV6tgyaypq0ff1l3fSsKWHJAiv2sppTD0fzo2njF7WNG9YeG3z9ylW9DzZcQNpWoxMe9IBVIUN0qW++gToNpp8JxNrsb303g4ilYZpRitjceFlv1bYdUpkczBJF8Q3sGPdFvg1aiH3vJWidzMimV3eczovu/gRoeMLn93dmu/UjEbYuSlR44uaslPoLqlkVjBJlAlnVEtCG31vM8979GiliUwXnX1gW9lzAShnsOlg68ciqniyYxwMtgxCVVAjh9cce8z1eMmL3qgHeP1i1EoaPHeLzeO20kXNWDmM3+xxlR05zrFCKhd59HwnO4OIgFy14a3nEqaZG1nLcZAbOxtAquTYsMmHf+L4y4LG7F9/RJby0+cmZgG4EKxLG+Bj4+34Qw12jJ3Eq19XiEavqt6wbc80i7uUda9/1rrMBmIr+PeJjMJnTla7xF20hG73gLtc17+bCJn8CRxYVgpRsfVXH29plLNcvJcBhrpe392vESY5aoIOjFUVoEbP9wpYXHOCP452nrT0vWXrJalHoHlkGmqTRn0nhqE3yf1J8vRtzEu1KzxCpwX/Dz1pkEO9Y5H1f9uGb8rOTSJzzVyooBQnWkIHfGmNZE6XC4vG6ZKHAVJIPDKErWTyj5HsLruMm5ofFp+tqy9Fyl5hHu29p9FlMgR6+zbJg3uIO7AsRpnCPKkB8aUTplqAO0FCK4kbCVekd/aNa1lU+Qn8H7gQXi1KL9/wJhd8IRPKrevFQaK1NKCwkjFhZUJSfbJDKuizkf+z4blDoTsDyZe0BZdPV6WVe2kcZBdr2TJZcEz71W+EqvxUU0itP0sghu/ZlPDDpDLbd21+LhQrst9ciuOOMl7DRUAPI9R6GzzJAQjT3TgFSnTSRDkIbMpZAdrLBuWRGkbunj/Ulvyabj9K8A3hUylRZG8TpnwWiifNxDOtcgfTaCafvYMu0mnXF6HiAbzpXiV259LHGApPman/Q1RHMsxRt2PoCKQZVGS9gakRexUvRlTB16Aigxs5CYeuQuDG0tn85ZkWxS5N/0UEqlm0EII86GcaZ6WDurXzxpBrh3Q/GBgZDms+QIbugSo+OljhboP/LVrucW76lj3ntEchCpFHpx/ComKoRahCUx4MU2Dm0zlMqLhGrD4UenK7wxePG/FfzyKX2LbWTzO0sDcOoMjFQo/xnK5iXL89LRLdgk1rNXrgKFgvlV8UYkUtwyCSteTg2oGLbafx1/JN6C6yBe/5H/zQ+1DetKrOX8LdG2IclEwHttYi+/lM0/NyeY9ZOUhsPIP5N48XMWSizzdptDq6zgzGP/j/2QepFv8OYf7i6FcXL9SFoqy5Z7WddNTD4CdHgfBIg8S/jn9tk+/5C3OReXIg5FhuMOI7zUXx+X/2c0mHBuBCFJbLBN0jQaBSQ7BvNnq+5ANjfjE9mv+HnMoNPe4zpYkigmYvf9JyE8mGj66k/HVuIYRXcVrahdq38RgiI9/XfuJLBk/gBvY0BHtniOz+wGDrDpkbukTAnDKK8NrI7bXHTeVCCuDOe4ufyITGY16405PGoNMu/zYDFFkT3CjwNrHvf7e0W3LZneATKACdC/bOev2/YNtBzT57qOt+T1pwm7ttW15xSixdAgSLdAnM8X8/WDybLxjuwdENUSH5cyZ3D4VbP/ujobRdJfV6fiUXU5ZiA+K8pHemmfnYBx6r590FL9xuVxZaTtuokbR4mW2b4taotA2aJpNttoDaM8u9/Mk0wN053IpnGUZQFWIvxt2PvKyQW8bND8wYtifEpxtPMQ42rcw5NtQml3x4cxj3I8dFVnOVMetLdMaextGrAW0mvezaBQhZ/ZC2MdK1EdZHsclk/RKa/6HVvekWhYlIYm84uigUhA/qDnCh13o/WgWD7IEL+SFI7vuqXvo1Pkqtc8FFFm3w4cYr2LVNXIYBrmqfJAzjP1bAw3MIMH+cmfRxITvRNzm7WJ1f0OwEDqksStK3ukAIJ1CzH4Xx9p4Hvi3Bx7+S5Ld+hhzy194TZ/XVCUkPjom1/OHoF5nWcurm7gFCeHBmr5hlx5aotqK6XBGfD0/swfMVywxcrSK/AOUUPmwGLUITyz4cP97qumr35WE4D7xq8X/tbQdRG1xpE2byAosi73RqYmyV4JD5uzd5PbLVGQ0V1BjIZunxmguVtJAKbaX2iigiwEJFoZL7k0s2GXSc71RRgGn4XoZ16L94yUIOD2aOQFvcduElydM0dMA/oYCXFr4zyUziHea/IG9oDqlJwH0yPaKT3Ut78uEiQ3baaNcn19giz2EZFQfAJAUGNcB4gn9K5lMQuk7k7P/Cp6W0X9uw58d8x8ZOSdf8oqOCOIPG2z6faz6Zo3u/+jD8F88fCswSnxhZHayDase+mI7UjdtIJjN8tD2S17AvlkPO3D5TSb5QYA0qzO64is50xOdP3jrutXFYDP+CkImKnY9s787wmIs+QTGIMo1BQNqQqd07d43rxDaoMZH5ve2UnMafqCTxd3sdBtfx7PAagflOs4pLrTvChmWuD13DJJt8lfHcrcD76Wlp4vTIDW79Ngir4Wd5X1D49aOtP8WNhziODekeT4g9GLmUcS6cKHrE1mMGU0DDYduGZ/KyRorbyHu6cW9IC9nVL9HanAWoQwHLBm5e49y/IweqyKsH2sC1grF2d/so7aqBRC+EptMApXaK1Z68P+4eqObeS67pbz88rO3JSd+7rtAxoMw4EQ596zssbp0CJUif+yEpkmG+uWWPrcjS+YNxgzJQLMnHx20IJv9CQc2o6qT9YUEn5fNROqVH/zqfM9TLh+IambrlEXrxaqy7SL9riU3lwlqetN6Ebbp5oPFajf4T/cnlQkLajoG/71fyEnCULUc+n7AiELsgZLh3c+F96XtzgYdyRY0RbDnuLSTwzv6RSqd1JXAQzDktCNK+lHqAJqWcSBS//VRb9hzQQGl2RG9PQXbvyWT6s2Lg4xWTaw7YIpncQHH+6PSfP5BzGdrhvLEgkgnwNi4gWVp/GXHniOg3U0smBH12cixEyQVQMYN3LMSbki59Vv3jOcjJ/QsNd7/18/xORrHduAywPaDbO/JAFN6Z3EvXhJLH7KVm6BEr1KVciCJvVVbP2kw9Gaw/3h3S5ZaYTrG8tAxNSESv1/CP9cFNKrJOwwUoHJmPOqlQ4ZqmpApDZDzbp2Op8ULTh9c4gHX3Wc366E6dE5WVjNCy5ySQERhw6eDw7zitxnFhPdVJY4LTqd2TmuebMtld//sSjj05WTproAcr9O3PfqyayBIaH+M9yh9M/yVKjMeN3jGymVDyD/zAU5MoevfIzqkakxjqrDam17VBwAhQIx9gUCjZyVX7fcS1E4UgOzhNOUTcq8/qa8CUzT8kGVq96NuMu6AksFGuvQP193F357+7p0pNsIVhDakdPoY3PvLg9W4ESyi23Ha+lFD0cO4mlQKQ+m/ePZxQVi0XFl/VM8EneNE93crDLSWNh1Po+Z31u8hWQyOkizgWtc+SO7ox62YDvftn4qOLN98TlTDikTw+JWBzrs7wx2qfwXpx6npu2i9jt4M1oUkqjq5gKC53prXyIUY/jbf8GdgY1l5dXgZbM6ZAg+p1X6CL+6cIe3NvWQG4XNMOKYUa/Q/32tYnDl13Dqdbt84lPtP8isjTniMXZsgj3HM2njh069M6yyzlAuflZV6HmoYwe916jzxXOqeZt1CFEXSKeXpcqlT67KPSSfDvjdkbKQ44LaDvlRPlXe4S7x5NhqnB9ZCoWpQbo4kN0fI+aXzKKkYr2crsqL57tb5+iK4/+laMUoPIEcCgE5bCywtcdZdIxRqL75MEKe8qH6aCofMYbZ+fdNPFRfLU0af1F9gQKyieOe75XRGGsvZNcd94UVxG4EGkJW2foI0vsRfZXvA5eLPphACVXaLKk3thjIpw4RiHD26t0asmWSRD3hrh1sKPWAD7UjpJlQ9uTm6lifqr/TdDFNAnZXRVD5XZH1vGXzN9OAz3Sh0H+GkpBGiqErpaUJmcYKJjeIFOx8kb6mR19bAylzIDSHLUnZMZ8FzEcL+tlWcq3emHIb7/SeoXDiWH5hFY3CubTylAki76FBZlqE3/WtzpQbgQYFN8T/ZMuKCj3uTXA15lZBfO11fUlq8PiSnG3MDK7l+WBPxsomavWZFHSNNmUw7ZOpI8mmQfPfgxC61DGEvdTuPAPK6qEc6DqErE8sj7Yqg9zhNgVuP0zOcQhQq/TCm2+DBxbv2vw8PBp8FndjmShTTrv2PwYUU/uYWGFklzIiu+7PGUeDNeIXTaQkVlYjG5a9oO/etFISn4T4mML48s8FJCN02sNj6z1tlkIBNlvINFqVDOTcoHr9INZewHc81cnpVPXROnWvsIHk0v2mV1sp/qYxGTcFEKQnUNt2jIlGYLOzarUsy0dZbO0NZcfbONinAvL3uBAuYSW/STnPDSkm86Dqb/f/A05nlQDB62EFbH0FfXIogF0Rm+4ndlf9dbe+QXFMUcqzHO81JSkHp9HwORx9sb9fLMwOckudIUkZcdxjmbj+bJgxgaGQzTOHam4vs6GkoPkN2N/OroHO4DvYAd/ZcVj4elSZEZ/dv0QbBmbhrADyLCsvllQAcjN3/Qn3sQ87IBNvCZsZ1I0jnHzbZA9iOOdOkgzyv2yzQ3qdfyzA6fWMeYt47hhnTdlQI+UvX83l16R9Ml4ys0xTPtI4fQg6W+I6TXAfkNnpeYpfuCsBoI8p/ONwTZFJv0QEGLTHvjs+CSoU0hZSNiciplVrJNGGSj3NPVGZ8ggvZKaOSxjPvyzq0GGbbPSNQRoUnXzVuJmtxmtOjDY/b9dkgtCdg0KbpNvq7xrYRzdqF6kkYjnnn4mM7Zk7Pb/y2ZpTrSq4kTzWqitdqYPNOqHYrrIL4q4df3Hz/uPantkwSprDRTdR75A1wMhhaAc9BUG5bBhnAlMvPmLtj3sHWYuSP9DPxvb9wWDM51ZXqfBDmvcl2jCzYHoPo7sjGpLX56eguFw/2BJ7o5wbr2KwsiZu2XYMUkbEN9wJvVAz7Ne0mQHCWI9QwSwec+ONfaED1naiQfutcJuZPttqnBoudwNW0tfmWczxBtykdb0n1fG+CEtuMkN1mhgzWh1s4BunT7fiCK9gnqb0dCu8JbahLsZmnDWfU5CZfgZ/ArxMjYv/e/QwdGiB4fE+Zd+2sf0OOCrJzSJH5fyXSkJ5N7sJteo20TAhZvWZ/qOHwLcdJlkZKrJjnA5rzEev+iJZVWZ6XqylxJuNi756wBntEFOATWTCWD25/YKS8cv9Ia+TObvR6w3dyeKrKdIgwUcVJYvQGHZ4vFJZ8JufXlsxRCO/8PwTtfxGY2VVwsUTD3LsT7AsW4xwp6u/V2bwhINmT4yu67bHXezh2p+afEy9OI3vd28x+PxWoVk0wSRZwUUJSfOO8nM41Qu5S2YU4tmZQYxctbixiw2rdgXkKHes/KuRvnt1Z/SMizlAx+2khxcM9ScQuxRvydURutjjDReQUgBQySPjAk3GBY9LTXh66G0WN115hkCv6DlaCPUyHAS26VbdVSdJG5YdgpBWihfSZ+rYxwpqBUg6XATGHTfCPgreeLVfByq6hHKXTlCu1N9MgvVV9V2lOGx51lxtTMNeJu75VSyDGGXkEP6a8tfOWoVDI8fn2L/4y08Ri4DazskX9CaH8RhVIyGShUj9QGyXyBg4WcD7SDmcOR3PA+2S0tAjC3xMf7B8uVRGBfFrKcTbfwAggOXzuocBQSLMjktzVm0DGUEZJIvPDw9pri+/jjXpY1gk9i4CS774a5e8Sx5ECupsVe2q9CiTKMk2ywaPQCM3CauCXTuV7r0hMqiAzOzZgIGyKAAVgqG2rbKyxcdI3vd9sEusnUQpbub0wO/njB8LM9NfAqqcomh41oCGssGOSV/++h5en8nuSN8kiF+osKrUiiO7ZfKgYhtYx4PlYnmIcG4un2EHj6K9XOIaTiPH1GJhKjAm/DuTX9l7P6HNCgYhzR7zMeBNlu3RcWigfq7DGsj5HHxWGi46U1hk2xCoA1UK/BAjakb5hiv6Ugt9jtjXl48clpkquk6G6i0rGq2vAXtDxJwtZi+FbS+3VsNMDON8D4FeKGx6j34JJhnW2id5JmBY7ro1WngWHK+YPdaH9MmgxLiJwEk3cL9XzgSX2gwsRmawnGjfsSqdMA7IKZqrbqKHBqFQFI2Wx1+Wyq7GbACfiLtW5Qlm4wdWwDKdt9H3xXRBUSpskP+vjKjAFamuX5BDI4JASKi9+//4HgYsbNSTPcZQdu+5s0XwpUUGZo3HL86Ga7/gXdZEp3tp6RDVXSNlLwL+anTlp9zIPHsNuW6PKoJeJEbRytgXCucxNvmE8dEzx0UQo/zqfDhFrmIx5xLci4XtHC3YSLtRtq3wYXYWBDyszCXjB9LfIVeX8qM7lOuCHoH8h4GiQ5qwW2jtF+II2hb79M0Gpl05uoWrw1VYzjlkDldCPjtNkeCSUYNB+oRBcPS6xe3biyLa2gqdhqyth3M7gWQzdIN1EefnNKkoS6g7miwyDVm0URU4fEzLErWcbNC3gdMFRhR3EXIcwgaLKWrMYbLvUp5RyATc1uoVwYnpwMyYSYW2kjuguNdZc3YHC0eZwLDJSQ2tL+HEtVgKs2Sd0/5yq1XJj9LSAyuDYM00lqJ0/OxggcQZju2GMtRXLEHXzBO2wy5J40S0YFPLMvUPvTCI9llWkoNN9DLKBMKQc2pbn7NwqeQJueQK0WENPuweApIKktfDIGW+fXppINvUILlNnBuzwqVj5pWBbCcJrApIHNJ095h3XfpK6irJiaSY4ILRQehqnSHVkbzSGrFXnlEDFP0IuifzUve8BqQ2QRVvx2F+3TSCSny49GbIfgHZFxiuuArHk1yl7jZQukhxQEjx+gm6Si4uh1w5PmytnyatXP/pyTgXumXJie29qLKBONHIBT65X3nh3d+71S1i77JOzBz53qDQEsmE19DKjB2gKPo2YXS4exLHZCOmFqYKDE3Jxujjp5TAUiEbsMCRIax3xvWajrsK/WmWEEusyJ7mJCZSFBtSjhRC+y4ucVZmRKcnkQ+hkCORNp1Ed1hqa7Se0scZa+mhekVUeSv/l0bZuFjaRyHiZrZMbLiPZjCLoZfW8SM11SdwF/w0caUP7RQcaZqqULibcyTLnsTW0NCx0qhztQbLc0Lqs+tL10vMG3GfccF2JjC4YvOIGfKZZARzCYzlop1DKjM/JH4MQMSF6TuQiAJYZKvsLrjscgITS+TNL6dSCEtt5NHF90Q2L9yIjZvWAE4Akf5X2G3G0lit2/+U5m41ExYCy7e2JgylsYqkRP2gbi8iVa8p0JMW7AN+sJ92QCXepe25iIcsML3RXGe2dT2Me13iR2CMMYBAePsO1hU6680H1ZLzk3CzzS0Kfd+PSmoSZvDazim/Rye4Wgc5MZs+b5QrbS+7AJYJcE25ohAmnbzNMZCM+cV11p9GpUI5sx1UasLePuTSXcCCnt2nG5v0YtLTCCCmOrPaACRGUNeTNssfYciZJbJylKkr8g+b4qZ8gRIJbnqR7MGOVFce62s3tMSp1LF5qKyA0ePerUdjWbZ1NTpJTXI/O+qeSyofzR3Qx77MKO6LYHwzh4nq9h1eJR6HBVeM5y0I+tCCU/t5jU66ZDJX35VJDchHBCM3e1RkXr00d2vWL0RJvHwoxyTs/AOk7HQz+10siNvzYGFflgtzv5Y0iQUABe4eKygIuDR6HnmkO5iHpK9Sh4p1BdmnrRmMRUGTb1JqX1QOnIYyjzskf4KJ8DO5DlsUBQe/E9JsRQiVqYx1V4kBlBwCzqddyeBhHPnyTG2c2SH56EWs9iGzzN2hcHIIeOwxUcyHTgR4bMcJJtuce8x4xQv//AhavVUFBn8lRVKy+CqVtqG7ucXXxMUGfNt/QMD8ssh607d3qNwqU+4zADcR/oTjO1uWjqvDgi0Ntal6BwaleOIfmLSDSozcXGdJC3558/x3CDLWB4fD/SFk1bgkVxudupdOegofkaNe/FfrOacO1WixnpXT9cPGfs7bwki++AeY8kjAyoEN/Q7Temt06xL2shjdTMZGNN7mddLvyG4X8CIA5tirTnbgs5TFpAfOF9NcDcyWqjPlP81LSRw7KyebXqAvuIHv8ZCwSKV8TJ49OnH3LgQ17paUOrruKiDWVSo6cNw3jH+N6Lr30x/xUtuKMchHxjd1Ug02zquQ+uSvTSufZIeIt3iogzv9hr9t0jiDhdUPbSLOIR+2dRdWIXk7dyjriw5ollLjZ8ZRLM4ipYflsaYcV5zDm0l/qKlEyyjXxhVEf1WhCH7S99ZBnY9VefjuT/aCIICu1s1l+QWdm3woFj9O2gwyCZnHejC+ExguW2XNMSAPbjC4B2hx30A2iIUUkzYN0aXFoe8iwYQNrGvMEL/mLXtYkdJyFw89WFJLR3EDti7geE9sLsRqFXGSaMp5pa5TsQ5enpgm1SOy090BijpZZRLa6KBuNbI6laymp/6qY65b+EApWUup2dzruYW0Kfhrem7fT+Qb8v+COe+tqBpxIR0wWsEpIIRB2dKG1vPE6ujqSYoxVXzNpQwSVGHaqGdYoVSTion/BrHDHxrcXICrl22w06kh07mBHa8/v877gy0lEy4Qt26Q37v+CIjXQ9yaSGVKU0LxuAYS9qgeKOM2WhQVsSPOHQufnNXJ6gk6PUA662lpQwskxOvhb0j7TjBwvALUUR0kbVWBpJwGTt1wEZV0hYC0EbIrgT0YdMx+JE4G7ac7k9IQbieHlO2YoFdEj1BuepSUQ/dkV6lw38Ya1mlv8fcchw8M7dDaR2ZcC3adgwsn2m2UJqssynDxgqtH8q6FhEnMKmbsaCRD+x2gcvnAdkUhc3dS1iAPKi+EhF0HkJIFwbAtyWezIcpQXzpRzEudOnMaPgnvRidfPDb/7bDpx16yFfiJG114RxJbcXiStj0RbNNI9nYWnS5BJtpVK8afPucDMllLXVnMJMMQikARXdJqwE/FgDrUUTZ2dfr7xfydJMh5/+PPEzzzesANhkqbt70bdLf/C5z0cClfJU2FQsRMaWxIXd6WZBo7R7G/wE0RrpiEeMm+bxwpgvl7zSNCmGM7Vi8hNh+agdSJotlV2v6fHmiKp3oHAn1XceAT3JcUUZQIDrO3UoTtCfTq0yh0Cp7TbPklQ4YCFCpjpI0LhbmWmZLcicjefehw8KqEUvGoaRUKQn6D39WVUecf8ciLjeuAxcYJeg7gC/ak+KjLcllJlKWuU6PvzNjZXwz3EsxXzJhZQAykQ7DgLiSsq8SBOtzupcwOJY5gc7xYx6giRkuWHQr4aPSYXi3xiy7lwpvxcfRGclLAnUx01PhLsdGr3L5RpY4ymRpqvCiO0xg26YnPAlknsXnQyKQSgt+466TR8Hsy2RXwNlfhn/Ig5vsErq4Gf5VPh4PRiaciJit9LIXfkzxG9cMYyYdNlKmrDzrFsFQ6EMfa0TnZMZsiDj7bJJ5F9iVvnGM/O14nDaYQmrUgEAomxGi7anf2SgdlksjWHTXnTuydJdeiEe/VVZq58UBhrr4J+yJIRv0MxurowoBp1/qteQ4vC3wKZKHcMqpteKIFdvy9tQW/SamHMf9dHspGjZdaeVwvRZVjzVKCCSncW8b2UT34bD96nySJzdNxCxH7BS7ADFoP0Aq88q8OUs4CfTjyQtUtFY/Iyf3i1Ognam20chIksBqwZPlOgy2U+bXJLrrCSK+TqAn1RN0SbqdUeLKBHC4LAAqW8oU1DVkDw08QRL6zrmFcnf7TmGvjPVssEnM/sziuzq9lFXMPaerGi9wuLfaDmAWKu8ik21fqxj/mSlSioCMB1hstFRk6DyZSjuhMMF9dtB5wKjIFyGwljeCBaFa1UtYtVeChE2P9Q8JpAaFt8qJY82Zg6ZAXHgiPuuVtztALtjGv699TAep/T4057OkfrzBt33me6k0RTPDxTECDNLkrV6GCPMGbi90cfj7b+WN4i5++8CPocvdw+HsGQ52vRF5dWiSfL4wJYprjFAM1tZYnd9AZ/4Kgac0tE4cYeinJoTYEiO2IYFxWS51n4m5cWA9/HYdiMgYy0ZrPKiU7vQ6oF7gVFKclvASDKMTovRy6lo32CXRuD0OA7ADheFtZ/ZE6lV+G2UWZQtmHV2USotz+2/llgcLuIKlrNJVOY5g68/hYqV3NuIWxicXyAW9ULv2DpC1qRfzKmiqMrY+8ZZsq1F/5T4CO5KVNjmCZW/mxVtdFh5keyqexSOM2r0e85AZoJfJfwirCmO5+mkxSH6z81qbwz/s8JNErIGKEqpnL9ZX2roqrHuZvJMnAxqdXV1de7uhC3mVBas5vt1iiPwcEGz+XC5hBXNu+PUmgONJrnCZdcNxR2x1WZLzKMWRcKeWfNNphgP32FrItOgUdEP9HYkDAK0FEyp9+iKYtLPSJ4D+hVfulkPhUwbvHn9z8Oo0rIhPEwqCF9wnB3jt1ktx9bCUviLup+9R8lwW/7G/nt0d9azuESZYyHNwGG6IXPFsCx2WIei36T6nuv12e3pSfkctE7NbB0BS1CvT68KtSZnpp/JTYgCtb51nAzY75MD2S8JpSED1ffAyP9wcuMYCh77S2WcDMyaeJ9G1IgiISQxdT7RMdMlvY065z6ewJhMLvKU6tM2BP3NbKwLFwxgGiiL2jrBvha6EaVbiy3L8BLmFMvMBfK/X3dcXDznJk7K8UGfXvwiBp7l6YKoKBSjr9ukq+bZJS2rWxUk9dnOX1ywWgMiZkhfu+Dg2QgQwYsPIIeECRX1PQ3nLVeac7XEb5PVA1CyjxqQJEwFPLsaNq79GH6yGzorOoGH48mRzvZenB3qFwOYa6f2ar9wy6GFiWxKAiwd13T0fJYEEZbpgix8xVkmCOphzoBgZyRRyNIEGLKZD3hLrszqjFQi3zWXOtcUsNIFMT9IpYs0IjdTQUF4Vqs5PoG8xroqVzCRZCMT80uEkp3UqHp4DfFOq8EXsYmtf7cdPS+1j/RKdxE8SL52f2UUXVtptTtaYE2cNPessK0SzEvhsisnvmr+u8b38b0ZMCjoV5vuctSRlmMwBP2fDM2rj8ZcmNYXwdUnmRfZvypXza5a5yRsXpQW8hDe0Bi6DP601l3Wq8LZfZHoeuj/owPzXMc40amMAgc8k9vJ6DGdw31zlVkUy/zKaZJ1IdqT2cfaiAeSofuS+ODVX8FaOBLzgkVb7y1HMNxC2v4tT5tJ5IqnDUwj6l4qnXD3tal65FX3lfpBBkaMcTSZxgXNtfOP3jr/SfiXzEtkxxTi2KRsg8nf7B8yyLPgOBH6rLCnDmVXs0BvT8ODXUFw6yb+EjvL4VyF4ywrLhouA5VN2TN+hNKcWWA//3M8JN1uh/odhftHgvHSZEwmmn5Y9wFPftUfwlFaDQ7GLmD3fLtUpAGjufHFpo9icn90KYpdoqwjbd8Uh1+H4Ue69nHeX/DEhCfRdbzniaY5jc11XqS5NtdkXDa2YRd/9r9OkELpY0FDKrhVbpfCEdFc06dtBPkZZBfihB8McoORAWbKM2MG83o80R1zC3xDou7cjPYifuWtSzVlnuDgIp4L2Va2cInfBwh8M2bcWraKTM5cNH8AyGHwG5+kUi+reKnPqRS7lX9UeK1vnpvBSv2v2kOUUEVOMU4CXsk27XnzFeoyV6Nef0KBkiDQDv1/NgvWdMyLi6ajk55/EEv9dzKjzX4zFSkO6HTNOYsh1Kkrm0dVCcL7mT5n31+BwpTTGLYCyF9ynVXXlUrTomsD1a3NuMTGOBCUGDH3lFpPl0BpF+c5/9+Z2rXm0uyhIQ9N4i2bowbAkPoE8Olyc2d2FPNtDqCsTpP9Rn8jSoXh0jUhLReZmd4c/yxuQmx6UPHBZdNbONmqGG3HhPppNFFyLRtnc/mjEUSQhK4fna1k0yPujwPV5hNGx1twHyoWPorOMpx9ZQDD6EsqkehaQjrHLZ+Y+Im9pq4o9HpNZ3Enie4v0/kimW2/y3TZ7t/fLefRJiW5LkDnZl0ZnV8fC5NVD32Ozt1LxYm79lf3SqoUWboiJuW3+x7kd+ZN15siux2UlycuvxpLPyj5bf8z7Knkpwqq7qB7WZuyUoD45Zp2uAziCw8isAjfBJDpArTJOKTJ13i/qoiGNLBwpNb+M2DfrUoNp87Zj4z6nmbhX3o1a/JY0m2Vpx3p4OEkWmHH44h3tVWqI+kexoqOlQolE7bD10EPrHFgAixczMpQ9FKduaCO4hzSljzS2/XYCsT41a6lUxzh+b9YhtEcrD4DgjFIKZxmbPiyJSFW2UEZ9oReJlWQlx4wlW2bLHQvUocezPgsMs8da8XS975HXpI8PHARfEF3qvFnm6ue0zBCNcya6+GqXcuhDTaE6NXOc368lc0+wwroPadOYN61yliaAWvkAua3GUZX4X2dPgXJFGbsAnwEO8X5SizFXpi1+PCtZj5M7n36n7lDy5kGaznl6c8QLYbbcvVl9eFSvDGfUKaoygBOlQyEIMs5vxjHyd8vdrYgfinsMeZyZdB7u8E/CtUtNDqNvcQ+uXslUvrAunN29Km6fC/8CYIpzO5FDQvbhLgquVbbBY1M+BpVZCHT3gf52QE0t+YsZpzdtWxUdVBMSECp1TjkenDW3IVYdrfp1hNwOI9b9GknpTWWxqE48lVdahO5hygnneDNPdxV7cm17cNmEjs2Y+zPklSZdPnqvZtkNGmbI9YfUBvvhmXOq/5JfqazlTq0UtHlwxtuwtrhBvkTnnCrpwfV426SM6SazxJ/I39LLVQcONPiXdF1CYm6cTZ4ajQ3CgGcBHbVx3rnra+v7TO6GPue9v0p6N3BT1/tRsq9Z8n3F84o+t4Xmiw0jHyYiyWO4OoC/1Ru5nR+aBWzOobRVygrDWebsutSZ+uQTFXuoAaUWz4+OSuNFfQ++BFlFo6ldROk64lIA/COBw1T3DdzNswyo7PBi0ct3+wGDcrolPNm2rr79k3NQX+Taalr4DVJU5ckdNrEK8QLZ8G+XxHF4jC0eFHV/JpK3acbqAaBgHFC4ay+djgtxWlGzPqwOOT5orhTigZfNdDUnnoJnhojRawcAgKQFR1UhiNVb4ovjSoNXyGzoTzZ7TdKH1nYkqzd3PgIOx2sGYkeqkj/lt4yNhc+1vjn7niXQO3HGxwla80Pd9VnvM8HCnTOLn+r7gJmzIzj6Krft5dFEaVjyTx3LOI8okpp4+4bAKtB5uctUMxzcDZnICki6xftDQHwJ8KBio+sbyZenyULzTywuDdfDCjPvezxicI036fIPKFDyw18rWBTXf2wIDCxl7r8uk79EYP05SGHshS+aTIJ0pDeAwhgkrli0HAXU5qQBHkmliDa6Mbrbwp4bx8NYNSCbWrSFnZNkPHW3/RbsEp+NPgOGT4GqEpQuJ3JdnZ7teV6CAimgRyZI4t/Wo/WHBKz4eFQkxJxUxexnnrpLjP2iO+neZMgSE5tahsm8wSc5N7FrUcpT5yqqVKhoXZFxQzJcnQgGHnOq/PX0R3TGD6PTtYvvOncDslB9s1FnsoUrk/I8jVdF0Q30oUvNSE2jUKSukjg7oKrxcx0BmAwmhmR6D6cXLK3XMvEL+Awy+3avzu0M58mkViNGc+0qvbE5MpYo8HEjxC5KpubzkyS4OCFNNYTIrHuYUOk47Z6dwgigqVudDXklN5ScV6Z4yYhY2zOSzKpabF4CT7VaFNNRk2exugN6NEktn+0FjO3uCL4CpZxdNEVzuueQkTRf7KciFY+SoVJXoaRxV4FgJAGBxEoDaRQP4n+BZ+EmLKwiYvM34/U6YD+kXfKjQSfgKjbI9KPSP/eiBvfhQVFljM686NDQKySvudAYDrLU0XIqp38Qwi+fpobol4OO0jq2zUCBZVX9slABjb/6iH/BsQ5Ychttya0NqRUiLMegSUq9BDhZb41gz8eNfFyXVGIwdUEfdtHv/4qE5NnCnb8pVl31MMJnTnSs9y/LYtkzU7Qd+Zhrer6i0bDLIlL0HChaN6RRPsbAp1yh2Qwb8u2BOMi0u75bn1QYyvbhSMLJm+fUUnEBX9QRznNhy7Nk+34dgDdI76b4gazPbBzR14MgpRSdJ5kftbaG0VkK0IYUX1NsLIp7eDtCBbCBBD9YS0lQNFq5ECFWTiQwaEBPZeS6n9NlXUGfrkYfm1HY8dIpOTvB3S66gIXr2JEx2oGLIR91jtErS8LWSVmAv5+DCtGeueiL2tXtvBkJIUR4tGDFQw4AQsNoxaN4Hel6Abn/nay34QvSaFn1EIhZww8efbr4O5X6l3mTVn/C3qfln5gankZW4NyXxtzP949DXUyJXiwGR9vm9XO95nxEQs5eebin/4jQWYOgQuRIau0W6ulkn8/77HdABKbL+e4cR2hKJGNLk9A0IksKlP7w/NmIyqbIFa10lTpxZx/abq/pp+3ZkFvncV4YpReUjonhq3i4voxWzgTsApdyBC4+GHk1vdsE2hKC21Q5qv2/e86RxLgmNenH9acjEyRHVm9sf3YvQhT69hOaJjd+RpgQS+LRYCc3rzwjT2wuj5KcyMoND1PEfuZVrYryI3TQdWz24LTHS2npkWtSMcgL+lSQfUjRKXvH8+DgqrJVTCSktBr8CRNgQFsL9kl/6Ld7O3AORK9LzJ4m/98vqCCqcixhv5mxUZ3NIDFDa9/SCFoTD5l2dXOWcaAyTeCNcfmwZ4BCa9YllcbD6pVoLWD9MuQBqDzuvfde5aCt8/7tww3Zk2ppR4pYOrcWmzr+dzW3E90NZfnbx8wAgyaL3T1kfdQseGTE7N8Am8t3SRFfbWNT7sEuc/hLiDj8fMIMQ6VqeXzb/r/Nrbd+IRDN/CelTxvo7gp/jQwyjoFybTqvGpZ1eKpy6yTwhon0VB0EH7WMTQta3YkkR1XPFAPaTtkBOOWczhTcq+3+EKTPCXAshvHLrceFJ5LHTY7yLB0o6NadA65A5hd4JpLhVhr5lmuMvHYjfcXq9EqKMCG9c3fT6blG4u1v50Y+rEvnLVRUNVa3Wr/p1kQABclTDNq8FbZwQsrBBq84vkak/QYWltfSveodi5WHaZ7NyYiDVCXpRdMwIu9VO4Stqs2C9Bpvy+BU5gZhzOEQnLahQEzQwLBRCIX3FjsLo1gZoyODsT7GqneChZeNPPzJg1lGM35Ayy/I0YZ0PUeqma79EawEl8qzuUspCMCNEFg810hKGDVl9BXnTatWbOxnIPSra3dfb28OWHAuYQ1T2ZxT7tvLtDl7H34tnn6cac/YRdoLlJs/2T5qz23hC53eFanNO29XzGS2QaMZxX2yTQ7m0L1orbZD9J26FRDtIj0qw9udqBnAgpjMsDlCrOsbC9k4FLT/wGFyU0MP7ZtVCVeELwed1dbLD8PYJ1BK1IQDBKnJpYWDGICHzft7jcI+eZRgGvSvSRWUYTjIGHDANNA5O0UMcB5XJJEnnpK77b48nMj6ZnqKQbwytEQaTdWU+ddywAaKI1+I9EnrVXaOY+H5C+8g8/pKY8wu+aEzKfCcYAUoS080oCqMnZ4heT2l21Jka94SXbYAKesqCIE906qzA2SBj1q3JvnjF75vM0H7XMUJbmZPKnYwaD9aaiBrnZ1gn4ttL3Hmarz9rYjvhxJDes2Yq+KZfWc7Aa6DJeVdok9U3FClZfTTHD6lVlHb8e13X+C7+Uc9+LV059101EWxd+rnZAcgwgMiy0Ibp1f2lrb032NVSPzfoWmShwbVBElShI8/U8WgNRhNDeM0jvF/ixNy47Oddgsr4osYVbhfzE6dopUD8lzU2UomrM8QjXIIW8Re8TYgoIfkoHzzbbwv0INvvjXd1YhbI2yN4dJKmxbJGnwqwthbB91V94Xstb0Hkw2B/v6w862Sou+N1tiBJoZY41kjM4428PyLOFGlMZ6Kqt+C0NKgN7DHGWPmJJZoSDZzWh7Z+N4LPGKB9JBitbg4hZ55xB526uuuYTM+gmgoAL0/8ui5AxQPQXshWT4GTUpLEs2uTMSFs+j8oKjTom7eJQJYek0nbeuqwsoRW6msoo1DdmTAj6ShgwnS9Mt3uXmhn3GikoPTp3N/kUelJzcDkz8D7zjdzAGCjvFIuyMvoyy59mRi1eSUmXTqjzuFdo01mhl2yVDtM6qUAAqhg1wvxJ9lwPXpkl2SJsocMvlhw4VB25iZ8hsXh9viY9QWuz9oa63HRj3b8+zSuMCh+KL3J+DTkJneBD80u/ZCDYL+SQ+65GzxEI2hKaDhy/6L6M2IoLbtK8GceR7/i1QeQPEwfwNtBnoI3iJEzFyeOg34cUcbbAaP54mNCP5R9YYAYwj/4VXTEZsQmm8I0rmYDAllg0fnRYAILebWB1U+3qcGFl//jYo2oRd6dQy8Nj+xgdhuNnKIqhV1+D0T7qCQVJCnb114qL4vig+LIgrIV6irRRrCfulc4ZTn9urkIcP4z49X1ipklUTYxJoo9ezmAjpgzer8V1fwu6AKnMvU2VgE3KKxDc7e66dJsxa1J1TOfUg17klDsQkoSqLhX3DRLO/BsOu7CQ67fU5LcwYoU1EitKMENMUhCvRbEstu8h9pMJPoZSyCSqTYUQqJP5ni6NzZTdXZ1KnYxT+778+ie+RLPYR41Ku1BhqTBmcnbRZUyS3Fi2yMd+YghkNnFH0M4N7zNYXhDTrJwQZ9vvtAHLyAeabfjFp/B0K324nrIZS18Pr+qm5hEfbtA2wGvmyyQAn5ribzWYnKDpgr/QTjihaZY5Lq75sgGg3Fhm2WmL2mZfbQdyASe/wuLem+oM7JDCBTjPiLLvaJmjBnXW+jt8w7EZvE7CQhAE/Sl+Mt/6sKur0Z+bTUjWOsz4jR5dR8DuBVhQeYnElKY335CI1vpe2sJKHkbtaSCSfXNJae+hlJzaGonkHK8U3jPTFfaSEzVmoKTdteuBDqy77y0qLWRD3ijW1qPREP9fbZE/bSsnpT25uj+JYfReWMRPhvxZQcPzIcPswPYeM0q5Voc6ssnuh97EjKVanUCbF2Ux4UbkELwbNyK6hS+jrrMtt6R1iwdbA650HOZBAbf1fAoBrg6FkNQmkkgwn/VVhfW051Nk1bh4oexgOX5e3wO7lEw7JlGa88eUPREf98YawlUWtpJ+P7k4hgxodZG8oQv/mEZT8II05AWxcwjqJJzAKMDAKvQFv+cJwN9zm3NclmYFyWPgfEpkKzEi6wzLdgFTgI07hoRpJ1XN2Cxix/mWdUfex1DAiyDQCVyG65KCzmHPhoujYBjQi9WR1wNV3bgBBwTSt6xo9dqYVmJyDeMEAoHqowhJ940uo+875tbJN4/xMbCnCy9B6nN3y5GkMo15qyb72kc1TEImILfNBcXn3ZhSv7nmGCKaH53xmFqOqSr0AoDCJUb0KLOtINZgwDd6k5mmbGquwjcusLXJq7jU7B5jl1iL3VRBop25OVO+NZcEhMwGuw9BLhYMIRdpuyg1RNk/vlNVvQgmk+4VTPQQPEXuI33CJ5l+LAjHO9iUE9eQgA7TzcwrhmkquH+k2G2Y6PW5eUup+qDVzeKY2lEV1b5c7zlGoPg/t8h1eCtde6X7hgj3SjH+l/zLOutM3cPkGuInfJz8zr0GmX9m96VnvMaarIu0khSW1WV3HxnoMZXqTqFOJy762OkYWeo1W8/pcshhV7TNdqWTwQecxXmTRHT3ZSKqSnkH+TI9cyE+uARb4956hLnNDXm/aqoS1Bm3itatO9RWb14pzetKgtjsIENl9gQsWxMPW1q0NN4jV3IpQtW3QlmXuh1wGYSbCwDd4OvIvlZui9FtNVgVcu/Sp4Xx588YneKMthn1bSQRUktb1nzdJfZ4jFYBvmWibeEFrIOu1nx6rOpH4Y51uNvksx09vvXZwrgB3V0fER9IK0SZDHz72q7jHqNN/bA2SEKQrZMIsjDQVAG+Xxrf4DlsrsTmXJ5y6hXTusWk1b6mr1CcQ2G4QoBRgRY2fRBm5Bd15kAniqaoTBkeoFGZb9CR1LRALYsNCjjMvQH4ZEyOt70bENKIFWjcZpbYLoVYRJa5X+G26a8N0PqmrvFt+cGVpBLA1uBq1HfuCpKNM8HXJtODGDb1EurzmdJ9vTKGpHcLBu4YmVNYY4/VfiO9Ui1wnnoTTTy1qymuFSA2e9tIW1NIk9TFsGnfO/a7Tz28cuZPxeiRyF4hmj5G6FbIh4UKXymRyVnCRw79ErLTYiMa+lK9J4A4112kn4vpdiGPm+hO21EZZkEVd/g2F4+NpfYjpE4H+DpFnHB+iZBW8yW+ElgBEfbN8yiISJzZ6+nYd6SidAh4IuZliVtMP+k3iE+oehiJsOd2OZoQnGlgPtRdCtfT0uKUppra0vNa98SiPPq4af4v4BYYvbnE8WBiuKE+1o7bxhh9D6ddbov1KKhbdJHFDxHijWXREUc8gLluj+5Pr9XdF/kdaIYB38foNyUDZg7ILVK6K28aa4V7n7SP/Iyg5wYt3/+iVD+iGIIAV4x3i/HVDvzzYZzMedz86tstvXL2A9VGSowiYNDc185cTXA3ZRxNV7HF11QK9PAkvtg4Bl77ir6HoIY+DyJGDezSt18nK5K/J36O4LLbwYa8UKaSjBXzekCFPpxaM8OU8bRuv6dHawMLM9ghnmOWh2BTK77Ypbh4z3FpgFoufZyPpoVTmUoqGLfq5v4Gp9HzVDv3LXA+d4U5iP1zncx62Xf8eE53ijAS+/xiDGQhClm/BwGZwYxzIrzo8indERTTMndbUMeLgLc+1/Q3RdGSS1gEaqwAxa7yzY5a9tfpqxrkguKgAOFSmaqd2uyDryJmuGMFph3vSc6eXCmgkHlEy4jyza9gdK7XmGjr69K91oZ+a/l2+jeJLTCfMxiPNVmRky0xgyyoUkqSCOuIJu1M+iyDV82/S8+j03CEoDBliNKqiKIh6Y9fNJuurxJCbEsViY0w8fH+BypERyijQoxfAmDZCCDVb5oVEEfqTfJjtLZk1Ks/ZZpeYrLVQyqhy3QFNvZwvmkmh3qRoqWl7tx6rRgU4DWXWduS1UCegUtUAUc91xjTfnhEfhQqeTlDlh89qT+4/xxGZsSkKxVlfUzt8hqLJwSQbGaCzOt/y/lQUoF4P4/by2kzHo31Erf9+o7V536SL/zhq1CJZ0bnJ2FJUBkMz5nG9om4LuYFJ2XYozpGW+T0bCLq9+Sv5ej1tt1c3WW6HDwpGUkfoZKpKddviJ/+IYcWVMYKyAWsidkChk2rSd6Y4M/kWIKaDbmCx7frni/93iSRJNSxHsfZgbds+Nh8LIXuYfaFw5tyNtVWQYspNqrhYsHhAHVyFF8dA3fcNqd8KWnQ6f2HqjRnHH5Vj0EbPWN+IXwGzQrMhG8HeRagCOjnRNk/WXBXCs5cRI7G1p7MXvbRTKWSKUGIBWrVdNXiIX2Rcpl14+luL9wXIObCU5osVGMFv/nfwzWLrnf2KTnkPtTJF/VdRimPASToHW3Iar6BS+4FVP6hx9zTMpMzBI8k/pQh2OxiM859oZOgnLrBqs8+oqLsAKny/riMP8Nxhf+Ys97vUeXljyrvfbAh1eg5LLZeBLu2hTG2JmGods44+OOOg/SWIHKX/bXExCB/HcW0pLaaP2NJccifwlXyMx7NNIZ61dV7mj/5s6AS5AXXdbwiFXb9ZF4I2pxCNEDrKPvYOA+cTb4Hlj33kPaVRmReE3AAwvpAVtmRI6ftC/ZdtJV0R0wIoHU0fs+pAg+/JCLGH64mcNm7jriIv9g7BqAmfSGpV4a6m8ccU37s1f/05GBWsxJLNAkFl7MawE4neM6mA0lttq5Bo3XQWReKIEFB/Z3QbHvE2Qfc5hWN3LEt/T/lR8O2zjziV5xnE6v8Byr3RmHtTYz3jPBUgh7hYK+JTpLMmetWNFQ2v2mPXCcDmShqyKtUSWGVx2YVr/Cxhr1w6Wxs289tCFXEJ/CiVAHuctweBH6AtOW1TakYxJdRPqkH+41FldCnS7MMOVGV93nbZ7s8W/Jvy5JJPH4bmghF4lXUt1RLPfdo7VPBmD+lm6iPMs3eRCgKIJUg/CJHFFdSKtuLpEzLowYFw4+qhjOyR4cmIUtybO2VnNRkArfKeW19BfTFiCqDhPxzT34TdzNjSExO5rOaDQ6bmisVa+FXXiLgwKtT8d9QnMI4G5uVI2xHC4OHiZXxa5mrhhWfioBWhfe1kAx7PctH9Aqfprdi00fMuH2QSb7QgxfhjSvENJgH9aq0DAkp80cTNB5Ig4Q2e59BjfvwUE0p8+4HnkaDjucLvoh12d7t9r40irpvFRpCaGoV6bY0djriE5tYf9NixI8QZauEZvhWubjGhyZPgaZPuw2nCek6VkRZPnj0ANd1z9zSrnDhtfIvlXipJU7twkfEsma0QUBJmvtNRtOF09sJrEsk03h81/RsI/AyK/vAy+QNqXtyNoenx9dPGUDmachyiPbSdtYP3dnWqiJQeFiznryjABM558sz1UVNMLxikV8lRynqe5jVzDLWzBadcuHO+Xoodf+BP7O9vi0c1f00oor9hokhdaSQmspQBcz4nbVU7IDrigZJ7A87/aHtKkfRs4tfX8l1xatPgNnF1P0DkdA2bGjE8CHVJSBuJ75lIX+e2vE/UgEISns411rXcYnUNzbzSGzv2eTkhxX/LQgCbJhVGLKk6J27ocKSzt+jFHJabkrdLHd0lTlA3GT6io6P9C3s5LMIKfUCFGsPLiRJnPcWZZGnJ0C6g+VnS+PLS4m7m2hFmofFqZFjprULGgcIhLNRBZshpfAtn01Z1c6Z/NJCddTjaODg5Jxkjkw6Vqy1mp6bGQ41wOT5iPramCjDjS7Ykowsy7ed1Cil9+XsFSZlKRcAgQgggTQSBTdO28xtW9nZFHC0pdvKzDfPqXKG0bDlqBzuEgLX0k6AoavnjOqHkiF+XGfv/z75AW2GqoIARwQ0OZ8EYmkws0CP1S8eN4Yf2tn34qFUYNww3gdN+1FxcbyKhlW5P+jKcb4l26B507Ee9jh/RqeGPWdX2vNw2P/QiDZxfwEfDRVKjn0gkfkUOOYVoLInevZRRlzUKQmZLqPBxis3l2O3vbrIT1kUJH1P+yFI8tz+ED4WZsh0WCS0hNgb9YQOoDH0QWgyQl/G1TW1EM1A2g6S4IUBJcZ/WsX5BupY/IJTSrUQmz3R34P3FTw5bPm9CQUilMvMutxOeJd1iKsXnSmIJ6GeXr0wG+NlM2CxXARojWf+uqCsvmS/wyepme+Z2bbWF5m6KMGx6B/jsdwQNZ5CzKgpuxtMlvGnJ4dGlUs2I3fSznd0jFykaCcnHMqNMkq+/DRWgRmcBnMmmYTAHAkXDQP6wPcTXH/GBtHH0BTAB6vnYqZSn9GYntuyTKLtu/xHru8mip0OMl04GTghxsGw8uN5YL7br97oYghdpO3sVaQJxNN4BRFJyGiTjZM2vqMjoPqd9iN67qpMQ3Wj4N6Ves1eQ6taVV+Y/2ifd1kyTUKUFpXMY2pm08bTW+hH9OcJWsczzaD46gl/t6gNxNROqqF5qeD+Ji2o5GEMf8GhQjYTWfyLOzvyBvY5iFNmbB/lE/D9QXiJCRVyqybuyQD3SLX+X4THxeg3I43A2VgU2ET3C2Y+6A6D3yuKz1Ko31qi5gPIdoO+16FMx7sIy0D9S9bMFaCrFdQoLXwXNQ//OKjdQnmC4kijwyR1imVq/Z53MPEyKoO/M0jR4v6URzf4GfQQ0rIqsSIA2BnJpxVzZebKhnfJ1geIxWbFWil9Za5GGi2On7HLpfhRsBJGFr3pOyZ5VEFhUYN5/3DBmbx9RbHR15aXD7CFL0I3vQ/9ScgQXG254WKCLxtX+vWxLc5WU1R4aZzmZodoPZCLf0zDkTn278UGjmAuG8YoK95SupB0Kw3vExRkRrOWH2pwslFvo2IaBAyFV1xuXrs9n41mB1If9IA1y61cH8N3fZNtiy1snJMStFxZO5trZKo4x6ps8HagWCK4pC22svxcU1RCYGRrWyWmA8TkA8vv1APOImNMxgRG4FqBOOygSFSbNRopFQWg3FbijRJm877UF1BSsUuUEH1cyYS9qFTsj4l6DNjeAaTur+AptEThC/7JbL3dyDyjgr5PCgdeeUQ+kgbX4FKdbuMmAv4EgSWoVCqgB0ktCPiiYr7dvz9Ks00OqCIL9Re86NLbHDrzOyBqSZ66bYhXZL2bmTk9IYXgRK1Els2hllnzPPN+eH3YpeTI6cTc/05mrJwaExDZV/IbinDhqApIi/OCDfUWs0YbuUsnWtTEtpk4QLYvvv5czE/1MDXMkH75wSwS06s7Q1H6Nnk5RcB5SfP95LwHe33veMblg/AZGzcnowu49onw6HQ0zIPfrAPA8Fn9VZUFkmu3Kxhakuy4Eli8M8S9KTIZ0MgVzrLWL+pvrNEzuTUYIP0WnUxD0DBhitjks1TK0qWVlGrVs6xesxZQzduzBzVrt1xoDaTa1aD/MO6p2SaiOeIKB9KscNnDhuA8nkdpWLqGbVgzO9mycREDDytOjlWZDKZ2VTe3hJxXQyXtscJfcGt49PaYtiXjZR2zHcuK0S9w/EAjduV76LwkbNi2oOKMRL+kElMha7BYIjO7siralc8foUFJUIx/chY+EuNDcbRS2Oz7BKJKvVq0UcRZgpsmIxkIpIhdIurDAYZI/c1jCKnE20u7afnGxEQF+kpepTDi7AC7i1FohKfPC92XcrS2FnyObxy5RWxurwX3YZlTJfdVNQBYtOJCz6zDrDZDMf0fYdJApTKCSp8d2zW5V80q+AiwPXy9GBzJxbGCK6gqNx9ZXNsRKY07zJloT+nqTkMbOVGahbf6/OiqGvTPd8vmLYuL+Omdg1+mYtrOwrzdUMyhNPsgzlBmff3qYtm3Z+ulBPGK402U4tVg5JeSpOmeTmqbar1iU8UMvJ+j9e8ncIMm54km7c1ddGAgxgjdx+9dAwlpvZnPRGbhIpKomMx8P7iEPAW9kwnLBO/1ivLy+TM8k+fq6SYW7W/yGndGJs3BnJTQ0uSmiG/uwKKj8+mfLKvWGtYL7Vn4tGyr5dbDzhzm7Z0SJFZ113JFTm0Oe53jgvaS3HA4zbZRjb4stxI5lvx84IowWfd</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述临时对象处理方案、程序优化等（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="性能优化" scheme="https://shuhaohwang.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.4）图的实现-邻接矩阵</title>
    <link href="https://shuhaohwang.github.io/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-4%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/</id>
    <published>2019-08-16T03:57:14.000Z</published>
    <updated>2019-08-16T12:29:48.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵"><a class="header-anchor" href="#邻接矩阵">¶</a>邻接矩阵</h4><p>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。</p><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"><p>该存储结构，是借助线性代数的邻接矩阵来表示图的结构。</p><hr><h4 id="具体实现和思路"><a class="header-anchor" href="#具体实现和思路">¶</a>具体实现和思路</h4><ul><li><p><strong>邻接矩阵实现：</strong></p><ul><li><p>思路：邻接矩阵的实现是要借助二维数组来实现，在C++中可以使用vector来代替二维数组，从而实现矩阵。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edge<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirecter(undirected)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加顶点/获得顶点总数：</strong></p><ul><li><p>思路：跟边集构建一样，使用vector进行存储顶点数据</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    VerTex.push_back(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_Vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VerTex.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建邻边矩阵：</strong></p><ul><li><p>思路：因为邻边矩阵是一个NXN的方形矩阵(N为顶点数量)，所以在构建邻边矩阵的时候，要先根据顶点总数来创建代表邻边矩阵的二维数组。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_MGraph</span><span class="params">(Einfo&amp; definfo = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*用来防止多次创建邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N_Vertex = Get_n_Vertex();</span><br><span class="line">        Edge.resize(N_Vertex,<span class="built_in">vector</span>&lt;Einfo&gt;(N_Vertex,definfo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加边</strong></p><ul><li><p>思路：因为邻接矩阵是一个二维数组，所以添加边的时候直接把顶点下标当做邻接矩阵的坐标位置进行编写即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp;info = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*要先创建邻接矩阵才能实现添加边操作*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())</span><br><span class="line">      Create_MGraph();</span><br><span class="line">    </span><br><span class="line">    Edge[i][j] = info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">        Edge[j][i] = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码"><a class="header-anchor" href="#具体代码">¶</a>具体代码</h4><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/2.png"><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">MGraph</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;Vertex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edges; <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//标记是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点总数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Vertex.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_Mgraph</span><span class="params">(<span class="keyword">const</span> Einfo&amp; definfo = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size()) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n_vertex = Get_n_vertex();</span><br><span class="line"></span><br><span class="line">Edges.resize(n_vertex, <span class="built_in">vector</span>&lt;Einfo&gt;(n_vertex, definfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; Vertex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo info)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size())</span><br><span class="line">create_Mgraph();</span><br><span class="line"></span><br><span class="line">Edges[i][j] = info;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edges[j][i] = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Mgraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : Vertex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Mgraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"></p></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接矩阵&quot;&gt;¶&lt;/a&gt;邻接矩阵&lt;/h4&gt;
&lt;p&gt;用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。&lt;/p&gt;
&lt;img s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.3）图的实现边表</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-3%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-3）图的实现边表/</id>
    <published>2019-08-15T13:26:14.000Z</published>
    <updated>2019-08-15T15:38:47.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边表"><a class="header-anchor" href="#边表">¶</a>边表</h4><ul><li>边表是把图的顶点，和边分别用顺序表进行存储的结构</li><li>这种存储结构是最简单、最容易实现的图存储结构</li><li>缺点：如果边的数目过大，会使效率降低</li></ul><hr><h4 id="代码实现及思路"><a class="header-anchor" href="#代码实现及思路">¶</a>代码实现及思路</h4><ul><li><p>边表结构</p><ul><li><p>思路：因为边表是通过两个顺序表分别存储顶点集和边集的存储结构，所以在实现时可以通过创建顶点集和边集的结构，其中边集要有两个顶点在顶点集中的下标数值，和该边对应的权值。其中顺序表可以通过C++内置的vector结构实现。</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt; <span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*实现边集结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="comment">/*边两头的顶点在顶点集的下标*/</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        Einfo info;<span class="comment">//用来存储权的数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*边集构造函数*/</span></span><br><span class="line">        Edge(<span class="keyword">int</span> i,<span class="keyword">int</span> j,Einfo info):x(i),y(j),info(info)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;Edges;<span class="comment">//边集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> undirected;<span class="comment">//用来标记是否为无向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*边表构造函数(默认为无向表)*/</span></span><br><span class="line">     ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirecter)&#123;&#125;; </span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加顶点</p><ul><li><p>思路：直接通过对vector结构进行操作添加即可</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;VerTex.push_back(vertex);&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加边</p><ul><li><p>思路：跟添加顶点操作一致</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;Edges.push_back(Edge(i,j,info));&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="代码实现："><a class="header-anchor" href="#代码实现：">¶</a>代码实现：</h4><img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/1.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* VT 顶点数据</span></span><br><span class="line"><span class="comment">* Einfo 边数据类型(权)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">Einfo info;</span><br><span class="line">Edge(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo inf) :x(i), y(j), info(inf) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt; VerTex;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; Edges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//判断是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*默认为有向图*/</span></span><br><span class="line">ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加顶点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; VerTex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加边*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123; Edges.push_back(Edge(i, j ,info)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载运算符*/</span></span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> VerTex[i];&#125;</span><br><span class="line">VT&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> VerTex[i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_VT</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> VerTex.size(); &#125;</span><br><span class="line"><span class="comment">/*获得边的数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_e</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> Edges.size(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : VerTex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"边："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="string">" "</span> &lt;&lt; e.y &lt;&lt; <span class="string">" "</span> &lt;&lt; e.info &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ElistGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.get_n_VT() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.get_n_e() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>实验结果：<img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/2.png"></p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#边表&quot;&gt;¶&lt;/a&gt;边表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;边表是把图的顶点，和边分别用顺序表进行存储的结构&lt;/li&gt;
&lt;li&gt;这种存储结构是最简单、最容易实现的图存储结构&lt;/li&gt;
&lt;li&gt;缺点：如
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.2）图的抽象数据类型</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-2%EF%BC%89%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-2）图的抽象数据类型/</id>
    <published>2019-08-15T13:05:08.000Z</published>
    <updated>2019-08-15T13:25:09.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的抽象数据类型"><a class="header-anchor" href="#图的抽象数据类型">¶</a>图的抽象数据类型</h4><ul><li>ADT Graph</li><li>Data     V是具有相同特性的数据元素的集合名称为顶点集</li><li>Relation<ul><li>R = {VR}</li><li>VR = {&lt;V,W&gt;|V,W∈V且P(V,W) &lt;V,W&gt;表示从V，W的弧，P(v,w)定义了弧的&lt;v,w&gt;的意义}</li></ul></li><li>Operation<ul><li>createGraph(&amp;G,V,VR)<ul><li>初始条件：V是图的顶点集，VR是图中边/弧的集合</li><li>操作结果：按V和VR的定义构造图G</li></ul></li><li>DFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>深度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li><li>BFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>广度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li></ul></li></ul><hr><h4 id="图的数据存储结构"><a class="header-anchor" href="#图的数据存储结构">¶</a>图的数据存储结构</h4><ul><li>边表</li><li>数组表示法(邻接矩阵)</li><li>邻接表</li><li>十字链表(有向图)</li><li>多重邻接表(无向图)</li></ul><p>– (本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的抽象数据类型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图的抽象数据类型&quot;&gt;¶&lt;/a&gt;图的抽象数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ADT Graph&lt;/li&gt;
&lt;li&gt;Data     V是具有相同特性的数据元素的集合名称为顶点集&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.7）左值和右值、左右值引用、std::move()函数</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC%E3%80%81%E5%B7%A6%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81std-move-%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/C-进阶学习总结-（2-7）左值和右值、左右值引用、std-move-函数/</id>
    <published>2019-08-14T18:10:46.000Z</published>
    <updated>2019-08-15T08:24:27.816Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述左值和右值、C++11中新版的右值引用运算符 &amp;&amp;、std::move()函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6-1）图的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-1%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/</id>
    <published>2019-08-14T16:44:55.000Z</published>
    <updated>2019-08-14T18:07:05.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图"><a class="header-anchor" href="#图">¶</a>图</h4><ul><li>定义：图G(graph)是一些点和线的集合<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/1.png"></li><li>图中的点叫作<strong>顶点</strong>(VerTex)</li><li>两个顶点的连线叫作<strong>边</strong>(Edges)</li><li>Graph = (V,E)<ul><li>V：顶点(数据元素)的<strong>有穷非空</strong>集合</li><li>E：边的有穷集合</li></ul></li></ul></li></ul><hr><h4 id="图的分类"><a class="header-anchor" href="#图的分类">¶</a>图的分类</h4><ul><li><p>无向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"></li><li>每一条边都是没有方向的</li><li>顶点集合{A,B,C,D}</li><li>边集合{(A,B),(A,D),(C,D),(C,B),(A,C)}</li></ul></li><li><p>有向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/3.png" title="其中B为弧头(Head),D为弧尾(Tail)"></li><li>每一条边有方向的，也称弧(arc)</li><li>顶点集合{A,B,C,D}</li><li>边集合{(B,A),(A,D),(B,C),(C,A)}</li></ul></li><li><p>完全图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/4.png"></li><li>任意两个顶点都有一条边相连的图叫作<strong>完全图</strong></li><li>无向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)/2条边</strong></li><li>有向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)条边</strong></li></ul></li><li><p>网</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/5.png"></li><li>网是边或弧<strong>带权</strong>的图</li><li>无向网</li><li>有向网</li></ul></li></ul><hr><h5 id="子图"><a class="header-anchor" href="#子图">¶</a>子图</h5><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/6.png" title="1和2是3的子图"><ul><li>1和2是3的子图</li></ul><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"><ol><li>如果边(V,U)∈E，则称顶点V和U互为邻接点(Adjacent)<ul><li>例：A/B、B/C、C/D…互为邻接点</li></ul></li><li>边(V,U)依附于(incident)顶点V和U(或边与顶点相关联)<ul><li>例：边(A,B)依附于顶点A、B上</li></ul></li><li>顶点V的度(Degree)是和V相关联的边的数量，记为TD(V)，对于有向图：有出度和入度<ul><li>例：A的度为3、D的度为2</li><li><strong>握手定理</strong>：边数(E) = 各顶点度数和/2</li></ul></li></ol><h5 id="相关术语解释"><a class="header-anchor" href="#相关术语解释">¶</a>相关术语解释</h5><ul><li><p>路径</p><ul><li>若从一个顶点V<sub>i</sub>出发，沿一些边经过一些顶点，再到达顶点V<sub>k</sub>,则称沿途的经过顶点的序列为从V<sub>i</sub>到V<sub>k</sub>的路径</li></ul></li><li><p>路径的长度</p><ul><li>路径上的边或弧的数目</li></ul></li><li><p>回路(环)</p><ul><li>起点与终点相同的路径</li></ul></li><li><p>简单路径</p><ul><li><strong>没有重复</strong>顶点的路径，即不含回路</li></ul></li><li><p>简单回路</p><ul><li>除起点和终点相同外，<strong>没有</strong>其余<strong>重复</strong>顶点的路径</li></ul></li></ul><hr><h5 id="连通图"><a class="header-anchor" href="#连通图">¶</a>连通图</h5><ul><li>在<strong>无向图</strong>G中，如果从顶点V到顶点V`<strong>有路径</strong>，则称V和V’是连通的</li><li>如果对于图中的任意两个顶点V<sub>i</sub>和V<sub>k</sub><strong>都是连通</strong>的，则称G是<strong>连通图</strong></li><li>是否连通是对无向图来说的</li></ul><h5 id="强连通图"><a class="header-anchor" href="#强连通图">¶</a>强连通图</h5><ul><li>在<strong>有向图</strong>G中，从顶点u到顶点v有路径，且从顶点v到顶点u也有路径，则称u和v是强连通的</li><li>如果有向图的任意两个顶点u和v都是强连通，则称G是<strong>强连通图</strong></li><li>是否强连通是对于有向图来说的</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图&quot;&gt;¶&lt;/a&gt;图&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：图G(graph)是一些点和线的集合
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&quot;/2019/08/15/数据结构学习总结-（6-1）图的定义及
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14.1）哈夫曼编码表的代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14-1%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/</id>
    <published>2019-08-11T14:39:41.000Z</published>
    <updated>2019-08-11T16:38:48.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码表"><a class="header-anchor" href="#哈夫曼编码表">¶</a>哈夫曼编码表</h4><ol><li>根据构建的哈夫曼树，左分支标记为0有分支标记为1</li><li>通过二维数组保存编码表</li></ol><hr><h5 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h5><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> code[<span class="number">256</span>][<span class="number">128</span>] <span class="comment">//存储哈夫曼编码表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Codeing</span><span class="params">(haffmanNode* node,<span class="keyword">char</span>* temparray,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*处理空结点的情况+递归出口*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*当到达叶结点的时候*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node-&gt;R_Node || !node-&gt;L_Node)&#123;</span><br><span class="line">        temparray[index] = <span class="string">'\0'</span>;</span><br><span class="line">        </span><br><span class="line">        strcpy_s(code[node-&gt;data<span class="number">-0</span>],<span class="number">128</span>,temparray);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归获取编码表*/</span></span><br><span class="line">    temparray[index] = <span class="string">'0'</span>;</span><br><span class="line">    Codeing(node-&gt;L_Node,temparray,index++);</span><br><span class="line">    temparray[index] = <span class="string">'1'</span>;</span><br><span class="line">    Codeing(node-&gt;R_Node,temparray,index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="技术小结："><a class="header-anchor" href="#技术小结：">¶</a>技术小结：</h5><ul><li>temparray数组用来临时存储字符对应的哈夫曼编码，存储格式为字符串</li><li>这里采用二维数组来存储哈夫曼编码表，第一维下标为字符对于的ASCII码，所储存的为对应的编码</li><li>当到达叶结点的时候，在该位置下标的temparry设置为结束符，意味着一个字符串(字符编码)的存储完毕</li></ul><hr><h4 id="编码过程解析"><a class="header-anchor" href="#编码过程解析">¶</a>编码过程解析</h4><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/1.png"><ul><li>第一步：<code>Codeing(haffmanNode* node,char* temparray,int index)</code><ul><li>根据哈夫曼树构建完毕的node数组</li><li>定义<code>char* temparray[128]；</code>index = 0；</li><li>parent4 拥有左右孩子且不空、temparray[0]  = 0</li></ul></li><li>第二步: <code>Codeing(node(parent4)-&gt;L_Node,temparray,index++);</code><ul><li>index = 1</li><li>B无左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>，temparry[1] = ‘\0’</li><li>code[66(B)] = “0”</li><li>return结束此处递归</li></ul></li><li>第三步： <code>Codeing(node(parent4)-&gt;R_Node,temparray,index++);</code><ul><li>index = 1、temparray[0] = 1</li><li>parent3 拥有左右孩子且不空执行左递归、temparry[1] = 0</li></ul></li><li>第四步：<code>Codeing(node(parent3)-&gt;L_Node,temparray,index++);</code><ul><li>index = 2</li><li>D结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[2] = ‘\0’</li><li>code[68(D)] = “10”</li><li>return结束此处递归</li></ul></li><li>第五步：<code>Codeing(node(parent3)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[1] = 1,index = 2</li><li>parent2拥有左右孩子且不空指向左递归、temparry[2] = 0</li></ul></li><li>第六步：<code>Codeing(node(parent2)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 3</li><li>parent1拥有左右孩子且不空指向左递归、temparry[3] = 0</li></ul></li><li>第七步：<code>Codeing(node(parent1)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 4</li><li>C结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[67©] = “1100”</li><li>return结束此处递归</li></ul></li><li>第八步：<code>Codeing(node(parent1)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[3] = 1，index = 4</li><li>E结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[69(E)] = “1101”</li><li>return结束此处递归</li></ul></li><li>第九步：<code>Codeing(node(parent2)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[2] = 1、index = 3</li><li>A结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[3] = ‘\0’</li><li>code[65(A)] = “111”</li></ul></li></ul><hr><ul><li><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/2.png"></li><li><table><thead><tr><th style="text-align:center">code[下标]</th><th style="text-align:center">储存元素（编码）</th></tr></thead><tbody><tr><td style="text-align:center">65（A）</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">66（B）</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">67（C）</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">68（D）</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">69（E）</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><h5 id="解析过程错误小结："><a class="header-anchor" href="#解析过程错误小结：">¶</a>解析过程错误小结：</h5><ul><li>函数递归时传参是形参，即index在递归时自加了。结束该分支后返回上一个函数时index值还是递归自加前的值</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码表&quot;&gt;¶&lt;/a&gt;哈夫曼编码表&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;根据构建的哈夫曼树，左分支标记为0有分支标记为1&lt;/li&gt;
&lt;li&gt;通过二维数组保存编码表&lt;/li&gt;
&lt;/ol&gt;
&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14）哈夫曼树的构建代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/</id>
    <published>2019-08-10T17:16:45.000Z</published>
    <updated>2019-08-11T14:37:32.852Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树的构建"><a class="header-anchor" href="#哈夫曼树的构建">¶</a>哈夫曼树的构建</h4><h5 id="哈夫曼树的构建步骤"><a class="header-anchor" href="#哈夫曼树的构建步骤">¶</a>哈夫曼树的构建步骤</h5><ol><li>根据权重进行从小到大排列</li><li>取最小的两个构成一个子树,并使两个的权值相加用来代替这两个结点</li><li>根据这个新的权重再进行排列</li><li>重复1.2.3步</li></ol><hr><h5 id="代码实现-顺序结构储存"><a class="header-anchor" href="#代码实现-顺序结构储存">¶</a>代码实现(顺序结构储存)</h5><ul><li><p>结点的构建</p><ul><li><p>根据哈夫曼树的构建，结点首先要包含权值、左右子树指针，其次要包含数据</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">haffmanNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weigth;<span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    </span><br><span class="line">    haffmanNode* L_Node;<span class="comment">//左孩子</span></span><br><span class="line">    haffmanNode* R_Node;<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序结构存储二叉树*/</span></span><br><span class="line"></span><br><span class="line">haffmanNode node[<span class="number">256</span>]；</span><br><span class="line"></span><br><span class="line">haffmanNode allL_Node[<span class="number">128</span>];</span><br><span class="line">haffmanNode allR_Node[<span class="number">128</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据权值进行排序(冒泡排序)</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortHaffmanNode</span><span class="params">(haffmanNode* nodes,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    haffmanNode temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">1</span> - i; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes[k].weight &lt; nodes[k+<span class="number">1</span>].weight)&#123;</span><br><span class="line">                temp = nodes[k];</span><br><span class="line">                nodes[k] = nodes[k+<span class="number">1</span>];</span><br><span class="line">                nodes[k+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>哈夫曼树的构建</p><ul><li><p>对结点先进行排序取最小的构成一颗树</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHaffmanTree</span><span class="params">(haffmanNode* nodes, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据权值进行排序*/</span></span><br><span class="line">    sortHaffmanNode(nodes,length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*用来压缩成哈夫曼编码用*/</span></span><br><span class="line">    allL_Node[length] = nodes[length<span class="number">-1</span>];<span class="comment">//保存左结点</span></span><br><span class="line">    allR_Node[length] = nodes[length<span class="number">-2</span>];<span class="comment">//保存右结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*取最小权重的两个结点重新组成树*/</span></span><br><span class="line">    haffmanNode parent;</span><br><span class="line">    parent.weight = allL_Node[length].weight + allR_Node[length].weight;</span><br><span class="line">    </span><br><span class="line">    parent.L_Node = &amp;allL_Node[length];</span><br><span class="line">    parent.R_Node = &amp;allR_Node[length];</span><br><span class="line">    </span><br><span class="line">    nodes[length - <span class="number">2</span>] = parent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归直至哈夫曼树创建完成</span></span><br><span class="line">    CreateHaffmanTree(nodes,length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="哈夫曼树构建解析"><a class="header-anchor" href="#哈夫曼树构建解析">¶</a>哈夫曼树构建解析</h4><p>例图：<img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/1.png"></p><ul><li><p>第一步：<code>void CreateHaffmanTree(haffNode* node, int length)</code></p><ul><li><p>node数组内容{A(12),B(26),C(5),D(18),E(4)}，length = 5；</p></li><li><p>排序后 node{B,D,A,C,E},取最小结点C、E组成树</p></li><li><p><code>allL_Node[5] = C、allR_Node[5] = E</code></p></li><li><p>parent1：weight = (4 + 5)9、L_Node = C、R_Node = E</p></li><li><p>node 数组内容变更为{B(26),D(18),A(12),parent1(9)}</p></li></ul></li><li><p>第二步：<code>CreateHaffmanTree(node, length - 1(4))</code></p><ul><li>node 数组内容{B(26),D(18),A(12),parent1(9)}，length = 4</li><li>排序后 node{B,D,A,parent1},取最小结点A、parent1组成树</li><li><code>allL_Node[4] = parent1、allR_Node[4] = A</code></li><li>parent2：weight = (9+12)21、L_Node = parent1、R_Node = A\</li><li>node 数组内容变更为{B(26),D(18),parent2(21)}</li></ul></li><li><p>第三步：<code>CreateHaffmanTree(node, length - 1(3))</code></p><ul><li>node 数组内容{B(26),D(18),parent2(21)}、length = 3</li><li>排序后 node{B,parent2,D},取最小结点parent2、D组成树</li><li><code>allL_Node[3] = D、allR_Node[3] = parent2</code></li><li>parent3：weight = (18+21)39、L_Node = D、R_Node = parent2</li><li>node 数组内容变更为{B(26),parent3(39)}</li></ul></li><li><p>第四步：<code>CreateHaffmanTree(node, length - 1(2))</code></p><ul><li>node 数组内容{B(26),parent3(39)}、length = 2</li><li>排序后 node{parent3,B},取最小结点parent3、B组成树</li><li><code>allL_Node[2] = B、allR_Node[2] = parent3</code></li><li>parent4：weight = (26+39)65、L_Node = B、R_Node = parent3</li><li>node 数组内容变更为{parent4(65)}</li></ul></li><li><p>第五步：<code>CreateHaffmanTree(node, length - 1(1))</code></p><ul><li>length = 1 符合<code>if(length &lt;= 1)return;</code>结束递归，哈夫曼树创建完毕</li></ul></li></ul><hr><img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/2.png"><table><thead><tr><th style="text-align:center">allL_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">parent1</td><td style="text-align:center">C</td></tr></tbody></table><table><thead><tr><th style="text-align:center">allR_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">parent3</td><td style="text-align:center">parent2</td><td style="text-align:center">A</td><td style="text-align:center">E</td></tr></tbody></table><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树的构建&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建&quot;&gt;¶&lt;/a&gt;哈夫曼树的构建&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼树的构建步骤&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建步骤&quot;&gt;¶&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.13）哈夫曼编码</title>
    <link href="https://shuhaohwang.github.io/2019/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-13%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://shuhaohwang.github.io/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/</id>
    <published>2019-08-09T16:46:14.000Z</published>
    <updated>2019-08-09T17:49:51.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码"><a class="header-anchor" href="#哈夫曼编码">¶</a>哈夫曼编码</h4><h5 id="哈夫曼编码是什么？"><a class="header-anchor" href="#哈夫曼编码是什么？">¶</a>哈夫曼编码是什么？</h5><p>哈夫曼编码是用来压缩数据的一种手段，在网络上信息的传输都是通过二进制来进行输送的（0和1），在进行数据输送的时候，首先就要将即将输送的数据进行转码，使其变为二进制再进行传输。例如：</p><ul><li><p>要传输<code>‘ABCADBBAED’</code>这段数据。且你知道一个二进制转换编码表：</p><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">000</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">101</td></tr></tbody></table></li></ul></li><li><p>则这段字符串会先转换成二进制码：<code>000100110000111100100000101111</code></p></li><li><p>上面的二进制转换表编码是以3位进行编码的，而用哈夫曼编码进行编译转换，则会让这段字符串传输的时候能够更为简短。</p></li></ul><h5 id="哈夫曼编码的使用"><a class="header-anchor" href="#哈夫曼编码的使用">¶</a>哈夫曼编码的使用</h5><p>哈夫曼编码是通过哈夫曼树进行转换出来的，例如在上面的字符串：<code>‘ABCADBBAED’</code>是出现在一个文章里面的，这个文章里面含有：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">出现次数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">4</td></tr></tbody></table><p>根据上表进行转换为哈夫曼树</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/1.png"><p>通过对哈夫曼树处理，往左走为0往右走为1，通过记录会形成一个新的转换表</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><p>根据表中的内容把要输送的字符串<code>‘ABCADBBAED’</code>进行转换成二进制<code>111011001111000111110110</code></p><p>对比一开始用3个编码进行转换的字符串编码会发现，哈夫曼编码进行转换处理的二进制码数为24个，比前面的少了6个，可以发现运用哈夫曼编码可以使传输的二进制码被压缩成更简单二进制码。</p><hr><h5 id="哈夫曼编码的好处"><a class="header-anchor" href="#哈夫曼编码的好处">¶</a>哈夫曼编码的好处</h5><ul><li><strong>使转换的二进制码更简洁</strong><ul><li>哈夫曼编码是通过检测传输的字符串中字符的出现频率进行生成对应的编码表。采用的是前缀编码。</li></ul></li><li><strong>因为采用的前缀的编码，进行译码的时候减少出错</strong></li><li>…</li></ul><hr><h4 id="译码"><a class="header-anchor" href="#译码">¶</a>译码</h4><p>进行译码的过程很简单，通过一开始构建的哈夫曼树，进行译码。</p><ul><li><p>例如：<code>111011001111000111110110</code></p><ul><li><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"></li></ul></li><li><p>译码过程：<strong>从根开始</strong>遇到0就走左，遇到1就走右，当到达叶结点的时候，翻译出该字符，然后<strong>重新返回根结点重新识别</strong></p></li><li><p>译码结果：ABCADBBAED</p></li></ul><hr><h5 id="小结："><a class="header-anchor" href="#小结：">¶</a>小结：</h5><ul><li>从上面的译码过程可以看出，对哈夫曼编码编码后的二进制码进行译码的时候只需根据编码对哈夫曼树进行遍历即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码&quot;&gt;¶&lt;/a&gt;哈夫曼编码&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼编码是什么？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码是什么？&quot;&gt;¶&lt;/a&gt;哈夫曼
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.12）中序线索二叉树的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-12%EF%BC%89%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/</id>
    <published>2019-08-03T09:03:17.000Z</published>
    <updated>2019-08-03T11:04:43.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中序线索二叉树"><a class="header-anchor" href="#中序线索二叉树">¶</a>中序线索二叉树</h4><p>在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。</p><hr><h4 id="中序线索二叉树的遍历算法"><a class="header-anchor" href="#中序线索二叉树的遍历算法">¶</a>中序线索二叉树的遍历算法</h4><p>通过构建的中序线索二叉树的特点。叶子结点存在直接指向前驱和后继的结点的指针，在遍历的时候就可以快速的定位。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threaded_Mid_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R-&gt;L_Node)&#123;</span><br><span class="line">        R = R-&gt;L_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; R-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!R-&gt;RTag)&#123;</span><br><span class="line">            R = R-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(R-&gt;LTag)&#123;</span><br><span class="line">                R = R-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> R = R-&gt;R_Node; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/1.png"></p></li></ul></li></ul><hr><h4 id="总结："><a class="header-anchor" href="#总结：">¶</a>总结：</h4><p>通过利用线索来进行遍历就可以避免递归或者要使用栈结构来进行遍历。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;中序线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#中序线索二叉树&quot;&gt;¶&lt;/a&gt;中序线索二叉树&lt;/h4&gt;
&lt;p&gt;在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。&lt;/p&gt;

      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.11）线索二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-11%EF%BC%89%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-11）线索二叉树/</id>
    <published>2019-08-03T02:08:19.000Z</published>
    <updated>2019-08-03T09:41:50.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线索二叉树"><a class="header-anchor" href="#线索二叉树">¶</a>线索二叉树</h4><p>在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也会存在左右孩子不存在的情况下，那么这些空的指针往往会造成资源的浪费，这就为什么要存在线索二叉树，它能使这些空掉的指针能重新运用起来。</p><h5 id="线索二叉树的构成"><a class="header-anchor" href="#线索二叉树的构成">¶</a>线索二叉树的构成</h5><p>为了实现线索二叉树能够使空的指针能被重新利用起来，所以在结点结构定义的时候再添加两个标识符变量。这些标识符存在的目的是为了区分一个结点的左右孩子是否为空，如果是空那么就会指向前驱或者后置结点，如果不为空说明这个指针是指向左右孩子的。</p><img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/1.png"><p>从上面的图可以看出来，当右标识符为<code>'0'</code>的时候说明他的右孩子指针指向的是右孩子，当标识符为<code>'1'</code>的时候，说明这个结点的右孩子指针指向的不是右孩子(即：该结点没有右孩子)而是这个结点的前驱结点，同理，左标识符便是判断其左孩子的指针是指向后置结点还是左孩子。</p><hr><h4 id="二叉树线索化"><a class="header-anchor" href="#二叉树线索化">¶</a>二叉树线索化</h4><p>根据上面所说的线索二叉树，从最基本的来看，线索二叉树相比普通二叉树就是在没有左孩子或者右孩子的结点中这些本该指向左右孩子的指针不为空，使其能重新废物利用。所以把一个二叉树线索化的主要思路便是遍历一个二叉树，逐一判断每个结点的左右孩子是否为空，若为空那么就让其能指向这个结点的前驱结点或者后置结点。</p><ul><li><p>综上所述，线索化的主要操作就是基于遍历算法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此区域内实现线索二叉树的主要操作...</span></span><br><span class="line">    </span><br><span class="line">    Tree_Threaded(R -&gt; R_Node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在开始线索化之前还需要将结点结构进行变化，即要多定义两个标识符表示用来进行判断左右孩子指针的指向。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node;</span><br><span class="line">    BiTreeNode* R_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*标识符变量*/</span></span><br><span class="line">    <span class="keyword">int</span> RTag;</span><br><span class="line">    <span class="keyword">int</span> LTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>其次二叉树存在没有利用的指针，线索化后，这些空指针会指向该结点的前驱结点或者后置结点，这也就是说在线索化过程中还要有两个临时变量能够指向受判断结点的前驱结点和后置结点，方便在判断该结点在没有左右孩子的情况下，使其两个指针能够快速的指向前驱和后置结点。</p><hr><h4 id="线索化二叉树的代码实现"><a class="header-anchor" href="#线索化二叉树的代码实现">¶</a>线索化二叉树的代码实现</h4><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R，BiTreeNode* &amp;pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node,pre);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!R-&gt;L_Node)&#123;</span><br><span class="line">        R-&gt;L_Node = pre;</span><br><span class="line">        R-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre &amp;&amp; !pre-&gt;R_Node)&#123;</span><br><span class="line">        pre-&gt;R_Node = R;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> pre = R;</span><br><span class="line">    Tree_Threaded(R -&gt; R_Node,pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="二叉树线索化解析："><a class="header-anchor" href="#二叉树线索化解析：">¶</a>二叉树线索化解析：</h5><p>例图：<img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/2.png"></p><ul><li><p>第一次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr></tbody></table><ul><li>pre指向D</li></ul></li></ul><hr><ul><li><p>第二次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向B，递归至E结点后指向E</li></ul></li></ul><hr><ul><li><p>第三次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向E后指向A</li></ul></li></ul><hr><ul><li><p>第四次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向A后指向C</li></ul></li></ul><hr><h4 id="线索二叉树的好处："><a class="header-anchor" href="#线索二叉树的好处：">¶</a>线索二叉树的好处：</h4><p>从上面可以看出，线索二叉树的一些结点空出来的指针被重新利用起来，再到达叶子结点的时候，可以直接通过左右孩子的指针快速定位到其的前驱结点或后继结点，根据这个性质在进行遍历的时候就可以直接访问这些通过线索链接起来的结点。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#线索二叉树&quot;&gt;¶&lt;/a&gt;线索二叉树&lt;/h4&gt;
&lt;p&gt;在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5-10）前序遍历非递归实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-10%EF%BC%89%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/01/数据结构学习总结-（5-10）前序遍历非递归实现/</id>
    <published>2019-08-01T08:41:16.000Z</published>
    <updated>2019-08-15T13:33:14.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序遍历的非递归实现"><a class="header-anchor" href="#前序遍历的非递归实现">¶</a>前序遍历的非递归实现</h4><ul><li><p>思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问和移动，因为是堆栈所以要注意，在进行左右孩子移动的时候，应该让右孩子先入栈，左孩子后入栈，根据栈结构FIBO(先进后出)的结构特点，所以左孩子会先进行访问</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pre_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = R;</span><br><span class="line">    s.push(T);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(T-&gt;R_Node)s.push(T-&gt;R_Node);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;L_Node)s.push(T-&gt;L_Node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序遍历的非递归实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前序遍历的非递归实现&quot;&gt;¶&lt;/a&gt;前序遍历的非递归实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9.1）二叉树的遍历非递归[附加]</title>
    <link href="https://shuhaohwang.github.io/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9-1%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92-%E9%99%84%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/07/31/数据结构学习总结-（5-9-1）二叉树的遍历非递归-附加/</id>
    <published>2019-07-31T10:26:28.000Z</published>
    <updated>2019-07-31T15:57:24.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码1"><a class="header-anchor" href="#代码1">¶</a>代码1:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()||T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T)&#123;</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">            s.push(T)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            T = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            T = T-&gt;R_Node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码2："><a class="header-anchor" href="#代码2：">¶</a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">BiTreeNode* T = Root;</span><br><span class="line">s.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(T = s.top())</span><br><span class="line">            s.push(T-&gt;L_Node);</span><br><span class="line">        </span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            T = s.top();s.pop();</span><br><span class="line">        <span class="keyword">if</span> (!Visit(T))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s.push(T-&gt;R_Node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码1&quot;&gt;¶&lt;/a&gt;代码1:&lt;/h4&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9）二叉树的遍历非递归</title>
    <link href="https://shuhaohwang.github.io/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://shuhaohwang.github.io/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/</id>
    <published>2019-07-25T06:56:21.000Z</published>
    <updated>2019-07-25T07:51:36.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归的优缺点"><a class="header-anchor" href="#递归的优缺点">¶</a>递归的优缺点</h4><p>二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函数的调用是要消耗系统内存的，在小范围小幅度的递归对程序不会有太大的影响，但是如果递归的深度太大，会使内存枯竭，程序崩溃。即：递归即有好处也有坏处</p><ul><li>递归的优点：<ul><li>代码简洁</li></ul></li><li>递归的缺点：<ul><li>过多递归会影响系统内存和程序运行效率</li></ul></li></ul><hr><h4 id="二叉树非递归的代码实现及思路"><a class="header-anchor" href="#二叉树非递归的代码实现及思路">¶</a>二叉树非递归的代码实现及思路</h4><p>正如上面所说，函数递归在遍历较小的二叉树是没有太大的问题的。但若遍历深度巨大的二叉树，使用递归来遍历是不太可行的。所以二叉树非递归的方式来实现遍历也理所当然的变的重要。</p><ul><li><p>二叉树非递归遍历的实现<strong>思路</strong>：通过栈数据结构，进行入栈操作，先把树的每一个结点的左孩子入栈直至访问到叶结点，随后进行访问，访问一个出栈一个，并检测此时的右孩子是否为空，若不空，重复上述的操作即可。</p></li><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            s.push(T);</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        T = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        T = T-&gt;R_Node;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!s.Empty()||T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/1.png"></p></li></ul></li></ul><hr><h4 id="函数流程演示"><a class="header-anchor" href="#函数流程演示">¶</a>函数流程演示</h4><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/2.png"><ul><li><p>第一步：A结点不空进入循环，入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第二步：B结点入栈、第三次循环D结点入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第三步：跳出循环，T指针指向栈顶,访问栈顶数据，并出栈。</p><ul><li><p><code>T：-&gt;D</code></p></li><li><p><strong>输出了D</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第四步：T重新指向此时指向结点的右孩子。第一次外循环结束。</p><ul><li><code>T：-&gt;D.R_Node(nullptr)</code></li></ul></li><li><p>第五步：开始第二次外循环，因为T为空内循环不执行、T指向栈顶，访问栈顶数据。</p><ul><li><p><code>T：-&gt;B</code></p></li><li><p><strong>输出了B</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li></ul><ul><li><p>第六步：T指向了B结点的右孩子E，结束第二次外循环。</p><ul><li><code>T：-&gt;E</code></li></ul></li><li><p>第七步：此时T不空执行内循环，E入栈,T指向E结点的左孩子,因为E结点的左孩子为空跳出循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">E</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第八步：T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;E</code></p></li><li><p><strong>输出了E</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第九步：T指向E结点的右孩子，因为为空所以结束第三次外循环。</p><ul><li><code>T：-&gt;E.R_Node(nullptr)</code></li></ul></li><li><p>第十步：因为此时T为空不执行内循环，T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;A</code></p></li><li><p><strong>输出了A</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十一步：T指向A结点的右孩子C，因为是空栈，所以也结束第四次外循环，重新开始下一轮循环。</p><ul><li><code>T：-&gt;C</code></li></ul></li><li><p>第十二步：T不为空，指向内循环，入栈，更新T指向C的左孩子，为空结束内循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">C</td></tr></tbody></table></li></ul></li><li><p>第十三步：T指向栈顶，访问栈顶，出栈</p><ul><li><p><code>T：-&gt;C</code></p></li><li><p><strong>输出了C</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十四步：T指向C结点的右孩子，但为空，且栈也为空栈，跳出外循环。结束遍历操作。</p></li><li><p>结果输出：D、B、E、A、C</p></li><li><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/3.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归的优缺点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#递归的优缺点&quot;&gt;¶&lt;/a&gt;递归的优缺点&lt;/h4&gt;
&lt;p&gt;二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
