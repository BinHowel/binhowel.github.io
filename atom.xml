<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-06-28T06:41:44.176Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++迭代器的失控范例和解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/06/28/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/28/C-迭代器的失控范例和解决方案/</id>
    <published>2019-06-28T03:54:43.000Z</published>
    <updated>2019-06-28T06:41:44.176Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器失控范例"><a href="#迭代器失控范例" class="headerlink" title="迭代器失控范例"></a>迭代器失控范例</h4><h5 id="情形一："><a href="#情形一：" class="headerlink" title="情形一："></a>情形一：</h5><ul><li><p>很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对<code>vector</code>容器进行<code>push_back()</code>操作、对<code>vector</code>容器进行插入操作、删除操作。都会使<code>end()</code>函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者下面这种情况</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.insert(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;迭代器失控范例&quot;&gt;&lt;a href=&quot;#迭代器失控范例&quot; class=&quot;headerlink&quot; title=&quot;迭代器失控范例&quot;&gt;&lt;/a&gt;迭代器失控范例&lt;/h4&gt;&lt;h5 id=&quot;情形一：&quot;&gt;&lt;a href=&quot;#情形一：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.6）迭代器</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/C-进阶学习总结-（1-6）迭代器/</id>
    <published>2019-06-26T05:28:56.000Z</published>
    <updated>2019-06-28T02:25:40.545Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述迭代器的基本概念、实质、及用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.3）链栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/数据结构学习总结-（3-3）链栈/</id>
    <published>2019-06-26T04:27:15.000Z</published>
    <updated>2019-06-26T05:03:16.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="栈的链式实现算法及思路"><a href="#栈的链式实现算法及思路" class="headerlink" title="栈的链式实现算法及思路"></a>栈的链式实现算法及思路</h4><ul><li><p>栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。</p></li><li><table><tr><td bgcolor="yellow">入栈</td></tr></table><ul><li><p>思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    LNode*p = <span class="keyword">new</span> LNode();</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">出栈</td></tr></table><ul><li><p>思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈)</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!head-&gt;next)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">析构函数</td></tr></table><ul><li><p>思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~LkStack()&#123;</span><br><span class="line">    LNode*p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a href="#具体代码实现：" class="headerlink" title="具体代码实现："></a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">LkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LkStack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~LkStack() &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode();</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获得栈顶数据*/</span></span><br><span class="line"><span class="function">T&amp; <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">LkStack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据1"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据2"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据3"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据4"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据5"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.GetTop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;栈的链式实现算法及思路&quot;&gt;&lt;a href=&quot;#栈的链式实现算法及思路&quot; class=&quot;headerlink&quot; title=&quot;栈的链式实现算法及思路&quot;&gt;&lt;/a&gt;栈的链式实现算法及思路&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈的链式实现是以前插法为基础的。即以头结点next
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++个人学习路线</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-个人学习路线/</id>
    <published>2019-06-25T15:41:26.000Z</published>
    <updated>2019-06-25T16:40:52.386Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      （加密文章）
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.5）vector容器详解</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-进阶学习总结-（1-5）vector容器详解/</id>
    <published>2019-06-25T11:01:59.000Z</published>
    <updated>2019-06-25T12:17:11.053Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++基本库中的vector容器的基本概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.2）顺序栈的实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-2）顺序栈的实现/</id>
    <published>2019-06-24T14:59:45.000Z</published>
    <updated>2019-06-25T08:28:51.825Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序栈的实现与算法思路（以char数据类型为例）"><a href="#顺序栈的实现与算法思路（以char数据类型为例）" class="headerlink" title="顺序栈的实现与算法思路（以char数据类型为例）"></a>顺序栈的实现与算法思路（以char数据类型为例）</h4><ul><li><p>入栈push(char e)；</p></li><li><p>思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)<span class="comment">//容量满了就进行扩容</span></span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;<span class="comment">//直接修改并移动top指针</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出栈pop();</p></li><li><p>思路：在没有空栈的情况下，直接让top自减一。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)<span class="comment">//判断是否空栈。</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="顺序栈的实现情况"><a href="#顺序栈的实现情况" class="headerlink" title="顺序栈的实现情况"></a>顺序栈的实现情况</h4><ul><li><del>出栈</del>(完成)<ul><li>push(char e)</li></ul></li><li><del>入栈</del>(完成)<ul><li>pop()</li></ul></li><li><del>扩容</del>(完成)<ul><li>realloc()</li></ul></li><li><del>遍历？</del>(完成)<ul><li>Traverse(void(*fb)(char&amp; e))</li></ul></li><li><del>获得栈顶数据</del>(完成)<ul><li>GetTop()</li></ul></li><li><del>是否为空栈</del>(完成)<ul><li>IsStackEmpty()</li></ul></li><li><del>获得栈总容量</del>(完成)<ul><li>GetCapacity()</li></ul></li></ul></li></ul><hr><p>具体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SQSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SQSTACK_H_</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span>* top = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">char</span>* data = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack(<span class="keyword">int</span> c = <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*遍历*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp;e))</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">GetTop</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsStackEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetCapacity</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*扩容*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*打印*/</span> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_SQSTACK_H_</span></span></span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack::SqStack(<span class="keyword">int</span> c) &#123;</span><br><span class="line">capacity = c;<span class="comment">//默认给一个初值</span></span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">top = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩容*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::<span class="built_in">realloc</span>() &#123;</span><br><span class="line"><span class="keyword">char</span>* n_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * capacity];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">n_data[i] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]data;</span><br><span class="line">data = n_data;</span><br><span class="line">top = data + capacity;<span class="comment">//这里要注意top也有重新赋值新的地址</span></span><br><span class="line"></span><br><span class="line">capacity *= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)</span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历*/</span></span><br><span class="line"><span class="keyword">void</span> SqStack::Traverse(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp; e)) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top - data; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> fb(data[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="keyword">char</span> SqStack::GetTop() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>*(top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否空栈*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::IsStackEmpty() &#123;</span><br><span class="line"><span class="keyword">if</span> (top == data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得容量*/</span></span><br><span class="line"><span class="keyword">int</span> SqStack::GetCapacity() &#123;</span><br><span class="line"><span class="keyword">return</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印*/</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqStack <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据a"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'a'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据b"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'b'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据c"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'c'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据d"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'d'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据e"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'e'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据f"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'f'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"出栈一个数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop(); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;a href=&quot;#顺序栈的实现与算法思路（以char数据类型为例）&quot; class=&quot;headerlink&quot; title=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;/a&gt;顺序栈的实现与算法思路（以c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.1）栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-1）栈/</id>
    <published>2019-06-24T07:45:53.000Z</published>
    <updated>2019-06-24T08:13:32.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初识栈"><a href="#初识栈" class="headerlink" title="初识栈"></a>初识栈</h4><ul><li>定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。<ul><li>允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。</li><li>不含任何数据元素的栈称为空栈。</li></ul></li><li>特点：<ul><li>先进后出</li><li>后进先出</li></ul></li></ul><p><font color="red"><strong>注意：</strong></font></p><ul><li>栈又被称为后进先出(Last in First out)的线性表</li><li>栈的插入操作，被称为进栈，也称压栈、入栈(push)</li><li>栈的删除操作也称出栈，也称为弹栈(pop)</li><li>示意图：<img src="/2019/06/24/数据结构学习总结-（3-1）栈/1.gif"></li></ul><hr><h4 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h4><ul><li>ADT 栈(Stack)</li><li>Data<ul><li>栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系，</li></ul></li><li>Operation<ul><li>InitStack；初始化，创建一个空栈</li><li>destoryStack;  销毁栈</li><li>StackEmpty；判断是否为空</li><li>clearStack； 清空栈</li><li>getTop；获得栈顶元素</li><li>push 压栈</li><li>pop 出栈</li><li>stacklength；获得栈的长度</li></ul></li><li>endADT</li></ul><p><font color="red"><strong>注意：</strong></font>栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用</p><p>–（本文未完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;初识栈&quot;&gt;&lt;a href=&quot;#初识栈&quot; class=&quot;headerlink&quot; title=&quot;初识栈&quot;&gt;&lt;/a&gt;初识栈&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。&lt;ul&gt;
&lt;li&gt;允许插入和删除的一段称为栈顶(top),另
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.4）函数新特性、const关键字精解</title>
    <link href="https://shuhaohwang.github.io/2019/06/23/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/23/C-进阶学习总结-（1-4）函数新特性、const关键字精解/</id>
    <published>2019-06-23T09:34:31.000Z</published>
    <updated>2019-06-24T04:06:03.460Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述函数的新特性、内联函数实质与应用、constchar*、charconst*、等区别，函数杂合（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置</title>
    <link href="https://shuhaohwang.github.io/2019/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE/"/>
    <id>https://shuhaohwang.github.io/2019/06/22/数据结构学习总结-（2-9）顺序存储结构与链式存储结构的逆置/</id>
    <published>2019-06-22T15:44:35.000Z</published>
    <updated>2019-06-22T16:26:32.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构的逆置算法与思路："><a href="#顺序结构的逆置算法与思路：" class="headerlink" title="顺序结构的逆置算法与思路："></a>顺序结构的逆置算法与思路：</h4><ul><li><p>夹逼法：</p></li><li><p>思路：通过对数组头部和尾部相互对调并向中间靠近。</p></li><li><p>实现：(假设以整型为数据类型实现)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length/<span class="number">2</span>; i++)&#123;<span class="comment">//注意：length要除于2！！！！length要除于2！！！！</span></span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[length - <span class="number">1</span> - i];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="red"><strong>注意</strong></font>：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。</li></ul></li></ul><ul><li><p>算法优化：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ，j = length - <span class="number">1</span>; i &lt; j; i++,j--)&#123;</span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[j];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此方法更能体现夹逼法。</p></li></ul><hr><h4 id="链式存储结构的逆置算法与思路："><a href="#链式存储结构的逆置算法与思路：" class="headerlink" title="链式存储结构的逆置算法与思路："></a>链式存储结构的逆置算法与思路：</h4><ul><li><p>思路：把头结点和数据结点断开，然后把数据结点一个个<strong>前插</strong>进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：<code>p-&gt;next = head-&gt;next;head -&gt;next = p;</code>其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。</p></li><li><p>实现1(单向链表)：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现2(循环链表)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p!=head)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前后只是循环条件发生变化。</p></li></ul><hr><p>–（本文完）&lt;原创&gt;&lt;待增添修改&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;a href=&quot;#顺序结构的逆置算法与思路：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;/a&gt;顺序结构的逆置算法与思路：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;夹逼法：&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/数据结构学习总结-（2-8）线性表的顺序存储结构和链式存储结构之间的比较/</id>
    <published>2019-06-21T15:13:32.000Z</published>
    <updated>2019-06-21T16:03:35.639Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构与链式结构的比较："><a href="#顺序结构与链式结构的比较：" class="headerlink" title="顺序结构与链式结构的比较："></a>顺序结构与链式结构的比较：</h4><table><thead><tr><th></th><th>顺序结构</th><th>链式结构</th></tr></thead><tbody><tr><td>按序号下标读取</td><td>直接读取通过A[index]即可获的数据<font color="red"><strong>+++</strong></font></td><td>要从头开始找，找的下标才能获取数据<font color="blue"><strong>—</strong></font></td></tr><tr><td>内存实验</td><td>要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容<strong>可能没有足够的空间或多出空间</strong><font color="blue"><strong>—</strong></font></td><td>按需要分配，想要一个就一个<strong>可利用很小的碎片空间</strong><font color="red"><strong>+++</strong></font></td></tr><tr><td>插入元素</td><td>插入一个元素需要不断移动后面的元素，速度慢，消耗相比大<font color="blue"><strong>—</strong></font></td><td>直接插入，速度快，消耗相比小<font color="red"><strong>+++</strong></font></td></tr><tr><td>删除</td><td>需要移动元素<font color="blue"><strong>—</strong></font></td><td>直接删除<font color="red"><strong>+++</strong></font></td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;a href=&quot;#顺序结构与链式结构的比较：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;/a&gt;顺序结构与链式结构的比较：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/C++进阶学习总结-（1-3）范围for语句，动态分配/</id>
    <published>2019-06-21T06:55:19.000Z</published>
    <updated>2019-06-21T09:10:55.043Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述新版的for语句、动态内存分配的基础知识、c++11新关键字nullptr（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.7）双向链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/20/数据结构学习总结-（2-7）双向链表/</id>
    <published>2019-06-20T01:40:31.000Z</published>
    <updated>2019-06-22T04:06:28.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ul><li>与单向链表的不同之处：</li></ul><table><thead><tr><th align="center">单向链表</th><th align="center">双向链表</th></tr></thead><tbody><tr><td align="center">只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。</td><td align="center">相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到</td></tr></tbody></table><ul><li>双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。</li></ul><hr><h5 id="根据双向链表具有前后两个指针的这个特性"><a href="#根据双向链表具有前后两个指针的这个特性" class="headerlink" title="根据双向链表具有前后两个指针的这个特性"></a>根据双向链表具有前后两个指针的这个特性</h5><ul><li>在插入算法和删除算法中都有很好的优势</li></ul><ul><li><p><strong>插入算法</strong>：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要插入的位置即可</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;<span class="comment">//指定位置的前一个数据的next指针指向新插入的数据地址</span></span><br><span class="line">node-&gt;prior = p-&gt;prior;<span class="comment">//新插入数据的prior指针指向原来位置数据的前一个数据地址</span></span><br><span class="line">p-&gt;prior = node;<span class="comment">//插入位置的前一个数据更变为新插入的数据地址</span></span><br><span class="line">node-&gt;next = p;<span class="comment">//新插入数据的next指针指向插入位置的地址</span></span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//链表总长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/1.png"></li></ul></li></ul><ul><li><p><strong>删除算法</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要删除的数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;<span class="comment">//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址</span></span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;<span class="comment">//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据</span></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//释放待删除数据的空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除算法即可以直接跳过待删除数据结点。</p></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/2.png"></li></ul></li></ul><hr><h5 id="其他测试代码详情："><a href="#其他测试代码详情：" class="headerlink" title="其他测试代码详情："></a>其他测试代码详情：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSLkList</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">LNode* prior;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BSLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = head;</span><br><span class="line">head-&gt;prior = head;</span><br><span class="line">rear = head;</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = node;</span><br><span class="line">node-&gt;next = head;</span><br><span class="line">node-&gt;prior = p;</span><br><span class="line">rear = node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;</span><br><span class="line">node-&gt;prior = p-&gt;prior;</span><br><span class="line">p-&gt;prior = node;</span><br><span class="line">node-&gt;next = p;</span><br><span class="line"></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定位置遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e, <span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* s = GetDataAddress(e);</span><br><span class="line">LNode* p = s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s!=head)</span><br><span class="line">fb(s-&gt;data);</span><br><span class="line">s = s-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (s != p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BSLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个A数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'A'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个B数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'B'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个C数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'C'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了3号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">3</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了1号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">1</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从B数据开始遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'B'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果图：</p><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/3.png"><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;与单向链表的不同之处：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/</id>
    <published>2019-06-19T15:58:01.000Z</published>
    <updated>2019-06-22T04:06:21.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="体现循环链表的优点之从指定结点开始遍历"><a href="#体现循环链表的优点之从指定结点开始遍历" class="headerlink" title="体现循环链表的优点之从指定结点开始遍历"></a>体现循环链表的优点之从指定结点开始遍历</h4><p>​    上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表<strong>可以从指定的结点开始遍历整个链表</strong>，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。</p><ul><li>这里通过遍历函数来体现这一特性。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找链表中的某一个元素并获得它的地址</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//获得指定结点的地址</span></span><br><span class="line">LNode* q = p;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)<span class="comment">//越过头结点</span></span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">            </span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。</li></ul><hr><ul><li>具体实验代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line">LNode* q = p;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从b数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'b'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从c数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'c'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><img src="/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/1.png"><hr><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>​    这里只是单单用遍历体现了循环链表的这个特点。</p><p>​    其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;a href=&quot;#体现循环链表的优点之从指定结点开始遍历&quot; class=&quot;headerlink&quot; title=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;/a&gt;体现循环链表的优点之从指定结点开始遍历&lt;/h4&gt;&lt;p&gt;​ 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/</id>
    <published>2019-06-19T06:47:06.000Z</published>
    <updated>2019-06-22T04:06:13.895Z</updated>
    
    <content type="html"><![CDATA[<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><ul><li>相较于非循环链表<ul><li>在非循环链表中，最后一个元素的next指针是空指针，造成浪费。</li><li>每次寻找后继指针的时候都要重新从头开始找。</li></ul></li><li>循环链表<ul><li>尾指针直接指向表头，使最后一个元素的next指针被利用起来。</li><li>从每一个元素开始都能遍历表中每一个元素。</li><li>便于类似于链表合并这样的算法实现。</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/1.png"></li></ul><ul><li><p>其他不同：</p><ul><li>循环链表与非循环链表的判断条件发生了变化</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/5.png"></li></ul><hr><h5 id="判断的具体解释（循环链表）"><a href="#判断的具体解释（循环链表）" class="headerlink" title="判断的具体解释（循环链表）"></a>判断的具体解释（循环链表）</h5><ul><li><table><tr><td bgcolor="yellow">判断到前驱结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">  &#123;</span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。</p></li></ul><ul><li><table><tr><td bgcolor="yellow">判断到头结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。</p></li></ul><hr><h5 id="循环链表的尾指针"><a href="#循环链表的尾指针" class="headerlink" title="循环链表的尾指针"></a>循环链表的尾指针</h5><ul><li><p>循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。</p><ul><li>尾指针的好处：<ul><li>找head指针非常方便。rear-&gt;next的值便是head。</li><li>便于链表的合并。</li></ul></li></ul></li></ul><ul><li>代码实现空表时的尾指针：</li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;<span class="comment">//空表时的尾指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/2.png"></li></ul><ul><li>当插入一个元素后尾指针的变化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从链表最后面插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">    </span><br><span class="line">rear = q;<span class="comment">//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的</span></span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="链表合并的实现"><a href="#链表合并的实现" class="headerlink" title="链表合并的实现:"></a>链表合并的实现:</h5><ul><li>具体思路（链表2合并到链表1）：先获得<font color="red">链表2</font>的头结点的地址（即：链表2的指针head）然后让<font color="blue">链表1</font>的head指针指向<font color="red">链表2</font>的指针head-&gt;next指向的地址（即：<font color="red">链表2</font>的第一个元素的地址），然后让<font color="red">链表2</font>的指针rear（尾指针）指向<font color="blue">链表1</font>的head-&gt;指向的地址（即指向<font color="blue">链表1</font>的第一个元素）最后<strong>delete <font color="red">链表2</font>的head指针</strong>。完成合并操作。</li></ul><ul><li>合并前：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/3.png"></li></ul><ul><li>合并后：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/4.png"></li></ul><ul><li>具体实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">LNode* t_head_of_s = s-&gt;head;<span class="comment">//获得链表2的head指针</span></span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;<span class="comment">//让链表2的尾指针指向链表1的第一个元素</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;<span class="comment">//让链表1的head-&gt;next指针指向链表1第一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> t_head_of_s;<span class="comment">//释放原链表2的head指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="循环链表具体代码实现"><a href="#循环链表具体代码实现" class="headerlink" title="循环链表具体代码实现"></a>循环链表具体代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index,T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p -&gt; next = q;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（下标型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p -&gt; next;</span><br><span class="line">q = q -&gt; next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（找值型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">while</span> (q != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data == e) &#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空链表操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListClean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)<span class="comment">//定位到头结点之前，清空初头结点的外的其他数据空间</span></span><br><span class="line">&#123;</span><br><span class="line">q = p -&gt; next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*合并操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">LNode* t_head_of_s = s-&gt;head;</span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length += s-&gt;length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s-&gt;head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除测试 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2号位置的数据被删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">2</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list2:   "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; list2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个v数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'v'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个n数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'n'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个m数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'m'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"list2合并到list"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.ListCombine(&amp;list2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"合并后："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空list</span></span><br><span class="line"><span class="built_in">list</span>.ListClean();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空完成"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="销毁链表与清空链表的区别："><a href="#销毁链表与清空链表的区别：" class="headerlink" title="销毁链表与清空链表的区别："></a>销毁链表与清空链表的区别：</h5><table><thead><tr><th align="center"></th><th align="center"><strong>销毁链表</strong></th><th align="center"><strong>清空链表</strong></th></tr></thead><tbody><tr><td align="center"><strong>具体解释</strong></td><td align="center">包括头结点全部清空全部delete</td><td align="center">保留头结点其他数据元素全部delete清空</td></tr><tr><td align="center"><strong>产生的后果</strong></td><td align="center">头指针丢失，链表无法使用</td><td align="center">清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。</td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;相较于非循环链表&lt;ul&gt;
&lt;li&gt;在非循环链表中，最后一个元素的next指针是空指针，造成浪费。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.2)auto、头文件防卫</title>
    <link href="https://shuhaohwang.github.io/2019/06/18/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB/"/>
    <id>https://shuhaohwang.github.io/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/</id>
    <published>2019-06-18T08:08:05.000Z</published>
    <updated>2019-06-19T16:29:26.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Auto"><a href="#Auto" class="headerlink" title="Auto"></a>Auto</h4><ul><li>auto：变量的自动类型推断。<ul><li>可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（<strong>声明时要初始化</strong>）</li><li>自动推断发生在编译期间，所以使用auto不会造成程序效降低。</li></ul></li></ul><hr><h4 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a>头文件防卫式声明</h4><ul><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _文件名_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _文件名_H</span></span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="为什么要用到头文件防卫式声明？"><a href="#为什么要用到头文件防卫式声明？" class="headerlink" title="为什么要用到头文件防卫式声明？"></a>为什么要用到头文件防卫式声明？</h5><ul><li>目的：为了防止头文件中多重、重复定义内容。</li></ul><ul><li><p>情景假设：</p></li><li><p>假设一个工程里面有两个个头文件.h文件。里面都有自己的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head2.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number2 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行情况：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/1.png"></li></ul><ul><li><p>假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/2.png"></li></ul><ul><li><strong>错误原因</strong>：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h<strong>意味着又重复定义了一次head1.h里面的内容</strong>从而造成head1.h里的number1重复定义的错误。</li></ul><ul><li><p><strong>如何解决？—-对头文件进行防卫式定义</strong></p></li><li><p>即对head1.h文件编辑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD1_H<span class="comment">//如果head1.h没有被定义那么就执行下面的内容</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD1_H<span class="comment">//定义head1.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br><span class="line"></span><br><span class="line">#endif<span class="comment">//结束如果</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而<strong>避免了头文件重复定义的情况</strong>。</li></ul><ul><li><strong>结论</strong>：所以以后定义头文件的时候都可以进行防卫式定义然后就可以<del><strong>随便include定义的头文件了</strong></del>避免这些错误了。</li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Auto&quot;&gt;&lt;a href=&quot;#Auto&quot; class=&quot;headerlink&quot; title=&quot;Auto&quot;&gt;&lt;/a&gt;Auto&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;auto：变量的自动类型推断。&lt;ul&gt;
&lt;li&gt;可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.1)命名空间</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/C++进阶学习总结-(1.1)命名空间/</id>
    <published>2019-06-17T13:14:59.000Z</published>
    <updated>2019-06-19T16:29:16.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命名空间的基本概念简介"><a href="#命名空间的基本概念简介" class="headerlink" title="命名空间的基本概念简介"></a>命名空间的基本概念简介</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，<strong>不可以同名</strong>。</li></ul><ul><li>可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。</li><li>命名空间定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fb</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//函数</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明；</li></ul><hr><h4 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h4><ul><li><p>假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现：</p><p><strong>找到一个或多个多重定义的符号</strong></p><p><strong>void_cdecl Print(void)已在project2.obj中定义</strong>的错误</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/1.jpg"></li></ul><ul><li>如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用<strong>命名空间</strong>来解决具体：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//project1.cpp</span></span><br><span class="line"><span class="keyword">namespace</span> ZhangSan &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这是张三的Print函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 <strong>命名空间名::实体名（函数名）</strong>的方法调用张三的Print函数 （其中<strong>“ : : “</strong>是<strong>作用域运算符</strong>）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ZhangSan::Print();<span class="comment">//张三的</span></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//李四的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况：</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/2.png"><ul><li><p>但是每次调用的时候都要用<strong>命名空间名::实体名（函数名）</strong>的方法岂不是也太麻烦了。</p><p>所以这里就要用上<strong>using</strong>关键字了，只要在头文件引入语句下面加入：</p><p><strong>using namespace ZhangSan</strong>就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"project2.h"</span><span class="comment">//张三命名空间定义所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ZhangSan;<span class="comment">//使用的张三的命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//张三的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况:</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/3.png"></li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命名空间的基本概念简介&quot;&gt;&lt;a href=&quot;#命名空间的基本概念简介&quot; class=&quot;headerlink&quot; title=&quot;命名空间的基本概念简介&quot;&gt;&lt;/a&gt;命名空间的基本概念简介&lt;/h3&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.5)链表存储结构的算法</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/数据结构学习总结-（2.5）链表存储结构的算法/</id>
    <published>2019-06-17T02:36:43.000Z</published>
    <updated>2019-06-22T04:06:07.725Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表储存结构"><a href="#链表储存结构" class="headerlink" title="链表储存结构"></a>链表储存结构</h4><ul><li>链表（LinkedList）</li><li>定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构</li><li>对应线性表操作：<ul><li>前插数据元素<ul><li>Insert_Front()</li></ul></li><li>后插数据元素<ul><li>Push_back()</li></ul></li><li>插入数据<ul><li>Insert_Element()</li></ul></li><li>删除数据<ul><li>Delete_Element()</li></ul></li><li>获得数据<ul><li>Get()</li></ul></li><li>设置数据<ul><li>Set()</li></ul></li><li>遍历链表<ul><li>Traverse()</li></ul></li><li>……</li></ul></li></ul><hr><h4 id="对应一些算法实现思路"><a href="#对应一些算法实现思路" class="headerlink" title="对应一些算法实现思路"></a>对应一些算法实现思路</h4><ul><li><p><strong><em>插入操作</em></strong>：</p><ul><li>思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong><em>删除操作</em></strong>：</p><ul><li>思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时<strong>要先创建一个临时的指针指向将删除的元素的地址</strong>（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后<strong>delete这个临时指针</strong>。</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="链表存储结构代码实现情况："><a href="#链表存储结构代码实现情况：" class="headerlink" title="链表存储结构代码实现情况："></a>链表存储结构代码实现情况：</h4><ul><li><del>前插操作</del>（完成）<ul><li>bool InsertFront(T e)</li></ul></li><li><del>后插操作</del>（完成）<ul><li>bool push_back(T e)</li></ul></li><li><del>插入操作</del>（完成）<ul><li>bool InsertElement(int index, T e)</li></ul></li><li><del>删除操作</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>获得操作</del>（完成）<ul><li>bool Get(int index,T&amp; e)</li></ul></li><li><del>修改操作</del>（完成）<ul><li>bool Set(int index, T e)</li></ul></li><li><del>遍历操作</del>（完成）<ul><li>void Traverse(void(*fb)(T&amp; t))</li></ul></li></ul><hr><h5 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">LkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> index,T&amp; e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//这里的p指向的下一个元素的头指针</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;<span class="comment">//把p的指针往后一个元素头指针移动</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">e = p-&gt;data;<span class="comment">//获得数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertFront</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();<span class="comment">//创建一个新数据空间</span></span><br><span class="line"><span class="keyword">if</span> (!q)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//对要插入的数据进行赋值到这个空间的data</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//避免第一个数据next指针出现野指针的问题</span></span><br><span class="line">q-&gt;next = head-&gt;next;<span class="comment">//与头结点相连</span></span><br><span class="line">head-&gt;next = q;<span class="comment">//这个next指针指向第二个数据的位置</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始让指针指向最后一个数据元素的地址</span></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)<span class="comment">//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题</span></span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始寻找要修改的位置</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;<span class="comment">//数据进行修改</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;t)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LkList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个A "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'A'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个B "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'B'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插了一个C "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.push_back(<span class="string">'C'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了O "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'O'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了G "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'G'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了第2位的元素 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">2</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"把第3位的数据修改成I"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Set(<span class="number">3</span>,<span class="string">'I'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"获得第4位的数据 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">List.Get(<span class="number">4</span>, ch);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–（本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表储存结构&quot;&gt;&lt;a href=&quot;#链表储存结构&quot; class=&quot;headerlink&quot; title=&quot;链表储存结构&quot;&gt;&lt;/a&gt;链表储存结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;链表（LinkedList）&lt;/li&gt;
&lt;li&gt;定义: 每个元素用一个指针（以存储下一个数据的地
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.4)初识链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/16/数据结构学习总结-（2.4）初识链表/</id>
    <published>2019-06-16T12:07:28.000Z</published>
    <updated>2019-06-22T04:06:01.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表基本概念"><a href="#链表基本概念" class="headerlink" title="链表基本概念"></a>链表基本概念</h4><ul><li>结点包括数据域和指针域。</li><li>链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。</li></ul><ul><li><strong>相较于顺序表存储结构的优点</strong>：<ol><li>不用定义时规定长度。</li><li>存储的元素个数不受限制。</li><li>插入和删除元素时，不用移动其他元素。</li></ol></li></ul><hr><h4 id="链表的头指针和头结点"><a href="#链表的头指针和头结点" class="headerlink" title="链表的头指针和头结点"></a>链表的头指针和头结点</h4><ul><li>基本概念<ul><li>头指针：链表中第一个结点的储存位置。</li><li>头结点：在单链表的第一个结点前附设的一个结点。</li></ul></li></ul><table><thead><tr><th align="center">头指针</th><th align="center">头结点</th></tr></thead><tbody><tr><td align="center">若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针</td><td align="center">头结点是为了操作的<strong>统一和方便</strong>而设立的，放在第一个结点之前  <font color="red">其数据域一般无意义</font>（可以存储链表的长度）</td></tr><tr><td align="center">头指针具有表示作用，所以常常有头指针表示链表的名字</td><td align="center">有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了</td></tr><tr><td align="center">无论链表是否为空，头指针均不为空。头指针是链表的<strong>必要</strong>元素</td><td align="center"><font color="red">头结点不一定是链表的必须要素</font></td></tr></tbody></table><hr><h4 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h4><ul><li>链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。</li><li>链表存储结构中，数据存储在内存中<strong>分散</strong>的位置。各个数据由一个指针相互连接<ul><li>一个数据中的指针域存放的是<strong>下一个</strong>数据的地址。</li></ul></li><li>由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问</li></ul><ul><li><strong>删除</strong>：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。</li><li><strong>添加</strong>：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表基本概念&quot;&gt;&lt;a href=&quot;#链表基本概念&quot; class=&quot;headerlink&quot; title=&quot;链表基本概念&quot;&gt;&lt;/a&gt;链表基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;结点包括数据域和指针域。&lt;/li&gt;
&lt;li&gt;链表是有n个结点链结成，第一个结点的存储位置叫做头指
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.3）顺序表存储结构代码、算法实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/数据结构学习总结-（2.3）顺序表存储结构代码、算法实现/</id>
    <published>2019-06-15T02:16:28.000Z</published>
    <updated>2019-06-22T04:05:54.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表储存结构"><a href="#顺序表储存结构" class="headerlink" title="顺序表储存结构"></a>顺序表储存结构</h3><ul><li>顺序表(SqList)</li><li>定义： 顺序表存储结构是一个以<strong>连续</strong>空间地址存储为方式的<em>物理结构</em></li><li>实现线性表相应操作：<ul><li>SqList（）                    初始化线性表：创建一个空的线性表List</li><li>SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e</li><li>SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e</li><li>SqList.GetLength（）                               获得线性表的长度</li><li>SqList.DeleteAllElement（）                                  清空线性表</li><li>SqList.find（e）                  查找线性表中的元素e</li><li>………. </li></ul></li></ul><hr><h4 id="一些基础算法的实现思路"><a href="#一些基础算法的实现思路" class="headerlink" title="一些基础算法的实现思路"></a>一些基础算法的实现思路</h4><ul><li><p><strong><em>插入算法</em></strong>：</p><ul><li><p>思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, Datas t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部往后覆盖赋值</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>删除算法</em></strong>：</p><ul><li><p>思路：根据要删除元素的下标为目标往前覆盖赋值。</p></li><li><p>具体实现：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>扩容</em></strong>：</p><ul><li><p>思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(length == capacity)<span class="comment">//判断使用扩容的时机</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="根据线性表用顺序存储结构实现的操作完成情况："><a href="#根据线性表用顺序存储结构实现的操作完成情况：" class="headerlink" title="根据线性表用顺序存储结构实现的操作完成情况："></a>根据线性表用顺序存储结构实现的操作完成情况：</h4><ul><li><del>增加元素</del>（完成）<ul><li>bool Push_back(T)</li></ul></li><li><del>查找元素</del>（完成）<ul><li>bool GetElement(int index,T&amp;c)</li></ul></li><li><del>扩容</del>（完成）<ul><li>bool realloc()</li></ul></li><li><del>删除元素</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>插入元素</del>(完成)<ul><li>bool InsertElement(int index, T t)</li></ul></li><li><del>清空元素</del>（完成）&lt;待完善修改&gt;<ul><li>bool DeleteAllElement()</li></ul></li></ul><hr><h5 id="代码详细："><a href="#代码详细：" class="headerlink" title="代码详细："></a>代码详细：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1 <span class="comment">//定义最大容量</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* datas; <span class="comment">//线性表</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//实际容量</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//总容量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqList() &#123;</span><br><span class="line">capacity = MAX_SIZE;<span class="comment">//总容量等于最大容量（进行初始化）</span></span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得总容量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找并取值操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElement</span><span class="params">(<span class="keyword">int</span> index, T&amp; c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">c = datas[index];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*增加元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T NewElem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datas[length] = NewElem;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*设置元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">datas[index] = t;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部后退</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//删除动作完成后返回true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*清空元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteAllElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">DeleteElement(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(T e, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(datas[i] == e)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">/*扩容操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//更换扩容操作完成后宣布扩容操作成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印顺序表操作</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//模版</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(SqList&lt;T&gt;&amp; L)</span> </span>&#123;</span><br><span class="line">T e;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">L.GetElement(i, e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!List.GetElement(<span class="number">1</span>, ch))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'A'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'B'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改下标为1的B为G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.SetElement(<span class="number">1</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入C"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'C'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入D"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'D'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标为2的位置插入O"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">2</span>, <span class="string">'O'</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除下标为1的G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">1</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找M的下标为： "</span> &lt;&lt; List.find(<span class="string">'M'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空了所有元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteAllElement();</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入F"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'F'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找A的下标为： "</span> &lt;&lt; List.find(<span class="string">'A'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标9位置插入G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">9</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;顺序表储存结构&quot;&gt;&lt;a href=&quot;#顺序表储存结构&quot; class=&quot;headerlink&quot; title=&quot;顺序表储存结构&quot;&gt;&lt;/a&gt;顺序表储存结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;顺序表(SqList)&lt;/li&gt;
&lt;li&gt;定义： 顺序表存储结构是一个以&lt;strong&gt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>大学学习个人计划及路线规划</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/大学学习个人计划及路线规划/</id>
    <published>2019-06-15T00:42:00.000Z</published>
    <updated>2019-06-21T02:14:48.159Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19jcC/DnQXWSASsrBe0tchH7o4y2vLsP+JwlaiNk3RK1leTrUORp+NIPqSb3z5mlBqPZpZRqSvbcvN8MZWSP2FwIcSrPu/yv6OH9TKbgxPx45GrCMvrZrFIzbEJedPuw/sFHCmIoPRvR8vkZXt4G58LvQTXlN8mrLYqkSx1TW2JNTsRqfiKjkq6RO1XuiBZsyylGLMnZCZM4ztPyVkLQgNSg3C3VaLqv9jKgrv5hYZ3fJRAsnakiOHO/KC07dJZ2Kx+Oslr2mtnsuzvGMQEzSWA0qcsKEIULAcbd3/1FqN5w9kc9MaZd3h4v3XRhJewU+IcXg379bi9qbJBYL6zzPEyqNEjdvnIfauwDB2bk4I0Eg58Sl7536j/8AyP7JxhOvggs0LzS+UDSUZy+LiIfSLQGD5zlmf4UYLKOPvZbp0Uu3QMTAIkowyXd57guQp+SJ27C2K6Nok9YYFNFHw7PWtFkq8Zh9/g8OPHvvDsyfFevexpW7eKcZ/cmpGwefO4s94KchtsccuQsHmGs3E0mcVPmkO/47aOxau7KKLc0r2uoXtgJmKm6ZmTXJ1MMfxF6RcBe/IHHJEgwXFd9LXi7sRBSueTKvBsFTK7MoU4Ud0ydpCiJIXk+x2641Gss3cBGOPx1b1OHglwL+bjAIYUcVIwONDyYbUzRqNk1L/J7O38yBKpZYLuh2lq4DOegnXfRE+ghRI+tkXlIXXhGxdwlsiEtOFPFZbxKYRxdWuX7sxDWniRVCy3BkHvOGb8HuEnvzN9xcC7uCvw9MnYj+eZfWliCYIeiWaFBCsbkksTqiMrkbHWFeOgWoXJBteXCIIzN71oFVsg2SYVqfrxMzQCgVbE5aSGMZzt+iyuXaFHtUHNQMyx67J9sO46Q2uJstFlASItFiD7DMg6bL9bCrz3Zbl+l5AOcDE+rZ7nSvwCLsJ7ZBulgaho0xDQrI8Gu1jBXhgmuzeUCZJcM9+/YpFfq7vLJufH0v6hn5bGbFTeTvteTkTGFeH87Y8Mg4kHGBCXIOABvA8P+qzfvbJYMc/PqXo+ln52Um/nbwUzl6Ww26LeRGHFpMMC8LiGRvS/L3b7WcecghyG42n6PH5U5BhWDJY6zoKhQPLuxhDxQXoWQ2YvOcBJmfbiUyxiZ93eIUWcXgTWIJ1XNMUFNM5Wwsneue8vyMjXtUYLlp9bh+N/aDyLEoJ02UYiIofPzhFdTh2cEQ+VqENnv7Lp3qf1gWWq0QJ/iIbDoqgwqNGEHUnXD1x4ptypnBXn+Z6RpE2/RmB/MUCDZfj5EtK/tA==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
</feed>
