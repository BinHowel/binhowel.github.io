<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-06-28T02:25:40.545Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++进阶学习总结-（1.6）迭代器</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/C-进阶学习总结-（1-6）迭代器/</id>
    <published>2019-06-26T05:28:56.000Z</published>
    <updated>2019-06-28T02:25:40.545Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述迭代器的基本概念、实质、及用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.3）链栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/数据结构学习总结-（3-3）链栈/</id>
    <published>2019-06-26T04:27:15.000Z</published>
    <updated>2019-06-26T05:03:16.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="栈的链式实现算法及思路"><a href="#栈的链式实现算法及思路" class="headerlink" title="栈的链式实现算法及思路"></a>栈的链式实现算法及思路</h4><ul><li><p>栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。</p></li><li><table><tr><td bgcolor="yellow">入栈</td></tr></table><ul><li><p>思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    LNode*p = <span class="keyword">new</span> LNode();</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">出栈</td></tr></table><ul><li><p>思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈)</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!head-&gt;next)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">析构函数</td></tr></table><ul><li><p>思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~LkStack()&#123;</span><br><span class="line">    LNode*p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a href="#具体代码实现：" class="headerlink" title="具体代码实现："></a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">LkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LkStack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~LkStack() &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode();</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获得栈顶数据*/</span></span><br><span class="line"><span class="function">T&amp; <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">LkStack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据1"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据2"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据3"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据4"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据5"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.GetTop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;栈的链式实现算法及思路&quot;&gt;&lt;a href=&quot;#栈的链式实现算法及思路&quot; class=&quot;headerlink&quot; title=&quot;栈的链式实现算法及思路&quot;&gt;&lt;/a&gt;栈的链式实现算法及思路&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈的链式实现是以前插法为基础的。即以头结点next
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++个人学习路线</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-个人学习路线/</id>
    <published>2019-06-25T15:41:26.000Z</published>
    <updated>2019-06-25T16:40:52.386Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      （加密文章）
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.5）vector容器详解</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-进阶学习总结-（1-5）vector容器详解/</id>
    <published>2019-06-25T11:01:59.000Z</published>
    <updated>2019-06-25T12:17:11.053Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++基本库中的vector容器的基本概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.2）顺序栈的实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-2）顺序栈的实现/</id>
    <published>2019-06-24T14:59:45.000Z</published>
    <updated>2019-06-25T08:28:51.825Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序栈的实现与算法思路（以char数据类型为例）"><a href="#顺序栈的实现与算法思路（以char数据类型为例）" class="headerlink" title="顺序栈的实现与算法思路（以char数据类型为例）"></a>顺序栈的实现与算法思路（以char数据类型为例）</h4><ul><li><p>入栈push(char e)；</p></li><li><p>思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)<span class="comment">//容量满了就进行扩容</span></span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;<span class="comment">//直接修改并移动top指针</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出栈pop();</p></li><li><p>思路：在没有空栈的情况下，直接让top自减一。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)<span class="comment">//判断是否空栈。</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="顺序栈的实现情况"><a href="#顺序栈的实现情况" class="headerlink" title="顺序栈的实现情况"></a>顺序栈的实现情况</h4><ul><li><del>出栈</del>(完成)<ul><li>push(char e)</li></ul></li><li><del>入栈</del>(完成)<ul><li>pop()</li></ul></li><li><del>扩容</del>(完成)<ul><li>realloc()</li></ul></li><li><del>遍历？</del>(完成)<ul><li>Traverse(void(*fb)(char&amp; e))</li></ul></li><li><del>获得栈顶数据</del>(完成)<ul><li>GetTop()</li></ul></li><li><del>是否为空栈</del>(完成)<ul><li>IsStackEmpty()</li></ul></li><li><del>获得栈总容量</del>(完成)<ul><li>GetCapacity()</li></ul></li></ul></li></ul><hr><p>具体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SQSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SQSTACK_H_</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span>* top = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">char</span>* data = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack(<span class="keyword">int</span> c = <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*遍历*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp;e))</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">GetTop</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsStackEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetCapacity</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*扩容*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*打印*/</span> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_SQSTACK_H_</span></span></span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack::SqStack(<span class="keyword">int</span> c) &#123;</span><br><span class="line">capacity = c;<span class="comment">//默认给一个初值</span></span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">top = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩容*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::<span class="built_in">realloc</span>() &#123;</span><br><span class="line"><span class="keyword">char</span>* n_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * capacity];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">n_data[i] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]data;</span><br><span class="line">data = n_data;</span><br><span class="line">top = data + capacity;<span class="comment">//这里要注意top也有重新赋值新的地址</span></span><br><span class="line"></span><br><span class="line">capacity *= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)</span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历*/</span></span><br><span class="line"><span class="keyword">void</span> SqStack::Traverse(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp; e)) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top - data; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> fb(data[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="keyword">char</span> SqStack::GetTop() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>*(top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否空栈*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::IsStackEmpty() &#123;</span><br><span class="line"><span class="keyword">if</span> (top == data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得容量*/</span></span><br><span class="line"><span class="keyword">int</span> SqStack::GetCapacity() &#123;</span><br><span class="line"><span class="keyword">return</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印*/</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqStack <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据a"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'a'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据b"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'b'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据c"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'c'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据d"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'d'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据e"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'e'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据f"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'f'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"出栈一个数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop(); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;a href=&quot;#顺序栈的实现与算法思路（以char数据类型为例）&quot; class=&quot;headerlink&quot; title=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;/a&gt;顺序栈的实现与算法思路（以c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.1）栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-1）栈/</id>
    <published>2019-06-24T07:45:53.000Z</published>
    <updated>2019-06-24T08:13:32.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初识栈"><a href="#初识栈" class="headerlink" title="初识栈"></a>初识栈</h4><ul><li>定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。<ul><li>允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。</li><li>不含任何数据元素的栈称为空栈。</li></ul></li><li>特点：<ul><li>先进后出</li><li>后进先出</li></ul></li></ul><p><font color="red"><strong>注意：</strong></font></p><ul><li>栈又被称为后进先出(Last in First out)的线性表</li><li>栈的插入操作，被称为进栈，也称压栈、入栈(push)</li><li>栈的删除操作也称出栈，也称为弹栈(pop)</li><li>示意图：<img src="/2019/06/24/数据结构学习总结-（3-1）栈/1.gif"></li></ul><hr><h4 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h4><ul><li>ADT 栈(Stack)</li><li>Data<ul><li>栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系，</li></ul></li><li>Operation<ul><li>InitStack；初始化，创建一个空栈</li><li>destoryStack;  销毁栈</li><li>StackEmpty；判断是否为空</li><li>clearStack； 清空栈</li><li>getTop；获得栈顶元素</li><li>push 压栈</li><li>pop 出栈</li><li>stacklength；获得栈的长度</li></ul></li><li>endADT</li></ul><p><font color="red"><strong>注意：</strong></font>栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用</p><p>–（本文未完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;初识栈&quot;&gt;&lt;a href=&quot;#初识栈&quot; class=&quot;headerlink&quot; title=&quot;初识栈&quot;&gt;&lt;/a&gt;初识栈&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。&lt;ul&gt;
&lt;li&gt;允许插入和删除的一段称为栈顶(top),另
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.4）函数新特性、const关键字精解</title>
    <link href="https://shuhaohwang.github.io/2019/06/23/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/23/C-进阶学习总结-（1-4）函数新特性、const关键字精解/</id>
    <published>2019-06-23T09:34:31.000Z</published>
    <updated>2019-06-24T04:06:03.460Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述函数的新特性、内联函数实质与应用、constchar*、charconst*、等区别，函数杂合（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置</title>
    <link href="https://shuhaohwang.github.io/2019/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE/"/>
    <id>https://shuhaohwang.github.io/2019/06/22/数据结构学习总结-（2-9）顺序存储结构与链式存储结构的逆置/</id>
    <published>2019-06-22T15:44:35.000Z</published>
    <updated>2019-06-22T16:26:32.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构的逆置算法与思路："><a href="#顺序结构的逆置算法与思路：" class="headerlink" title="顺序结构的逆置算法与思路："></a>顺序结构的逆置算法与思路：</h4><ul><li><p>夹逼法：</p></li><li><p>思路：通过对数组头部和尾部相互对调并向中间靠近。</p></li><li><p>实现：(假设以整型为数据类型实现)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length/<span class="number">2</span>; i++)&#123;<span class="comment">//注意：length要除于2！！！！length要除于2！！！！</span></span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[length - <span class="number">1</span> - i];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="red"><strong>注意</strong></font>：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。</li></ul></li></ul><ul><li><p>算法优化：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ，j = length - <span class="number">1</span>; i &lt; j; i++,j--)&#123;</span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[j];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此方法更能体现夹逼法。</p></li></ul><hr><h4 id="链式存储结构的逆置算法与思路："><a href="#链式存储结构的逆置算法与思路：" class="headerlink" title="链式存储结构的逆置算法与思路："></a>链式存储结构的逆置算法与思路：</h4><ul><li><p>思路：把头结点和数据结点断开，然后把数据结点一个个<strong>前插</strong>进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：<code>p-&gt;next = head-&gt;next;head -&gt;next = p;</code>其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。</p></li><li><p>实现1(单向链表)：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现2(循环链表)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p!=head)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前后只是循环条件发生变化。</p></li></ul><hr><p>–（本文完）&lt;原创&gt;&lt;待增添修改&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;a href=&quot;#顺序结构的逆置算法与思路：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;/a&gt;顺序结构的逆置算法与思路：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;夹逼法：&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/数据结构学习总结-（2-8）线性表的顺序存储结构和链式存储结构之间的比较/</id>
    <published>2019-06-21T15:13:32.000Z</published>
    <updated>2019-06-21T16:03:35.639Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构与链式结构的比较："><a href="#顺序结构与链式结构的比较：" class="headerlink" title="顺序结构与链式结构的比较："></a>顺序结构与链式结构的比较：</h4><table><thead><tr><th></th><th>顺序结构</th><th>链式结构</th></tr></thead><tbody><tr><td>按序号下标读取</td><td>直接读取通过A[index]即可获的数据<font color="red"><strong>+++</strong></font></td><td>要从头开始找，找的下标才能获取数据<font color="blue"><strong>—</strong></font></td></tr><tr><td>内存实验</td><td>要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容<strong>可能没有足够的空间或多出空间</strong><font color="blue"><strong>—</strong></font></td><td>按需要分配，想要一个就一个<strong>可利用很小的碎片空间</strong><font color="red"><strong>+++</strong></font></td></tr><tr><td>插入元素</td><td>插入一个元素需要不断移动后面的元素，速度慢，消耗相比大<font color="blue"><strong>—</strong></font></td><td>直接插入，速度快，消耗相比小<font color="red"><strong>+++</strong></font></td></tr><tr><td>删除</td><td>需要移动元素<font color="blue"><strong>—</strong></font></td><td>直接删除<font color="red"><strong>+++</strong></font></td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;a href=&quot;#顺序结构与链式结构的比较：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;/a&gt;顺序结构与链式结构的比较：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/C++进阶学习总结-（1-3）范围for语句，动态分配/</id>
    <published>2019-06-21T06:55:19.000Z</published>
    <updated>2019-06-21T09:10:55.043Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述新版的for语句、动态内存分配的基础知识、c++11新关键字nullptr（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.7）双向链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/20/数据结构学习总结-（2-7）双向链表/</id>
    <published>2019-06-20T01:40:31.000Z</published>
    <updated>2019-06-22T04:06:28.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ul><li>与单向链表的不同之处：</li></ul><table><thead><tr><th align="center">单向链表</th><th align="center">双向链表</th></tr></thead><tbody><tr><td align="center">只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。</td><td align="center">相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到</td></tr></tbody></table><ul><li>双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。</li></ul><hr><h5 id="根据双向链表具有前后两个指针的这个特性"><a href="#根据双向链表具有前后两个指针的这个特性" class="headerlink" title="根据双向链表具有前后两个指针的这个特性"></a>根据双向链表具有前后两个指针的这个特性</h5><ul><li>在插入算法和删除算法中都有很好的优势</li></ul><ul><li><p><strong>插入算法</strong>：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要插入的位置即可</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;<span class="comment">//指定位置的前一个数据的next指针指向新插入的数据地址</span></span><br><span class="line">node-&gt;prior = p-&gt;prior;<span class="comment">//新插入数据的prior指针指向原来位置数据的前一个数据地址</span></span><br><span class="line">p-&gt;prior = node;<span class="comment">//插入位置的前一个数据更变为新插入的数据地址</span></span><br><span class="line">node-&gt;next = p;<span class="comment">//新插入数据的next指针指向插入位置的地址</span></span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//链表总长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/1.png"></li></ul></li></ul><ul><li><p><strong>删除算法</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要删除的数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;<span class="comment">//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址</span></span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;<span class="comment">//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据</span></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//释放待删除数据的空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除算法即可以直接跳过待删除数据结点。</p></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/2.png"></li></ul></li></ul><hr><h5 id="其他测试代码详情："><a href="#其他测试代码详情：" class="headerlink" title="其他测试代码详情："></a>其他测试代码详情：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSLkList</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">LNode* prior;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BSLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = head;</span><br><span class="line">head-&gt;prior = head;</span><br><span class="line">rear = head;</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = node;</span><br><span class="line">node-&gt;next = head;</span><br><span class="line">node-&gt;prior = p;</span><br><span class="line">rear = node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;</span><br><span class="line">node-&gt;prior = p-&gt;prior;</span><br><span class="line">p-&gt;prior = node;</span><br><span class="line">node-&gt;next = p;</span><br><span class="line"></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定位置遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e, <span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* s = GetDataAddress(e);</span><br><span class="line">LNode* p = s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s!=head)</span><br><span class="line">fb(s-&gt;data);</span><br><span class="line">s = s-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (s != p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BSLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个A数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'A'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个B数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'B'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个C数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'C'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了3号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">3</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了1号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">1</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从B数据开始遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'B'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果图：</p><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/3.png"><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;与单向链表的不同之处：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/</id>
    <published>2019-06-19T15:58:01.000Z</published>
    <updated>2019-06-22T04:06:21.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="体现循环链表的优点之从指定结点开始遍历"><a href="#体现循环链表的优点之从指定结点开始遍历" class="headerlink" title="体现循环链表的优点之从指定结点开始遍历"></a>体现循环链表的优点之从指定结点开始遍历</h4><p>​    上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表<strong>可以从指定的结点开始遍历整个链表</strong>，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。</p><ul><li>这里通过遍历函数来体现这一特性。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找链表中的某一个元素并获得它的地址</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//获得指定结点的地址</span></span><br><span class="line">LNode* q = p;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)<span class="comment">//越过头结点</span></span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">            </span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。</li></ul><hr><ul><li>具体实验代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line">LNode* q = p;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从b数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'b'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从c数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'c'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><img src="/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/1.png"><hr><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>​    这里只是单单用遍历体现了循环链表的这个特点。</p><p>​    其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;a href=&quot;#体现循环链表的优点之从指定结点开始遍历&quot; class=&quot;headerlink&quot; title=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;/a&gt;体现循环链表的优点之从指定结点开始遍历&lt;/h4&gt;&lt;p&gt;​ 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/</id>
    <published>2019-06-19T06:47:06.000Z</published>
    <updated>2019-06-22T04:06:13.895Z</updated>
    
    <content type="html"><![CDATA[<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><ul><li>相较于非循环链表<ul><li>在非循环链表中，最后一个元素的next指针是空指针，造成浪费。</li><li>每次寻找后继指针的时候都要重新从头开始找。</li></ul></li><li>循环链表<ul><li>尾指针直接指向表头，使最后一个元素的next指针被利用起来。</li><li>从每一个元素开始都能遍历表中每一个元素。</li><li>便于类似于链表合并这样的算法实现。</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/1.png"></li></ul><ul><li><p>其他不同：</p><ul><li>循环链表与非循环链表的判断条件发生了变化</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/5.png"></li></ul><hr><h5 id="判断的具体解释（循环链表）"><a href="#判断的具体解释（循环链表）" class="headerlink" title="判断的具体解释（循环链表）"></a>判断的具体解释（循环链表）</h5><ul><li><table><tr><td bgcolor="yellow">判断到前驱结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">  &#123;</span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。</p></li></ul><ul><li><table><tr><td bgcolor="yellow">判断到头结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。</p></li></ul><hr><h5 id="循环链表的尾指针"><a href="#循环链表的尾指针" class="headerlink" title="循环链表的尾指针"></a>循环链表的尾指针</h5><ul><li><p>循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。</p><ul><li>尾指针的好处：<ul><li>找head指针非常方便。rear-&gt;next的值便是head。</li><li>便于链表的合并。</li></ul></li></ul></li></ul><ul><li>代码实现空表时的尾指针：</li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;<span class="comment">//空表时的尾指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/2.png"></li></ul><ul><li>当插入一个元素后尾指针的变化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从链表最后面插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">    </span><br><span class="line">rear = q;<span class="comment">//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的</span></span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="链表合并的实现"><a href="#链表合并的实现" class="headerlink" title="链表合并的实现:"></a>链表合并的实现:</h5><ul><li>具体思路（链表2合并到链表1）：先获得<font color="red">链表2</font>的头结点的地址（即：链表2的指针head）然后让<font color="blue">链表1</font>的head指针指向<font color="red">链表2</font>的指针head-&gt;next指向的地址（即：<font color="red">链表2</font>的第一个元素的地址），然后让<font color="red">链表2</font>的指针rear（尾指针）指向<font color="blue">链表1</font>的head-&gt;指向的地址（即指向<font color="blue">链表1</font>的第一个元素）最后<strong>delete <font color="red">链表2</font>的head指针</strong>。完成合并操作。</li></ul><ul><li>合并前：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/3.png"></li></ul><ul><li>合并后：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/4.png"></li></ul><ul><li>具体实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">LNode* t_head_of_s = s-&gt;head;<span class="comment">//获得链表2的head指针</span></span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;<span class="comment">//让链表2的尾指针指向链表1的第一个元素</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;<span class="comment">//让链表1的head-&gt;next指针指向链表1第一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> t_head_of_s;<span class="comment">//释放原链表2的head指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="循环链表具体代码实现"><a href="#循环链表具体代码实现" class="headerlink" title="循环链表具体代码实现"></a>循环链表具体代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index,T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p -&gt; next = q;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（下标型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p -&gt; next;</span><br><span class="line">q = q -&gt; next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（找值型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">while</span> (q != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data == e) &#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空链表操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListClean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)<span class="comment">//定位到头结点之前，清空初头结点的外的其他数据空间</span></span><br><span class="line">&#123;</span><br><span class="line">q = p -&gt; next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*合并操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">LNode* t_head_of_s = s-&gt;head;</span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length += s-&gt;length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s-&gt;head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除测试 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2号位置的数据被删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">2</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list2:   "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; list2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个v数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'v'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个n数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'n'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个m数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'m'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"list2合并到list"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.ListCombine(&amp;list2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"合并后："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空list</span></span><br><span class="line"><span class="built_in">list</span>.ListClean();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空完成"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="销毁链表与清空链表的区别："><a href="#销毁链表与清空链表的区别：" class="headerlink" title="销毁链表与清空链表的区别："></a>销毁链表与清空链表的区别：</h5><table><thead><tr><th align="center"></th><th align="center"><strong>销毁链表</strong></th><th align="center"><strong>清空链表</strong></th></tr></thead><tbody><tr><td align="center"><strong>具体解释</strong></td><td align="center">包括头结点全部清空全部delete</td><td align="center">保留头结点其他数据元素全部delete清空</td></tr><tr><td align="center"><strong>产生的后果</strong></td><td align="center">头指针丢失，链表无法使用</td><td align="center">清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。</td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;相较于非循环链表&lt;ul&gt;
&lt;li&gt;在非循环链表中，最后一个元素的next指针是空指针，造成浪费。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.2)auto、头文件防卫</title>
    <link href="https://shuhaohwang.github.io/2019/06/18/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB/"/>
    <id>https://shuhaohwang.github.io/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/</id>
    <published>2019-06-18T08:08:05.000Z</published>
    <updated>2019-06-19T16:29:26.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Auto"><a href="#Auto" class="headerlink" title="Auto"></a>Auto</h4><ul><li>auto：变量的自动类型推断。<ul><li>可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（<strong>声明时要初始化</strong>）</li><li>自动推断发生在编译期间，所以使用auto不会造成程序效降低。</li></ul></li></ul><hr><h4 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a>头文件防卫式声明</h4><ul><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _文件名_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _文件名_H</span></span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="为什么要用到头文件防卫式声明？"><a href="#为什么要用到头文件防卫式声明？" class="headerlink" title="为什么要用到头文件防卫式声明？"></a>为什么要用到头文件防卫式声明？</h5><ul><li>目的：为了防止头文件中多重、重复定义内容。</li></ul><ul><li><p>情景假设：</p></li><li><p>假设一个工程里面有两个个头文件.h文件。里面都有自己的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head2.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number2 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行情况：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/1.png"></li></ul><ul><li><p>假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/2.png"></li></ul><ul><li><strong>错误原因</strong>：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h<strong>意味着又重复定义了一次head1.h里面的内容</strong>从而造成head1.h里的number1重复定义的错误。</li></ul><ul><li><p><strong>如何解决？—-对头文件进行防卫式定义</strong></p></li><li><p>即对head1.h文件编辑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD1_H<span class="comment">//如果head1.h没有被定义那么就执行下面的内容</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD1_H<span class="comment">//定义head1.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br><span class="line"></span><br><span class="line">#endif<span class="comment">//结束如果</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而<strong>避免了头文件重复定义的情况</strong>。</li></ul><ul><li><strong>结论</strong>：所以以后定义头文件的时候都可以进行防卫式定义然后就可以<del><strong>随便include定义的头文件了</strong></del>避免这些错误了。</li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Auto&quot;&gt;&lt;a href=&quot;#Auto&quot; class=&quot;headerlink&quot; title=&quot;Auto&quot;&gt;&lt;/a&gt;Auto&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;auto：变量的自动类型推断。&lt;ul&gt;
&lt;li&gt;可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.1)命名空间</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/C++进阶学习总结-(1.1)命名空间/</id>
    <published>2019-06-17T13:14:59.000Z</published>
    <updated>2019-06-19T16:29:16.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命名空间的基本概念简介"><a href="#命名空间的基本概念简介" class="headerlink" title="命名空间的基本概念简介"></a>命名空间的基本概念简介</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，<strong>不可以同名</strong>。</li></ul><ul><li>可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。</li><li>命名空间定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fb</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//函数</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明；</li></ul><hr><h4 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h4><ul><li><p>假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现：</p><p><strong>找到一个或多个多重定义的符号</strong></p><p><strong>void_cdecl Print(void)已在project2.obj中定义</strong>的错误</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/1.jpg"></li></ul><ul><li>如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用<strong>命名空间</strong>来解决具体：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//project1.cpp</span></span><br><span class="line"><span class="keyword">namespace</span> ZhangSan &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这是张三的Print函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 <strong>命名空间名::实体名（函数名）</strong>的方法调用张三的Print函数 （其中<strong>“ : : “</strong>是<strong>作用域运算符</strong>）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ZhangSan::Print();<span class="comment">//张三的</span></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//李四的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况：</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/2.png"><ul><li><p>但是每次调用的时候都要用<strong>命名空间名::实体名（函数名）</strong>的方法岂不是也太麻烦了。</p><p>所以这里就要用上<strong>using</strong>关键字了，只要在头文件引入语句下面加入：</p><p><strong>using namespace ZhangSan</strong>就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"project2.h"</span><span class="comment">//张三命名空间定义所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ZhangSan;<span class="comment">//使用的张三的命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//张三的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况:</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/3.png"></li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命名空间的基本概念简介&quot;&gt;&lt;a href=&quot;#命名空间的基本概念简介&quot; class=&quot;headerlink&quot; title=&quot;命名空间的基本概念简介&quot;&gt;&lt;/a&gt;命名空间的基本概念简介&lt;/h3&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.5)链表存储结构的算法</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/数据结构学习总结-（2.5）链表存储结构的算法/</id>
    <published>2019-06-17T02:36:43.000Z</published>
    <updated>2019-06-22T04:06:07.725Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表储存结构"><a href="#链表储存结构" class="headerlink" title="链表储存结构"></a>链表储存结构</h4><ul><li>链表（LinkedList）</li><li>定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构</li><li>对应线性表操作：<ul><li>前插数据元素<ul><li>Insert_Front()</li></ul></li><li>后插数据元素<ul><li>Push_back()</li></ul></li><li>插入数据<ul><li>Insert_Element()</li></ul></li><li>删除数据<ul><li>Delete_Element()</li></ul></li><li>获得数据<ul><li>Get()</li></ul></li><li>设置数据<ul><li>Set()</li></ul></li><li>遍历链表<ul><li>Traverse()</li></ul></li><li>……</li></ul></li></ul><hr><h4 id="对应一些算法实现思路"><a href="#对应一些算法实现思路" class="headerlink" title="对应一些算法实现思路"></a>对应一些算法实现思路</h4><ul><li><p><strong><em>插入操作</em></strong>：</p><ul><li>思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong><em>删除操作</em></strong>：</p><ul><li>思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时<strong>要先创建一个临时的指针指向将删除的元素的地址</strong>（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后<strong>delete这个临时指针</strong>。</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="链表存储结构代码实现情况："><a href="#链表存储结构代码实现情况：" class="headerlink" title="链表存储结构代码实现情况："></a>链表存储结构代码实现情况：</h4><ul><li><del>前插操作</del>（完成）<ul><li>bool InsertFront(T e)</li></ul></li><li><del>后插操作</del>（完成）<ul><li>bool push_back(T e)</li></ul></li><li><del>插入操作</del>（完成）<ul><li>bool InsertElement(int index, T e)</li></ul></li><li><del>删除操作</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>获得操作</del>（完成）<ul><li>bool Get(int index,T&amp; e)</li></ul></li><li><del>修改操作</del>（完成）<ul><li>bool Set(int index, T e)</li></ul></li><li><del>遍历操作</del>（完成）<ul><li>void Traverse(void(*fb)(T&amp; t))</li></ul></li></ul><hr><h5 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">LkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> index,T&amp; e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//这里的p指向的下一个元素的头指针</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;<span class="comment">//把p的指针往后一个元素头指针移动</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">e = p-&gt;data;<span class="comment">//获得数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertFront</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();<span class="comment">//创建一个新数据空间</span></span><br><span class="line"><span class="keyword">if</span> (!q)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//对要插入的数据进行赋值到这个空间的data</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//避免第一个数据next指针出现野指针的问题</span></span><br><span class="line">q-&gt;next = head-&gt;next;<span class="comment">//与头结点相连</span></span><br><span class="line">head-&gt;next = q;<span class="comment">//这个next指针指向第二个数据的位置</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始让指针指向最后一个数据元素的地址</span></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)<span class="comment">//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题</span></span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始寻找要修改的位置</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;<span class="comment">//数据进行修改</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;t)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LkList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个A "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'A'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个B "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'B'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插了一个C "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.push_back(<span class="string">'C'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了O "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'O'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了G "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'G'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了第2位的元素 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">2</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"把第3位的数据修改成I"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Set(<span class="number">3</span>,<span class="string">'I'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"获得第4位的数据 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">List.Get(<span class="number">4</span>, ch);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–（本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表储存结构&quot;&gt;&lt;a href=&quot;#链表储存结构&quot; class=&quot;headerlink&quot; title=&quot;链表储存结构&quot;&gt;&lt;/a&gt;链表储存结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;链表（LinkedList）&lt;/li&gt;
&lt;li&gt;定义: 每个元素用一个指针（以存储下一个数据的地
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.4)初识链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/16/数据结构学习总结-（2.4）初识链表/</id>
    <published>2019-06-16T12:07:28.000Z</published>
    <updated>2019-06-22T04:06:01.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表基本概念"><a href="#链表基本概念" class="headerlink" title="链表基本概念"></a>链表基本概念</h4><ul><li>结点包括数据域和指针域。</li><li>链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。</li></ul><ul><li><strong>相较于顺序表存储结构的优点</strong>：<ol><li>不用定义时规定长度。</li><li>存储的元素个数不受限制。</li><li>插入和删除元素时，不用移动其他元素。</li></ol></li></ul><hr><h4 id="链表的头指针和头结点"><a href="#链表的头指针和头结点" class="headerlink" title="链表的头指针和头结点"></a>链表的头指针和头结点</h4><ul><li>基本概念<ul><li>头指针：链表中第一个结点的储存位置。</li><li>头结点：在单链表的第一个结点前附设的一个结点。</li></ul></li></ul><table><thead><tr><th align="center">头指针</th><th align="center">头结点</th></tr></thead><tbody><tr><td align="center">若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针</td><td align="center">头结点是为了操作的<strong>统一和方便</strong>而设立的，放在第一个结点之前  <font color="red">其数据域一般无意义</font>（可以存储链表的长度）</td></tr><tr><td align="center">头指针具有表示作用，所以常常有头指针表示链表的名字</td><td align="center">有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了</td></tr><tr><td align="center">无论链表是否为空，头指针均不为空。头指针是链表的<strong>必要</strong>元素</td><td align="center"><font color="red">头结点不一定是链表的必须要素</font></td></tr></tbody></table><hr><h4 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h4><ul><li>链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。</li><li>链表存储结构中，数据存储在内存中<strong>分散</strong>的位置。各个数据由一个指针相互连接<ul><li>一个数据中的指针域存放的是<strong>下一个</strong>数据的地址。</li></ul></li><li>由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问</li></ul><ul><li><strong>删除</strong>：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。</li><li><strong>添加</strong>：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表基本概念&quot;&gt;&lt;a href=&quot;#链表基本概念&quot; class=&quot;headerlink&quot; title=&quot;链表基本概念&quot;&gt;&lt;/a&gt;链表基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;结点包括数据域和指针域。&lt;/li&gt;
&lt;li&gt;链表是有n个结点链结成，第一个结点的存储位置叫做头指
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.3）顺序表存储结构代码、算法实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/数据结构学习总结-（2.3）顺序表存储结构代码、算法实现/</id>
    <published>2019-06-15T02:16:28.000Z</published>
    <updated>2019-06-22T04:05:54.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表储存结构"><a href="#顺序表储存结构" class="headerlink" title="顺序表储存结构"></a>顺序表储存结构</h3><ul><li>顺序表(SqList)</li><li>定义： 顺序表存储结构是一个以<strong>连续</strong>空间地址存储为方式的<em>物理结构</em></li><li>实现线性表相应操作：<ul><li>SqList（）                    初始化线性表：创建一个空的线性表List</li><li>SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e</li><li>SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e</li><li>SqList.GetLength（）                               获得线性表的长度</li><li>SqList.DeleteAllElement（）                                  清空线性表</li><li>SqList.find（e）                  查找线性表中的元素e</li><li>………. </li></ul></li></ul><hr><h4 id="一些基础算法的实现思路"><a href="#一些基础算法的实现思路" class="headerlink" title="一些基础算法的实现思路"></a>一些基础算法的实现思路</h4><ul><li><p><strong><em>插入算法</em></strong>：</p><ul><li><p>思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, Datas t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部往后覆盖赋值</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>删除算法</em></strong>：</p><ul><li><p>思路：根据要删除元素的下标为目标往前覆盖赋值。</p></li><li><p>具体实现：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>扩容</em></strong>：</p><ul><li><p>思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(length == capacity)<span class="comment">//判断使用扩容的时机</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="根据线性表用顺序存储结构实现的操作完成情况："><a href="#根据线性表用顺序存储结构实现的操作完成情况：" class="headerlink" title="根据线性表用顺序存储结构实现的操作完成情况："></a>根据线性表用顺序存储结构实现的操作完成情况：</h4><ul><li><del>增加元素</del>（完成）<ul><li>bool Push_back(T)</li></ul></li><li><del>查找元素</del>（完成）<ul><li>bool GetElement(int index,T&amp;c)</li></ul></li><li><del>扩容</del>（完成）<ul><li>bool realloc()</li></ul></li><li><del>删除元素</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>插入元素</del>(完成)<ul><li>bool InsertElement(int index, T t)</li></ul></li><li><del>清空元素</del>（完成）&lt;待完善修改&gt;<ul><li>bool DeleteAllElement()</li></ul></li></ul><hr><h5 id="代码详细："><a href="#代码详细：" class="headerlink" title="代码详细："></a>代码详细：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1 <span class="comment">//定义最大容量</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* datas; <span class="comment">//线性表</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//实际容量</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//总容量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqList() &#123;</span><br><span class="line">capacity = MAX_SIZE;<span class="comment">//总容量等于最大容量（进行初始化）</span></span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得总容量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找并取值操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElement</span><span class="params">(<span class="keyword">int</span> index, T&amp; c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">c = datas[index];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*增加元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T NewElem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datas[length] = NewElem;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*设置元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">datas[index] = t;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部后退</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//删除动作完成后返回true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*清空元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteAllElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">DeleteElement(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(T e, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(datas[i] == e)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">/*扩容操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//更换扩容操作完成后宣布扩容操作成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印顺序表操作</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//模版</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(SqList&lt;T&gt;&amp; L)</span> </span>&#123;</span><br><span class="line">T e;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">L.GetElement(i, e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!List.GetElement(<span class="number">1</span>, ch))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'A'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'B'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改下标为1的B为G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.SetElement(<span class="number">1</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入C"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'C'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入D"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'D'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标为2的位置插入O"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">2</span>, <span class="string">'O'</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除下标为1的G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">1</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找M的下标为： "</span> &lt;&lt; List.find(<span class="string">'M'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空了所有元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteAllElement();</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入F"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'F'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找A的下标为： "</span> &lt;&lt; List.find(<span class="string">'A'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标9位置插入G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">9</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;顺序表储存结构&quot;&gt;&lt;a href=&quot;#顺序表储存结构&quot; class=&quot;headerlink&quot; title=&quot;顺序表储存结构&quot;&gt;&lt;/a&gt;顺序表储存结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;顺序表(SqList)&lt;/li&gt;
&lt;li&gt;定义： 顺序表存储结构是一个以&lt;strong&gt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>大学学习个人计划及路线规划</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/大学学习个人计划及路线规划/</id>
    <published>2019-06-15T00:42:00.000Z</published>
    <updated>2019-06-21T02:14:48.159Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19Kl3YeYXY4nDQf0k2kEe4jYk8s5QQcBbXwqdBcNZrmQDVwh4Pqnj27Gw9FOUUM6BYFXfoMw/ykXuyuZXmXIuSDklSE4GY6B9b7eV8E0Z9DA999Ms6/EcMWetn4Et7rIjne9APklbOXfggyEywcUDcmIh493W0bMrNTR/dpO13dXeuySn96IfuL6+5fWq887qAd6uBAmBXhxOE00Ijg0FU1rCTBd4wxdoaOFPEi9f64youVYzCOPYbiQBGggKb+1/x8ntiyM0a3hrRqkp4J1Q8wFy2Z4Idt3fuOxoKa66kBGJDYQbrOlOqhtYNKpg7H00JRZdTTKH9XJA2MurA56gMWgiPV3+LEYEZczSDvTJfeO8icyLKOD9RR6yjYhx3x/sH6Cl2BLsmKkRT+vaVBbZvvhSdeAIBAXYYFqc7ApmF4+MIrtE4sLwrFAMVHx+zDnI8ayP896vmHeEa/w9Q0kb3SgADzOOAntqqx4iqKgQy5J4QD5mWeHkMbMP3En9Ck4IqdAJRdoci+7gdwPXp/PgEbTFSykuqv5xwyimgoRxllhWktACFrkXhh2JgB0CUutO6nTsD12ajCiWu8/zU7hQ0QUBH5F2cUBYtpwMuPn+fgRsdtgXXBMzPLYYQ5DLiOyBJ1wQjIBayGk2GGmZ+OOGFdFRZzW6GC1ETLZYTfx0m2gv2onC2MmOHujXWI1CzGdT+AUHpdVxNdfeOdcs2sdF8L6lazJALeV5kU6A5GE6LLbHQi6XcPOp1QTsRsZVOeiAmouuouMy4xGD+XqJV5iAnl+78EEheIe5geys4vZsrW4N+4esSQyT2mbS5eN6LXc9TkrNUaqsK5idAEQ1ivb8OL5YNICi+2pkqUYZFXkZosyAs4fr3eoruOLKNmwEb9i/1ahAbDCzFm3N/Qmv7hU3BuInQFOEvl1b+aSWM0fHlr600eegUxynJw54hC2gj7PMEqhIEm19WShwVrxB6vzJ0nYNsSNHIpqzMsLa0P3LiaceAgMmGEjVSaIv2z4ntHjtibh5jZAEYE1OYkKr1HtTFPG55+KOl/KGhoI+RJkHrup3xcSgmIKGuYwUjCg3wpGL60OMLk75Yg+W0kDz14H8xyp+2AyDGyg6LXzt1WhzqYCDMltuxyFa6mPnuytb4wkwBHLMLhKGhpgFL0BMTaEiyLYoBskrmN1A5TIXnHqsPOrrnkNoX6Om8gt40cICv9ezZScu4OGeG07fEfgmqhx0jGE7tzpBPpHUPcv+gZSHYoTR+VovRhuNo0GAAWhr32Y6ruiIRvBgum8Q==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.2）顺序表存储结构</title>
    <link href="https://shuhaohwang.github.io/2019/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.2%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://shuhaohwang.github.io/2019/06/14/数据结构学习总结-（2.2）顺序表存储结构/</id>
    <published>2019-06-14T15:32:42.000Z</published>
    <updated>2019-06-22T04:05:48.055Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序表结构"><a href="#顺序表结构" class="headerlink" title="顺序表结构"></a>顺序表结构</h4><ul><li>顺序存储结构的线性表–顺序表</li><li>定义：指的是用一段地址<strong>连续</strong>的存储单元依次存储线性表的数据元素（数组）</li></ul><h4 id="顺序表的构成"><a href="#顺序表的构成" class="headerlink" title="顺序表的构成"></a>顺序表的构成</h4><ul><li><p>需要定义线性表的最大存储空间</p><ul><li>#define int Max_SIZE = 255;</li></ul></li><li><p>线性表里需要有统一类型的元素集合</p></li></ul><hr>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int MAX_SIZE = 255;<span class="comment">//最大存储长度</span></span></span><br><span class="line">  <span class="comment">/*定义线性表*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//给int起一个别名 ElementType</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span>* name;</span><br><span class="line">&#125;ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义顺序表结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElementType Datas[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><hr><p>–(本文完)&lt;待完善&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序表结构&quot;&gt;&lt;a href=&quot;#顺序表结构&quot; class=&quot;headerlink&quot; title=&quot;顺序表结构&quot;&gt;&lt;/a&gt;顺序表结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;顺序存储结构的线性表–顺序表&lt;/li&gt;
&lt;li&gt;定义：指的是用一段地址&lt;strong&gt;连续&lt;/stron
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
