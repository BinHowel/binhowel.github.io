<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此，却永不能触及</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2020-02-24T02:10:32.935Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb学习总结(10.2)Redis常用的一些操作【Java】</title>
    <link href="https://shuhaohwang.github.io/2020/02/24/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-10-2-Redis%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%E3%80%90Java%E3%80%91/"/>
    <id>https://shuhaohwang.github.io/2020/02/24/JavaWeb学习总结-10-2-Redis常用的一些操作【Java】/</id>
    <published>2020-02-24T02:06:36.000Z</published>
    <updated>2020-02-24T02:10:32.935Z</updated>
    
    <content type="html"><![CDATA[<h5 id="java中的常用操作"><a class="header-anchor" href="#java中的常用操作">¶</a>Java中的常用操作</h5><h6 id="连接redis"><a class="header-anchor" href="#连接redis">¶</a>连接redis</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisJava</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">       Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">       System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">       <span class="comment">//查看服务是否运行</span></span><br><span class="line">       System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="key操作"><a class="header-anchor" href="#key操作">¶</a>Key操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================key=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(<span class="string">"清空库中所有数据："</span>+jedis.flushDB());</span><br><span class="line">       <span class="comment">// 判断key否存在 </span></span><br><span class="line">       System.out.println(<span class="string">"判断key999键是否存在："</span>+shardedJedis.exists(<span class="string">"key999"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"新增key001,value001键值对："</span>+shardedJedis.set(<span class="string">"key001"</span>, <span class="string">"value001"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"判断key001是否存在："</span>+shardedJedis.exists(<span class="string">"key001"</span>));</span><br><span class="line">       <span class="comment">// 输出系统中所有的key</span></span><br><span class="line">       System.out.println(<span class="string">"新增key002,value002键值对："</span>+shardedJedis.set(<span class="string">"key002"</span>, <span class="string">"value002"</span>));</span><br><span class="line">       System.out.println(<span class="string">"系统中所有键如下："</span>);</span><br><span class="line">       Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>); </span><br><span class="line">       Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">           String key = it.next();   </span><br><span class="line">           System.out.println(key);   </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 删除某个key,若key不存在，则忽略该命令。</span></span><br><span class="line">       System.out.println(<span class="string">"系统中删除key002: "</span>+jedis.del(<span class="string">"key002"</span>));</span><br><span class="line">       System.out.println(<span class="string">"判断key002是否存在："</span>+shardedJedis.exists(<span class="string">"key002"</span>));</span><br><span class="line">       <span class="comment">// 设置 key001的过期时间</span></span><br><span class="line">       System.out.println(<span class="string">"设置 key001的过期时间为5秒:"</span>+jedis.expire(<span class="string">"key001"</span>, <span class="number">5</span>));</span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           Thread.sleep(<span class="number">2000</span>); </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="comment">// 查看某个key的剩余生存时间,单位【秒】.永久生存或者不存在的都返回-1</span></span><br><span class="line">       System.out.println(<span class="string">"查看key001的剩余生存时间："</span>+jedis.ttl(<span class="string">"key001"</span>));</span><br><span class="line">       <span class="comment">// 移除某个key的生存时间</span></span><br><span class="line">       System.out.println(<span class="string">"移除key001的生存时间："</span>+jedis.persist(<span class="string">"key001"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看key001的剩余生存时间："</span>+jedis.ttl(<span class="string">"key001"</span>));</span><br><span class="line">       <span class="comment">// 查看key所储存的值的类型</span></span><br><span class="line">       System.out.println(<span class="string">"查看key所储存的值的类型："</span>+jedis.type(<span class="string">"key001"</span>));</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 一些其他方法：1、修改键名：jedis.rename("key6", "key0");</span></span><br><span class="line"><span class="comment">        *             2、将当前db的key移动到给定的db当中：jedis.move("foo", 1)</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h6 id="字符串操作"><a class="header-anchor" href="#字符串操作">¶</a>字符串操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================String_1=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(<span class="string">"清空库中所有数据："</span>+jedis.flushDB());</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============增============="</span>);</span><br><span class="line">       jedis.set(<span class="string">"key001"</span>,<span class="string">"value001"</span>);</span><br><span class="line">       jedis.set(<span class="string">"key002"</span>,<span class="string">"value002"</span>);</span><br><span class="line">       jedis.set(<span class="string">"key003"</span>,<span class="string">"value003"</span>);</span><br><span class="line">       System.out.println(<span class="string">"已新增的3个键值对如下："</span>);</span><br><span class="line">       System.out.println(jedis.get(<span class="string">"key001"</span>));</span><br><span class="line">       System.out.println(jedis.get(<span class="string">"key002"</span>));</span><br><span class="line">       System.out.println(jedis.get(<span class="string">"key003"</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============删============="</span>);  </span><br><span class="line">       System.out.println(<span class="string">"删除key003键值对："</span>+jedis.del(<span class="string">"key003"</span>));  </span><br><span class="line">       System.out.println(<span class="string">"获取key003键对应的值："</span>+jedis.get(<span class="string">"key003"</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============改============="</span>);</span><br><span class="line">       <span class="comment">//1、直接覆盖原来的数据</span></span><br><span class="line">       System.out.println(<span class="string">"直接覆盖key001原来的数据："</span>+jedis.set(<span class="string">"key001"</span>,<span class="string">"value001-update"</span>));</span><br><span class="line">       System.out.println(<span class="string">"获取key001对应的新值："</span>+jedis.get(<span class="string">"key001"</span>));</span><br><span class="line">       <span class="comment">//2、直接覆盖原来的数据  </span></span><br><span class="line">       System.out.println(<span class="string">"在key002原来值后面追加："</span>+jedis.append(<span class="string">"key002"</span>,<span class="string">"+appendString"</span>));</span><br><span class="line">       System.out.println(<span class="string">"获取key002对应的新值"</span>+jedis.get(<span class="string">"key002"</span>)); </span><br><span class="line">  </span><br><span class="line">       System.out.println(<span class="string">"=============增，删，查（多个）============="</span>);</span><br><span class="line">       <span class="comment">/** </span></span><br><span class="line"><span class="comment">        * mset,mget同时新增，修改，查询多个键值对 </span></span><br><span class="line"><span class="comment">        * 等价于：</span></span><br><span class="line"><span class="comment">        * jedis.set("name","ssss"); </span></span><br><span class="line"><span class="comment">        * jedis.set("jarorwar","xxxx"); </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">       System.out.println(<span class="string">"一次性新增key201,key202,key203,key204及其对应值："</span>+jedis.mset(<span class="string">"key201"</span>,<span class="string">"value201"</span>,</span><br><span class="line">                       <span class="string">"key202"</span>,<span class="string">"value202"</span>,<span class="string">"key203"</span>,<span class="string">"value203"</span>,<span class="string">"key204"</span>,<span class="string">"value204"</span>));  </span><br><span class="line">       System.out.println(<span class="string">"一次性获取key201,key202,key203,key204各自对应的值："</span>+</span><br><span class="line">                       jedis.mget(<span class="string">"key201"</span>,<span class="string">"key202"</span>,<span class="string">"key203"</span>,<span class="string">"key204"</span>));</span><br><span class="line">       System.out.println(<span class="string">"一次性删除key201,key202："</span>+jedis.del(<span class="keyword">new</span> String[]&#123;<span class="string">"key201"</span>, <span class="string">"key202"</span>&#125;));</span><br><span class="line">       System.out.println(<span class="string">"一次性获取key201,key202,key203,key204各自对应的值："</span>+</span><br><span class="line">               jedis.mget(<span class="string">"key201"</span>,<span class="string">"key202"</span>,<span class="string">"key203"</span>,<span class="string">"key204"</span>)); </span><br><span class="line">       System.out.println();</span><br><span class="line">               </span><br><span class="line">           </span><br><span class="line">       <span class="comment">//jedis具备的功能shardedJedis中也可直接使用，下面测试一些前面没用过的方法</span></span><br><span class="line">       System.out.println(<span class="string">"======================String_2=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(<span class="string">"清空库中所有数据："</span>+jedis.flushDB());       </span><br><span class="line">      </span><br><span class="line">       System.out.println(<span class="string">"=============新增键值对时防止覆盖原先值============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"原先key301不存在时，新增key301："</span>+shardedJedis.setnx(<span class="string">"key301"</span>, <span class="string">"value301"</span>));</span><br><span class="line">       System.out.println(<span class="string">"原先key302不存在时，新增key302："</span>+shardedJedis.setnx(<span class="string">"key302"</span>, <span class="string">"value302"</span>));</span><br><span class="line">       System.out.println(<span class="string">"当key302存在时，尝试新增key302："</span>+shardedJedis.setnx(<span class="string">"key302"</span>, <span class="string">"value302_new"</span>));</span><br><span class="line">       System.out.println(<span class="string">"获取key301对应的值："</span>+shardedJedis.get(<span class="string">"key301"</span>));</span><br><span class="line">       System.out.println(<span class="string">"获取key302对应的值："</span>+shardedJedis.get(<span class="string">"key302"</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============超过有效期键值对被删除============="</span>);</span><br><span class="line">       <span class="comment">// 设置key的有效期，并存储数据 </span></span><br><span class="line">       System.out.println(<span class="string">"新增key303，并指定过期时间为2秒"</span>+shardedJedis.setex(<span class="string">"key303"</span>, <span class="number">2</span>, <span class="string">"key303-2second"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"获取key303对应的值："</span>+shardedJedis.get(<span class="string">"key303"</span>)); </span><br><span class="line">       <span class="keyword">try</span>&#123; </span><br><span class="line">           Thread.sleep(<span class="number">3000</span>); </span><br><span class="line">       &#125; </span><br><span class="line">       <span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">       &#125; </span><br><span class="line">       System.out.println(<span class="string">"3秒之后，获取key303对应的值："</span>+shardedJedis.get(<span class="string">"key303"</span>)); </span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============获取原值，更新为新值一步完成============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"key302原值："</span>+shardedJedis.getSet(<span class="string">"key302"</span>, <span class="string">"value302-after-getset"</span>));</span><br><span class="line">       System.out.println(<span class="string">"key302新值："</span>+shardedJedis.get(<span class="string">"key302"</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============获取子串============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"获取key302对应值中的子串："</span>+shardedJedis.getrange(<span class="string">"key302"</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure><h6 id="list操作"><a class="header-anchor" href="#list操作">¶</a>List操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================list=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(<span class="string">"清空库中所有数据："</span>+jedis.flushDB()); </span><br><span class="line"> </span><br><span class="line">       System.out.println(<span class="string">"=============增============="</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"vector"</span>); </span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"ArrayList"</span>); </span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"vector"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"vector"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"LinkedList"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"MapList"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"SerialList"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"stringlists"</span>, <span class="string">"HashList"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"numberlists"</span>, <span class="string">"3"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"numberlists"</span>, <span class="string">"1"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"numberlists"</span>, <span class="string">"5"</span>);</span><br><span class="line">       shardedJedis.lpush(<span class="string">"numberlists"</span>, <span class="string">"2"</span>);</span><br><span class="line">       System.out.println(<span class="string">"所有元素-stringlists："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       System.out.println(<span class="string">"所有元素-numberlists："</span>+shardedJedis.lrange(<span class="string">"numberlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============删============="</span>);</span><br><span class="line">       <span class="comment">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span></span><br><span class="line">       System.out.println(<span class="string">"成功删除指定元素个数-stringlists："</span>+shardedJedis.lrem(<span class="string">"stringlists"</span>, <span class="number">2</span>, <span class="string">"vector"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"删除指定元素之后-stringlists："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       <span class="comment">// 删除区间以外的数据 </span></span><br><span class="line">       System.out.println(<span class="string">"删除下标0-3区间之外的元素："</span>+shardedJedis.ltrim(<span class="string">"stringlists"</span>, <span class="number">0</span>, <span class="number">3</span>));</span><br><span class="line">       System.out.println(<span class="string">"删除指定区间之外元素后-stringlists："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       <span class="comment">// 列表元素出栈 </span></span><br><span class="line">       System.out.println(<span class="string">"出栈元素："</span>+shardedJedis.lpop(<span class="string">"stringlists"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"元素出栈后-stringlists："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============改============="</span>);</span><br><span class="line">       <span class="comment">// 修改列表中指定下标的值 </span></span><br><span class="line">       shardedJedis.lset(<span class="string">"stringlists"</span>, <span class="number">0</span>, <span class="string">"hello list!"</span>); </span><br><span class="line">       System.out.println(<span class="string">"下标为0的值修改后-stringlists："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       System.out.println(<span class="string">"=============查============="</span>);</span><br><span class="line">       <span class="comment">// 数组长度 </span></span><br><span class="line">       System.out.println(<span class="string">"长度-stringlists："</span>+shardedJedis.llen(<span class="string">"stringlists"</span>));</span><br><span class="line">       System.out.println(<span class="string">"长度-numberlists："</span>+shardedJedis.llen(<span class="string">"numberlists"</span>));</span><br><span class="line">       <span class="comment">// 排序 </span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * list中存字符串时必须指定参数为alpha，如果不使用SortingParams，而是直接使用sort("list")，</span></span><br><span class="line"><span class="comment">        * 会出现"ERR One or more scores can't be converted into double"</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       SortingParams sortingParameters = <span class="keyword">new</span> SortingParams();</span><br><span class="line">       sortingParameters.alpha();</span><br><span class="line">       sortingParameters.limit(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">       System.out.println(<span class="string">"返回排序后的结果-stringlists："</span>+shardedJedis.sort(<span class="string">"stringlists"</span>,sortingParameters)); </span><br><span class="line">       System.out.println(<span class="string">"返回排序后的结果-numberlists："</span>+shardedJedis.sort(<span class="string">"numberlists"</span>));</span><br><span class="line">       <span class="comment">// 子串：  start为元素下标，end也为元素下标；-1代表倒数一个元素，-2代表倒数第二个元素</span></span><br><span class="line">       System.out.println(<span class="string">"子串-第二个开始到结束："</span>+shardedJedis.lrange(<span class="string">"stringlists"</span>, <span class="number">1</span>, -<span class="number">1</span>));</span><br><span class="line">       <span class="comment">// 获取列表指定下标的值 </span></span><br><span class="line">       System.out.println(<span class="string">"获取下标为2的元素："</span>+shardedJedis.lindex(<span class="string">"stringlists"</span>, <span class="number">2</span>)+<span class="string">"\n"</span>);</span><br></pre></td></tr></table></figure><h6 id="set操作"><a class="header-anchor" href="#set操作">¶</a>Set操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================set=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(<span class="string">"清空库中所有数据："</span>+jedis.flushDB());</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============增============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"向sets集合中加入元素element001："</span>+jedis.sadd(<span class="string">"sets"</span>, <span class="string">"element001"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"向sets集合中加入元素element002："</span>+jedis.sadd(<span class="string">"sets"</span>, <span class="string">"element002"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"向sets集合中加入元素element003："</span>+jedis.sadd(<span class="string">"sets"</span>, <span class="string">"element003"</span>));</span><br><span class="line">       System.out.println(<span class="string">"向sets集合中加入元素element004："</span>+jedis.sadd(<span class="string">"sets"</span>, <span class="string">"element004"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看sets集合中的所有元素:"</span>+jedis.smembers(<span class="string">"sets"</span>)); </span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============删============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"集合sets中删除元素element003："</span>+jedis.srem(<span class="string">"sets"</span>, <span class="string">"element003"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看sets集合中的所有元素:"</span>+jedis.smembers(<span class="string">"sets"</span>));</span><br><span class="line">       <span class="comment">/*System.out.println("sets集合中任意位置的元素出栈："+jedis.spop("sets"));//注：出栈元素位置居然不定？--无实际意义</span></span><br><span class="line"><span class="comment">       System.out.println("查看sets集合中的所有元素:"+jedis.smembers("sets"));*/</span></span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============改============="</span>);</span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============查============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"判断element001是否在集合sets中："</span>+jedis.sismember(<span class="string">"sets"</span>, <span class="string">"element001"</span>));</span><br><span class="line">       System.out.println(<span class="string">"循环查询获取sets中的每个元素："</span>);</span><br><span class="line">       Set&lt;String&gt; set = jedis.smembers(<span class="string">"sets"</span>);   </span><br><span class="line">       Iterator&lt;String&gt; it=set.iterator() ;   </span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">           Object obj=it.next();   </span><br><span class="line">           System.out.println(obj);   </span><br><span class="line">       &#125;  </span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============集合运算============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element001："</span>+jedis.sadd(<span class="string">"sets1"</span>, <span class="string">"element001"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element002："</span>+jedis.sadd(<span class="string">"sets1"</span>, <span class="string">"element002"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element003："</span>+jedis.sadd(<span class="string">"sets1"</span>, <span class="string">"element003"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element002："</span>+jedis.sadd(<span class="string">"sets2"</span>, <span class="string">"element002"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element003："</span>+jedis.sadd(<span class="string">"sets2"</span>, <span class="string">"element003"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"sets1中添加元素element004："</span>+jedis.sadd(<span class="string">"sets2"</span>, <span class="string">"element004"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看sets1集合中的所有元素:"</span>+jedis.smembers(<span class="string">"sets1"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看sets2集合中的所有元素:"</span>+jedis.smembers(<span class="string">"sets2"</span>));</span><br><span class="line">       System.out.println(<span class="string">"sets1和sets2交集："</span>+jedis.sinter(<span class="string">"sets1"</span>, <span class="string">"sets2"</span>));</span><br><span class="line">       System.out.println(<span class="string">"sets1和sets2并集："</span>+jedis.sunion(<span class="string">"sets1"</span>, <span class="string">"sets2"</span>));</span><br><span class="line">       System.out.println(<span class="string">"sets1和sets2差集："</span>+jedis.sdiff(<span class="string">"sets1"</span>, <span class="string">"sets2"</span>));<span class="comment">//差集：set1中有，set2中没有的元素</span></span><br></pre></td></tr></table></figure><h6 id="有序集合set"><a class="header-anchor" href="#有序集合set">¶</a>有序集合Set</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================zset=========================="</span>); </span><br><span class="line">       <span class="comment">// 清空数据 </span></span><br><span class="line">       System.out.println(jedis.flushDB()); </span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============增============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"zset中添加元素element001："</span>+shardedJedis.zadd(<span class="string">"zset"</span>, <span class="number">7.0</span>, <span class="string">"element001"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"zset中添加元素element002："</span>+shardedJedis.zadd(<span class="string">"zset"</span>, <span class="number">8.0</span>, <span class="string">"element002"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"zset中添加元素element003："</span>+shardedJedis.zadd(<span class="string">"zset"</span>, <span class="number">2.0</span>, <span class="string">"element003"</span>)); </span><br><span class="line">       System.out.println(<span class="string">"zset中添加元素element004："</span>+shardedJedis.zadd(<span class="string">"zset"</span>, <span class="number">3.0</span>, <span class="string">"element004"</span>));</span><br><span class="line">       System.out.println(<span class="string">"zset集合中的所有元素："</span>+shardedJedis.zrange(<span class="string">"zset"</span>, <span class="number">0</span>, -<span class="number">1</span>));<span class="comment">//按照权重值排序</span></span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============删============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"zset中删除元素element002："</span>+shardedJedis.zrem(<span class="string">"zset"</span>, <span class="string">"element002"</span>));</span><br><span class="line">       System.out.println(<span class="string">"zset集合中的所有元素："</span>+shardedJedis.zrange(<span class="string">"zset"</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============改============="</span>);</span><br><span class="line">       System.out.println();</span><br><span class="line">       </span><br><span class="line">       System.out.println(<span class="string">"=============查============="</span>);</span><br><span class="line">       System.out.println(<span class="string">"统计zset集合中的元素中个数："</span>+shardedJedis.zcard(<span class="string">"zset"</span>));</span><br><span class="line">       System.out.println(<span class="string">"统计zset集合中权重某个范围内（1.0——5.0），元素的个数："</span>+shardedJedis.zcount(<span class="string">"zset"</span>, <span class="number">1.0</span>, <span class="number">5.0</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看zset集合中element004的权重："</span>+shardedJedis.zscore(<span class="string">"zset"</span>, <span class="string">"element004"</span>));</span><br><span class="line">       System.out.println(<span class="string">"查看下标1到2范围内的元素值："</span>+shardedJedis.zrange(<span class="string">"zset"</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h6 id="哈希hashmap操作"><a class="header-anchor" href="#哈希hashmap操作">¶</a>哈希Hashmap操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"======================hash=========================="</span>);</span><br><span class="line">      <span class="comment">//清空数据 </span></span><br><span class="line">      System.out.println(jedis.flushDB()); </span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"=============增============="</span>);</span><br><span class="line">      System.out.println(<span class="string">"hashs中添加key001和value001键值对："</span>+shardedJedis.hset(<span class="string">"hashs"</span>, <span class="string">"key001"</span>, <span class="string">"value001"</span>)); </span><br><span class="line">      System.out.println(<span class="string">"hashs中添加key002和value002键值对："</span>+shardedJedis.hset(<span class="string">"hashs"</span>, <span class="string">"key002"</span>, <span class="string">"value002"</span>)); </span><br><span class="line">      System.out.println(<span class="string">"hashs中添加key003和value003键值对："</span>+shardedJedis.hset(<span class="string">"hashs"</span>, <span class="string">"key003"</span>, <span class="string">"value003"</span>));</span><br><span class="line">      System.out.println(<span class="string">"新增key004和4的整型键值对："</span>+shardedJedis.hincrBy(<span class="string">"hashs"</span>, <span class="string">"key004"</span>, <span class="number">4l</span>));</span><br><span class="line">      System.out.println(<span class="string">"hashs中的所有值："</span>+shardedJedis.hvals(<span class="string">"hashs"</span>));</span><br><span class="line">      System.out.println();</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"=============删============="</span>);</span><br><span class="line">      System.out.println(<span class="string">"hashs中删除key002键值对："</span>+shardedJedis.hdel(<span class="string">"hashs"</span>, <span class="string">"key002"</span>));</span><br><span class="line">      System.out.println(<span class="string">"hashs中的所有值："</span>+shardedJedis.hvals(<span class="string">"hashs"</span>));</span><br><span class="line">      System.out.println();</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"=============改============="</span>);</span><br><span class="line">      System.out.println(<span class="string">"key004整型键值的值增加100："</span>+shardedJedis.hincrBy(<span class="string">"hashs"</span>, <span class="string">"key004"</span>, <span class="number">100l</span>));</span><br><span class="line">      System.out.println(<span class="string">"hashs中的所有值："</span>+shardedJedis.hvals(<span class="string">"hashs"</span>));</span><br><span class="line">      System.out.println();</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">"=============查============="</span>);</span><br><span class="line">      System.out.println(<span class="string">"判断key003是否存在："</span>+shardedJedis.hexists(<span class="string">"hashs"</span>, <span class="string">"key003"</span>));</span><br><span class="line">      System.out.println(<span class="string">"获取key004对应的值："</span>+shardedJedis.hget(<span class="string">"hashs"</span>, <span class="string">"key004"</span>));</span><br><span class="line">      System.out.println(<span class="string">"批量获取key001和key003对应的值："</span>+shardedJedis.hmget(<span class="string">"hashs"</span>, <span class="string">"key001"</span>, <span class="string">"key003"</span>)); </span><br><span class="line">      System.out.println(<span class="string">"获取hashs中所有的key："</span>+shardedJedis.hkeys(<span class="string">"hashs"</span>));</span><br><span class="line">      System.out.println(<span class="string">"获取hashs中所有的value："</span>+shardedJedis.hvals(<span class="string">"hashs"</span>));</span><br></pre></td></tr></table></figure><hr><h6 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h6><p><a href="https://blog.csdn.net/lixiaoxiong55/article/details/81592800" target="_blank" rel="noopener"><strong>Redis 常用命令集</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;java中的常用操作&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#java中的常用操作&quot;&gt;¶&lt;/a&gt;Java中的常用操作&lt;/h5&gt;
&lt;h6 id=&quot;连接redis&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#连接redi
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(10.1)Redis简介与安装</title>
    <link href="https://shuhaohwang.github.io/2020/02/24/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-10-1-Redis%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>https://shuhaohwang.github.io/2020/02/24/JavaWeb学习总结-10-1-Redis简介与安装/</id>
    <published>2020-02-24T01:33:18.000Z</published>
    <updated>2020-02-24T02:11:14.700Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/56999f2b8e3b" target="_blank" rel="noopener">Redis【入门】就这一篇！</a></p><h4 id="redis简介"><a class="header-anchor" href="#redis简介">¶</a>Redis简介</h4><p>​redis是一个key-value<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">存储系统</a>。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(<a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">数据类型</a>都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>​Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了<a href="https://baike.baidu.com/item/memcached" target="_blank" rel="noopener">memcached</a>这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。 [1]</p><p>​Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p><h4 id="redis-的安装"><a class="header-anchor" href="#redis-的安装">¶</a>Redis 的安装</h4><p>访问地址：<a href="https://github.com/ServiceStack/redis-windows/tree/master/downloads" target="_blank" rel="noopener">https://github.com/ServiceStack/redis-windows/tree/master/downloads</a></p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-02ae79ed7bac2f17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1014/format/webp" alt="img"></p><p>把 Redis 下载下来后找到一个合适的地方解压，就能得到如下图所示的目录（这里空格被替换成了%20…）：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-503eabe717b358ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp" alt="img"></p><p>为了方便启动，我们在该目录下新建一个 startup.cmd 的文件，然后将以下内容写入文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-server</span> <span class="selector-tag">redis</span><span class="selector-class">.windows</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>这个命令其实就是在调用 redis-server.exe 命令来读取 redis.window.conf 的内容，我们双击刚才创建好的 startup.cmd 文件，就能成功的看到 Redis 启动：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-c68cc2678deb3391.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/779/format/webp" alt="img"></p><p>上图的提示信息告诉了我们：① Redis 当前的版本为 3.0.503；**② Redis 运行在 6379 端口；**③ Redis 进程的 PID 为 14748；④ 64 位。</p><p>我们可以打开同一个文件夹下的 redis-cli.exe 文件，这是 Redis 自带的一个客户端工具，它可以用来连接到我们当前的 Redis 服务器，我们做以下测试：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-aa1039abf8482a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/633/format/webp" alt="img"></p><p>如此，我们便在 Windows 的环境下安装好了 Redis。</p><h4 id="在-java-中使用-redis"><a class="header-anchor" href="#在-java-中使用-redis">¶</a>在 Java 中使用 Redis</h4><h5 id="第一步：添加-jedis-依赖"><a class="header-anchor" href="#第一步：添加-jedis-依赖">¶</a>第一步：添加 Jedis 依赖</h5><p>想要在 Java 中使用 Redis 缓存，需要添加相关的Jar包依赖，打开Maven仓库的网站：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a> ，搜索Jedis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二步：使用-redis-连接池"><a class="header-anchor" href="#第二步：使用-redis-连接池">¶</a>第二步：使用 Redis 连接池</h4><p>跟数据库连接池相同，Java Redis也同样提供了类<code>redis.clients.jedis.JedisPool</code>来管理我们的Reids连接池对象，并且我们可以使用<code>redis.clients.jedis.JedisPoolConfig</code>来对连接池进行配置，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line"><span class="comment">// 最大空闲数</span></span><br><span class="line">poolConfig.setMaxIdle(<span class="number">50</span>);</span><br><span class="line"><span class="comment">// 最大连接数</span></span><br><span class="line">poolConfig.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 最大等待毫秒数</span></span><br><span class="line">poolConfig.setMaxWaitMillis(<span class="number">20000</span>);</span><br><span class="line"><span class="comment">// 使用配置创建连接池</span></span><br><span class="line">JedisPool pool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">"localhost"</span>);</span><br><span class="line"><span class="comment">// 从连接池中获取单个连接</span></span><br><span class="line">Jedis jedis = pool.getResource();</span><br><span class="line"><span class="comment">// 如果需要密码</span></span><br><span class="line"><span class="comment">//jedis.auth("password");</span></span><br></pre></td></tr></table></figure><p>Redis 只能支持六种数据类型（string/hash/list/set/zset/hyperloglog）的操作，但在 Java 中我们却通常以类对象为主，所以在需要 Redis 存储的五中数据类型与 Java 对象之间进行转换，如果自己编写一些工具类，比如一个角色对象的转换，还是比较容易的，但是涉及到许多对象的时候，这其中无论工作量还是工作难度都是很大的，所以总体来说，<strong>就操作对象而言，使用 Redis 还是挺难的</strong>，好在 Spring 对这些进行了封装和支持。</p><h4 id="第三步：在-spring-中使用-redis"><a class="header-anchor" href="#第三步：在-spring-中使用-redis">¶</a>第三步：在 Spring 中使用 Redis</h4><p>上面说到了 Redis 无法操作对象的问题，无法在那些基础类型和 Java 对象之间方便的转换，但是在 Spring 中，这些问题都可以<strong>通过使用RedisTemplate</strong>得到解决！</p><p>想要达到这样的效果，除了 Jedis 包以外还需要在 Spring 引入 spring-data-redis 包：<a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis</a></p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-09354a1b8f0d8629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/881/format/webp" alt="img"></p><p>这里把2.0.7最新版本标红的意思是：<strong>别老想着使用最新的Jar包</strong>，特别是涉及到框架的一些东西，笔者用实际的操作体验告诉你们，引入该版本的包是会导致Jar包冲突的（也就是莫名其妙的错误），我乖乖换回了<strong>1.7.2</strong>的版本，代码就通了…我们来看看怎么做吧：</p><p><strong>（1）第一步：使用Spring配置JedisPoolConfig对象</strong></p><p>大部分的情况下，我们还是会用到连接池的，于是先用 Spring 配置一个 JedisPoolConfig 对象：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最大空闲数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最大连接数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最大等待时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"20000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（2）第二步：为连接池配置工厂模型</strong></p><p>好了，我们现在配置好了连接池的相关属性，那么具体使用哪种工厂实现呢？在Spring Data Redis中有四种可供我们选择的工厂模型，它们分别是：</p><ul><li>JredisConnectionFactory</li><li>JedisConnectionFactory</li><li>LettuceConnectionFactory</li><li>SrpConnectionFactory</li></ul><p>我们这里就简单配置成JedisConnectionFactory：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Redis服务地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"localhost"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--端口号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果有密码则需要配置密码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="password" value="password"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（3）第三步：配置RedisTemplate</strong></p><p>普通的连接根本没有办法直接将对象直接存入 Redis 内存中，我们需要替代的方案：将对象序列化（可以简单的理解为继承Serializable接口）。我们可以把对象序列化之后存入Redis缓存中，然后在取出的时候又通过转换器，将序列化之后的对象反序列化回对象，这样就完成了我们的要求：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7896890-a7711b612a0a53cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/579/format/webp" alt="img"></p><p>RedisTemplate可以帮助我们完成这份工作，它会找到对应的序列化器去转换Redis的键值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:connection-factory-ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/56999f2b8e3b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redis【入门】就这一篇！&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;redis简介&quot;&gt;&lt;a class=&quot;header-
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(9.3)注册登入Demo搭建项目过程中遇到的一些错误小结</title>
    <link href="https://shuhaohwang.github.io/2020/02/13/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-9-2-%E6%B3%A8%E5%86%8C%E7%99%BB%E5%85%A5Demo%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF%E5%B0%8F%E7%BB%93/"/>
    <id>https://shuhaohwang.github.io/2020/02/13/JavaWeb学习总结-9-2-注册登入Demo搭建项目过程中遇到的一些错误小结/</id>
    <published>2020-02-13T09:45:42.000Z</published>
    <updated>2020-02-13T10:58:27.360Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a class="header-anchor" href="#问题">¶</a>问题</h4><h5 id="问题1：在配置springmvc时-配置文件urlhttp-www-springframework-org-schema-data-jpa报错"><a class="header-anchor" href="#问题1：在配置springmvc时-配置文件urlhttp-www-springframework-org-schema-data-jpa报错">¶</a>问题1：在配置SpringMVC时 配置文件url<code>http://www.springframework.org/schema/data/jpa</code>报错</h5><ul><li><p>原因：少了jpa依赖</p></li><li><p>解决：pom.xml中加入相关依赖</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DataJPA相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="问题2-开启tomcat后-控制台日志报-slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder"><a class="header-anchor" href="#问题2-开启tomcat后-控制台日志报-slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder">¶</a>问题2  开启Tomcat后，控制台日志报“ SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder ”</h5><ul><li><p>解决：加入SLF4J依赖即可</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="问题3：在测试springmvc的注解功能的时候-发现-requestmapping-注解失效"><a class="header-anchor" href="#问题3：在测试springmvc的注解功能的时候-发现-requestmapping-注解失效">¶</a>问题3：在测试SpringMVC的注解功能的时候，发现@RequestMapping，注解失效</h5><ul><li><p>启用默认的servlet映射后没有设置对应非html的扫描属性</p></li><li><p>解决：<code>&lt;mvc:default-servlet-handler/&gt;</code>前加入</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.cnblogs.com/dflmg/p/6393416.html" target="_blank" rel="noopener">附：【Spring框架】&lt;mvc:default-servlet-handler/&gt;的作用</a></p><h5 id="问题4：tomcat7插件报错-unable-to-process-jar-entry-module-info-class-from-jar"><a class="header-anchor" href="#问题4：tomcat7插件报错-unable-to-process-jar-entry-module-info-class-from-jar">¶</a>问题4：tomcat7插件报错 Unable to process Jar entry [module-info.class] from Jar</h5><ul><li>解决：maven仓库里找到后面报错的jar包,然后用压缩文件工具打开,删除里面的module-info.class文件,就Ok了</li></ul><h5 id="问题5：-entity-注解报错"><a class="header-anchor" href="#问题5：-entity-注解报错">¶</a>问题5：@Entity 注解报错</h5><ul><li>原因：缺少依赖</li><li>解决：加上依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.persistence/persistence-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="问题6：javax-persistence-包-报错"><a class="header-anchor" href="#问题6：javax-persistence-包-报错">¶</a>问题6：javax.persistence*包 报错</h5><ul><li><p>原因：缺少相关的包</p></li><li><p>解决：加入相关的jar包依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.persistence/persistence-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#问题&quot;&gt;¶&lt;/a&gt;问题&lt;/h4&gt;
&lt;h5 id=&quot;问题1：在配置springmvc时-配置文件urlhttp-www-springframework-org-schema-data-jpa报错
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
      <category term="错误记录" scheme="https://shuhaohwang.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(9.2)MybatisGenerator生成mapper的使用范例</title>
    <link href="https://shuhaohwang.github.io/2020/02/10/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-9-2-MybatisGenerator%E7%94%9F%E6%88%90mapper%E7%9A%84%E4%BD%BF%E7%94%A8%E8%8C%83%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/</id>
    <published>2020-02-10T02:22:28.000Z</published>
    <updated>2020-02-10T06:03:53.589Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成代码"><a class="header-anchor" href="#生成代码">¶</a>生成代码</h4><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/1.png"><p>根据MybatisGenerator对上诉表进行代码生成，生成的代码如下</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/2.png"><h4 id="使用范例"><a class="header-anchor" href="#使用范例">¶</a>使用范例</h4><h5 id="generatormapper中的example对象"><a class="header-anchor" href="#generatormapper中的example对象">¶</a>GeneratorMapper中的Example对象</h5><h6 id="范例1：删除指定数据项名称匹配的数据"><a class="header-anchor" href="#范例1：删除指定数据项名称匹配的数据">¶</a>范例1：删除指定数据项名称匹配的数据</h6><p>例如数据库有以下的数据</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/3.png"><p>数据库中含有两条的用户名都为 <code>hehehda</code>的数据，但如果我只需要删除其中的密码为 123 的那条数据，可以通过创建生成代码中的Example对象进行填写条件，并更具条件进行删除操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> Model.UserExample;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        UserMapper mapper = context.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建一个UserExample的User例子*/</span></span><br><span class="line">        UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">        <span class="comment">/*创建一个条件*/</span></span><br><span class="line">        userExample.createCriteria()</span><br><span class="line">                .andPasswordEqualTo(<span class="string">"123"</span>)<span class="comment">//密码等于123</span></span><br><span class="line">                .andUsernameEqualTo(<span class="string">"hehehda"</span>);<span class="comment">//用户名为hehehda</span></span><br><span class="line">        mapper.deleteByExample(userExample);<span class="comment">//执行删除操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行代码后</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/4.png"><p>根据日志信息，这条语句生成的SQL执行命令为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: <span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> ( <span class="keyword">PASSWORD</span> = ? <span class="keyword">and</span> USERNAME = ? ) </span><br><span class="line"><span class="keyword">Parameters</span>: <span class="number">123</span>(<span class="keyword">String</span>), hehehda(<span class="keyword">String</span>)</span><br></pre></td></tr></table></figure><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/5.png" title="删除后数据库里面的数据"><hr><h6 id="范例2：使用or来执行-或者-条件设置"><a class="header-anchor" href="#范例2：使用or来执行-或者-条件设置">¶</a>范例2：使用or来执行 或者 条件设置</h6><p>范例1 是通过and进行每条的例子条件进行设置，这里也可以通过or 来设置或者条件 例如：</p><p>数据库中含有以下的数据</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/6.png"><p>数据库中有 两个用户名为 shuhao 的数据，而且整个数据库中 有两个数据密码都为 1234，假设，要删除 用户名为 shuhao 或者 密码等于 1234 的数据，从直观来看，上述命令执行后 会有三个数据被删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> Model.UserExample;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        UserMapper mapper = context.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建一个UserExample的User例子*/</span></span><br><span class="line">        UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">        <span class="comment">/*创建一个条件*/</span></span><br><span class="line">        userExample.createCriteria()</span><br><span class="line">                .andUsernameEqualTo(<span class="string">"shuhao"</span>);<span class="comment">//用户名为shuhao</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建例子中的或者分支条件*/</span></span><br><span class="line">        userExample.or().andPasswordEqualTo(<span class="string">"1234"</span>);<span class="comment">//密码为 1234的删除</span></span><br><span class="line"></span><br><span class="line">        mapper.deleteByExample(userExample);<span class="comment">//执行删除操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/7.png" title="执行结果日志"><p>从结果来看 这次的测试 生成的SQL命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: delete from user WHERE ( USERNAME = ? ) or( PASSWORD = ? ) </span><br><span class="line">Parameters: shuhao(String), 1234(String)</span><br></pre></td></tr></table></figure><p>从结果来看生成的为典型的mysql or语句，影响数据数为3条</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/8.png" title="删除后的结果"><hr><h5 id="generatormapper其他常用的操作"><a class="header-anchor" href="#generatormapper其他常用的操作">¶</a>GeneratorMapper其他常用的操作</h5><h6 id="范例1：通过范例条件进行查询获取符合条件的为多少条数据"><a class="header-anchor" href="#范例1：通过范例条件进行查询获取符合条件的为多少条数据">¶</a>范例1：通过范例条件进行查询获取符合条件的为多少条数据</h6><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/9.png"><p>假设我们要找密码为123456的用户有多少个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> Model.UserExample;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        UserMapper mapper = context.getBean(UserMapper.class);</span><br><span class="line">        <span class="comment">/*创建一个UserExample的User例子*/</span></span><br><span class="line">        UserExample userExample = <span class="keyword">new</span> UserExample();</span><br><span class="line">        <span class="comment">/*创建一个条件*/</span></span><br><span class="line">        userExample.createCriteria()</span><br><span class="line">                .andPasswordEqualTo(<span class="string">"123456"</span>);<span class="comment">//设置范例条件为 密码等于123456;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*通过上诉设置的范例条件寻找匹配的个数*/</span></span><br><span class="line">        <span class="keyword">long</span> n = mapper.countByExample(userExample);<span class="comment">//返回值为long</span></span><br><span class="line">        System.out.println(<span class="string">"符合密码为123456的用户数为："</span> + n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/10.png" title="执行结果"><p>生成的SQL命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: select count(*) from user WHERE ( PASSWORD = ? ) </span><br><span class="line">Parameters: 123456(String)</span><br></pre></td></tr></table></figure><hr><h6 id="范例2-对数据的插入"><a class="header-anchor" href="#范例2-对数据的插入">¶</a>范例2 对数据的插入</h6><p><strong>插入语句</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> Model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        UserMapper mapper = context.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建用户1*/</span></span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setSex(<span class="string">"woman"</span>);</span><br><span class="line">        u1.setPassword(<span class="string">"520520"</span>);</span><br><span class="line">        u1.setUsername(<span class="string">"XiaoHong"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*创建用户2*/</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setSex(<span class="string">"man"</span>);</span><br><span class="line">        u2.setPassword(<span class="string">"888888"</span>);</span><br><span class="line">        u2.setUsername(<span class="string">"LiuBei"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*直接插入数据*/</span></span><br><span class="line">        mapper.insert(u1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*根据插入项进行选择性插入数据*/</span></span><br><span class="line">        mapper.insertSelective(u2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mapper.insert(u1);</code>生成的sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: insert into user (id, USERNAME, PASSWORD, SALT, AVATAR, SEX, SIGN, CreateDate) values (?, ?, ?, ?, ?, ?, ?, ?) </span><br><span class="line">Parameters: null, XiaoHong(String), 520520(String), null, null, woman(String), null, null</span><br></pre></td></tr></table></figure><p><code>mapper.insertSelective(u2);</code>生成的sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: insert into user ( USERNAME, PASSWORD, SEX ) values ( ?, ?, ? ) </span><br><span class="line">Parameters: LiuBei(String), 888888(String), man(String)</span><br></pre></td></tr></table></figure><p>可以看出，直接是insert 是把所有的属性进行直接的插入。而用insertSelective 会根据你已有的属性进行插入。</p><h6 id="范例3-覆盖式更新-与选择性更新数据"><a class="header-anchor" href="#范例3-覆盖式更新-与选择性更新数据">¶</a>范例3 覆盖式更新，与选择性更新数据</h6><p><strong>更新数据语句</strong></p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/11.png" title="现有以上数据"><p>假设我们要把上面的数据进行更新设置。</p><ul><li>用户名为XiaoHong的用户 想把密码修改一下。</li><li>用户名为LiuBei的用户，想把用户名改一下，并且添加一些个性签名</li></ul><p>为满足上述的信息更新要求。这里可以通过使用以下方法进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper.updateByPrimaryKey();</span><br><span class="line">mapper.updateByPrimaryKeySelective();</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> Model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        UserMapper mapper = context.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*更新用户1*/</span></span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setId(<span class="number">13L</span>);</span><br><span class="line">        u1.setPassword(<span class="string">"123123"</span>);</span><br><span class="line">        u1.setUsername(<span class="string">"XiaoHong"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*更新用户2*/</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setId(<span class="number">14L</span>);</span><br><span class="line">        u2.setSex(<span class="string">"man"</span>);</span><br><span class="line">        u2.setSign(<span class="string">"heheda"</span>);</span><br><span class="line">        u2.setUsername(<span class="string">"zhangfei"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*通过ID覆盖其他属性*/</span></span><br><span class="line">        mapper.updateByPrimaryKey(u1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*根据已有的属性进行选择性覆盖更新数据*/</span></span><br><span class="line">        mapper.updateByPrimaryKeySelective(u2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上</p><p><code>mapper.updateByPrimaryKey()</code>方法生成的sql语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: update user set USERNAME = ?, PASSWORD = ?, SALT = ?, AVATAR = ?, SEX = ?, SIGN = ?, CreateDate = ? where id = ? </span><br><span class="line">Parameters: XiaoHong(String), 123123(String), null, null, null, null, null, 13(Long)</span><br></pre></td></tr></table></figure><p><code>mapper.updateByPrimaryKeySelective();</code>生成的sql语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Preparing: update user SET USERNAME = ?, SEX = ?, SIGN = ? where id = ? </span><br><span class="line">Parameters: zhangfei(String), man(String), heheda(String), 14(Long)</span><br></pre></td></tr></table></figure><p>可以看出上述生成的sql语句，其中updateByPrimaryKey()是把所有属性值进行覆盖式的更新到数据库</p><p>而updateByPrimaryKeySelective();，是根据已有的属性进行选择性的更新到数据库</p><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/11.png" title="执行前"><img src="/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/12.png" title="执行后"><p>可以发现，用户名为XiaoHong的用户，虽然改掉了密码，但因为是使用了对所有属性值覆盖更新，导致一开始的性别也被覆盖成了null</p><p>而一开始的用户名为LiuBei的用户，只修改了名字和个性签名，以前所设置的密码没有受到影响</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;生成代码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#生成代码&quot;&gt;¶&lt;/a&gt;生成代码&lt;/h4&gt;
&lt;img src=&quot;/2020/02/10/JavaWeb学习总结-9-2-MybatisGenerator生成mapper的使用范例/1.png
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(9.1)SSM基础项目搭建记录+遇到的一些错误解决方案</title>
    <link href="https://shuhaohwang.github.io/2020/02/09/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-9-1-SSM%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>https://shuhaohwang.github.io/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/</id>
    <published>2020-02-09T13:35:46.000Z</published>
    <updated>2020-02-13T07:38:07.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ssm框架"><a class="header-anchor" href="#ssm框架">¶</a>SSM框架</h4><p>SSM（Spring+SpringMVC+MyBatis）</p><p>工具：IDEA</p><hr><h4 id="准备前奏"><a class="header-anchor" href="#准备前奏">¶</a>准备前奏</h4><p>使用IDEA创建一个MavenWeb项目。在src目录下main中创建两个目录文件夹java（放一些源码），Resources（放一些配置文件）。并把它们分别标注为源码文件夹和resources文件夹，配置好Tomcat服务器</p><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/1.png"><h4 id="配置spring"><a class="header-anchor" href="#配置spring">¶</a>配置Spring</h4><p>配置pom.xml文件，添加Spring的相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring核心依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring Dao依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring web依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring test依赖：方便做单元测试和集成测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Resources目录下添加spring的配置文件<code>ApplicationContext.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--启动组件扫描，排除@controller组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"java"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在web.xml中添加spring监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="问题1：在spring监听器中一开始无法找到对应的spring的配置文件applicationcontext-xml"><a class="header-anchor" href="#问题1：在spring监听器中一开始无法找到对应的spring的配置文件applicationcontext-xml">¶</a>问题1：在spring监听器中一开始无法找到对应的Spring的配置文件ApplicationContext.xml</h5><p>一开始是把ApplicationContext.xml文件放在Resources文件中的一个文件夹中，导致这个问题。</p><ul><li>当初的解决办法是把上面的监听器中的classpath:改成classpath*: 问题解决。</li></ul><p>但这样对以后的开发必定会有影响。</p><p><a href="https://www.cnblogs.com/caidongzhou/p/8930571.html" target="_blank" rel="noopener">classpath:和classpath*:的区别</a></p><ul><li>然后把放这个配置文件的文件夹也标记为resource根目录，使在classpath的情况下也能找到该配置文件</li><li>最终选择把<code>ApplicationContext.xml</code>文件直接放在Resources目录下，而不单独放在Resources目录中的独立文件夹中</li></ul><hr><p><strong>启动项目检查spring是否在运行</strong></p><ul><li>这部一开始是使用Tomcat7的maven插件进行的，但最终使用发现出现的问题较多，则放弃了Tomcat7的maven插件而改用直接配置的Tomcat进行运行</li></ul><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/2.png" title="检查当Tomcat启动后会多出几个信息，当提示spring的相关东西被成功初始化后即为spring配置成功"><h4 id="配置springmvc"><a class="header-anchor" href="#配置springmvc">¶</a>配置SpringMVC</h4><p>在确认Spring配置完毕后，在Resources文件中创建SpringMVC的配置文件<code>Spring_Mvc_servlet.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--启动组件扫描，排除@Service组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"java"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--静态资源映射，可以配置多行--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:resources mapping="/res/**" location="classpath*:/static/"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置freeMarker视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolverFtl"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeRequestAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSessionAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSpringMacroHelpers"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".ftl"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--p:defaultEncoding="UTF-8"--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--p:maxUploadSize="5400000"--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成上述配置后，在web.xml中配置SpringMVC的分发器，在web.xml中添加如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:Spring_Mvc_servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后还要在pom.xml中引入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传通用依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jackson组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>运行Tomcat检查springMVC是否配置成功</strong></p><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/3.png" title="运行后 配置成功的标志"><ul><li>这里也可以创建一个测试的主方法类 看使用SpringMVC的一些注解是否能映射成访问地址路径，来判断具体是否安装完毕</li></ul><hr><h4 id="引入连接池-druid连接池"><a class="header-anchor" href="#引入连接池-druid连接池">¶</a>引入连接池（Druid连接池）</h4><p>使用dbcp或者c3p0等连接池 类似配置步骤</p><p>首先在pom.xml中添加相关的Druid连接池依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySQL数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;MySQL.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖加完后，在spring的配置文件<code>ApplicationContext.xml</code>添加一个连接池bean 方便获取连接相关的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描Resources中的相关properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:*.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 基本属性driverClassName、 url、user、password --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- PSCache，并且指定每个连接上PSCache的大小(mysql数据库建议关闭) --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxOpenPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncInit"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以再创建一个properties文件对druid中的一些数据库信息进行配置，降低项目耦合性，例如创建一个<code>Druid.properties</code>放在Resources中，根据spring中的配置会自动的读取相关properties文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Druid.properties#</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai</span><br><span class="line">jdbc.username=shuhao</span><br><span class="line">jdbc.password=991124</span><br></pre></td></tr></table></figure><hr><p><strong>启动Tomcat看是否druid配置成功</strong></p><p>这里也可以通过创建一个test类来检测druid的安装情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DSTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:ApplicationContext.xml"</span>);</span><br><span class="line">        DataSource d = context.getBean(DataSource.class);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/4.png" title="通过运行上述测试代码，可以发现spring中已经有了druid连接池的bean，说明配置完成"><h4 id="mybatis的配置"><a class="header-anchor" href="#mybatis的配置">¶</a>MyBatis的配置</h4><p>引入相关MyBatis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis相关依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Resources中添加MyBatis的配置文件<code>mybatis.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在spring中引入Mybatis 创建其相关的bean，在spring的配置文件中加入如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建sqlSessionFactory，给了数据源和配置路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*Mapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置bean扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"Mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>启动Tomcat检测mybatis是否配置成功</p><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/5.png" title="发现启动日志中mybatis相关信息，基本配置成功"><ul><li>这里警告的是没有扫描到相关的mapper文件</li></ul><h4 id="使用mybatis-generator进行自动根据数据库生成代码"><a class="header-anchor" href="#使用mybatis-generator进行自动根据数据库生成代码">¶</a>使用mybatis.generator进行自动根据数据库生成代码</h4><p><a href="https://www.cnblogs.com/mkl7/p/10842431.html" target="_blank" rel="noopener">MyBatis Generator 插件 详解</a>【推荐】</p><p><a href="https://blog.csdn.net/yangqinfeng1121/article/details/80183516" target="_blank" rel="noopener">IDEA集成MyBatis Generator 插件 详解</a></p><p>首先在引入相关的依赖,在pom.xml文件中加入如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis.generator依赖 用来自动生成sql代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--MyBatis model生成器插件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Resources中加入mybatis.generator相关的配置文件 <code>generatorConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"D:\MavenRepository\mysql\mysql-connector-java\8.0.19\mysql-connector-java-8.0.19.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"shuhao"</span> <span class="attr">password</span>=<span class="string">"991124"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nullCatalogMeansCurrent"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"Model"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"Mapper"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/Resources"</span>&gt;</span><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"Mapper"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="问题1：报错：cannot-resolve-classpath-entry"><a class="header-anchor" href="#问题1：报错：cannot-resolve-classpath-entry">¶</a>问题1：报错：Cannot resolve classpath entry</h5><p><a href="https://blog.csdn.net/YourFriendyf/article/details/88850415" target="_blank" rel="noopener">mybatis-generator插件执行报错：Cannot resolve classpath entry</a></p><p>通过比对网上的错误解决方案与自己的实际情况，发现我一开始配置mybatis-generator时的地址写错了，进行修改后解决问题</p><h5 id="问题2-使用mybatis-generator插件后生成的model类-中出现未知的一些属性和方法"><a class="header-anchor" href="#问题2-使用mybatis-generator插件后生成的model类-中出现未知的一些属性和方法">¶</a>问题2 使用mybatis-generator插件后生成的model类 中出现未知的一些属性和方法</h5><p><a href="https://blog.csdn.net/u010784959/article/details/83790209" target="_blank" rel="noopener">Mysql8 + MyBatis Generator生成代码生成多余文件 解决方案</a></p><p>更具文件提供的官方文档中提示</p><p>If you are using version 8.x of Connector/J you may notice that the generator attempts to generate code for tables in the MySql information schemas (sys, information_schema, performance_schema, etc.) This is probably not what you want! To disable this behavior, add the property “nullCatalogMeansCurrent=true” to your JDBC URL.</p><p>翻译：如果您使用的是Connector / J的8.x版本，您可能会注意到生成器试图为MySql信息模式（sys，information_schema，performance_schema等）中的表生成代码。这可能不是您想要的！要禁用此行为，请将属性“ nullCatalogMeansCurrent = true”添加到JDBC URL。</p><p>For example:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost/my_schema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"my_user"</span> <span class="attr">password</span>=<span class="string">"my_password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nullCatalogMeansCurrent"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题解决</p><hr><h4 id="项目整体结构"><a class="header-anchor" href="#项目整体结构">¶</a>项目整体结构</h4><img src="/2020/02/09/JavaWeb学习总结-9-1-SSM基础项目搭建记录/6.png" title="项目结构"><h5 id="使用的依赖与插件"><a class="header-anchor" href="#使用的依赖与插件">¶</a>使用的依赖与插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MySQL.version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">MySQL.version</span>&gt;</span><span class="comment">&lt;!--6.0.6--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tomcat.version</span>&gt;</span>9.0.30<span class="tag">&lt;/<span class="name">tomcat.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Spring核心依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Spring Dao依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Spring web依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Spring test依赖：方便做单元测试和集成测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 文件上传通用依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jackson组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- druid连接池 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--MySQL数据库--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;MySQL.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--MyBatis相关依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis.generator 用来自动生成sql代码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MyBatis model生成器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--配置项目的路径和tomcat的端口，以及服务器编码解决乱码问题--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>9090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="applicationcontext-xml文件"><a class="header-anchor" href="#applicationcontext-xml文件">¶</a>ApplicationContext.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--启动组件扫描，排除@controller组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"java"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.web.bind.annotation.RestController"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描Resources中的相关properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:*.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性driverClassName、 url、user、password --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- PSCache，并且指定每个连接上PSCache的大小(mysql数据库建议关闭) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxOpenPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"asyncInit"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建sqlSessionFactory，给了数据源和配置路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*Mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置bean扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"Mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="generatorconfig-xml文件"><a class="header-anchor" href="#generatorconfig-xml文件">¶</a>generatorConfig.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"D:\MavenRepository\mysql\mysql-connector-java\8.0.19\mysql-connector-java-8.0.19.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"context1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"shuhao"</span> <span class="attr">password</span>=<span class="string">"991124"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nullCatalogMeansCurrent"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"Model"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"Mapper"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/Resources"</span>&gt;</span><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"Mapper"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"USERNAME"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"PASSWORD"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"SALT"</span> <span class="attr">property</span>=<span class="string">"salt"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"AVATAR"</span> <span class="attr">property</span>=<span class="string">"avatarurl"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"SEX"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">"SIGN"</span> <span class="attr">property</span>=<span class="string">"sign"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="mybatis-xml文件"><a class="header-anchor" href="#mybatis-xml文件">¶</a>mybatis.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="spring-mvc-servlet-xml文件"><a class="header-anchor" href="#spring-mvc-servlet-xml文件">¶</a>Spring_Mvc_servlet.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--启动组件扫描，排除@Service组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"java"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:resources mapping="/res/**" location="classpath*:/static/"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置freeMarker视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolverFtl"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeRequestAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSessionAttributes"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exposeSpringMacroHelpers"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".ftl"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--p:defaultEncoding="UTF-8"--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--p:maxUploadSize="5400000"--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&amp;gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="web-xml文件"><a class="header-anchor" href="#web-xml文件">¶</a>web.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;param-value&gt;classpath*:Spring/*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;param-value&gt;classpath:Spring/ApplicationContext.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:Spring_Mvc_servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ssm框架&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ssm框架&quot;&gt;¶&lt;/a&gt;SSM框架&lt;/h4&gt;
&lt;p&gt;SSM（Spring+SpringMVC+MyBatis）&lt;/p&gt;
&lt;p&gt;工具：IDEA&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;准备前奏&quot;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(8.1)SpringMVC配置、简单使用</title>
    <link href="https://shuhaohwang.github.io/2020/02/07/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-8-1-SpringMVC%E9%85%8D%E7%BD%AE%E3%80%81%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://shuhaohwang.github.io/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/</id>
    <published>2020-02-07T02:28:17.000Z</published>
    <updated>2020-02-07T12:45:50.982Z</updated>
    
    <content type="html"><![CDATA[<h4 id="springmvc简单介绍"><a class="header-anchor" href="#springmvc简单介绍">¶</a>SpringMVC简单介绍</h4><p>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的Spring MVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts 2(一般老项目使用)等。</p><h4 id="springmvc配置"><a class="header-anchor" href="#springmvc配置">¶</a>SpringMVC配置</h4><ul><li>创建一个web项目(以mavenWeb为例)</li><li>添加spring的相关maven依赖，创建spring的配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--Spring核心依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring Dao依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Spring web依赖 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Spring test依赖：方便做单元测试和集成测试 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- Javax Annotation --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置好tomcat服务器后，在<strong>web.xml</strong>中添加如下，进行<strong>DispatcherServlet</strong>分发器的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ApplicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动Tomcat服务器，运行无误后可以基本确定配置完成</li></ul><hr><h4 id="springmvc的简单使用和操作"><a class="header-anchor" href="#springmvc的简单使用和操作">¶</a>springMVC的简单使用和操作</h4><p>例如创建一个Controller类。适用于控制层</p><p>可以在该类上使用<code>@Controller</code>注解来标注该类为控制层类(前提打开了spring注解功能)</p><p>随后可以使用<code>@RequestMapping(&quot;xxx&quot;)</code>来设置该文件的web映射，其中括号内填写访问的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/helloctl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"> 。。。。。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>！：要在spring配置文件中添加扫描到该类！！！</p><h5 id="通过-requestmapping来设置对应方法的映射地址"><a class="header-anchor" href="#通过-requestmapping来设置对应方法的映射地址">¶</a>通过@RequestMapping来设置对应方法的映射地址</h5><p>在存在映射的类中的方法前加@RequestMapping(&quot;&quot;)注解将可以使用指定的地址来调用执行由该注解注解后方法中的内容。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/helloctl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/show1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show1被执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/show2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show2被执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/1.png" title="测试结果"><h5 id="如何获取request和response对象"><a class="header-anchor" href="#如何获取request和response对象">¶</a>如何获取request和response对象</h5><h6 id="requestmapping注解自动注入"><a class="header-anchor" href="#requestmapping注解自动注入">¶</a>@RequestMapping注解自动注入</h6><p>在web项目中，我们通常要操作request和response对象进行数据的传输与处理，在spring框架下，在对应方法的参数中添加request和response对象，并标注<code>@RequestMapping(&quot;xxx&quot;)</code>在通过映射地址访问该方法时会根据参数自动去获取，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/TestRepose"</span>)   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestRepose</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"这是TestRepose打印的！！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/2.png" title="测试结果"><h6 id="通过requestcontextholder来获取"><a class="header-anchor" href="#通过requestcontextholder来获取">¶</a>通过RequestContextHolder来获取</h6><p><code>HttpServletResponse response = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/TestRepose2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestRepose2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HttpServletResponse response = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getResponse();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().print(<span class="string">"这是TestRepose2打印的！！"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/3.png" title="测试结果"><hr><h6 id="使用springmvc提供的请求转发"><a class="header-anchor" href="#使用springmvc提供的请求转发">¶</a>使用SpringMvc提供的请求转发</h6><p>在spring中定义一个视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/page/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再创建一个返回值为String 的方法进行@RequestMapping注解进行标注，再访问时该方法时，会根据返回的字符串与上面的视图解析器进行拼接 前拼<code>name = &quot;prefix&quot;</code>部分，后拼<code>name=&quot;suffix&quot;</code>部分 例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/goto"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">GotoTheNewJsp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"NewJsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问该方法的地址映射时，网页会请求转发至/WEB-INF/page/ + NewJsp + .jsp即：<code>/WEB-INF/page/NewJsp.jsp</code></p><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/4.png" title="前提你要存在对应的文件夹和文件"><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/5.png" title="从结果来看是进行了请求转发"><p>当然，请求转发也可以进行数据的传输，对上述的goto方法进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/goto"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">GotoTheNewJsp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*获取Request路径*/</span></span><br><span class="line">    HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置传输的数据*/</span></span><br><span class="line">    request.setAttribute(<span class="string">"username"</span>,<span class="string">"ShuHao!!!!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"NewJsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*NewJsp.jsp*/</span></span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这里是NewJsp.jsp: $&#123;username&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/6.png" title="测试结果"><h6 id="问题：关于el标签无法取值"><a class="header-anchor" href="#问题：关于el标签无法取值">¶</a>问题：关于EL标签无法取值</h6><p><code>&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code>来设置是否忽视EL标签</p><p><a href="https://blog.csdn.net/yuxzh_251/article/details/74557086" target="_blank" rel="noopener">jsp中 EL标签获取不到值</a></p><h6 id="使用springmvc的重定向"><a class="header-anchor" href="#使用springmvc的重定向">¶</a>使用springMVC的重定向</h6><p>在上述的返回结果前加<code>redirect:</code>+ 路径 例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/goto"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">GotoTheNewJsp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*获取Request路径*/</span></span><br><span class="line">    HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置传输的数据*/</span></span><br><span class="line">    request.setAttribute(<span class="string">"username"</span>,<span class="string">"ShuHao!!!!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"NewJsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/goto2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">GotoTheNewJsp2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"重定向被触发了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/helloctl/goto"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/7.png" title="结果可以发现，这里使用了重定向"><hr><h5 id="返回json对象"><a class="header-anchor" href="#返回json对象">¶</a>返回JSON对象</h5><h6 id="以字符串的方式传输json"><a class="header-anchor" href="#以字符串的方式传输json">¶</a>以字符串的方式传输json</h6><p>为了快速的产生一个json对象的字符串，可以使用<strong>jackson</strong>组件：其相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetJson</span><span class="params">(HttpServletResponse response)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">"name"</span>,<span class="string">"ShuHao"</span>);</span><br><span class="line">    data.put(<span class="string">"age"</span>,<span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String str = mapper.writeValueAsString(data);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    response.getWriter().print(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过该方式可以将map集合转换成字符串形式的json</p><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/8.png" title="访问后输出结果"><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/8-1.png" title="控制台输出结果"><h6 id="使用-responsebody注解"><a class="header-anchor" href="#使用-responsebody注解">¶</a>使用@ResponseBody注解</h6><p>@ResponseBody</p><ul><li>注解用于将Controller的方法返回的对象，通过springmvc提供的HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端。</li></ul><p>在此之前先要在加入<strong>jackson</strong>组件，此后在<strong>spring配置文件中加入json解析器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--json解析器，用于将对象转换为JSON --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写一个返回值为<code>object</code>的方法，在前面以@ResponseBody注解里面设置一个map返回即可，例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getJson2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">GetJsonbyObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    data.put(<span class="string">"name"</span>,<span class="string">"ZhangSan"</span>);</span><br><span class="line">    data.put(<span class="string">"age"</span>,<span class="string">"20"</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/07/JavaWeb学习总结-8-1-SpringMVC配置、简单使用/9.png" title="返回结果"><p>– （本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;springmvc简单介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#springmvc简单介绍&quot;&gt;¶&lt;/a&gt;SpringMVC简单介绍&lt;/h4&gt;
&lt;p&gt;Spring MVC属于SpringFrameWork的后续产品，已经融合在Sprin
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(7.3)Spring常用的注解、静态属性装配</title>
    <link href="https://shuhaohwang.github.io/2020/02/06/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-7-3-Spring%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B3%A8%E8%A7%A3%E3%80%81%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7%E8%A3%85%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2020/02/06/JavaWeb学习总结-7-3-Spring常用的注解、静态属性装配/</id>
    <published>2020-02-06T08:52:02.000Z</published>
    <updated>2020-02-13T05:05:31.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring常用的注解"><a class="header-anchor" href="#spring常用的注解">¶</a>Spring常用的注解</h4><p><a href="https://www.jianshu.com/p/71e8971d2bc5?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">20个要掌握的注解</a></p><h5 id="一-用于创建对象的"><a class="header-anchor" href="#一-用于创建对象的">¶</a>一、 用于创建对象的</h5><p>1）@Component：将资源交给Spring进行管理，相当于在xml中配置了一个bean。该注解一般用于即不是表现层又不是业务层更不是持久层的类上面。</p><p>2）@Controller：标识该类为表现层</p><p>3）@Service：标识该类为业务层</p><p>4）@Repository：标识该类为持久层</p><h5 id="二-用于注入数据的"><a class="header-anchor" href="#二-用于注入数据的">¶</a>二、 用于注入数据的</h5><ol><li><p>@Autowired：自动按照类型注入。当使用注解注入属性时，set 方法可以省略。它只能注入其他 bean 类型。当有多个 类型匹配时，使用要注入的对象变量名称作为 bean 的 id，在 spring 容器查找，找到了也可以注入成功。找不到 就报错。</p></li><li><p>@Qualifier：在自动按照类型注入的基础之上，再按照 Bean 的 id 注入。它在给字段注入时不能独立使用，必须和 @Autowire 一起使用；但是给方法参数注入时，可以独立使用。</p></li><li><p>@Resource：直接按照 Bean 的 id 注入，如果根据id无法找到则根据类型进行查找。</p></li><li><p>@Value：注入基本数据类型和 String 类型数据的</p></li></ol><h5 id="三-用于改变作用范围的"><a class="header-anchor" href="#三-用于改变作用范围的">¶</a>三、 用于改变作用范围的</h5><ol><li>@Scope：指定 bean 的作用范围（singleton 、prototype、 request 、session、globalsession）。</li></ol><h5 id="四-和生命周期相关的"><a class="header-anchor" href="#四-和生命周期相关的">¶</a>四、和生命周期相关的</h5><ol><li><p>@PostConstruct：用于指定初始化方法。</p></li><li><p>@PreDestroy：用于指定销毁方法。</p></li></ol><h5 id="五-新注解"><a class="header-anchor" href="#五-新注解">¶</a>五、新注解</h5><ol><li><p>@Configuration：用于指定当前类是一个 spring 配置类，当创建容器时会从该类上加载注解。获取容器时需要使用 AnnotationApplicationContext(有@Configuration 注解的类.class)。</p></li><li><p>@ComponentScan：用于指定 spring 在初始化容器时要扫描的包。作用和在 spring 的 xml 配置文件中的：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.demo"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>是一样的。</p><ol start="3"><li><p>@Bean：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入 spring 容器。</p></li><li><p>@PropertySource：用于加载.properties 文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到 properties 配置文件中，就可以使用此注解指定 properties 配置文件的位置。</p></li><li><p>@Import：用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration 注解。当然，写上也没问 题。</p></li></ol><hr><h4 id="静态属性装配"><a class="header-anchor" href="#静态属性装配">¶</a>静态属性装配</h4><p>开发过程中有这样的一个情形，一个工具类我们要使用静态的方法去获取一个类对象，当这个类对象为静态且为的时候往往不能使用spring进行注入对象。</p><p>例如</p><p>假设我们要通过工具类来获取spring内那个组件person类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*person*/</span></span><br><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resources;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"PersonName2"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">","</span> + age + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Person p;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构在测试中输出这个工具类所通过spring注入获取的对象，发现为null。无法获取</p><img src="/2020/02/06/JavaWeb学习总结-7-3-Spring常用的注解、静态属性装配/1.png" title="结果没有获取"><p><strong>原因</strong>是 spring无法注入对象至对应的<strong>静态</strong>对象</p><p><strong>结论</strong>：<strong>spring不支持静态属性装配</strong></p><hr><h5 id="如何解决这个问题"><a class="header-anchor" href="#如何解决这个问题">¶</a>如何解决这个问题</h5><p>可以在工具类中通过一个方法进行中转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetSpringPersontoThis</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">p = person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：在方法前加入spring对应的注入注解，可以把对应的信息注入到其方法的参数中</p><p>演示工具类整体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Person p;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetSpringPersontoThis</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        p = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-3-Spring常用的注解、静态属性装配/2.png" title="测试结果"><p><strong>注意</strong>：没当你设置一个@Component组件类，你就要确保！该类能被扫描到。例如这个例子，一开始我没有在xml中设置该TestUtils包的扫描，造成了错误！！</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;spring常用的注解&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#spring常用的注解&quot;&gt;¶&lt;/a&gt;Spring常用的注解&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/71e8971d2bc5?u
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(7.2)Spring的控制反转和依赖注入、注解功能启用、如何使用注解</title>
    <link href="https://shuhaohwang.github.io/2020/02/06/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-7-2-Spring%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E3%80%81%E6%B3%A8%E8%A7%A3%E5%8A%9F%E8%83%BD%E5%90%AF%E7%94%A8/"/>
    <id>https://shuhaohwang.github.io/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/</id>
    <published>2020-02-06T07:13:42.000Z</published>
    <updated>2020-02-06T08:49:20.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring的控制反转和依赖注入"><a class="header-anchor" href="#spring的控制反转和依赖注入">¶</a>Spring的控制反转和依赖注入</h4><ul><li>控制反转和依赖注入<ul><li>Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</li><li>控制反转和依赖注入是同一个概念，在这基础上，控制反转可以理解为不用你人为的去管理控制对象之间的关系，而交递给spring来管理</li></ul></li></ul><hr><h4 id="spring启用注解功能"><a class="header-anchor" href="#spring启用注解功能">¶</a>Spring启用注解功能</h4><p>在spring的配置文件中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描注解组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Javabean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>即可启用注解功能，该功能启用后spring会扫描一遍你的代码文件，来识别一些spring注解。</p><p>注解启用后，你可以通过注解的形式来加载一些对象</p><h5 id="如何使用"><a class="header-anchor" href="#如何使用">¶</a>如何使用</h5><p>使用注解前先给你要变成可用注解加载的类添加<code>@Component</code>注解，进行类对象组件化。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件化后，要在spring配置文件中，写入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描注解组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Javabean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>用来扫描对应的组件化的类</p><p>扫描后，可以在其他类中去从spring中获取你组件化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext ax = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Person p = ax.getBean(Person.class);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/1.png" title="执行结果"><h6 id="autowired和resorce"><a class="header-anchor" href="#autowired和resorce">¶</a>Autowired和Resorce</h6><p><strong>Autowired</strong></p><p>当你使用这个组件类的时候，你可以发现里面的成员变量并没有对应的值</p><img src="/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/2.png"><p>此时你可以使用Autowired注解在对应的成员变量前加上，然后在spring的配置文件中配置一个String bean，此时可以自动的写入到这个组件类对应的成员变量中</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描注解组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Javabean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonName"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"张三风"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在要写入的成员变量前添加<code>@Autowired</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.pl != <span class="keyword">null</span>)<span class="keyword">return</span> name + <span class="string">","</span> + age + <span class="string">"==&gt;"</span> + pl;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">","</span> + age + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再运行测试类的代码，输出该类的对象的名字成员变量</p><img src="/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/3.png"><p>注意！：这里是自动的注入到该对象中，而不是调用其类的Set方法</p><hr><p><strong>Resorce</strong></p><p>如果，你的配置文件中有两个String bean 此时你再使用Autowired时，就会出现二义性，无法匹配对应的bean</p><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--扫描注解组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"Javabean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonName"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"张三风"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"PersonName2"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"王飞飞"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/4.png" title="结果为报错，出现二义性无法区分哪个为注入目标"><p><a href="http://www.pianshen.com/article/3838148533/" target="_blank" rel="noopener">@Resorce标签报错不存在解决</a></p><ul><li><p>原因为：缺少annotation-api.jar包中的类</p></li><li><p>解决，在pom.xml中加入对应依赖</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Javax Annotation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>面对这种情况，则可以使用<code>@Resorce</code>注解来指定要注入哪个bean。</p><img src="/2020/02/06/JavaWeb学习总结-7-2-Spring的控制反转和依赖注入、注解功能启用/5.png" title="此时就可以指定对应的bean来注入了"><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;spring的控制反转和依赖注入&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#spring的控制反转和依赖注入&quot;&gt;¶&lt;/a&gt;Spring的控制反转和依赖注入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;控制反转和依赖注入
&lt;ul&gt;
&lt;li&gt;Spring通过一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(7.1)Spring配置、一些基本操作</title>
    <link href="https://shuhaohwang.github.io/2020/02/06/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-7-1-Spring%E9%85%8D%E7%BD%AE%E3%80%81%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://shuhaohwang.github.io/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/</id>
    <published>2020-02-06T03:04:28.000Z</published>
    <updated>2020-02-06T07:11:06.938Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring简介"><a class="header-anchor" href="#spring简介">¶</a>spring简介</h4><p>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p><p>◆目的：解决企业应用开发的复杂性</p><p>◆功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</p><p>◆范围：任何Java应用</p><p>Spring是一个轻量级控制反转(IoC)和面向切面(AOP)的容器框架。有了spring可以更加便捷的操作一些Java对象，降低程序项目的耦合性。</p><h3 id="spring安装与配置"><a class="header-anchor" href="#spring安装与配置">¶</a>spring安装与配置</h3><h4 id="spring的安装"><a class="header-anchor" href="#spring的安装">¶</a>Spring的安装</h4><h5 id="1-直接下载jar包"><a class="header-anchor" href="#1-直接下载jar包">¶</a>1.直接下载jar包</h5><p><a href="https://spring.io/projects" target="_blank" rel="noopener">Spring官网下载</a></p><p><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">Spring官方github</a></p><p><a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">Spring Jar包下载</a></p><h5 id="2-使用maven"><a class="header-anchor" href="#2-使用maven">¶</a>2.使用maven</h5><p><strong>Spring的一些依赖详情</strong></p><ul><li>spring核心依赖<ul><li>spring-core、spring-beans、spring-context</li></ul></li><li>spring dao依赖<ul><li>spring-jdbc、spring-tx</li></ul></li><li>spring web依赖<ul><li>spring-web、spring-webmvc</li></ul></li><li>spring test依赖<ul><li>spring-test</li></ul></li></ul><p><strong>对应maven依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring核心依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Spring Dao依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring web依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring test依赖：方便做单元测试和集成测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring的安装-v2"><a class="header-anchor" href="#spring的安装-v2">¶</a>spring的安装</h4><p>jar包安装完毕后，在对应的项目中添加spring的配置文件，文件名可以自定【ApplicationContext.xml】</p><p><strong>配置文件模板</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moocAppctx"</span> <span class="attr">class</span>=<span class="string">"imooc_spring.test.aware.MoocApplicationContext"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">"hhhh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完全版</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moocAppctx"</span> <span class="attr">class</span>=<span class="string">"imooc_spring.test.aware.MoocApplicationContext"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">"hhhh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入db.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.pwd&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Spring 的 org.springframework.jdbc.core.JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moocBeanNameAware"</span> <span class="attr">class</span>=<span class="string">"imooc_spring.test.aware.MoocBeanNameAware"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 SpEL: 可以为属性进行动态的赋值(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"周迅"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="boy" class="com.helloworld.User" init-method="init" destroy-method="destroy"&gt; </span></span><br><span class="line"><span class="comment">        &lt;property name="userName" value="高胜远"&gt;&lt;/property&gt; &lt;property name="wifeName" </span></span><br><span class="line"><span class="comment">        value="#&#123;girl.userName&#125;"&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"girl2"</span> <span class="attr">class</span>=<span class="string">"com.helloworld.User2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"Talor Swift"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- autowired测试，自动装配测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"test.spring.autowired.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="cat" ref="cat222"&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="cat" ref="cat1"&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"test.spring.autowired.Cat"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"波斯猫"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id="cat222" class="test.spring.autowired.Cat"&gt; &lt;property name="name" </span></span><br><span class="line"><span class="comment">        value="我是小喵喵"&gt;&lt;/property&gt; &lt;/bean&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people2"</span> <span class="attr">class</span>=<span class="string">"test.spring.autowired.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat222"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat222"</span> <span class="attr">class</span>=<span class="string">"test.spring.autowired.Cat"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"波斯猫"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--context:component-scan 指定 扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以通过 resource-pattern 指定扫描的资源, resource-pattern="myrepository/*.class" </span></span><br><span class="line"><span class="comment">        的含义： 只扫描 base-package 对应包下的 目录为 myrepository 的所有java Bean --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;context:component-scan base-package="imooc_spring.test.anotation" </span></span><br><span class="line"><span class="comment">        resource-pattern="myrepository/*.class"&gt;&lt;/context:component-scan&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" </span></span><br><span class="line"><span class="comment">        子节点指定排除哪些注解 context:include-filter type="annotation" 需要结合context:component-scan </span></span><br><span class="line"><span class="comment">        标签的 use-default-filters="false"来使用 context:exclude-filter type="assignable" </span></span><br><span class="line"><span class="comment">        这个expression指的是自己写的类，意思排除哪些类 expression="imooc_spring.test.anotation.TestObj" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"imooc_spring.test.anotation"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" </span></span><br><span class="line"><span class="comment">            /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;context:exclude-filter type="assignable" expression="imooc_spring.test.anotation.TestObj" </span></span><br><span class="line"><span class="comment">            /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- aop测试,需要引入aop命名空间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- aop annotationType, --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 切点的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.aop.xmltype.CalculatorImplxml"</span> <span class="attr">id</span>=<span class="string">"calImplxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.aop.xmltype.MyAspectxml"</span> <span class="attr">id</span>=<span class="string">"myaspxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.aop.xmltype.Diary"</span> <span class="attr">id</span>=<span class="string">"myDiary"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop xmlType，用xml的形式配置AOP前置通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aop:pointcut 其实放在这儿也可以 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;aop:pointcut expression="execution (* com.aop.xmltype.CalculatorImplxml.*(..))" </span></span><br><span class="line"><span class="comment">            id="pointcut1" /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面和通知 ，aop:aspect标签需要通过ref指定配置好的bean，id随便配置或者不配置，id的值可以随意起 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myaspxml"</span> <span class="attr">ref</span>=<span class="string">"myaspxml"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置切点，即 要被记日记的对象， aop:pointcut 放在这儿也可以 ,切点不需要根对应的bean相关联，</span></span><br><span class="line"><span class="comment">             只要expression指定的方法所在的类被Spring扫描得到就行，即只要所在的类配置了bean就可以 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution (* com.aop.xmltype.CalculatorImplxml.*(..))"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"pointcut1"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 切面里的具体的用于记录的方法就是一个通知，需要用通过pointcut-ref来指定具体的切点， --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"logBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"logAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myDiary"</span> <span class="attr">order</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- execution (* com.aop.*.*.*(..))  包含了 com.aop.xmltype.CalculatorImplxml.*(..)) 的这种情况  --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;aop:pointcut expression="execution (* com.aop.*.*.*(..))" id="allPointcut"/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution (* com.aop.xmltype.CalculatorImplxml.*(..))"</span> <span class="attr">id</span>=<span class="string">"allPointcut"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"myEnd"</span> <span class="attr">pointcut-ref</span>=<span class="string">"allPointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="一些基本操作"><a class="header-anchor" href="#一些基本操作">¶</a>一些基本操作</h3><h4 id="通过spring配置文件进行创建对象-并使用"><a class="header-anchor" href="#通过spring配置文件进行创建对象-并使用">¶</a>通过spring配置文件进行创建对象，并使用</h4><h5 id="直接创建对象-以java自带的data为例"><a class="header-anchor" href="#直接创建对象-以java自带的data为例">¶</a>直接创建对象（以java自带的data为例）</h5><p>在配置文件中使用<code>&lt;bean&gt;</code>标签进行定义对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ApplicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何使用</p><ul><li>创建ApplicationContext对象用来加载spring配置文件<ul><li>使用ClassPathXmlApplicationContext来加载spring配置文件</li><li><code>ApplicationContext ax = new ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);</code></li></ul></li><li>加载完成后使用该对象进行getbean来获取配置文件中设置的对象<ul><li>ax.getBean(“id”, xxx.class);</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext ax = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Date d = ax.getBean(<span class="string">"a"</span>, Date.class);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/1.png" title="输出结果"><h5 id="如何调用对应对象中的构造函数-以java自带的string为例"><a class="header-anchor" href="#如何调用对应对象中的构造函数-以java自带的string为例">¶</a>如何调用对应对象中的构造函数（以java自带的String为例）</h5><p>在<code>&lt;bean&gt;</code>标签内使用<code>&lt;constructor-arg&gt;</code>标签，该标签有一些属性参数</p><ul><li>index；从0开始，代表构造函数对应第几个参数</li><li>value：数值，构造函数内的参数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ApplicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s"</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"HelloSpring！！"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext ax = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        String str = ax.getBean(<span class="string">"s"</span>,String.class);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/2.png" title="执行结果"><h4 id="通过propertiy调用set方法"><a class="header-anchor" href="#通过propertiy调用set方法">¶</a>通过propertiy调用set方法</h4><p>先创建一个person类用来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用了Person类中的set方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name + <span class="string">","</span> + age;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ApplicationContext.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person1"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"Zhangsan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'15'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*测试函数*/</span></span><br><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext ax = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContext.xml"</span>);</span><br><span class="line">        Person p = ax.getBean(<span class="string">"Person1"</span>, Person.class);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/3.png" title="执行结果"><p>假设，此时我们要修改该对象的年龄，我们可以通过在spring配置文件中对应对象的<code>&lt;bean&gt;</code>标签内使用<code>&lt;property&gt;</code>标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person1"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"Zhangsan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'15'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/4.png" title="此时的执行结果为"><p>实质上，其实是使用了类内内置的<code>setAge()</code>的set函数，例如我们修改姓名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person1"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"Zhangsan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'15'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"WangWu"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/5.png"><p>可以发现类内定义的set方法被调用了，且是在ApplicationContext对象被创建用来加载配置文件时就进行了调用</p><h4 id="通过ref标签引用已存在的bean"><a class="header-anchor" href="#通过ref标签引用已存在的bean">¶</a>通过ref标签引用已存在的bean</h4><p>假设，这个被创建的person类内还含有一个Person对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Person pl</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age,Person pl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.pl = pl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用了Person类中的set方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.pl != <span class="keyword">null</span>)<span class="keyword">return</span> name + <span class="string">","</span> + age + <span class="string">"==&gt;"</span> + pl;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">","</span> + age + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在spring配置文件中可以再创建一个Personbean 名为person2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person1"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"Zhangsan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'15'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person2"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"LiSi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'22'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果person1中的pl变量为定义的person2bean 则可以通过ref标签进行引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person1"</span> <span class="attr">class</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"Zhangsan"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">'15'</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">ref</span>=<span class="string">"Person2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/JavaWeb学习总结-7-1-Spring配置、一些基本操作/6.png"><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;spring简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#spring简介&quot;&gt;¶&lt;/a&gt;spring简介&lt;/h4&gt;
&lt;p&gt;Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(6.4)用SQL语句AS代替resultMap、动态SQL</title>
    <link href="https://shuhaohwang.github.io/2020/02/05/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-4-%E7%94%A8SQL%E8%AF%AD%E5%8F%A5AS%E4%BB%A3%E6%9B%BFresultMap%E3%80%81%E5%8A%A8%E6%80%81SQL/"/>
    <id>https://shuhaohwang.github.io/2020/02/05/JavaWeb学习总结-6-4-用SQL语句AS代替resultMap、动态SQL/</id>
    <published>2020-02-05T08:30:56.000Z</published>
    <updated>2020-02-05T10:17:14.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用sql语句as代替resultmap"><a class="header-anchor" href="#用sql语句as代替resultmap">¶</a>用SQL语句AS代替resultMap</h4><p>以往说过当数据库里面的数据项名称与对象的变量名不一样的时候，不能直接的映射成对应的对象</p><img src="/2020/02/05/JavaWeb学习总结-6-4-用SQL语句AS代替resultMap、动态SQL/3.png" title="例如这种情况"><p>这种情况除了可以使用resultMap进行自行的映射设定，也可以在SQL语句那进行下手，修改成as 对应的变量名。例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPersontoAID_map"</span>  <span class="attr">parameterType</span>= <span class="string">" id"</span><span class="attr">resultType</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        PERSON_ID AS id,</span><br><span class="line">        PERSON_NAME AS name,</span><br><span class="line">        PERSON_AGE AS age</span><br><span class="line">        from PERSON WHERE</span><br><span class="line">        PERSON_ID = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/05/JavaWeb学习总结-6-4-用SQL语句AS代替resultMap、动态SQL/4.png" title="能查询对应的结果并映射成对象"><h4 id="动态sql"><a class="header-anchor" href="#动态sql">¶</a>动态SQL</h4><p>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><p>虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。</p><p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h5 id="if"><a class="header-anchor" href="#if">¶</a>if</h5><p>动态 SQL 通常要做的事情是根据条件包含 where 子句的一部分。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这条语句提供了一种可选的查找文本功能。如果没有传入“title”，那么所有处于“ACTIVE”状态的BLOG都会返回；反之若传入了“title”，那么就会对“title”一列进行模糊查找并返回 BLOG 结果（细心的读者可能会发现，“title”参数值是可以包含一些掩码或通配符的）。</p><p>如果希望通过“title”和“author”两个参数进行可选搜索该怎么办呢？首先，改变语句的名称让它更具实际意义；然后只要加入另一个条件即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="choose-when-otherwise"><a class="header-anchor" href="#choose-when-otherwise">¶</a>choose, when, otherwise</h5><p>有时我们不想应用到所有的条件语句，而只想从中择其一项。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p>还是上面的例子，但是这次变为提供了“title”就按“title”查找，提供了“author”就按“author”查找的情形，若两者都没有提供，就返回所有符合条件的 BLOG（实际情况可能是由管理员按一定策略选出 BLOG 列表，而不是返回大量无意义的随机结果）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="trim-where-set"><a class="header-anchor" href="#trim-where-set">¶</a>trim, where, set</h5><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到“if”示例，这次我们将“ACTIVE = 1”也设置成动态的条件，看看会发生什么。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果这些条件没有一个能匹配上会发生什么？最终这条 SQL 会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br></pre></td></tr></table></figure><p>这会导致查询失败。如果仅仅第二个条件匹配又会怎样？这条 SQL 最终会是这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM BLOG</span><br><span class="line">WHERE</span><br><span class="line">AND title like ‘someTitle’</span><br></pre></td></tr></table></figure><p>这个查询也会失败。这个问题不能简单地用条件句式来解决，如果你也曾经被迫这样写过，那么你很可能从此以后都不会再写出这种语句了。</p><p>MyBatis 有一个简单的处理，这在 90% 的情况下都会有用。而在不能使用的地方，你可以自定义处理方式来令其正常工作。一处简单的修改就能达到目的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素没有按正常套路出牌，我们可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>prefixOverrides</em> 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的）。它的作用是移除所有指定在 <em>prefixOverrides</em> 属性中的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><p>类似的用于动态更新语句的解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，而舍去其它的。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，<em>set</em> 元素会动态前置 SET 关键字，同时也会删掉无关的逗号，因为用了条件语句之后很可能就会在生成的 SQL 语句的后面留下这些逗号。（译者注：因为用的是“if”元素，若最后一个“if”没有匹配上而前面的匹配上，SQL 语句的最后就会有一个逗号遗留）</p><p>若你对 <em>set</em> 元素等价的自定义 trim 元素的代码感兴趣，那这就是它的真面目：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意这里我们删去的是后缀值，同时添加了前缀值。</p><h5 id="foreach"><a class="header-anchor" href="#foreach">¶</a>foreach</h5><p>动态 SQL 的另外一个常用的操作需求是对一个集合进行遍历，通常是在构建 IN 条件语句的时候。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及在迭代结果之间放置分隔符。这个元素是很智能的，因此它不会偶然地附加多余的分隔符。</p><p><strong>注意</strong> 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象传递给 <em>foreach</em> 作为集合参数。当使用可迭代对象或者数组时，index 是当前迭代的次数，item 的值是本次迭代获取的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><h6 id="foreach查询范例"><a class="header-anchor" href="#foreach查询范例">¶</a>foreach查询范例</h6><img src="/2020/02/05/JavaWeb学习总结-6-4-用SQL语句AS代替resultMap、动态SQL/1.png" title="对应的表单"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPersontoAID_map"</span>  <span class="attr">resultType</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        PERSON_ID AS id,</span><br><span class="line">        PERSON_NAME AS name,</span><br><span class="line">        PERSON_AGE AS age</span><br><span class="line">        from PERSON WHERE</span><br><span class="line">        PERSON_ID IN </span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"sth"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #&#123;sth&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*测试类*/</span></span><br><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Person;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis2.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">/*注意！这里使用了接口映射！*/</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[]a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        List&lt;Person&gt; s;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        s = mapper.findPersontoAID_map(a);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Person p:s)System.out.println(p);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/05/JavaWeb学习总结-6-4-用SQL语句AS代替resultMap、动态SQL/2.png" title="查询的结果"><h6 id="foreach的其他属性介绍和解释"><a class="header-anchor" href="#foreach的其他属性介绍和解释">¶</a>foreach的其他属性介绍和解释</h6><p>foreach可以遍历所有的可以迭代的对象，集合，数组，map等等。</p><p>相关属性：</p><p>index： 当迭代对象是数组，列表时，表示的是当前迭代的次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当对象是map之类的时候，表示的是当前map的key。</span><br></pre></td></tr></table></figure><p>item： 当迭代对象是数组，列表时，表示的是当前迭代的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当对象是map之类的时候，表示的是当前map的value值。</span><br></pre></td></tr></table></figure><p>collection： 表示传入过来的参数的数据类型</p><ul><li>如果传入的是单参数且参数类型是一个 List 的时候，collection 属性值为 list</li><li>如果传入的是单参数且参数类型是一个 array 数组的时候，collection 的属性值为 array</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个 Map 了，当然单参数也可以封装成 map。</li></ul><p>separator： 遍历完一次后，在末尾添加的字符等。</p><p>open： 遍历的sql以什么开头</p><p>close： 遍历的sql以什么结尾</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;用sql语句as代替resultmap&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#用sql语句as代替resultmap&quot;&gt;¶&lt;/a&gt;用SQL语句AS代替resultMap&lt;/h4&gt;
&lt;p&gt;以往说过当数据库里面的数据项名称与对象的变量名不一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(6.3)MyBatis resultMap映射、常用标签、类中类数据库外键镶嵌查询</title>
    <link href="https://shuhaohwang.github.io/2020/02/04/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-3-MyBatis-resultMap%E6%98%A0%E5%B0%84%E3%80%81%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E3%80%81%E7%B1%BB%E4%B8%AD%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%96%E9%94%AE%E9%95%B6%E5%B5%8C%E6%9F%A5%E8%AF%A2/"/>
    <id>https://shuhaohwang.github.io/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/</id>
    <published>2020-02-04T13:12:56.000Z</published>
    <updated>2020-02-05T02:06:01.548Z</updated>
    
    <content type="html"><![CDATA[<h4 id="resultmap映射"><a class="header-anchor" href="#resultmap映射">¶</a>resultMap映射</h4><p>在以往的例子中，例如我们要在数据库中查找数据然后构造成一个user对象返回，一般情况下，数据库里面的数据项（ID、NAME、AGE）等都是与对象的成员数据相互匹配，例如：</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/1.png"><p>在这种情况下，我们进行数据库查询，查询结果可以直接是对应的对象类型。</p><p>以这个为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis 命令</span></span><br><span class="line"><span class="comment">通过ID查询一个数据项，返回类型为Person 对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">        select * from Person where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/2.png" title="可以发现最后的查询结果返回的为Person对象，且数据都各自相匹配"><p>从上面这个例子可以说明，MyBatis是可以自动的匹配数据并转换成一个实体对象，只要你的类成员变量与数据库的数据项名称相互一致匹配就可以，这是MyBatis的默认的自动映射。</p><p>但有时候会出现这种情况，数据库的数据项名称不匹配了。例如</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/3.png" title="两者不能相互匹配"><p>两者不能相互匹配的时候，这时候再进行查询并返回对应的对象就会报错，原因是程序不能识别对应的映射关系里</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/4.png" title="查询结果为null 此时程序再进行查询时就会无法查找转换不到一个person对象"><p>出现这种情况，我们就要手动去编写对应的映射关系，告诉程序，哪个数据项名称对应的是哪个成员变量</p><h5 id="resultmap实操"><a class="header-anchor" href="#resultmap实操">¶</a>Resultmap实操</h5><p>通过在对应的mapper.xml添加resultmap 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--id为必填项用来识别唯一指定的resultMap</span></span><br><span class="line"><span class="comment">type为对应的实体类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"PersonResultMap"</span> <span class="attr">type</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property属性为对应类内成员变量的变量名</span></span><br><span class="line"><span class="comment">column属性为对应数据库表单内的数据项名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"PERSON_ID"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"PERSON_NAME"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"PERSON_AGE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意这里的resultType返回类型： 要改成resultMap</span></span><br><span class="line"><span class="comment">SQL语句记得修改！此时不是where id =？ 而是PERSON_ID</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"PersonResultMap"</span>&gt;</span></span><br><span class="line">        select * from Person where PERSON_ID=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/5.png" title="自己书写玩映射后 再进行查询，查询成功！"><hr><h4 id="常用标签"><a class="header-anchor" href="#常用标签">¶</a>常用标签</h4><h5 id="设置别名-typealiases-标签"><a class="header-anchor" href="#设置别名-typealiases-标签">¶</a>设置别名<code>&lt;typeAliases&gt;</code>标签</h5><p>在MyBatis的配置文件中，加入<code>&lt;typeAliases&gt;</code>标签可以自行的设置别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"&#123;实际名称&#125;"</span> <span class="attr">alias</span>=<span class="string">"&#123;所设置的别名&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--例子--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"Javabean.Person"</span> <span class="attr">alias</span>=<span class="string">"Ps"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很多时候，遇到类型名比较长的时候，可以通过该标签进行设置别名，来代替原来的那个比较长的标签</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--一开始的mapper.xml下 用的是Javabean.Person来代表Person类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Javabean.Person"</span>&gt;</span></span><br><span class="line">        select * from Person where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在MyBatis配置文件中设置别名后--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"Javabean.Person"</span> <span class="attr">alias</span>=<span class="string">"Ps"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--此时的mapper.xml下可以使用Ps 来代替Javabean.Person--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Ps"</span>&gt;</span></span><br><span class="line">        select * from Person where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="settings-标签"><a class="header-anchor" href="#settings-标签">¶</a><code>&lt;settings&gt;</code>标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               settings包含很多重要的设置项</span></span><br><span class="line"><span class="comment">               setting用来设置每一个设置项</span></span><br><span class="line"><span class="comment">               name设置项名称</span></span><br><span class="line"><span class="comment">               value设置项取值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MyBatis的配置文件中，写入上述的<code>&lt;settings&gt;</code>标签，可以打印对应的执行命令日志</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/6.png" title="日志打印"><p><a href="https://blog.csdn.net/qq_36761831/article/details/88375215" target="_blank" rel="noopener">其他的Settings标签内的属性</a></p><hr><h4 id="类中类数据库外键镶嵌查询"><a class="header-anchor" href="#类中类数据库外键镶嵌查询">¶</a>类中类数据库外键镶嵌查询</h4><p>在实际开发中，肯定会出现类中类，的情况，例如一个员工对象，里面除了id、姓名、年龄、或许还有其对应的部门、而这个部门又有对应的id、部门名称。那么如何使用mybatis 进行设置映射，让其能转换成含有类中类的对象呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实体类 员工类*/</span></span><br><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Department dept;<span class="comment">//包含一个类中类 部门类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> num, String name, <span class="keyword">int</span> age, Department dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> num;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;<span class="keyword">this</span>.num = num;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDept</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> dept;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Department dept)</span> </span>&#123;<span class="keyword">this</span>.dept = dept;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">"["</span> + num + <span class="string">","</span> + name + <span class="string">","</span> + age + <span class="string">","</span> +dept + <span class="string">"]"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实体类2 部门类*/</span></span><br><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String Departmentname;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> DepartmentID;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String departmentname, <span class="keyword">int</span> departmentID)</span> </span>&#123;</span><br><span class="line">        Departmentname = departmentname;</span><br><span class="line">        DepartmentID = departmentID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDepartmentname</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Departmentname;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartmentname</span><span class="params">(String departmentname)</span> </span>&#123;Departmentname = departmentname;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDepartmentID</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> DepartmentID; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDepartmentID</span><span class="params">(<span class="keyword">int</span> departmentID)</span> </span>&#123;DepartmentID = departmentID;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> Departmentname;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库则采用外键对员工所在的表单进行设置</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/7.png" title="数据库内的结构"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*测试代码*/</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMyBatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in = HelloMyBatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        Employee employee = session.selectOne(<span class="string">"Employee.Mapper.findEmpAndDeptById"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果向以往一样设置映射，进行查询返回的对象中的部门类对象为空</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/8.png"><p>要解决这种情况，就要通过在<code>&lt;resultMap&gt;</code>内中使用<code>&lt;association&gt;</code>标签来设置类中类的联结映射</p><h5 id="通过-association-标签设置一对多的映射"><a class="header-anchor" href="#通过-association-标签设置一对多的映射">¶</a>通过<code>&lt;association&gt;</code>标签设置一对多的映射</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Employee"</span> <span class="attr">id</span>=<span class="string">"EmployeeResultMap"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"num"</span> <span class="attr">column</span>=<span class="string">"ID"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"NAME"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"AGE"</span>/&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--association标签内</span></span><br><span class="line"><span class="comment"> property属性：对应的类内成员变量的变量名</span></span><br><span class="line"><span class="comment"> column属性：对应数据项名</span></span><br><span class="line"><span class="comment"> javaType属性：类中类的类型 (这里是部门类)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">column</span>=<span class="string">"DET_ID"</span> <span class="attr">javaType</span>=<span class="string">"Department"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"DepartmentID"</span> <span class="attr">column</span>=<span class="string">"DEPARTMENT_ID"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"Departmentname"</span> <span class="attr">column</span>=<span class="string">"DEPARTMENT_NAME"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*查询语句*/</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findEmpAndDeptById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"EmployeeResultMap"</span>&gt;</span></span><br><span class="line">    select * from  Employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/9.png" title="发现一样无法查询成功对应的部门"><p>解决：修改sql语句，此时的sql语句只是在Employee这个表中获取数据，没有联结到DEPARTMENT的那张表单进行查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findEmpAndDeptById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"EmployeeResultMap"</span>&gt;</span></span><br><span class="line">  select * from  Employee u left join DEPARTMENT d on u.DET_ID = d.DEPARTMENT_ID where u.id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/10.png" title="最终修改语句后查询成功"><h5 id="通过-collection-标签获得list集合数据"><a class="header-anchor" href="#通过-collection-标签获得list集合数据">¶</a>通过<code>&lt;collection&gt;</code>标签获得list集合数据</h5><p>可以通过绑定<code>&lt;collection&gt;</code>来获取多个数据的集合，当上述例子中的对象里面含有一个集合时，可以通过该标签进行绑定数据，来获取一个集合数据</p><img src="/2020/02/04/JavaWeb学习总结-6-3-MyBatis-resultMap映射、常用标签、类中类数据库外键镶嵌查询/11.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Employee"</span> <span class="attr">id</span>=<span class="string">"EmployeeResultMap"</span> &gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"adds"</span> <span class="attr">ofType</span>=<span class="string">"Addr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"ADDRESS_ID"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"ADDRESS_TEXT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"EmpID"</span> <span class="attr">column</span>=<span class="string">"ADDRESS_OF_EMPID"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findEmpAndAddress"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"EmployeeResultMap"</span>&gt;</span></span><br><span class="line">        select * from  EMPLOYEE E</span><br><span class="line">        LEFT JOIN ADDRESS A</span><br><span class="line">        ON E.ID = A.ADDRESS_OF_EMPID</span><br><span class="line">        WHERE E.ID = #&#123;EMP_ID&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*测试代码*/</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.Address;</span><br><span class="line"><span class="keyword">import</span> Javabean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMyBatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in = HelloMyBatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        Employee employee = session.selectOne(<span class="string">"Employee.Mapper.findEmpAndAddress"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Address x : employee.getAdds())&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–(本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;resultmap映射&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#resultmap映射&quot;&gt;¶&lt;/a&gt;resultMap映射&lt;/h4&gt;
&lt;p&gt;在以往的例子中，例如我们要在数据库中查找数据然后构造成一个user对象返回，一般情况下，数据库里面
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(6.2)MyBatis基本查询、Mapper的接口式调用</title>
    <link href="https://shuhaohwang.github.io/2020/02/02/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-2-%E7%AE%80%E5%8D%95MyBatis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81Mapper%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>https://shuhaohwang.github.io/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/</id>
    <published>2020-02-02T13:25:11.000Z</published>
    <updated>2020-02-03T08:42:18.262Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mapper的接口式调用"><a class="header-anchor" href="#mapper的接口式调用">¶</a>Mapper的接口式调用</h4><p><a href="https://blog.csdn.net/Doctor_LY/article/details/83000745?utm_source=blogxgwz9" target="_blank" rel="noopener">Mapper接口调用相关问题解决参考</a></p><p>在搭建好的一个Mybatis的基本环境</p><p>一开始是把对应的映射文件mapper放在项目目录下的resources下，如果再把放在放类包的那个文件下，又会找不到该文件。原因是：<strong>IDEA编译后默认会把resource下的文件放到target的classpath下，但是src下的只有Java文件编译生成.class文件放入classpath下，其他文件会忽略的。</strong></p><p>所以解决这个问题要先在pom.xml文件内添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在类包内创建一个包来放置对应mapper.xml文件，然后在该包内再创建一个与该文件<strong>同名</strong>接口</p><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/1.png" title="对应的mapper内容与文件位置"><p>然后接口内写对应xml文件里面id的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> User <span class="title">findOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="测试："><a class="header-anchor" href="#测试：">¶</a>测试：</h5><ul><li>前面一样。获取一个一个数据库session会话后</li><li>通过该会话获取一个上面写的抽象类类对象<ul><li><code>session.getMapper(xxxMapper.class);</code></li></ul></li><li>用该对象调用相关的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        </span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.findOneById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mybatis基本查询"><a class="header-anchor" href="#mybatis基本查询">¶</a>MyBatis基本查询</h4><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/2.png" title="数据库表单内的内容"><ul><li>通过单项查询</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select * from Person where name=#&#123;NAME&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中Map为万能类型，可以接受所有的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*以object来接*/</span></span><br><span class="line">        Object obj = mapper.findOneByName(<span class="string">"ShuHao"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/3.png" title="输出形式+实际类为hashmap"><ul><li>使用聚合函数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"PersonCount"</span>  <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select count(id) as value from Person;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"AvgOfAge"</span>  <span class="attr">resultType</span>=<span class="string">"double"</span>&gt;</span></span><br><span class="line">    select avg(age) from Person;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*获取总人数*/</span></span><br><span class="line">        Object obj = mapper.PersonCount();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">/*取值可以通过转化成map调用get函数进行取值*/</span></span><br><span class="line">        System.out.println(((Map)obj).get(<span class="string">"value"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*获取平均年龄*/</span></span><br><span class="line">        System.out.println(mapper.AvgOfAge());</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/4.png" title="输出结果"><p>注意：在map类型下，如果不使用SQL语句： as xxx 例如：<code>select count(id) as value from Person;</code> 变为 -》<code>select count(id) from Person;</code> 结果会是 {count(id) = 11} 而不是 {value=11}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mapper的接口式调用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mapper的接口式调用&quot;&gt;¶&lt;/a&gt;Mapper的接口式调用&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Doctor_LY/artic
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(6.1)MyBatis配置与简单实例</title>
    <link href="https://shuhaohwang.github.io/2020/01/31/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-1-MyBatis%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/</id>
    <published>2020-01-31T09:52:43.000Z</published>
    <updated>2020-01-31T10:32:23.251Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mybatis简介"><a class="header-anchor" href="#mybatis简介">¶</a>MyBatis简介</h4><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录</p><p>简单点说就是提供一个DAO层框架，便于数据库与实体对象之间的转换</p><p><a href="https://www.cnblogs.com/wvae/p/9607684.html" target="_blank" rel="noopener">IDEA+Maven + MyBatis配置</a></p><h4 id="具体配置过程"><a class="header-anchor" href="#具体配置过程">¶</a>具体配置过程</h4><h5 id="1-安装相关的一些maven依赖插件-mybatis-mysql"><a class="header-anchor" href="#1-安装相关的一些maven依赖插件-mybatis-mysql">¶</a>1.安装相关的一些Maven依赖插件(MyBatis + Mysql)</h5><p>创建好Maven项目后，先导入MyBatis的一些Maven依赖，进行安装插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> /*MyBatis依赖*/</span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*MYSQL数据库*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-mybatis上配置mysql的相关属性"><a class="header-anchor" href="#2-mybatis上配置mysql的相关属性">¶</a>2.MyBatis上配置mysql的相关属性</h5><p>下载好依赖后，先在项目自带的resources文件下，创建一个xml文件，用来配置MyBatis</p><img src="/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/1.png" title="在该文件下创建！"><p>创建好文件后 打开进行配置，配置如下</p><p><strong>简化版</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/user_learn"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"shuhao"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"991124"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完全版：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config.properties"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置参数，需要时再设置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;settings&gt; &lt;/settings&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 别名定义 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对单个别名定义 type：类型的路径 alias：别名，类名不能写错</span></span><br><span class="line"><span class="comment">         别名可以随便起，但最好规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.edu.cqu.domains.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 批量别名定义 指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.edu.cqu.domains"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理，事务控制由mybatis --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池，由mybatis管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意这里的路径和xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/user.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 批量加载mapper 指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment">        &lt;package name="...." /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-根据实体对象进行配置反射映射"><a class="header-anchor" href="#3-根据实体对象进行配置反射映射">¶</a>3.根据实体对象进行配置反射映射</h5><p><strong>实体类模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String id;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String id, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>在resources目录下，创建一个mapper文件。里面放置对应实体类的，反射映射配置，文件类型为.XML，在里面写相关的mysql命令语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完整版</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将sql语句封装到mappedStatement对象中，所以将id称为statement的id --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType：指定输入参数的类型，这里指定int型 #&#123;&#125;表示一个占位符号 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #&#123;id&#125;：其中的id表示接收输入的参数，参数名称就是id，如果输入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数是简单类型，#&#123;&#125;中的参数名可以任意，可以value或其它名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表名要对，但是不区分大小写，resultType要写类名，同样不区分大小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-进行测试"><a class="header-anchor" href="#4-进行测试">¶</a>4.进行测试</h5><p>创建一个主类，还有main函数</p><p>具体使用mybatis步骤</p><ul><li><p>通过该类获取类加载对象，对mybatis的配置文件进行加载，转换成输入流</p></li><li><p>用该加载后的inputstream 对象创建SqlSessionFactory对象</p><ul><li><code>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in【inputstream 对象】)</code></li></ul></li><li><p>随后通过构造好的factory  获取sqlsession对象。</p><ul><li><code>SqlSession session = factory.openSession();</code></li></ul></li><li><p>对该session对象进行数据库链接操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">       SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        User user = session.selectOne(<span class="string">"Javabean.User.findOneById"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>操作SqlSession对象的时候，调用相关模板映射内写的一些方法进行数据库操作<ul><li>其中以上述为例selectOne方法内的两个参数，第一个为对象映射内的select标签内的方法id，第二个为对应的参数</li><li>本例测试为：根据id进行查找用户，当通过id = 1进行查找时，selectOne方法会返回对应的user对象</li></ul></li><li><img src="/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/2.png" title="运行的结果"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mybatis简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mybatis简介&quot;&gt;¶&lt;/a&gt;MyBatis简介&lt;/h4&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(5.2)使用Maven安装项目插件与Jar包、如何配置MavenWeb+Tomcat</title>
    <link href="https://shuhaohwang.github.io/2020/01/30/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-5-2-%E4%BD%BF%E7%94%A8Maven%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E6%8F%92%E4%BB%B6%E4%B8%8EJar%E5%8C%85/"/>
    <id>https://shuhaohwang.github.io/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/</id>
    <published>2020-01-30T09:43:56.000Z</published>
    <updated>2020-01-30T16:56:28.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过maven安装插件"><a class="header-anchor" href="#通过maven安装插件">¶</a>通过Maven安装插件</h4><p>Maven项目下，直接通过修改项目自带的pom.xml进行下载安装插件。例如安装maven-compiler-plugin插件，直接把内容复制进pom.xml内的<code>&lt;build&gt;&lt;plugins&gt;</code>两个标签内然后保存</p><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/1.png"><p>配置完毕后，在IDEA的右边点击Maven，然后点选Run Maven build即可</p><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/2.png" title="步骤"><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/3.png" title="等待下载完毕即可"><h4 id="部署mavenweb的一些问题解决集合"><a class="header-anchor" href="#部署mavenweb的一些问题解决集合">¶</a>部署MavenWeb的一些问题解决集合</h4><p><a href="https://blog.csdn.net/czc9309/article/details/80304074" target="_blank" rel="noopener">创建MavenWeb项目</a></p><p><a href="https://blog.csdn.net/wonderful_life_mrchi/article/details/83214990" target="_blank" rel="noopener">Idea创建maven web项目+Tomcat部署</a> <strong>主看！</strong></p><p><a href="https://www.cnblogs.com/cn-chy-com/p/10940129.html" target="_blank" rel="noopener">Tomcat插件的配置使用</a>（不推荐使用这样的方式，非常容易出错）</p><p>配置好Maven下载的插件后，去除Pom.xml内的<code>&lt;pluginManagement&gt;</code>标签，即可在Maven工程内显示你在Pom.xml内的插件，然后点选Tomcat7内的，Tomcat7:run进行启动即可</p><h4 id="maven常用插件"><a class="header-anchor" href="#maven常用插件">¶</a>Maven常用插件</h4><h5 id="1-maven-compiler-plugin"><a class="header-anchor" href="#1-maven-compiler-plugin">¶</a>1.maven-compiler-plugin</h5><p>设置maven编译的jdk版本，maven3默认用jdk1.5，maven2默认用jdk1.3</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                                                      </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                                                                                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                                                                                            </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>                                                                                                                    </span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>                                                                                                                                          </span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 源代码使用的JDK版本 --&gt;</span>                                                                                             </span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span>                                                                                     </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span><span class="comment">&lt;!-- 字符集编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!-- 跳过测试 --&gt;</span>                                                                                          </span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>                                                                                                                          </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-tomcat7-maven-plugin"><a class="header-anchor" href="#2-tomcat7-maven-plugin">¶</a>2. tomcat7-maven-plugin</h5><p>tomcat7插件，可以在远程进行部署项目，在没有安装Tomcat的情形下进行使用Tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"> &lt;!--配置项目的路径和tomcat的端口，以及服务器编码解决乱码问题--&gt;</span><br><span class="line">     &lt;configuration&gt;</span><br><span class="line">          &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">         &lt;port&gt;9090&lt;/port&gt;</span><br><span class="line">     &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="3-maven-source-plugin"><a class="header-anchor" href="#3-maven-source-plugin">¶</a>3.maven-source-plugin</h5><p>打包源码</p><p>注意：在多项目构建中，将source-plugin置于顶层或parent的pom中并不会发挥作用，必须置于具体项目的pom中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;attach-sources&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="4-maven-resource-plugin"><a class="header-anchor" href="#4-maven-resource-plugin">¶</a>4.maven-resource-plugin</h5><p>说明：该插件处理项目的资源文件拷贝到输出目录。可以分别处理main resources 和 test resources。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">     &lt;/configuration&gt;</span><br><span class="line"> &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="5-maven-dependency-plugin"><a class="header-anchor" href="#5-maven-dependency-plugin">¶</a>5.maven-dependency-plugin</h5><p>自动拷贝jar包到target目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 依赖插件 --&gt;  </span><br><span class="line">&lt;plugin&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;2.6&lt;/version&gt;  </span><br><span class="line">    &lt;executions&gt;  </span><br><span class="line">        &lt;execution&gt;  </span><br><span class="line">            &lt;id&gt;copy-dependencies&lt;/id&gt;  </span><br><span class="line">            &lt;phase&gt;compile&lt;/phase&gt;  </span><br><span class="line">            &lt;goals&gt;  </span><br><span class="line">                &lt;goal&gt;copy-dependencies&lt;/goal&gt;  </span><br><span class="line">            &lt;/goals&gt;  </span><br><span class="line">            &lt;configuration&gt;  </span><br><span class="line">                &lt;!-- $&#123;project.build.directory&#125;为Maven内置变量，缺省为target --&gt;  </span><br><span class="line">                &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;  </span><br><span class="line">                &lt;!-- 表示是否不包含间接依赖的包 --&gt;  </span><br><span class="line">                &lt;excludeTransitive&gt;false&lt;/excludeTransitive&gt;  </span><br><span class="line">                &lt;!-- 表示复制的jar文件去掉版本信息 --&gt;  </span><br><span class="line">                &lt;stripVersion&gt;true&lt;/stripVersion&gt;  </span><br><span class="line">            &lt;/configuration&gt;  </span><br><span class="line">        &lt;/execution&gt;  </span><br><span class="line">    &lt;/executions&gt;  </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="6-maven-assembly-plugin"><a class="header-anchor" href="#6-maven-assembly-plugin">¶</a>6.maven-assembly-plugin</h5><p>该插件允许用户整合项目的输出,包括依赖,模块,网站文档和其他文档到一个单独的文档，即可用定制化打包。</p><p>创建的文档格式包括:zip, tar, tar.gz(tgz), gar.bz2(tbgz2), jar, dir,war 等等。四种预定义的描述器可用：bin, jar-with-dependencies, src, project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;descriptorRefs&gt;</span><br><span class="line">      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">    &lt;/descriptorRefs&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;通过maven安装插件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#通过maven安装插件&quot;&gt;¶&lt;/a&gt;通过Maven安装插件&lt;/h4&gt;
&lt;p&gt;Maven项目下，直接通过修改项目自带的pom.xml进行下载安装插件。例如安装maven-com
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(5.1)Maven、Maven配置、配置Maven阿里云中央仓库</title>
    <link href="https://shuhaohwang.github.io/2020/01/30/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-5-1-Maven%E3%80%81Maven%E9%85%8D%E7%BD%AE%E3%80%81%E9%85%8D%E7%BD%AEMaven%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
    <id>https://shuhaohwang.github.io/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/</id>
    <published>2020-01-30T04:59:37.000Z</published>
    <updated>2020-01-30T15:20:46.433Z</updated>
    
    <content type="html"><![CDATA[<h4 id="maven简介"><a class="header-anchor" href="#maven简介">¶</a>Maven简介</h4><p><a href="https://baike.baidu.com/item/Maven" target="_blank" rel="noopener">Maven</a>项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/6854630" target="_blank" rel="noopener">项目管理工具</a>软件。</p><p>说白了：</p><p>在实际开发中，一般需要引入外部的jar包进行开发，例如MySQL的jar包、C3P0的一些jar包，而Maven则会根据程序员自己的需要自动的在网络上去下载相关的所有jar包，而不用程序员手动的去网上下载。综上Maven在实际开发中将非常方便。</p><h4 id="maven的配置-idea"><a class="header-anchor" href="#maven的配置-idea">¶</a>Maven的配置(IDEA)</h4><p>Maven通常在Eclipse 和IDEA都有自带。所有可以通过这些编译器配置自带的Maven，这里以IDEA为例(Eclipse 配置也差不多相同)</p><ul><li>首先打开IDEA的设置，搜索Maven</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/1.png" title="其中那个Maven home是对应的Maven版本"><ul><li>配置IDEA自带的Maven(这里选择的是Maven3)，设置自带Maven的settings.xml位置路径到 用户设置路径区域</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/2.png"><ul><li>配置本地存储仓库，默认的C盘空间小，改到空间大的盘。具体步骤为打开用户设置的settings.xml，也就是Maven所在目录下的settings.xml</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/3.png"><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/4.png" title="这里注意 路径之间的" alt="\">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;maven简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#maven简介&quot;&gt;¶&lt;/a&gt;Maven简介&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/Maven&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.3)小型AJAX工具、简单实例、JSON</title>
    <link href="https://shuhaohwang.github.io/2020/01/29/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-3-%E5%B0%8F%E5%9E%8BAJAX%E5%B7%A5%E5%85%B7%E3%80%81%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/</id>
    <published>2020-01-29T08:42:02.000Z</published>
    <updated>2020-01-29T14:40:46.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ajax简单小型工具"><a class="header-anchor" href="#ajax简单小型工具">¶</a>AJAX简单小型工具</h4><p>先理清AJAX普遍的核心寻求</p><ul><li>有一个目标url</li><li>给服务器的数据</li><li>获取服务器的结果</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//使用get方式发送ajax请求</span></span><br><span class="line">    <span class="function">function <span class="title">ajaxGet</span><span class="params">(url,param,callsuccess,callfail)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">var</span> isLast = (obj.redyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(isLast)&#123;</span><br><span class="line">                <span class="comment">//加载成功后</span></span><br><span class="line">                <span class="keyword">if</span>(isSuccess)&#123;<span class="comment">//如果状态正常则执行callsuccess回调函数</span></span><br><span class="line">                    <span class="keyword">var</span> rs = obj.responseText;</span><br><span class="line">                    <span class="keyword">if</span>(callsuccess)callsuccess(rs);</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果状态异常则执行callfail回调函数</span></span><br><span class="line">                    <span class="keyword">if</span>(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          obj.open(<span class="string">"get"</span>,url+<span class="string">"?"</span>+param);</span><br><span class="line">          obj.send(<span class="keyword">null</span>);<span class="comment">//get只能null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>整体思路：</p><ul><li>工具函数内首先输入<code>url</code>作为目标路径</li><li>param则代表本次的参数</li><li>callsuccess、callfail分别为加载成功或失败执行对应的回调函数</li><li>三者分别对应：目标在哪里、传什么值、该做什么</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//使用post方式发送ajax请求</span></span><br><span class="line">    <span class="function">function <span class="title">ajaxGet</span><span class="params">(url,param,callsuccess,callfail)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">var</span> isLast = (obj.redyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(isLast)&#123;</span><br><span class="line">                <span class="comment">//加载成功后</span></span><br><span class="line">                <span class="keyword">if</span>(isSuccess)&#123;<span class="comment">//如果状态正常则执行callsuccess回调函数</span></span><br><span class="line">                    <span class="keyword">var</span> rs = obj.responseText;</span><br><span class="line">                    <span class="keyword">if</span>(callsuccess)callsuccess(rs);</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果状态异常则执行callfail回调函数</span></span><br><span class="line">                    <span class="keyword">if</span>(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open(<span class="string">"post"</span>,url);</span><br><span class="line">        obj.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        obj.send(param);<span class="comment">//get只能null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="简单演示"><a class="header-anchor" href="#简单演示">¶</a>简单演示</h5><ul><li>以上篇检测用户名1是否存在为例</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    ajaxGet(<span class="string">"./HaveName"</span>,<span class="string">"un=shuhao"</span>,function (data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="string">"true"</span>)&#123;</span><br><span class="line">        alert(<span class="string">"用户名已经存在"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"用户名可以使用！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,function (st) &#123;</span><br><span class="line">    alert(<span class="string">"Error = "</span>+ st);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>实验结果：</li></ul><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/1.png" title="此时传参为un=shuhao"><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/2.png" title="此时传参为 un=ffff"><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/3.png" title="当目标url出错时"><ul><li>全部演示代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //使用get方式发送ajax请求</span><br><span class="line">    function ajaxGet(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                alert("加载成功")</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("get",url+"?"+param);</span><br><span class="line">        obj.send(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用post方式发送ajax请求</span><br><span class="line">    function ajaxpost(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.redyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj.open("post",url);</span><br><span class="line">        obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span><br><span class="line">        obj.send(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ajaxGet("./HaveName","un=shuhao",function (data)&#123;</span><br><span class="line">        if(data == "true")&#123;</span><br><span class="line">            alert("用户名已经存在");</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            alert("用户名可以使用！")</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,function (st) &#123;</span><br><span class="line">        alert("Error = "+ st);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="ajax简单实例-计算两数之和"><a class="header-anchor" href="#ajax简单实例-计算两数之和">¶</a>AJAX简单实例(计算两数之和)</h4><ul><li>思路：<ul><li>通过一个html页面的表单获取两个数字</li><li>创建一个servlet 获取两个值进行相加，随后打印让表单页面进行读取获取</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">name</span>=<span class="string">"a"</span>/&gt;</span>+<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">name</span>=<span class="string">"b"</span>/&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">"add();"</span>&gt;</span> = <span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"rs"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //使用get方式发送ajax请求</span><br><span class="line">    function ajaxGet(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("get",url+"?"+param);</span><br><span class="line">        obj.send(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用post方式发送ajax请求</span><br><span class="line">    function ajaxpost(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("post",url);</span><br><span class="line">        obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span><br><span class="line">        obj.send(param);</span><br><span class="line">    &#125;</span><br><span class="line">    function add() &#123;</span><br><span class="line"></span><br><span class="line">        var a = document.getElementById('a').value;</span><br><span class="line">        var b = document.getElementById('b').value;</span><br><span class="line">        var r = "a="+a+"&amp;b="+b;</span><br><span class="line">        console.log(a+"+"+b+"=");</span><br><span class="line"></span><br><span class="line">        ajaxGet("./Add",r,function (data)&#123;</span><br><span class="line">           if(a!=null &amp;&amp; b!=null)document.getElementById('rs').innerHTML = data;</span><br><span class="line">        &#125;,function (st) &#123;</span><br><span class="line">            alert("Error = "+ st);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/4.png" title="上述页面展示"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*servlet*/</span></span><br><span class="line"><span class="keyword">package</span> AJAXLearn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        String a = request.getParameter(<span class="string">"a"</span>);</span><br><span class="line">        String b = request.getParameter(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(<span class="string">"已经取到值 a= "</span>+ a +<span class="string">" b= "</span> + b);</span><br><span class="line"></span><br><span class="line">        response.getWriter().print((Double.parseDouble(a)+Double.parseDouble(b)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：</li></ul><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/5.png"><h4 id="补充：json格式"><a class="header-anchor" href="#补充：json格式">¶</a>补充：JSON格式</h4><h5 id="json规则："><a class="header-anchor" href="#json规则：">¶</a>JSON规则：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象 用 大括号 &#123;&#125;</span><br><span class="line">数组 用 中括号 []</span><br><span class="line">赋值 用 冒号 ：</span><br><span class="line">分隔 用 逗号 ,</span><br><span class="line">注意：字符串用双引号，属性名用双引号(严格模式要求)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Mr.House"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">"科目"</span>:[<span class="string">"数学"</span>,“英语”,“体育”]</span><br><span class="line">    “student”: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON的本质是字符串</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ajax简单小型工具&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ajax简单小型工具&quot;&gt;¶&lt;/a&gt;AJAX简单小型工具&lt;/h4&gt;
&lt;p&gt;先理清AJAX普遍的核心寻求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个目标url&lt;/li&gt;
&lt;li&gt;给服务器的数
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.2)AJAX</title>
    <link href="https://shuhaohwang.github.io/2020/01/26/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-2-AJAX/"/>
    <id>https://shuhaohwang.github.io/2020/01/26/JavaWeb学习总结-4-2-AJAX/</id>
    <published>2020-01-26T07:27:50.000Z</published>
    <updated>2020-01-27T12:37:34.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ajax"><a class="header-anchor" href="#ajax">¶</a>AJAX</h4><ul><li>AJAX: &quot; Asnchronous JavaScript and XMI&quot;<ul><li>中文意思:异步Javascript和yML.</li><li>指一种创建交互式网页应用的网页开发技术。</li><li>AJAX并非缩写词,而是由Jesse James Gaiiett创造的名词。</li></ul></li><li>不是指一种单一的技术,而是有机地利用了一系列相关的技术:<ul><li>web标准( Standards-Based Presentation )XHTML+CSs的表示,</li><li>使用DOM ( Document Object Model )进行动态显示及交互,</li><li>使用XML和XSLT进行数据交换及相关操作,</li><li>使用XMHttpReauest进行异步数据查询、检索.</li><li>简单理解为: JavaScript + XMttpReauest + CSS +服务器端的集合.</li></ul></li></ul><h5 id="优点"><a class="header-anchor" href="#优点">¶</a>优点</h5><ul><li>传统的web应用允许用户向web服务器发送一个请求。服务器接收并处理然后返回一个新的网页(同步)。</li><li>这个做法浪费了许多带宽,因为在前后两个页面中的大部分HTML代码往往是相同的。</li><li>AJAX应用可以仅向服务器发送并取回必需的数据,并在客户端采用Javascript处理来自服务器的响应</li><li>因为在服务器和浏览器之间交换的数据大量减少(大约只有原来的5%)结果我们就能看到响应更快的应用。同时很多的处理工作可以在发出请求的客户端机器上完成,所以Web服务器的处理时间也减少了。</li><li>Ajax在本质上是一个浏览器端的技术</li><li>Ajax技术之主要目的在于局部交换客户端及服务器间之数据</li><li>能够不用重新载入整个版面来更新资料,也就是所谓的Refresh without Reload(轻刷新)</li><li>与服务器之间的沟通,完全是透过Javascript来实行</li><li>本身传送的资料量很小,反应更快,让网络程序更像一个桌面应用程序</li><li>AJAX就是运用Javascript在后台悄悄帮你去跟服务器要资料,最后再由 Javascript或DOM来帮你呈现结果,因为所有动作都是由Javascript代劳,所以省去了网页重载的麻烦,使用者也感受不到等待的痛苦</li></ul><hr><h4 id="ajax常用api及简单实例"><a class="header-anchor" href="#ajax常用api及简单实例">¶</a>AJAX常用API及简单实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //异步对象，可以发送异步请求，可以接受服务器响应</span><br><span class="line">    var obj = new XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">    //访问数据的位置</span><br><span class="line">    obj.open("post","Hello.html");</span><br><span class="line">    </span><br><span class="line">    //访问时发送的数据或请求（参数会传递至服务器）</span><br><span class="line">    obj.send(null);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="常用api"><a class="header-anchor" href="#常用api">¶</a>常用api</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.readystate: 准备状态0.1.2.3.4</span><br><span class="line">obj.status :服务器响应的状态码(404/403/500/200/304) </span><br><span class="line">obj.responseText:服务器给我们的响应文本</span><br><span class="line">obj.onreadystatechange事件: readystate发生变化时触发</span><br></pre></td></tr></table></figure><h6 id="readystate属性"><a class="header-anchor" href="#readystate属性">¶</a>readyState属性</h6><p>readyState属性指出了XMLHttpRequest对象在发送/接收数据过程中所处的几个状态。XMLHtpRequest对象会经历5种不同的状态。</p><ul><li>0：未初始化。对象已经创建,但还未初始化,即还没调用 open方法;</li><li>1：已打开。对象已经创建并初始化,但还未调用send方法：</li><li>2：已发送。已经调用send方法,但该对象正在等待状态码和头的返回</li><li>3：正在接收。已经接收了部分数据,但还不能使用该对象的属性和方法,因为状态和响应头不完整;</li><li>4：已加载。所有数据接收完毕</li></ul><h6 id="status属性"><a class="header-anchor" href="#status属性">¶</a>status属性</h6><ul><li>服务器发送的每一个响应也都带有首部信息。三位数的状态码是服务器发送的响应中最重要的首部信息,并且属于超文本传输协议中的一部分。</li><li>常用状态码及其含义:<ul><li>404没找到页面(not found)</li><li>403禁止访问(forbidden)</li><li>500内部服务器出错(internal service error)</li><li>200一切正常(ok)</li><li>304没有被修改(not modif ied)</li></ul></li><li>在XMLHLLReauest对象中,服务器发送的状态码都保存在status属性里。通过把这个值和200或 304比较,可以确保服务器是否已发送了一个成功的响应</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span></span><br><span class="line">    var obj = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    obj.onreadystatechange = function () &#123;</span><br><span class="line">        alert(obj.readyState);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.open("post","HelloHtml.html");</span><br><span class="line">    obj.send(null);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/1.png" title="通过使用onreadystatechange函数可以看出，当异步请求对象开始发送异步请求时，其readystate再发送改变，一共有5个加载环节"><hr><h4 id="一些简单演示功能实例"><a class="header-anchor" href="#一些简单演示功能实例">¶</a>一些简单演示功能实例</h4><h5 id="时间数据刷新"><a class="header-anchor" href="#时间数据刷新">¶</a>时间数据刷新</h5><h6 id="v1-0"><a class="header-anchor" href="#v1-0">¶</a>v1.0</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">14</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;ShowTimeAndDate&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">当前时间为：&lt;span id="time"&gt;&lt;/span&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button type="button" onclick="getTime()"&gt;获取时间&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取异步请求对象</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast = (obj.readyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(islast &amp;&amp; isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                <span class="keyword">var</span> tspan = document.getElementById(<span class="string">'time'</span>);</span><br><span class="line">                tspan.innerHTML = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"Date.jsp"</span>)</span><br><span class="line"></span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/2.png" title="上述JSP页面展示"><p>数据源<code>Date.jsp</code></p><ul><li>用来刷新时间信息</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="keyword">new</span> Date());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/3.png" title="点击按钮后"><h6 id="v2-0-实现动态刷新页面2"><a class="header-anchor" href="#v2-0-实现动态刷新页面2">¶</a>v2.0(实现动态刷新页面2)</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在getTime()函数内添加一个计时期</span></span><br><span class="line">setTimeout(<span class="string">"getTime()"</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast = (obj.readyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(islast &amp;&amp; isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                <span class="keyword">var</span> tspan = document.getElementById(<span class="string">'time'</span>);</span><br><span class="line">                tspan.innerHTML = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"Date.jsp"</span>)</span><br><span class="line"></span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="string">"getTime()"</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/4.png" title="可以发现后台一直访问Date.jsp 导致页面的时间也不停的刷新"><hr><h5 id="简单的用户名存在检测"><a class="header-anchor" href="#简单的用户名存在检测">¶</a>简单的用户名存在检测</h5><ul><li>实例说明</li></ul><p>很多时候在注册的时候都要进行用户检测，看该用户名是否注册过。所以这里可以更新ajax进行提交异步请求来检测用户在注册时输入的用户是否注册过</p><p><strong>初始页面</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"un"</span> id=<span class="string">"ymh"</span>/&gt;</span><br><span class="line">    &lt;button type="button" onclick="IsHavename()"&gt;检测用户名是否存在&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script type=<span class="string">"application/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">IsHavename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast= (obj.status == <span class="number">304</span> || obj.status == <span class="number">200</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.readyState == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(islast&amp;&amp;isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> username = document.getElementById(<span class="string">'ymh'</span>).value;</span><br><span class="line">        console.log(username);</span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"./HaveName?un="</span>+username);</span><br><span class="line">        obj.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/5.png" title="上述代码展示的测试也面"><p><strong>后台服务端</strong></p><ul><li>总体处理流程：<ul><li>获取在展示页面获取的内容</li><li>在程序控制进行输出</li><li>用获取到的用户连接数据库进行查询是否存在</li><li>返回结果至此servlet后端服务器输出的页面<ul><li>如果存在则显示true</li><li>不存在则显示false</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LoginDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> User.User;</span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsHaveName</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">"un"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取成功！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户信息： 用户名： "</span> + username);</span><br><span class="line"></span><br><span class="line">        UserDao userDao = JDBCUtil.getUserDao();</span><br><span class="line">        response.getWriter().print(userDao.findByUserName(username));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/6.png" title="此时数据库存在的用户"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/7.png" title="测试1"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/8.png" title="测试2"><h6 id="小修改使用post方式进行传参"><a class="header-anchor" href="#小修改使用post方式进行传参">¶</a>小修改使用post方式进行传参</h6><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*修改处*/</span></span><br><span class="line">obj.open(<span class="string">"post"</span>,<span class="string">"./HaveName"</span>);</span><br><span class="line">obj.send(<span class="string">"un="</span> +username);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*全部代码*/</span></span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/9.png" title="修改后"><h6 id="进行提示优化"><a class="header-anchor" href="#进行提示优化">¶</a>进行提示优化</h6><ul><li>当用户名查询存在时报已存在</li><li>不存在时报可用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;un&quot; id=&quot;ymh&quot;/&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; onclick=&quot;IsHavename()&quot;&gt;检测用户名是否存在&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script type=&quot;application/javascript&quot;&gt;</span><br><span class="line">    function IsHavename() &#123;</span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            var islast= (obj.status == 304 || obj.status == 200);</span><br><span class="line">            var isSuccess = (obj.readyState == 4);</span><br><span class="line"></span><br><span class="line">            if(islast&amp;&amp;isSuccess)&#123;</span><br><span class="line">                var data = obj.responseText;</span><br><span class="line">                if(data==&apos;true&apos;)&#123;</span><br><span class="line">                    alert(&quot;用户名已经存在请重新设置&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;用户名可以使用&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var username = document.getElementById(&apos;ymh&apos;).value;</span><br><span class="line">        console.log(username);</span><br><span class="line">        obj.open(&quot;post&quot;,&quot;./HaveName&quot;);</span><br><span class="line"></span><br><span class="line">        obj.setRequestHeader(&apos;Content-type&apos;,&apos;application/x-www-form-urlencoded&apos;)</span><br><span class="line">        obj.send(&quot;un=&quot; +username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/10.png"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/11.png" title="测试图"><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><ul><li>注意在传参过程中的乱码问题</li><li>处理时要考虑IE浏览器的兼容问题</li><li><code>obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</code>用来处理post请求的主体类型，使用post必填。填在open之后</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ajax&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ajax&quot;&gt;¶&lt;/a&gt;AJAX&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;AJAX: &amp;quot; Asnchronous JavaScript and XMI&amp;quot;
&lt;ul&gt;
&lt;li&gt;中文意思:
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.1)AJAX前奏-对于同步通讯与异步通讯的理解</title>
    <link href="https://shuhaohwang.github.io/2020/01/26/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-AJAX%E5%89%8D%E5%A5%8F-%E5%AF%B9%E4%BA%8E%E5%90%8C%E6%AD%A5%E9%80%9A%E8%AE%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E9%80%9A%E8%AE%AF%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2020/01/26/JavaWeb学习总结-4-1-AJAX前奏-对于同步通讯与异步通讯的理解/</id>
    <published>2020-01-26T03:14:56.000Z</published>
    <updated>2020-01-26T03:36:23.996Z</updated>
    
    <content type="html"><![CDATA[<h4 id="同步通讯"><a class="header-anchor" href="#同步通讯">¶</a>同步通讯</h4><ul><li>浏览器向服务器提交一个请求后等待服务器响应,服务器收到请求后作出处理,浏览器收到响应数据后显示出来,这就是传统B/S的同步通讯方式,页面中的内容都是同步加载到浏览器中的。</li><li>如果我们想向服务器提交数据,就必须进行页面跳转 ,如果我们想实时获得服务端数据,就必须不停地刷新页面。</li><li>有时候可能我们只是想更新极少的数据,这也要发请求,重新加载整个页面,浪费资源,降低访问速度</li></ul><h4 id="异步通讯"><a class="header-anchor" href="#异步通讯">¶</a>异步通讯</h4><ul><li>在不刷新页面的情况下与服务器进行通讯，就被称为异步通讯<ul><li>框架：如果使用一组框架构造了一个网页，可以只更新其中一个框架，而不必惊动整个页面</li><li><code>XMLHttpRequest</code>：该对象是对JavaScript的一个扩展,可使网页与服务器进行通信。是创建Ajax应用的最佳选择。实际上通常把 Ajax当成<code>XMLHttpRequest</code>对象的代名词</li></ul></li></ul><hr><h4 id="总述"><a class="header-anchor" href="#总述">¶</a>总述</h4><p>总的来说：</p><ul><li><p>**同步加载（刷新）：**每次刷新的是整个页面的数据</p></li><li><p>**异步加载（刷新）：**每次刷新的是整个页面的部分数据</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;同步通讯&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#同步通讯&quot;&gt;¶&lt;/a&gt;同步通讯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;浏览器向服务器提交一个请求后等待服务器响应,服务器收到请求后作出处理,浏览器收到响应数据后显示出来,这就是传统B/S的同步通讯方
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(3.2)反射与动态实例化</title>
    <link href="https://shuhaohwang.github.io/2020/01/24/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-3-2-%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
    <id>https://shuhaohwang.github.io/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/</id>
    <published>2020-01-24T10:38:48.000Z</published>
    <updated>2020-01-25T06:56:14.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反射"><a class="header-anchor" href="#反射">¶</a>反射</h4><ul><li><p>反射的概念主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。</p></li><li><p>JAVA反射机制是在运行状态中,对于任意一个类,都能够知道这个类的所有属性和方法;对于任意一个对象,都能够调用它的任意一个方法;这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></li></ul><h5 id="相关api"><a class="header-anchor" href="#相关api">¶</a>相关API</h5><ul><li>java.lang包下<ul><li><code>Class&lt;T&gt;</code>:表示一个正在运行的Java应用程序中的类和接口,是 Reflection的起源</li></ul></li><li>java.lang.reflect包下<ul><li>Field类:代表类的成员变量(也称类的属性)</li><li>Method类:代表类的方法Constructor类:代表类的构造方法</li><li>Array类:提供了动态创建数组,以及访问数组的元素的静态方法</li></ul></li></ul><h6 id="class-t"><a class="header-anchor" href="#class-t">¶</a><code>Class&lt;T&gt;</code></h6><table><thead><tr><th>获取方式</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td><code>object.getClass()</code>每个对象都有此方法</td><td>获取指定实例 对象的Class</td><td>List list = new ArrayListo;<br>Class listClass = list.getClass);</td></tr><tr><td><code>Class.getSuperclass()</code></td><td>获取当前Class的继承类Class</td><td>List list = new ArrayList);<br>Class listClass = list.getClass() <br>Class superClass = listClass<br>getSuperclass):</td></tr><tr><td><code>Object.class</code></td><td>.class直接获取</td><td>Class listClass = ArrayList.class;</td></tr><tr><td><code>Class.forName</code>(类名)</td><td>用Class的静态方法，传入类的全称即可</td><td>try{<br>Class c =Class.forName(“java. uti.ArrayList”);<br>} catch (ClassNotFoundException e)e.printStackTrace):</td></tr><tr><td><code>Primitive.TYPE</code></td><td>基本数据类型的封装类获取Class的方式</td><td>Class longClass =Long.TYPE;<br>Class integerClass = Integer.TYPE;<br>Class voidClass = Void.TYPE</td></tr></tbody></table><h6 id="method"><a class="header-anchor" href="#method">¶</a>Method</h6><ul><li>获得当前类以及超类的public Method:<ul><li><code>Method[] arrMethods = classType. getMethods();</code></li></ul></li><li>获得当前类申明的所有Method:<ul><li><code>Method[] arrMethods = classType. getDeclaredMethods();</code></li></ul></li><li>获得当前类以及超类指定的public Method:<ul><li><code>Method method = classType. getMethod(String name,Class&lt;?&gt;... parameterTypes);</code></li></ul></li><li>获得当前类申明的指定的Method:<ul><li><code>Method method = classType. getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code></li></ul></li><li>通过反射动态运行指定Method:<ul><li><code>Object obj = method. invoke(Object obj, Object... args)</code></li></ul></li></ul><h6 id="field"><a class="header-anchor" href="#field">¶</a>Field</h6><ul><li>获得当前类以及超类的public Field:<ul><li><code>Field[] arrFields = classType. getFields();</code></li></ul></li><li>获得当前类申明的所有Field:<ul><li><code>Field[] arrFields = classType. getDeclaredFields();</code></li></ul></li><li>获得当前类以及超类指定的public Field:<ul><li><code>Field field = classType. getField(String name);</code></li></ul></li><li>获得当前类申明的指定的Field:<ul><li><code>Field field = classType. getDeclaredField(String name);</code></li></ul></li><li>通过反射动态设定Field的值:<ul><li><code>fieldType.set(Object obj, Object value);</code></li></ul></li><li>通过反射动态获取Field的值:<ul><li><code>Object obj = fieldType. get(Object obj);</code></li></ul></li></ul><hr><h4 id="反射的作用"><a class="header-anchor" href="#反射的作用">¶</a>反射的作用</h4><p>反射最主要的作用之一就是可以动态的实例化对象。这里的动态的实例化对象可以类比成动态创建数组一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类比C++的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];<span class="comment">//这样创建一个数组它就已经在编译时就规定好了这个arr数组有5个空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*动态规划数组*/</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span>* nums = <span class="keyword">new</span> <span class="keyword">int</span>[a]<span class="comment">//这种创建数组为动态创建，可以更加自己的需要在程序运行的时候进行设置数组的大小</span></span><br></pre></td></tr></table></figure><p>而反射中的动态实例化也是差不多的道理</p><p>例如 我可以通过object来接一些数据，当我需要最终的对象类型是Student时，我就输入一个字符串让这个Object自动加载Student类中的内容、然后时object对象变成Student对象，而此时我又需要一个Book对象的时候可以输入一段字符串使这个object对象加载Book对象中的内容。进行设置转成Book对象。这与以往的自动类型检查机制不同，其中就是可以根据自己的需要在程序跑起来的时候进动态的实例化所需要的对象</p><h5 id="动态实例化过程"><a class="header-anchor" href="#动态实例化过程">¶</a>动态实例化过程</h5><ul><li>首先创建两个类Student与Book 内含一些参数与对应的get、set方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String class_name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String class_name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getClass_name</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClass_name</span><span class="params">(String class_name)</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Book</span><span class="params">(String id,String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getid</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setid</span><span class="params">(String class_name)</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/1.png" title="当我们输入要求加载Student类的时候，这个object就转换成Student对象"><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/2.png" title="当我们输入要求加载Book类的时候，这个object就转换成Book对象"><p>可以发现这些选择实例化对应的对象的操作都是程序已经在运行的时候发生的</p><h6 id="动态获取实例化的其他获取方法"><a class="header-anchor" href="#动态获取实例化的其他获取方法">¶</a>动态获取实例化的其他获取方法</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(command);</span><br><span class="line"><span class="comment">/*方法1：反射实例化(无参)*/</span></span><br><span class="line">Object o = c.newInstance();<span class="comment">//已被淘汰过期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法2：反射实例化(无参)*/</span></span><br><span class="line">Object o = c.getConstructor(new class[]());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法3：反射实例化(带参)*/</span></span><br><span class="line">Object o = c.getConstructor(new class[]())。newInstance(new Object[]&#123;"对应类参数..."&#125;);</span><br></pre></td></tr></table></figure><p>带参的出现，可以得到的结果就是动态实例化对象还可以更具需求自己调用想实例化的类对象的构造函数并设置对应的类内参数</p><hr><h5 id="动态获取类对象中的方法"><a class="header-anchor" href="#动态获取类对象中的方法">¶</a>动态获取类对象中的方法</h5><p>以上在动态获取类对象的基础上，还可以获取其对应对象类中的所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">            Method[] m = c.getMethods();</span><br><span class="line">            System.out.println(<span class="string">"\n该类的方法有："</span>);</span><br><span class="line">            <span class="keyword">for</span>(Method s:m) System.out.println(s.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/3.png" title="可以发现对应Book的类方法所有被获取了出来"><h6 id="你甚至可以动态的调用对应的类方法"><a class="header-anchor" href="#你甚至可以动态的调用对应的类方法">¶</a>你甚至可以动态的调用对应的类方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"444111"</span>,<span class="string">"西游记"</span>&#125;);<span class="comment">//调用对应加载类的构造函数进行设置</span></span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line">            </span><br><span class="line">            Method isGetidMethod = c.getMethod(<span class="string">"getid"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            Method isGetnameMethod = c.getMethod(<span class="string">"getName"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/4.png" title="这里以Book进行演示动态调用，还可以通过输入对应的方法名来动态调用其他的方法"><p><strong>含参数的动态调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method issetMethod = c.getMethod(<span class="string">"setid"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">issetMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;<span class="string">"123456"</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>详细测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"444111"</span>,<span class="string">"西游记"</span>&#125;);</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">            Method isGetidMethod = c.getMethod(<span class="string">"getid"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            Method isGetnameMethod = c.getMethod(<span class="string">"getName"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line"></span><br><span class="line">            Method issetMethod = c.getMethod(<span class="string">"setid"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">            issetMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;<span class="string">"123456"</span>&#125;);</span><br><span class="line">            id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/5.png" title="可以看到调用了对应Book类中的setid方法"><h6 id="动态属性访问"><a class="header-anchor" href="#动态属性访问">¶</a>动态属性访问</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"Javabean.Book"</span>);</span><br><span class="line"></span><br><span class="line">        Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"666"</span>,<span class="string">"红楼梦"</span>&#125;);</span><br><span class="line"></span><br><span class="line">        Field field = c.getField(<span class="string">"id"</span>);</span><br><span class="line">        Field field2 = c.getField(<span class="string">"name"</span>);</span><br><span class="line">        String id = field.get(o).toString();</span><br><span class="line">        String name = field2.get(o).toString();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/6.png" title="调用出对应的Book的成员变量id 和 name"><p><strong>设置参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接着上述代码*/</span></span><br><span class="line">field.set(o,<span class="string">"520"</span>);</span><br><span class="line"> id = field.get(o).toString();</span><br><span class="line"> name = field2.get(o).toString();</span><br><span class="line"> System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/7.png" title="设置对应id参数"><p><strong>附加</strong></p><p>可以使用<code>field.setAccessible(true)</code>进行降权操作，即允许调用私有属性</p><hr><h5 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h5><ul><li>动态调用方法的相关方法的参数中<ul><li>Class[]：为参数类型数组</li><li>object[]：为对应参数的值或对象</li></ul></li></ul><h4 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h4><p>反射最主要的使用情况</p><ul><li>有两个程序员，一个程序员在写程序的时候，需要使用第二个程序员所写的类，但第二个程序员并没完成他所写的类。那么第一个程序员的代码能否通过编译呢？这是不能通过编译的。利用Java反射的机制，就可以让第一个程序员在没有得到第二个程序员所写的类的时候，来完成自身代码的编译。只是如果这个类还没有，获取时会获取不到，但不会导致编译错误，更不会导致程序的崩溃。</li><li>可以在远程进行操作程序，动态的创建需要的对象和调用需要的方法</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;反射&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#反射&quot;&gt;¶&lt;/a&gt;反射&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反射的概念主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAVA反射机制是在运行
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习（1.4）JDBC连接池</title>
    <link href="https://shuhaohwang.github.io/2020/01/23/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-4%EF%BC%89JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://shuhaohwang.github.io/2020/01/23/Java基础学习（1-4）JDBC连接池/</id>
    <published>2020-01-23T09:28:51.000Z</published>
    <updated>2020-01-23T12:58:02.078Z</updated>
    
    <content type="html"><![CDATA[<h4 id="传统jdbc连接存在的问题"><a class="header-anchor" href="#传统jdbc连接存在的问题">¶</a>传统JDBC连接存在的问题</h4><p>开发基于数据库的程序时,传统的模式基本是按以下步骤:</p><ul><li>在主程序中建立数据库连接<code>-&gt;</code>SQL操作<code>-&gt;</code>断开数据库连接。</li></ul><p>这种模式开发,存在的问题:</p><ul><li><p>普通的JDBC数据库连接使用DriverManager来获取,每次向数据库建立连接的时候都要将Connection加载到内存中,再验证用户名和密码(得花费0. 05s~1s的时间)。需要数据库连接的时候,就向数据库要求一个,执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>,若同时有几百人甚至几千人在线,频繁的进行数据库连接操作将占用很多的系统资源,严重的甚至会造成服务器的崩溃</p></li><li><p>对于每一次数据库连接,使用完后都得断开。否则,如果程序出现异常而未能关闭,将会导致数据库系统中的内存泄漏,最终将导致重启数据库。</p></li><li><p>这种开发不能控制被创建的连接对象数,系统资源会被毫无顾及的分配出去如连接过多,也可能导致内存泄漏,服务器崩溃。</p></li></ul><hr><h4 id="数据库的连接池技术"><a class="header-anchor" href="#数据库的连接池技术">¶</a>数据库的连接池技术</h4><ul><li><p>数据库连接池技术(connection pool)的<strong>基本思想</strong>就是为数据库连接建立一个&quot;缓冲池。预先在缓冲池中放入一定数量的连接,当需要建立数据库连接时,只需从“缓冲池”中取出一个,使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接,它<strong>允许应用程序重复使用一个现有的数据库连接,而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中,这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用,连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数,当应用程序向连接池请求的连接数超过最大连接数量时,这些请求将被加入到等待队列中。</p></li></ul><hr><h4 id="演示"><a class="header-anchor" href="#演示">¶</a>演示</h4><h5 id="dbcp"><a class="header-anchor" href="#dbcp">¶</a>DBCP</h5><ul><li>DBCP是Apache软件基金组织下的开源连接池实现该连接池依赖该组织下的另一个开源系统: Common-pool.如需使用该连接池实现<ul><li>增加如下三个jar文件:<ul><li>Commons-dbcp.jar:连接池的实现 ,</li><li>Commons-pool.jar:连接池实现的依赖库</li><li>commons-logging.jar:连接池实现的依赖库2</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接池对象</span></span><br><span class="line">        BasicDataSource ds = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉连接池如何连接数据库</span></span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//对应原来的class.namefor()对mysql驱动进行加载设置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置连接池一些用户名密码和连接数据库的地址*/</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">        String name = <span class="string">"shuhao"</span>;</span><br><span class="line">        String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">        ds.setUrl(url);             <span class="comment">//设置密码</span></span><br><span class="line">        ds.setUsername(name);       <span class="comment">//设置数据库管理员用户名</span></span><br><span class="line">        ds.setPassword(password);   <span class="comment">//设置管理密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置连接池的一些基本属性*/</span></span><br><span class="line">        ds.setMaxTotal(<span class="number">40</span>);         <span class="comment">//最大活动连接数</span></span><br><span class="line">        ds.setMinIdle(<span class="number">2</span>);           <span class="comment">//最小空闲连接数</span></span><br><span class="line">        ds.setInitialSize(<span class="number">10</span>);      <span class="comment">//初始连接数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//向连接池申请一个连接</span></span><br><span class="line">            Connection conn = ds.getConnection();</span><br><span class="line"></span><br><span class="line">            conn.close();       <span class="comment">//归还连接给连接池【已被重写】</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"DBPC以成功获取MYsql连接！！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c3p0"><a class="header-anchor" href="#c3p0">¶</a>C3P0</h5><ul><li>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。</li><li>添加如下两个jar文件<ul><li>c3p0.jar</li><li>mchange-commons-java.jar</li><li>两者需版本对应</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//告诉连接池如何连接数据库</span></span><br><span class="line">            ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//对应原来的class.namefor()对mysql驱动进行加载设置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*设置连接池一些用户名密码和连接数据库的地址*/</span></span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">            String name = <span class="string">"shuhao"</span>;</span><br><span class="line">            String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">            ds.setJdbcUrl(url);             <span class="comment">//设置密码</span></span><br><span class="line">            ds.setUser(name);               <span class="comment">//设置数据库管理员用户名</span></span><br><span class="line">            ds.setPassword(password);       <span class="comment">//设置管理密码</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*设置连接池的一些基本属性*/</span></span><br><span class="line">            ds.setMaxPoolSize(<span class="number">40</span>);          <span class="comment">//最大连接数</span></span><br><span class="line">            ds.setMinPoolSize(<span class="number">2</span>);           <span class="comment">//最小连接数</span></span><br><span class="line">            ds.setInitialPoolSize(<span class="number">10</span>);      <span class="comment">//初始连接数</span></span><br><span class="line"></span><br><span class="line">            Connection conn = ds.getConnection();   <span class="comment">//获取连接</span></span><br><span class="line">            System.out.println(<span class="string">"成功从C3P0连接池获取连接"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="通过使用c3p0编写工具类"><a class="header-anchor" href="#通过使用c3p0编写工具类">¶</a>通过使用C3P0编写工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态连接池</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> ComboPooledDataSource ds = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ds == <span class="keyword">null</span>)&#123;<span class="comment">//如果为空说明没有创建连接池 则重新创建</span></span><br><span class="line">                ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">                ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">                String name = <span class="string">"shuhao"</span>;</span><br><span class="line">                String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">                ds.setJdbcUrl(url);</span><br><span class="line">                ds.setUser(name);</span><br><span class="line">                ds.setPassword(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ds.setMaxPoolSize(<span class="number">40</span>);</span><br><span class="line">                ds.setMinPoolSize(<span class="number">2</span>);</span><br><span class="line">                ds.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                Connection conn = ds.getConnection();</span><br><span class="line">                System.out.println(<span class="string">"成功从C3P0连接池获取连接"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">//最后返回一个getConnection()对象</span></span><br><span class="line">            <span class="keyword">return</span> ds.getConnection();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c3p0使用配置文件进行属性配置"><a class="header-anchor" href="#c3p0使用配置文件进行属性配置">¶</a>C3P0使用配置文件进行属性配置</h5><ul><li>名称必须为c3p0-config.xml,否则无法找到</li><li>文件必须放在classpath下【类根目录 例：src、以及maven的java和resource】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;amp;useSSL=false"<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>shuhao<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>991124<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span> = <span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;amp;useSSL=false"<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>shuhao<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>991124<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注意点"><a class="header-anchor" href="#注意点">¶</a>注意点:</h5><ul><li>数据源和数据库连接不同,数据源无需创建多个 ,它是产生数据库连接的工厂,因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后,程序还是像以前一样关闭数据库连接: onn.close0但上面的代码并没有关闭数据库的物理连接,它仅仅把数据库连接释放,归还给了数据库连接池</li><li>C3P0与DBCP区别<ul><li>DBCP没有自动回收空闲连接的功能</li><li>C3P0有自动回收空闲连接功能</li></ul></li></ul><h4 id="连接池技术的优点"><a class="header-anchor" href="#连接池技术的优点">¶</a>连接池技术的优点</h4><ul><li><p>资源重用:</p><ul><li>由于数据库连接得以重用,避免了频繁创建、释放连接引起的大量性能开销。在减少系统消耗的基础上,也增加系统运行环境的平稳性。</li></ul></li><li><p>更快的系统反应速度</p><ul><li>数据库连接池在初始化过程中,往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言 ,直接利用现有可用连接,避免了数据库连接初始化和放过程的时间开销,从而减少了系统的响应时间</li></ul></li><li><p>新的资源分配手段</p><ul><li>对于多应用共享同一数据库的系统而言,可在应用层通过数据库连接池的配置,实现某一应用最大可用数据库连接数的限制,避免某一应用独占所有的数据库资源</li></ul></li><li><p>统一的连接管理,避免数据库连接泄露</p><ul><li>在较为完善的数据库连接池实现中,可根据预先的占用超时设定,强制回收被占用连接,避免了常规数据库连接操作中可能出现的资源泄露</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;传统jdbc连接存在的问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#传统jdbc连接存在的问题&quot;&gt;¶&lt;/a&gt;传统JDBC连接存在的问题&lt;/h4&gt;
&lt;p&gt;开发基于数据库的程序时,传统的模式基本是按以下步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在主程
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
