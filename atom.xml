<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-07-18T13:59:15.756Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++进阶学习总结-（2.3）拷贝构造函数、继承与访问等级、函数遮蔽</title>
    <link href="https://shuhaohwang.github.io/2019/07/18/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-3%EF%BC%89%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E3%80%81%E5%87%BD%E6%95%B0%E9%81%AE%E8%94%BD/"/>
    <id>https://shuhaohwang.github.io/2019/07/18/C-进阶学习总结-（2-3）拷贝构造函数、继承与访问等级、函数遮蔽/</id>
    <published>2019-07-18T11:38:55.000Z</published>
    <updated>2019-07-18T13:59:15.756Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看.">    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述了C++中的特殊的拷贝构造函数、继承与访问权限等级、函数遮蔽问题（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.3）二叉树的性质及推导</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-3%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E6%8E%A8%E5%AF%BC/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/</id>
    <published>2019-07-17T03:03:38.000Z</published>
    <updated>2019-07-17T03:50:47.752Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的性质"><a class="header-anchor" href="#二叉树的性质">¶</a>二叉树的性质</h4><h5 id="性质1：-层级-📝"><a class="header-anchor" href="#性质1：-层级-📝">¶</a>性质1：(层级)📝</h5><ul><li>在二叉树的第<code>i</code>层上<u>至多</u>有2<sup>i-1</sup>个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/1.png"></li><li>即：下层的结点最多是上层结点的2倍</li></ul><hr><h5 id="性质2：-深度-📝"><a class="header-anchor" href="#性质2：-深度-📝">¶</a>性质2：(深度)📝</h5><ul><li>深度为k的二叉树<u>至多</u>有2<sup>k</sup>-1个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/2.png"></li></ul><hr><h5 id="性质3📝："><a class="header-anchor" href="#性质3📝：">¶</a>性质3📝：</h5><ul><li><p>对于任何一颗二叉树，若2度的结点数有n<sub>2</sub>个，则叶子结点n<sub>0</sub>的个数比为n<sub>2</sub>+1</p></li><li><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>n<sub>0</sub></td><td>度数为0的结点数(叶结点数)</td></tr><tr><td>n</td><td>总结点数</td></tr><tr><td>n<sub>1</sub></td><td>度数为1的结点数</td></tr><tr><td>n<sub>2</sub></td><td>度数为2的结点数</td></tr><tr><td>B</td><td>分枝数</td></tr></tbody></table></li></ul><ul><li><p><strong>n<sub>0</sub> = n<sub>2</sub>+1</strong></p></li><li><p><strong>其他公式</strong>🔎：</p><ul><li>分枝数(B)：<ul><li>B = n<sub>1</sub>+2n<sub>2</sub></li><li>B = n - 1(n为总结点数)B</li></ul></li></ul></li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/3.png"></li><li><p><strong>推导过程（n<sub>0</sub> = n<sub>2</sub>+1）📜</strong>：</p><ul><li>因为 B = n -1① 且 n = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub>②</li><li>所以B = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub> - 1 ③所以 n<sub>0</sub> = B -  n<sub>1</sub> -  n<sub>2</sub> + 1④</li><li>又因为B = n<sub>1</sub>+2n<sub>2</sub>  代入④ n<sub>0</sub> = n<sub>1</sub> + 2n<sub>2</sub> -  n<sub>1</sub> -  n<sub>2</sub> + 1</li><li>得n<sub>0</sub> = n<sub>2</sub>+1</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的性质&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树的性质&quot;&gt;¶&lt;/a&gt;二叉树的性质&lt;/h4&gt;
&lt;h5 id=&quot;性质1：-层级-📝&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#性质1：-层级-📝&quot;&gt;¶&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.2）二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-2%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-2）二叉树/</id>
    <published>2019-07-17T02:36:07.000Z</published>
    <updated>2019-07-17T03:01:21.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树-binary-tree"><a class="header-anchor" href="#二叉树-binary-tree">¶</a>二叉树(Binary Tree)</h4><ul><li><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。</p></li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/1.png"><ul><li>只有一个称为根的结点</li><li>除根外，其余结点分为不相交的子集T1和T2，分别称为T的左子树和右子树，且T1和T2本身又都是二叉树</li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/2.png"></li></ul></li><li><p><strong>二叉树与树</strong>：</p></li><li><table><thead><tr><th>二叉树</th><th>树</th></tr></thead><tbody><tr><td>至多只有两个子树</td><td>没有限制子树的个数上限</td></tr><tr><td>子树有左右之分，其次序不能颠倒(有序树)</td><td>子树可有序也可以无序</td></tr><tr><td>具有递归性质</td><td>具有递归性质</td></tr></tbody></table></li></ul><hr><h4 id="二叉树的五中基本形态"><a class="header-anchor" href="#二叉树的五中基本形态">¶</a>二叉树的五中基本形态</h4><ul><li>空树</li><li>只有一个根结点的二叉树</li><li>只有左子树</li><li>只有右子树</li><li>完全二叉树</li></ul><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/3.png"><hr><h4 id="二叉树的优点"><a class="header-anchor" href="#二叉树的优点">¶</a>二叉树的优点</h4><ul><li>普通树相比二叉树代码很难实现</li><li>二叉树结构简单，规律性强</li><li>所有树都可以转为唯一对应的二叉树</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树-binary-tree&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树-binary-tree&quot;&gt;¶&lt;/a&gt;二叉树(Binary Tree)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二叉树是一个连通的无环图，并且每一个顶点的度不大于3
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.1）树的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-1%EF%BC%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/</id>
    <published>2019-07-16T12:34:49.000Z</published>
    <updated>2019-07-16T14:39:53.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="树"><a class="header-anchor" href="#树">¶</a>树</h4><h5 id="概念及定义"><a class="header-anchor" href="#概念及定义">¶</a>概念及定义</h5><ul><li><p>树是一个有层级结构的数据结构</p></li><li><p>定义：树是有n（n&gt;=0）个结点组成的有限集合</p><ul><li>如果n = 0 ，称为空树</li><li>如果n &gt; 0, 则：<ul><li>有一个特点的称之为为根(root)的结点，它只有直接后继，没有直接前驱。</li><li>除根以外的其他结点划分为m(m &gt;= 0)个互不相交的有限集合，T0、T1、…、Tm-1，每个集合又是一颗树，称为根的子树。和根有直接关系的结点分别是这些子树的根。</li></ul></li></ul></li><li><p>特点：每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树。</p></li><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png"></li></ul><h5 id="树结构与线性结构"><a class="header-anchor" href="#树结构与线性结构">¶</a>树结构与线性结构</h5><ul><li><p>线性结构：一对一</p></li><li><p>树结构：一对多</p></li><li><table><thead><tr><th>线性结构</th><th>树结构</th></tr></thead><tbody><tr><td>第一个元素(无前驱)</td><td>根结点(无前驱)</td></tr><tr><td>最后一个元素(无后继)</td><td>多个叶子结点(无后继)</td></tr><tr><td>其他数据元素(一个前驱、一个后继)</td><td>树中的其他结点(一个前驱、多个后继)</td></tr></tbody></table></li></ul><hr><h4 id="树结构的一些术语"><a class="header-anchor" href="#树结构的一些术语">¶</a>树结构的一些术语</h4><ul><li><strong>根</strong>：唯一没有双亲的结点，其他结点都有唯一的双亲<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/2.png"></li></ul></li><li><strong>结点的度</strong>：一个结点含有的子树的个数称为该结点的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png"></li></ul></li><li><strong>树的度</strong>：树结构中，最大的结点的度称为树的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png" title="树的度为3"></li></ul></li><li><strong>分支结点</strong>：度数不为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="分支结点为D、E、J、F、G、A"></li></ul></li><li><strong>叶结点</strong>：度数为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="叶结点为B、C、H、I、P、Q、K、L、M、N"></li></ul></li><li><strong>孩子结点/子结点</strong>：某个<u>结点</u>的子树的根<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="孩子结点为 J、F、G、E、D"></li></ul></li><li><strong>双亲结点/父节点</strong>：若一个结点含有子结点，则这个结点称为其子结点的父结点</li><li><strong>兄弟结点</strong>：同一个双亲结点的孩子结点之间互为兄弟结点</li><li><strong>结点的祖先</strong>：从根到该节点所经分支上的所有节点</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙</li><li><strong>森林</strong>：多个数的集合<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/4.png"></li></ul></li><li><strong>子树森林</strong>：一个结点的所有子树构成的森林</li><li><strong>结点的深度</strong>：结点的祖先个数+1<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/5.png"></li></ul></li><li><strong>结点的高度</strong>：从结点到其子树叶结点经过的最大边数+1，叶结点的高度为1</li><li><strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/7.png"></li></ul></li><li><strong>树的高度</strong>：高度最大的结点的高度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/6.png"></li></ul></li><li><strong>树的深度</strong>：树中结点的最大层次或结点的最大深度</li><li><strong>堂兄弟结点</strong>：双亲在同一层的节点互为堂兄弟</li></ul><ul><li><strong>有序树</strong>：每个结点的子树有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/8.png"></li></ul></li><li><strong>无序树</strong>：每个结点的子树没有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/9.png"></li></ul></li></ul><hr><h4 id="树的类型"><a class="header-anchor" href="#树的类型">¶</a>树的类型</h4><h5 id="树的抽象数据类型"><a class="header-anchor" href="#树的抽象数据类型">¶</a>树的抽象数据类型</h5><ul><li>ADT Tree</li><li>DATA<ul><li>父子关系</li></ul></li><li>Operator<ul><li>Tree()     //初始化</li><li>Tree(definition) //从输入definition中创建树</li><li>Tree(const Tree &amp; T) //复制树</li><li>Node root() // 返回根结点</li><li>int depth()     //获得树的高度</li><li>int size()     //获得树的结点个数</li><li>Node parent(Node p)   //获得结点p的双亲</li><li>Node[] children§  //返回结点P的所有孩子</li><li>Node[] silbings(parent , p) //返回结点p的所有兄弟</li><li>Node find()    //查找结点</li><li>…</li></ul></li><li>endADT</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#树&quot;&gt;¶&lt;/a&gt;树&lt;/h4&gt;
&lt;h5 id=&quot;概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概念及定义&quot;&gt;¶&lt;/a&gt;概念及定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.2）查询子串位置二-KMP算法[难点]</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-2%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E4%BA%8C-KMP%E7%AE%97%E6%B3%95-%E9%9A%BE%E7%82%B9/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-2）查询子串位置二-KMP算法-难点/</id>
    <published>2019-07-14T02:07:22.000Z</published>
    <updated>2019-07-14T02:46:24.592Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的缺陷"><a class="header-anchor" href="#简单-bf-算法的缺陷">¶</a>简单(BF)算法的缺陷</h4><ul><li><strong>简单算法的实现</strong>📝：就让子串与主串进行<u>一个个</u>判断。<ul><li>例如 <code>“acdcda”</code>中找<code>“cda”</code>那么有：①c先与主串中的<code>‘a’</code>比较不匹配 主串后移、②c与主串中的<code>‘c‘</code>匹配，子串后移让d与主串中的<code>‘b’</code>比较。不匹配主串后移、③c与主串中的<code>‘d’</code>比较，匹配子串后移、④a与主串中的<code>‘c’</code>比较，不匹配,主串后移、⑤c与主串中的<code>‘d’</code>不匹配，主串后移、⑥c与子串中的<code>‘c’</code>匹配,子串后移，d与主串的下一个<code>‘d’</code>匹配，子串再后移，a与主串中的下一个<code>‘a’</code>匹配。找到，返回主串中第二个<code>‘c’</code>的位置。</li></ul></li><li><strong>发现问题​</strong>❗️：从上面可以看出，在③开始子串与已经比较过的主串字符又重新比较一次，从而大大的浪费了效率。</li></ul><hr><h4 id="kmp算法"><a class="header-anchor" href="#kmp算法">¶</a>KMP算法</h4><ul><li>正如上面所说的，简单算法，因为在最差的情况下，会进行大量的无意义的比较匹配。而KMP算法的发明者们便想：能否更加比较不匹配所给出的信息，跳过无意义的比较呢？这就是KMP算法的核心。</li></ul><p>–（本文未完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的缺陷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的缺陷&quot;&gt;¶&lt;/a&gt;简单(BF)算法的缺陷&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单算法的实现&lt;/strong&gt;📝：就让子串与主串进行&lt;u&gt;一个个&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.1）查询子串位置算法一—简单算法</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-1%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E7%AE%97%E6%B3%95%E4%B8%80%E2%80%94%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/</id>
    <published>2019-07-14T01:16:48.000Z</published>
    <updated>2019-07-14T02:20:06.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的代码实现及思路"><a class="header-anchor" href="#简单-bf-算法的代码实现及思路">¶</a>简单(BF)算法的代码实现及思路</h4><ul><li><p>算法作用🔍：查找在给定的子串在主串中的位置。例如：子串<code>“llo”</code>在主串<code>“hello”</code>的位置为3。</p></li><li><p>实现思路💡：BF的算法的核心就是子串对主串逐一比较。所以只需用第一个循环来匹配子串的首字符与主串中的字符是否相等，如果相等那么在对子串后面的字符与此时主串的后面的字符进行比较。</p><ul><li>例如：要在<code>“AB CADB CADA BCA”</code>中查找子串<code>“ CADA”</code>则从主串A中第一个开始查找，因为<code>“A”</code>与<code>“ ”</code>不匹配所以子串与主串的下一个字符比较，但也不同所以后移，当到了第三个的时候开始匹配，所以主串的第四个字符与子串第二个比较…主串第五个与子串第三个比较…。但到了主串的第七个字符与子串第4个字符不一样，所以匹配失败，主串后移一位又与子串的第一位开始比较。</li></ul><hr><ul><li><img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/2.png"></li></ul></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; str.size; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str[k] == str.str[j]) &#123;</span><br><span class="line"> j++;</span><br><span class="line"> k++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line"> j = <span class="number">0</span>;</span><br><span class="line"> n++;</span><br><span class="line"> k = n;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">if</span> (j &lt;= str.size)<span class="keyword">return</span> n;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果🔑: <img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/1.png"></p></li></ul></li></ul><hr><h4 id="算法优化🔧："><a class="header-anchor" href="#算法优化🔧：">¶</a>算法优化🔧：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; size &amp;&amp; j &lt; ch.size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == ch.str[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i = i + <span class="number">1</span> - j;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &lt;= ch.size) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的代码实现及思路&quot;&gt;¶&lt;/a&gt;简单(BF)算法的代码实现及思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算法作用🔍：查找在给定的子串在主串中的位置。例
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.3）实现字符串结构、相关操作代码和实现思路</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-3%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E3%80%81%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/</id>
    <published>2019-07-12T03:03:39.000Z</published>
    <updated>2019-07-12T08:26:54.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串结构的实现"><a class="header-anchor" href="#字符串结构的实现">¶</a>字符串结构的实现</h4><ul><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* str;<span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* ch)&#123;</span><br><span class="line">        <span class="comment">/*计算ch长度*/</span></span><br><span class="line">        <span class="keyword">char</span>* temp = ch;</span><br><span class="line">        <span class="keyword">while</span>(*temp++ != <span class="string">'\0'</span>);</span><br><span class="line">        </span><br><span class="line">        str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - ch];<span class="comment">//创建字符串</span></span><br><span class="line">        size = temp - ch - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)str[i] = ch[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串是由字符数组来实现的,所以字符串的构造函数首先要根据<code>const char* ch</code>（传入的字符数组）求得其长度，然后创建足够大的空间，并对其逐一赋值即可完成<code>String</code>类型的创建。</p></li></ul></li></ul><hr><h4 id="相关简单操作的代码实现和实现思路"><a class="header-anchor" href="#相关简单操作的代码实现和实现思路">¶</a>相关简单操作的代码实现和实现思路</h4><ul><li><p>返回指定位置指定长度的子串 <code>subString()</code></p><ul><li><p>实现思路❗️：根据用户输入指定的长度来创建足够大的空间的<code>char* temp</code>用来储存子串，然后用循环从指定位置开始对<code>temp</code>进行赋值，直到长度达到用户给定的长度即可。<strong>并在后面补上一个结束符(’\0’)</strong>,因为这是一个主串中的子串，后尾赋值的时候没有结束符。最后丢入<code>String</code>类型的构造函数中，释放temp的空间，返回新的字符串。</p></li><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,k = pos; i &lt; len;i++,k++)&#123;<span class="comment">//对子串进行逐一赋值</span></span><br><span class="line">        temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    temp[len] = <span class="string">'\0'</span>;<span class="comment">//末尾补上结束符</span></span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;<span class="comment">//释放堆空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;<span class="comment">//返回新的String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/1.png" title="以hello world为例"></p></li></ul></li></ul></li><li><p>重载运算符+=使其实现字符串的拼接</p><ul><li><p>实现思路❗️:拼接顾名思义，是把两个字符串连起来，所以定义一个<code>new_size</code>用来拼接后的字符串长度，只需分别求左右运算数的<code>size</code>相加即可。然后更加这个<code>new_size</code>长度定义一个新的字符串。之后先对左运算数，进行逐一赋值，然后在对右运算数进行赋值。即可完成拼接。</p></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String&amp; <span class="keyword">operator</span>+= (<span class="keyword">const</span> String&amp; str)&#123;</span><br><span class="line">    <span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size+<span class="number">1</span>];<span class="comment">//最后需要一个结束符所以+1</span></span><br><span class="line">    <span class="keyword">if</span>(!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="keyword">this</span>-&gt;size)&#123;temp[i] = <span class="keyword">this</span>-&gt;str[i]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++,i++)&#123;</span><br><span class="line">        temp[i] = str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;str;</span><br><span class="line">    str = temp;</span><br><span class="line">    size = new_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: </p></li></ul></li></ul></li></ul><hr><h4 id="具体完成代码📜："><a class="header-anchor" href="#具体完成代码📜：">¶</a>具体完成代码📜：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>* str;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">String(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line"><span class="keyword">while</span> (*temp++ != <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - str];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;str)<span class="keyword">throw</span> <span class="string">"内存分配失败"</span>;</span><br><span class="line">size = temp - str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)<span class="keyword">this</span>-&gt;str[i] = str[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回指定位置指定长度的子串*/</span></span><br><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= size)<span class="keyword">throw</span> <span class="string">"指定位置超界"</span>;</span><br><span class="line"><span class="keyword">if</span> (pos + len &gt;= size)<span class="keyword">throw</span><span class="string">"待获取子串超界"</span>;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, k = pos; i &lt;= len ; i++, k++) &#123;</span><br><span class="line">temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp[len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line"><span class="keyword">delete</span>[]temp;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重载运算符+=*/</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> String&amp; str) &#123;</span><br><span class="line"><span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;size) &#123; temp[i] = <span class="keyword">this</span>-&gt;str[i]; i++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++, i++) &#123;</span><br><span class="line">temp[i] = str.str[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = temp;</span><br><span class="line">size = new_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(<span class="string">"hello world "</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"原字符串为:"</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">String str2 = str.subString(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"其位置2开始长度为3的字串为 : "</span> &lt;&lt;str2.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">String <span class="title">str3</span><span class="params">(<span class="string">"ShuHao"</span>)</span></span>;</span><br><span class="line">str += str3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符串结构的实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符串结构的实现&quot;&gt;¶&lt;/a&gt;字符串结构的实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具体代码💻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.2）类中的static函数/成员变量、类函数const后缀、mutable</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-2%EF%BC%89%E7%B1%BB%E4%B8%AD%E7%9A%84static%E5%87%BD%E6%95%B0-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0const%E5%90%8E%E7%BC%80%E3%80%81mutable/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/C-进阶学习总结-（2-2）类中的static函数-成员变量、类函数const后缀、mutable/</id>
    <published>2019-07-11T17:26:36.000Z</published>
    <updated>2019-07-12T02:42:38.162Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看.">    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述在C++类中static函数/变量的特点、类函数const后缀的运用、mutable关键字（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.2）实现字符串strlen和strcpy</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-2%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2strlen%E5%92%8Cstrcpy/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/</id>
    <published>2019-07-10T14:00:43.000Z</published>
    <updated>2019-07-10T14:33:53.583Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现字符串中的简单操作一"><a class="header-anchor" href="#实现字符串中的简单操作一">¶</a>实现字符串中的简单操作一</h4><h5 id="strlen"><a class="header-anchor" href="#strlen">¶</a>strlen()</h5><ul><li><p>作用：返回字符串的长度</p></li><li><p>实现思路：因为在c/c<ins>中字符串是以char*指针来实现的，并且这些字符串中的末尾都有一个‘\0’结束符，所以在c/c</ins>中可以利用指针和地址来求得字符串的长度，首先定义一个临时指针然后用待求字符串长度的字符串对其进行赋值，再用循环对这个临时指针进行自加移动，当判断在某个地址中的数据为‘\0’结束符的时候，再让其与原来的字符串相减，即可得到字符串的长度。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line">    <span class="keyword">while</span>(*temp != <span class="string">'\0'</span>)&#123;temp++;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp - str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/1.png"></p></li></ul></li></ul><hr><h5 id="strcpy"><a class="header-anchor" href="#strcpy">¶</a>strcpy()</h5><ul><li><p>作用：进行字符串复制操作</p></li><li><p>实现思路：因为这个函数本身是实现复制操作，所以可以用原字符串对目标字符串进行逐一赋值即可实现。用一个临时指针存储目标字符串，然后用原字符串对这个临时指针进行逐一修改赋值，然后返回目标字符串即可。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = p;</span><br><span class="line">    <span class="keyword">while</span>((*temp++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/2.png"></p></li></ul></li></ul><hr><h4 id="错误记录："><a class="header-anchor" href="#错误记录：">¶</a>错误记录：</h4><p>在编写<code>strcpy()</code>时，忘记了<code>char*p</code>是一个指针，结果直接运用循环对其进行自加移动赋值修改，然后再返回该指针。</p><ul><li><p>错误代码:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p , <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/3.png"> <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/4.png"></p></li></ul></li></ul><p><strong>错误总结</strong>:上述错误代码中，因为p是一个指针，在循环的时候虽然是进行了逐一修改赋值，但指针也随之移动了，所以结果s不再是指向该字符串的首字符地址，而是指向了未知的末尾地址，从而造成指针p变成野指针。返回的结果也就想当然的是乱码了。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现字符串中的简单操作一&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实现字符串中的简单操作一&quot;&gt;¶&lt;/a&gt;实现字符串中的简单操作一&lt;/h4&gt;
&lt;h5 id=&quot;strlen&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="错误记录" scheme="https://shuhaohwang.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(4.1)字符串</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-4-1-字符串/</id>
    <published>2019-07-10T02:02:07.000Z</published>
    <updated>2019-07-10T14:31:36.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符-串类型定义及概念"><a class="header-anchor" href="#字符-串类型定义及概念">¶</a>(字符)串类型定义及概念</h4><h5 id="串的一些概念"><a class="header-anchor" href="#串的一些概念">¶</a>串的一些概念</h5><ul><li>以<code>(&quot;Hello world&quot;)</code>为例</li><li><strong>主串</strong>：即整个字符串被称为主串。<ul><li><code>str = “Hello World”；</code>str就是主串</li></ul></li><li><strong>子串</strong>：在主串中的一小段。(顺序相同)<ul><li><code>&quot;llo&quot;</code>是主串<code>“Hello World”</code>的字串、<code>“eH”</code>不是该主串的字串(顺序错了)</li></ul></li><li><strong>位置</strong>：某个字符、或字符段的第一个字符位于主串的位置下标。<ul><li>例如字串<code>“llo”</code>在主串<code>&quot;Hello World&quot;</code>的位置为3</li></ul></li><li><strong>串相等</strong>：当两个字符串之间，完全相同(长度相同，每个字符相同且位置相同)称为两个串相等<ul><li><code>”hello world“</code>与<code>“Hello World”</code>不相等(字符不相等)</li></ul></li><li><strong>空串</strong>：串长度为为0的字符串被称为空串。<ul><li>**注意：**空串与空格串不一样，空格串中的空格也算一个字符长度</li></ul></li></ul><hr><h5 id="串的抽象数据类型"><a class="header-anchor" href="#串的抽象数据类型">¶</a>串的抽象数据类型</h5><ul><li>ADT String<ul><li>Data：字符序列，以c/c++为例，<code>char*</code>类型数据，字符序列</li></ul></li><li>Operation：<ul><li><code>bool init(T,char*)</code> //初始化一个字符串</li><li><code>int find(S ,T)</code>    //查找字符串中是否存在字串</li><li><code>String strcat(T , S)</code>//拼接字符串</li><li><code>String subStr(S,pos,size)</code>//将s中的pos位置开始size长度的字串获取</li><li><code>bool inserStr(s,pos,T)</code>//将T插入到s的pos位置</li><li><code>bool deleteStr(S,pos,size)</code>//将S的pos位置开始的size长度的字串删除</li><li><code>bool copy(T,S)</code>//将S拷贝给T</li><li><code>int size()</code>//获得字符串长度</li><li><code>void clear()</code>//清空字符串</li><li>…</li></ul></li><li>endADT</li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符-串类型定义及概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符-串类型定义及概念&quot;&gt;¶&lt;/a&gt;(字符)串类型定义及概念&lt;/h4&gt;
&lt;h5 id=&quot;串的一些概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#串的一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.1）类与构造函数</title>
    <link href="https://shuhaohwang.github.io/2019/07/08/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-1%EF%BC%89%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/07/08/C-进阶学习总结-（2-1）类与构造函数/</id>
    <published>2019-07-08T03:01:08.000Z</published>
    <updated>2019-07-08T07:58:47.375Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看.">    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++的类中构造函数及默认参数、隐式转换、explicit、参数列表的基本用法和概念（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.5）顺序存储结构队列</title>
    <link href="https://shuhaohwang.github.io/2019/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/06/数据结构学习总结-（3-5）顺序队列/</id>
    <published>2019-07-06T15:42:47.000Z</published>
    <updated>2019-07-06T16:54:23.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序队列算法即实现思路"><a class="header-anchor" href="#顺序队列算法即实现思路">¶</a>顺序队列算法即实现思路</h4><h5 id="顺序储存结构的队列定义-以char类型为例"><a class="header-anchor" href="#顺序储存结构的队列定义-以char类型为例">¶</a>顺序储存结构的队列定义(以char类型为例)</h5><ul><li><p>实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* datas;<span class="comment">//线性表</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//队列容量</span></span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//队首</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//队尾</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    SqQueue(<span class="keyword">int</span> c)&#123;</span><br><span class="line">        capacity = c;</span><br><span class="line">        datas = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/1.png"></li></ul><h5 id="顺序队列"><a class="header-anchor" href="#顺序队列">¶</a>顺序队列</h5><ul><li><p>入队操作</p><ul><li><p>思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == capacity)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：直接让头数值进行自加即可实现出队操作</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    front++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><font color="red"><strong>出现一个问题</strong></font>:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。</p></li></ul><h5 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a>循环队列</h5><ul><li><p>入队操作：</p><ul><li><p>思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：<code>rear = (rear+1)%capacity</code></p><ul><li>算法解释：(以容量为5的队列为例)<ul><li>第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2…第四个为4。</li><li>第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。</li></ul></li></ul></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((rear+<span class="number">1</span>)%capacity == front)<span class="comment">//满队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>满队的处理：这里是用<code>(rear+1)%capacity == front</code>来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3</p></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即<code>front = (front + 1)% capacity</code>。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(front == rear)<span class="comment">//空队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    front = (front + <span class="number">1</span>)% capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span> &#123;</span></span><br><span class="line">T* datas;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">SqQueue(<span class="keyword">int</span> c = <span class="number">10</span>) &#123;</span><br><span class="line">capacity = c;</span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line">rear = front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">datas[rear] = e;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rear == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tr</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">fb(datas[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqQueue&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'a'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'b'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据c入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'c'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据d入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'d'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据e入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'e'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果:<img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序队列算法即实现思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#顺序队列算法即实现思路&quot;&gt;¶&lt;/a&gt;顺序队列算法即实现思路&lt;/h4&gt;
&lt;h5 id=&quot;顺序储存结构的队列定义-以char类型为例&quot;&gt;&lt;a class=&quot;header-anch
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.7)数据类型转换</title>
    <link href="https://shuhaohwang.github.io/2019/07/04/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/07/04/C++进阶学习总结-(1.7)数据类型转换/</id>
    <published>2019-07-03T18:08:30.000Z</published>
    <updated>2019-07-08T04:59:43.141Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看.">    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中 static_cast、dynamic_cast、const_cast、reinterpret_cast的概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.4）队列及链式队列的实现</title>
    <link href="https://shuhaohwang.github.io/2019/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/03/数据结构学习总结-（3-4）队列/</id>
    <published>2019-07-02T16:28:38.000Z</published>
    <updated>2019-07-03T17:36:21.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="队列的基本概念及定义"><a class="header-anchor" href="#队列的基本概念及定义">¶</a>队列的基本概念及定义</h4><ul><li><p>定义：</p><ul><li>队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。</li></ul></li><li><p>特征：先进先出(FIFO,First In First Out)</p></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/1.png"></li></ul><h5 id="队列的抽象数据类型"><a class="header-anchor" href="#队列的抽象数据类型">¶</a>队列的抽象数据类型</h5><ul><li>ADT Queue</li><li>Data<ul><li>线性关系(a1,a2,…,an)</li></ul></li><li>Operation<ul><li><code>bool push(e)</code>                                入队操作</li><li><code>bool pop()</code>                                    出队</li><li><code>T&amp;front()</code>                                      获得队首数据</li><li><code>bool empty()</code>                               判断队列是否为空</li><li><code>void clear()</code>                                清空队列</li><li>…</li></ul></li></ul><hr><h4 id="链式队列实现算法及思路"><a class="header-anchor" href="#链式队列实现算法及思路">¶</a>链式队列实现算法及思路</h4><ul><li><table><tr><td bgcolor="yellow">入队操作</td></tr></table>* 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。<ul><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/2.png"></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/3.png"></li><li><p>具体代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><table><tr><td bgcolor="yellow">出队操作</td></tr></table>  </li><li><p>思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。</p></li><li><p>具体代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == head)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    Node* p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现情况："><a class="header-anchor" href="#具体代码实现情况：">¶</a>具体代码实现情况：</h4><ul><li><s>入队</s>(完成)<ul><li>push(T e)</li></ul></li><li><s>出队</s>(完成)<ul><li>pop()</li></ul></li><li><s>是否为空</s>(完成)<ul><li>IsEmpty();</li></ul></li><li><s>获得队首元素</s>(完成)<ul><li>getFirst()</li></ul></li><li><s>清空队列</s>(完成)<ul><li>clear()</li></ul></li></ul><hr><h5 id="具体代码："><a class="header-anchor" href="#具体代码：">¶</a>具体代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node* head;</span><br><span class="line">Node* rear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Queue() &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear-&gt;next = p;</span><br><span class="line">rear = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == rear)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head == rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得首元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空队列*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">Node* q = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> rear;</span><br><span class="line"></span><br><span class="line">rear = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ta</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Queue&lt;<span class="keyword">char</span>&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'a'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'b'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'c'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"d数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'d'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.clear();</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"e数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'e'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'f'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"g数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'g'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"h数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'h'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/07/03/数据结构学习总结-（3-4）队列/4.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;队列的基本概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#队列的基本概念及定义&quot;&gt;¶&lt;/a&gt;队列的基本概念及定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列与栈相似，相比栈的先进后出，队列是先进先出为特
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-括号匹配</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/栈的应用-括号匹配/</id>
    <published>2019-07-02T06:12:48.000Z</published>
    <updated>2019-07-02T06:41:25.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="括号匹配"><a class="header-anchor" href="#括号匹配">¶</a>括号匹配</h4><ul><li>对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。</li><li><strong>实现思路</strong>：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。<ul><li>以<code>（{heheda}[123]())</code>为例。</li><li>第一步扫描上方字符串。发现第一个左括号<code>‘(’</code>使其入栈，第二个<code>'{'</code>入栈，发现<code>'}'</code>为右括号，与栈顶数据进行匹配发现，此时栈顶就是<code>'{'</code>与之匹配那么就出栈。（类似消消乐）</li></ul></li></ul><hr><h5 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LKStack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckStr</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">LkStack&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"字符串："</span> &lt;&lt; str &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">/*如果是左括号那么就入栈，等待匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span> || str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span> || str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">']'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'['</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">'&#125;'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'&#123;'</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty()&amp;&amp; str[i] == <span class="string">')'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'('</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号匹配成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CheckStr(<span class="string">"12312()()[]&#123;&#123;&#125;&#125; "</span>);</span><br><span class="line">CheckStr(<span class="string">"&#125;"</span>);</span><br><span class="line">CheckStr(<span class="string">"[()(),hello&#123;&#125;]"</span>);</span><br><span class="line">CheckStr(<span class="string">"test"</span>);</span><br><span class="line">CheckStr(<span class="string">"()(&#125;[]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实验结果</strong>：<img src="/2019/07/02/栈的应用-括号匹配/1.png"></li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;括号匹配&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#括号匹配&quot;&gt;¶&lt;/a&gt;括号匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。&lt;/l
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法性能分析</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/算法性能分析/</id>
    <published>2019-07-02T02:17:36.000Z</published>
    <updated>2019-07-02T03:20:18.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法性能分析"><a class="header-anchor" href="#算法性能分析">¶</a>算法性能分析</h4><h5 id="好的算法应当满足"><a class="header-anchor" href="#好的算法应当满足">¶</a>好的算法应当满足</h5><ul><li>正确性：算法应能满足具体问题的需求</li><li>可读性：算法应应易于阅读和理解</li><li>健壮性：输入数据非法时，算法也能适当作出反应或进行处理</li><li><strong>高效性</strong>：算法执行时间短，占用存储空间少</li></ul><hr><h5 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">¶</a>时间复杂度</h5><ul><li>程序：算法在计算机上的实现</li><li>程序的执行时间取决于如下因素：<ul><li>算法本身</li><li>问题规模</li><li>编程语言</li><li>硬件性能</li></ul></li><li>选择一个“基本操作”，分析基本操作执行的次数</li><li>用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。</li><li>算法的<font color="red">时间复杂度</font>为：和f(n)同阶的简化无穷大量T(n) = O(f(n))</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;算法性能分析&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法性能分析&quot;&gt;¶&lt;/a&gt;算法性能分析&lt;/h4&gt;
&lt;h5 id=&quot;好的算法应当满足&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#好的算法应当满足&quot;&gt;¶&lt;/a&gt;好的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表应用- 两数相加</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/链表应用-两数相加/</id>
    <published>2019-06-29T15:29:57.000Z</published>
    <updated>2019-06-30T07:28:25.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两数相加"><a class="header-anchor" href="#两数相加">¶</a>两数相加</h4><ul><li>问题：<ul><li>给定两个<strong>非空</strong>链表来表示两个非负整数。位数按照<strong>逆序</strong>方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。<ul><li>示例：<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出: 7 -&gt; 0 -&gt; 8</li><li>原因: 342 + 465 = 807</li></ul></li></ul></li></ul></li></ul><hr><h5 id="一些算法的思路："><a class="header-anchor" href="#一些算法的思路：">¶</a>一些算法的思路：</h5><ol><li><p>先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位…以此类推直到把所以值都后插入链表中。</p></li></ul></li></ol><ol start="2"><li><p>转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。</p></li></ul></li></ol><ol start="3"><li>最后一步把相加的结果再<code>ToLKlist()</code>用变为链表。</li></ol><hr><h5 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lklist</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Lklist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = <span class="number">0</span>;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除第一个数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得第一个元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为空链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*转换为数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数字转换为链表*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两数相加核心代码*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">TwoNumberAdd</span><span class="params">(Lklist num1, Lklist num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = number(num1);</span><br><span class="line"><span class="keyword">int</span> b = number(num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ToLKlist(a + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">Lklist s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入第二个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">s = TwoNumberAdd(ToLKlist(a), ToLKlist(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = s.Getlength();</span><br><span class="line"><span class="keyword">while</span> (!s.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.getfirst();</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.deletefirst();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/1.png"></li></ul><hr><h4 id="标准参考答案："><a class="header-anchor" href="#标准参考答案：">¶</a>标准参考答案：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumber</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ListNode* h = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode** t = &amp;h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l1!=<span class="literal">nullptr</span>||l2!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line"></span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">t = (&amp;node-&gt;next);</span><br><span class="line"></span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(carry % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(ListNode*&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">x = l-&gt;val;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="参考答案的核心算法思路："><a class="header-anchor" href="#参考答案的核心算法思路：">¶</a><strong>参考答案的核心算法思路：</strong></h5><ul><li><code>ListNode* addTwoNumber(ListNode* l1, ListNode* l2)</code></li><li>这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。<ul><li>第一步：<ul><li>取出两个链表中的第一个元素2和5。</li></ul></li><li>第二步：<ul><li>让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7</li></ul></li><li>第三步：<ul><li>把结果7模上10并<code>push_back</code>进结果链表。此时结果为7并且是结果链表的第一个数据</li><li>然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。</li></ul></li><li>第四步：<ul><li>循环上面的步骤</li><li>第二次循环中4和6的和是10，模上10取余后的结果为0，<code>push_back</code>进结果链表作为第二个数据</li><li>因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位</li></ul></li></ul></li><li>总体来看，首先因为题目描述为 <strong>位数按照逆序方式储存</strong>，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。</li></ul><hr><h5 id="个人实现代码优化后："><a class="header-anchor" href="#个人实现代码优化后：">¶</a>个人实现代码优化后：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LKlist</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LKlist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line">LNode* t = head;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"><span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"> <span class="keyword">delete</span> head-&gt;next;</span><br><span class="line"> head-&gt;next = p;</span><br><span class="line"> length--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(LKlist&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">LKlist::LNode* T;</span><br><span class="line"><span class="keyword">if</span> (l.head-&gt;next) &#123;</span><br><span class="line">x = l.head-&gt;next-&gt;data;</span><br><span class="line">T = l.head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> l.head-&gt;next;</span><br><span class="line">l.head-&gt;next = T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LKlist <span class="title">addTwoNumber</span><span class="params">(LKlist&amp; l1, LKlist&amp; l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">LKlist h;</span><br><span class="line"><span class="keyword">while</span> (!l1.IsEmpty() || !l2.IsEmpty()) &#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line">h.push_back(sum % <span class="number">10</span>);</span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">h.push_back(carry % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两数相加&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#两数相加&quot;&gt;¶&lt;/a&gt;两数相加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;问题：
&lt;ul&gt;
&lt;li&gt;给定两个&lt;strong&gt;非空&lt;/strong&gt;链表来表示两个非负整数。位数按照&lt;strong&gt;逆序&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="https://shuhaohwang.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法题" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-进制的转换</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/栈的应用-进制的转换/</id>
    <published>2019-06-29T12:32:55.000Z</published>
    <updated>2019-06-29T13:23:23.375Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数制转换"><a class="header-anchor" href="#数制转换">¶</a>数制转换</h4><ul><li><p>以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。</p></li><li><p>例如：<img src="/2019/06/29/栈的应用-进制的转换/1.png"></p></li><li><p>结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//n为十进制数，b为将要转的进制数</span></span><br><span class="line">    Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>；<span class="comment">//定义一个栈</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(n%b);<span class="comment">//获取余数并入栈</span></span><br><span class="line">        n = n/b;<span class="comment">//更新n</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty())&#123;<span class="comment">//出栈并输出。直至为空栈</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();<span class="comment">//获得栈顶元素</span></span><br><span class="line">        <span class="built_in">stack</span>.pop();<span class="comment">//每输出一个就出栈一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********链栈实现************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Stack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*判断是否为空栈*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据转换*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>.push(n % b);</span><br><span class="line">n = n / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ChangeNumber(<span class="number">75</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/06/29/栈的应用-进制的转换/2.png"></p></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数制转换&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数制转换&quot;&gt;¶&lt;/a&gt;数制转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++ vector容器常用操作和内存释放</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/C-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/C-vector容器常用操作和内存释放/</id>
    <published>2019-06-28T16:38:09.000Z</published>
    <updated>2019-06-29T01:18:25.728Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-对字符串的处理"><a class="header-anchor" href="#一-对字符串的处理">¶</a>一、对字符串的处理</h4><ul><li>对字符串每一个字符进行遍历修改操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> ifo = <span class="string">"ShuHaoHwang"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = ifo.begin(); iter != ifo.end(); iter++) &#123;</span><br><span class="line">*iter = <span class="built_in">toupper</span>(*iter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ifo &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二-查找配置项信息及内存释放"><a class="header-anchor" href="#二-查找配置项信息及内存释放">¶</a>二、查找配置项信息及内存释放</h4><ul><li>用迭代器及<code>vector</code>容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用<code>vector</code>进行内存释放。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">conf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> confname[<span class="number">40</span>];<span class="comment">//配置项名</span></span><br><span class="line"><span class="keyword">char</span> confid[<span class="number">100</span>];<span class="comment">//配置项信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getifo</span><span class="params">(<span class="built_in">vector</span>&lt;conf*&gt;&amp; a, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (iter = a.begin(); iter != a.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>((*iter)-&gt;confname, s) == <span class="number">0</span>) &#123;<span class="comment">//如果找到对应配置项名，就返回其配置项的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (*iter)-&gt;confid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">conf* server = <span class="keyword">new</span> conf;</span><br><span class="line">conf* server2 = <span class="keyword">new</span> conf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名1*/</span></span><br><span class="line">strcpy_s(server-&gt;confname,<span class="keyword">sizeof</span>(server-&gt;confname),<span class="string">"ServerName"</span>);</span><br><span class="line"><span class="comment">/*配置信息1*/</span></span><br><span class="line">strcpy_s(server-&gt;confid, <span class="keyword">sizeof</span>(server-&gt;confid), <span class="string">"1区"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confname, <span class="keyword">sizeof</span>(server2-&gt;confname), <span class="string">"ServerID"</span>);</span><br><span class="line"><span class="comment">/*配置信息2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confid, <span class="keyword">sizeof</span>(server2-&gt;confid), <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt; cinfo;</span><br><span class="line">cinfo.push_back(server);<span class="comment">//把结构指针放入容器</span></span><br><span class="line">cinfo.push_back(server2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找信息*/</span></span><br><span class="line"><span class="keyword">char</span>* temp;</span><br><span class="line">temp = getifo(cinfo, <span class="string">"ServerName"</span>);</span><br><span class="line"><span class="keyword">if</span> (temp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ServerName: "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*释放内存*/</span></span><br><span class="line"><span class="keyword">for</span> (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> (*iter);<span class="comment">//因为*iter是一个指针</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cinfo.clear();<span class="comment">//最后清空容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-对字符串的处理&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一-对字符串的处理&quot;&gt;¶&lt;/a&gt;一、对字符串的处理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对字符串每一个字符进行遍历修改操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++迭代器的失控范例和解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/06/28/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/28/C-迭代器的失控范例和解决方案/</id>
    <published>2019-06-28T03:54:43.000Z</published>
    <updated>2019-06-28T10:41:17.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器失控范例"><a class="header-anchor" href="#迭代器失控范例">¶</a>迭代器失控范例</h4><h5 id="情形一："><a class="header-anchor" href="#情形一：">¶</a>情形一：</h5><ul><li><p>很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对<code>vector</code>容器进行<code>push_back()</code>操作、对<code>vector</code>容器进行插入操作、删除操作。都会使<code>end()</code>函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者下面这种情况</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.insert(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/1.png"></p></li></ul></li><li><p>在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//添加元素后直接跳出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再进行一次迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/2.png"></p></li></ul></li><li><p>如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        iter = arrays.insert(iter,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/3.png"></p></li><li><p>**实现思路:**因为<code>arrays.insert()</code>的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以<code>end()</code>的值没有发生变化)。多次更新迭代器的起始<code>begin()</code>的值，从而使迭代器类型的指向不会失控。</p></li></ul></li><li><p>同样的如果使用<code>push_back()</code>:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        </span><br><span class="line">        arrays.push_back(<span class="number">100</span>);<span class="comment">//不断更新iter的值起始</span></span><br><span class="line">        iter = arrays.begin()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/4.png"></p></li></ul></li><li><p>**总体：**即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。<strong><em>弊端</em></strong>：麻烦，代码较繁杂。</p></li></ul><hr><h5 id="情形二："><a class="header-anchor" href="#情形二：">¶</a>情形二：</h5><ul><li><p>如果在某个时候要对容器进行清空操作，多数下使用容器自带的<code>clear()</code>函数即可。但在某些特殊情况下，要对<code>vector</code>容器的某些元素进行删除，就得使用容器自带的`</p><p>`函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用结果<img src="/2019/06/28/C-迭代器的失控范例和解决方案/5.png"></p></li></ul></li><li><p>如果真的要进行这样的操作可以这样做：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">    iter = arrays.erase(iter);<span class="comment">//直接让erase函数来更新迭代器指向的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for版</span></span><br><span class="line"><span class="keyword">for</span>(iter; iter != arrays.end(); )&#123;</span><br><span class="line">    iter = arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果： <img src="/2019/06/28/C-迭代器的失控范例和解决方案/6.png"></p></li><li><p>**实现思路：**因为<code>erase()</code>函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。</p></li></ul></li><li><p><strong>此情形更好的实现版本</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!arrays.empty())&#123;<span class="comment">//如果不为空就继续</span></span><br><span class="line">    <span class="keyword">auto</span> iter = arrays.begin();<span class="comment">//每开始一轮循环就更新迭代器的指向。</span></span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;迭代器失控范例&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#迭代器失控范例&quot;&gt;¶&lt;/a&gt;迭代器失控范例&lt;/h4&gt;
&lt;h5 id=&quot;情形一：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#情形一：&quot;&gt;¶&lt;/a&gt;情形一：&lt;/h
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
</feed>
