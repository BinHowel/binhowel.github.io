<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此，却永不能触及</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2020-02-03T08:42:18.262Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb学习总结(6.2)MyBatis基本查询、Mapper的接口式调用</title>
    <link href="https://shuhaohwang.github.io/2020/02/02/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-2-%E7%AE%80%E5%8D%95MyBatis%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81Mapper%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%BC%8F%E8%B0%83%E7%94%A8/"/>
    <id>https://shuhaohwang.github.io/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/</id>
    <published>2020-02-02T13:25:11.000Z</published>
    <updated>2020-02-03T08:42:18.262Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mapper的接口式调用"><a class="header-anchor" href="#mapper的接口式调用">¶</a>Mapper的接口式调用</h4><p><a href="https://blog.csdn.net/Doctor_LY/article/details/83000745?utm_source=blogxgwz9" target="_blank" rel="noopener">Mapper接口调用相关问题解决参考</a></p><p>在搭建好的一个Mybatis的基本环境</p><p>一开始是把对应的映射文件mapper放在项目目录下的resources下，如果再把放在放类包的那个文件下，又会找不到该文件。原因是：<strong>IDEA编译后默认会把resource下的文件放到target的classpath下，但是src下的只有Java文件编译生成.class文件放入classpath下，其他文件会忽略的。</strong></p><p>所以解决这个问题要先在pom.xml文件内添加以下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在类包内创建一个包来放置对应mapper.xml文件，然后在该包内再创建一个与该文件<strong>同名</strong>接口</p><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/1.png" title="对应的mapper内容与文件位置"><p>然后接口内写对应xml文件里面id的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> User <span class="title">findOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="测试："><a class="header-anchor" href="#测试：">¶</a>测试：</h5><ul><li>前面一样。获取一个一个数据库session会话后</li><li>通过该会话获取一个上面写的抽象类类对象<ul><li><code>session.getMapper(xxxMapper.class);</code></li></ul></li><li>用该对象调用相关的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        </span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        User user = mapper.findOneById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mybatis基本查询"><a class="header-anchor" href="#mybatis基本查询">¶</a>MyBatis基本查询</h4><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/2.png" title="数据库表单内的内容"><ul><li>通过单项查询</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select * from Person where name=#&#123;NAME&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中Map为万能类型，可以接受所有的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*以object来接*/</span></span><br><span class="line">        Object obj = mapper.findOneByName(<span class="string">"ShuHao"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/3.png" title="输出形式+实际类为hashmap"><ul><li>使用聚合函数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"PersonCount"</span>  <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    select count(id) as value from Person;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"AvgOfAge"</span>  <span class="attr">resultType</span>=<span class="string">"double"</span>&gt;</span></span><br><span class="line">    select avg(age) from Person;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*获取总人数*/</span></span><br><span class="line">        Object obj = mapper.PersonCount();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">/*取值可以通过转化成map调用get函数进行取值*/</span></span><br><span class="line">        System.out.println(((Map)obj).get(<span class="string">"value"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*获取平均年龄*/</span></span><br><span class="line">        System.out.println(mapper.AvgOfAge());</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/02/JavaWeb学习总结-6-2-简单MyBatis环境搭建、Mapper的接口式调用/4.png" title="输出结果"><p>注意：在map类型下，如果不使用SQL语句： as xxx 例如：<code>select count(id) as value from Person;</code> 变为 -》<code>select count(id) from Person;</code> 结果会是 {count(id) = 11} 而不是 {value=11}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mapper的接口式调用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mapper的接口式调用&quot;&gt;¶&lt;/a&gt;Mapper的接口式调用&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/Doctor_LY/artic
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(6.1)MyBatis配置与简单实例</title>
    <link href="https://shuhaohwang.github.io/2020/01/31/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-6-1-MyBatis%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/</id>
    <published>2020-01-31T09:52:43.000Z</published>
    <updated>2020-01-31T10:32:23.251Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mybatis简介"><a class="header-anchor" href="#mybatis简介">¶</a>MyBatis简介</h4><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录</p><p>简单点说就是提供一个DAO层框架，便于数据库与实体对象之间的转换</p><p><a href="https://www.cnblogs.com/wvae/p/9607684.html" target="_blank" rel="noopener">IDEA+Maven + MyBatis配置</a></p><h4 id="具体配置过程"><a class="header-anchor" href="#具体配置过程">¶</a>具体配置过程</h4><h5 id="1-安装相关的一些maven依赖插件-mybatis-mysql"><a class="header-anchor" href="#1-安装相关的一些maven依赖插件-mybatis-mysql">¶</a>1.安装相关的一些Maven依赖插件(MyBatis + Mysql)</h5><p>创建好Maven项目后，先导入MyBatis的一些Maven依赖，进行安装插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> /*MyBatis依赖*/</span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*MYSQL数据库*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-mybatis上配置mysql的相关属性"><a class="header-anchor" href="#2-mybatis上配置mysql的相关属性">¶</a>2.MyBatis上配置mysql的相关属性</h5><p>下载好依赖后，先在项目自带的resources文件下，创建一个xml文件，用来配置MyBatis</p><img src="/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/1.png" title="在该文件下创建！"><p>创建好文件后 打开进行配置，配置如下</p><p><strong>简化版</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/user_learn"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"shuhao"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"991124"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完全版：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config.properties"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--properties中还可以配置一些属性名和属性值 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="jdbc.driver" value=""/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置参数，需要时再设置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;settings&gt; &lt;/settings&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 别名定义 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对单个别名定义 type：类型的路径 alias：别名，类名不能写错</span></span><br><span class="line"><span class="comment">         别名可以随便起，但最好规范--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.edu.cqu.domains.User"</span> <span class="attr">alias</span>=<span class="string">"user"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 批量别名定义 指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大写或小写都可以） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.edu.cqu.domains"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和spring整合后 environments配置将废除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用jdbc事务管理，事务控制由mybatis --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池，由mybatis管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过resource方法一次加载一个映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意这里的路径和xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/user.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 批量加载mapper 指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中上边规范的前提是：使用的是mapper代理方法</span></span><br><span class="line"><span class="comment">        &lt;package name="...." /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-根据实体对象进行配置反射映射"><a class="header-anchor" href="#3-根据实体对象进行配置反射映射">¶</a>3.根据实体对象进行配置反射映射</h5><p><strong>实体类模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String id;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String id, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>在resources目录下，创建一个mapper文件。里面放置对应实体类的，反射映射配置，文件类型为.XML，在里面写相关的mysql命令语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Javabean.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完整版</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在映射文件中配置很多sql语句 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将sql语句封装到mappedStatement对象中，所以将id称为statement的id --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType：指定输入参数的类型，这里指定int型 #&#123;&#125;表示一个占位符号 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #&#123;id&#125;：其中的id表示接收输入的参数，参数名称就是id，如果输入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数是简单类型，#&#123;&#125;中的参数名可以任意，可以value或其它名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表名要对，但是不区分大小写，resultType要写类名，同样不区分大小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        SELECT * FROM user WHERE id = #&#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-进行测试"><a class="header-anchor" href="#4-进行测试">¶</a>4.进行测试</h5><p>创建一个主类，还有main函数</p><p>具体使用mybatis步骤</p><ul><li><p>通过该类获取类加载对象，对mybatis的配置文件进行加载，转换成输入流</p></li><li><p>用该加载后的inputstream 对象创建SqlSessionFactory对象</p><ul><li><code>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in【inputstream 对象】)</code></li></ul></li><li><p>随后通过构造好的factory  获取sqlsession对象。</p><ul><li><code>SqlSession session = factory.openSession();</code></li></ul></li><li><p>对该session对象进行数据库链接操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Javabean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMybatis</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       InputStream in =  HelloMybatis.class.getClassLoader().getResourceAsStream(<span class="string">"MyBatis.xml"</span>);</span><br><span class="line">       SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        User user = session.selectOne(<span class="string">"Javabean.User.findOneById"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>操作SqlSession对象的时候，调用相关模板映射内写的一些方法进行数据库操作<ul><li>其中以上述为例selectOne方法内的两个参数，第一个为对象映射内的select标签内的方法id，第二个为对应的参数</li><li>本例测试为：根据id进行查找用户，当通过id = 1进行查找时，selectOne方法会返回对应的user对象</li></ul></li><li><img src="/2020/01/31/JavaWeb学习总结-6-1-MyBatis配置与简单实例/2.png" title="运行的结果"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mybatis简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mybatis简介&quot;&gt;¶&lt;/a&gt;MyBatis简介&lt;/h4&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(5.2)使用Maven安装项目插件与Jar包、如何配置MavenWeb+Tomcat</title>
    <link href="https://shuhaohwang.github.io/2020/01/30/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-5-2-%E4%BD%BF%E7%94%A8Maven%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E6%8F%92%E4%BB%B6%E4%B8%8EJar%E5%8C%85/"/>
    <id>https://shuhaohwang.github.io/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/</id>
    <published>2020-01-30T09:43:56.000Z</published>
    <updated>2020-01-30T16:56:28.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="通过maven安装插件"><a class="header-anchor" href="#通过maven安装插件">¶</a>通过Maven安装插件</h4><p>Maven项目下，直接通过修改项目自带的pom.xml进行下载安装插件。例如安装maven-compiler-plugin插件，直接把内容复制进pom.xml内的<code>&lt;build&gt;&lt;plugins&gt;</code>两个标签内然后保存</p><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/1.png"><p>配置完毕后，在IDEA的右边点击Maven，然后点选Run Maven build即可</p><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/2.png" title="步骤"><img src="/2020/01/30/JavaWeb学习总结-5-2-使用Maven安装项目插件与Jar包/3.png" title="等待下载完毕即可"><h4 id="部署mavenweb的一些问题解决集合"><a class="header-anchor" href="#部署mavenweb的一些问题解决集合">¶</a>部署MavenWeb的一些问题解决集合</h4><p><a href="https://blog.csdn.net/czc9309/article/details/80304074" target="_blank" rel="noopener">创建MavenWeb项目</a></p><p><a href="https://blog.csdn.net/wonderful_life_mrchi/article/details/83214990" target="_blank" rel="noopener">Idea创建maven web项目+Tomcat部署</a> <strong>主看！</strong></p><p><a href="https://www.cnblogs.com/cn-chy-com/p/10940129.html" target="_blank" rel="noopener">Tomcat插件的配置使用</a>（不推荐使用这样的方式，非常容易出错）</p><p>配置好Maven下载的插件后，去除Pom.xml内的<code>&lt;pluginManagement&gt;</code>标签，即可在Maven工程内显示你在Pom.xml内的插件，然后点选Tomcat7内的，Tomcat7:run进行启动即可</p><h4 id="maven常用插件"><a class="header-anchor" href="#maven常用插件">¶</a>Maven常用插件</h4><h5 id="1-maven-compiler-plugin"><a class="header-anchor" href="#1-maven-compiler-plugin">¶</a>1.maven-compiler-plugin</h5><p>设置maven编译的jdk版本，maven3默认用jdk1.5，maven2默认用jdk1.3</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                                                      </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                                                                                               </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>                                                                                            </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>                                                                                                                    </span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>                                                                                                                                          </span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 源代码使用的JDK版本 --&gt;</span>                                                                                             </span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span> <span class="comment">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</span>                                                                                     </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span><span class="comment">&lt;!-- 字符集编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span><span class="comment">&lt;!-- 跳过测试 --&gt;</span>                                                                                          </span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>                                                                                                                          </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-tomcat7-maven-plugin"><a class="header-anchor" href="#2-tomcat7-maven-plugin">¶</a>2. tomcat7-maven-plugin</h5><p>tomcat7插件，可以在远程进行部署项目，在没有安装Tomcat的情形下进行使用Tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"> &lt;!--配置项目的路径和tomcat的端口，以及服务器编码解决乱码问题--&gt;</span><br><span class="line">     &lt;configuration&gt;</span><br><span class="line">          &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">         &lt;port&gt;9090&lt;/port&gt;</span><br><span class="line">     &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="3-maven-source-plugin"><a class="header-anchor" href="#3-maven-source-plugin">¶</a>3.maven-source-plugin</h5><p>打包源码</p><p>注意：在多项目构建中，将source-plugin置于顶层或parent的pom中并不会发挥作用，必须置于具体项目的pom中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;attach-sources&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="4-maven-resource-plugin"><a class="header-anchor" href="#4-maven-resource-plugin">¶</a>4.maven-resource-plugin</h5><p>说明：该插件处理项目的资源文件拷贝到输出目录。可以分别处理main resources 和 test resources。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">     &lt;/configuration&gt;</span><br><span class="line"> &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="5-maven-dependency-plugin"><a class="header-anchor" href="#5-maven-dependency-plugin">¶</a>5.maven-dependency-plugin</h5><p>自动拷贝jar包到target目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 依赖插件 --&gt;  </span><br><span class="line">&lt;plugin&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;2.6&lt;/version&gt;  </span><br><span class="line">    &lt;executions&gt;  </span><br><span class="line">        &lt;execution&gt;  </span><br><span class="line">            &lt;id&gt;copy-dependencies&lt;/id&gt;  </span><br><span class="line">            &lt;phase&gt;compile&lt;/phase&gt;  </span><br><span class="line">            &lt;goals&gt;  </span><br><span class="line">                &lt;goal&gt;copy-dependencies&lt;/goal&gt;  </span><br><span class="line">            &lt;/goals&gt;  </span><br><span class="line">            &lt;configuration&gt;  </span><br><span class="line">                &lt;!-- $&#123;project.build.directory&#125;为Maven内置变量，缺省为target --&gt;  </span><br><span class="line">                &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;  </span><br><span class="line">                &lt;!-- 表示是否不包含间接依赖的包 --&gt;  </span><br><span class="line">                &lt;excludeTransitive&gt;false&lt;/excludeTransitive&gt;  </span><br><span class="line">                &lt;!-- 表示复制的jar文件去掉版本信息 --&gt;  </span><br><span class="line">                &lt;stripVersion&gt;true&lt;/stripVersion&gt;  </span><br><span class="line">            &lt;/configuration&gt;  </span><br><span class="line">        &lt;/execution&gt;  </span><br><span class="line">    &lt;/executions&gt;  </span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="6-maven-assembly-plugin"><a class="header-anchor" href="#6-maven-assembly-plugin">¶</a>6.maven-assembly-plugin</h5><p>该插件允许用户整合项目的输出,包括依赖,模块,网站文档和其他文档到一个单独的文档，即可用定制化打包。</p><p>创建的文档格式包括:zip, tar, tar.gz(tgz), gar.bz2(tbgz2), jar, dir,war 等等。四种预定义的描述器可用：bin, jar-with-dependencies, src, project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;descriptorRefs&gt;</span><br><span class="line">      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">    &lt;/descriptorRefs&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;通过maven安装插件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#通过maven安装插件&quot;&gt;¶&lt;/a&gt;通过Maven安装插件&lt;/h4&gt;
&lt;p&gt;Maven项目下，直接通过修改项目自带的pom.xml进行下载安装插件。例如安装maven-com
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(5.1)Maven、Maven配置、配置Maven阿里云中央仓库</title>
    <link href="https://shuhaohwang.github.io/2020/01/30/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-5-1-Maven%E3%80%81Maven%E9%85%8D%E7%BD%AE%E3%80%81%E9%85%8D%E7%BD%AEMaven%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
    <id>https://shuhaohwang.github.io/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/</id>
    <published>2020-01-30T04:59:37.000Z</published>
    <updated>2020-01-30T15:20:46.433Z</updated>
    
    <content type="html"><![CDATA[<h4 id="maven简介"><a class="header-anchor" href="#maven简介">¶</a>Maven简介</h4><p><a href="https://baike.baidu.com/item/Maven" target="_blank" rel="noopener">Maven</a>项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/6854630" target="_blank" rel="noopener">项目管理工具</a>软件。</p><p>说白了：</p><p>在实际开发中，一般需要引入外部的jar包进行开发，例如MySQL的jar包、C3P0的一些jar包，而Maven则会根据程序员自己的需要自动的在网络上去下载相关的所有jar包，而不用程序员手动的去网上下载。综上Maven在实际开发中将非常方便。</p><h4 id="maven的配置-idea"><a class="header-anchor" href="#maven的配置-idea">¶</a>Maven的配置(IDEA)</h4><p>Maven通常在Eclipse 和IDEA都有自带。所有可以通过这些编译器配置自带的Maven，这里以IDEA为例(Eclipse 配置也差不多相同)</p><ul><li>首先打开IDEA的设置，搜索Maven</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/1.png" title="其中那个Maven home是对应的Maven版本"><ul><li>配置IDEA自带的Maven(这里选择的是Maven3)，设置自带Maven的settings.xml位置路径到 用户设置路径区域</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/2.png"><ul><li>配置本地存储仓库，默认的C盘空间小，改到空间大的盘。具体步骤为打开用户设置的settings.xml，也就是Maven所在目录下的settings.xml</li></ul><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/3.png"><img src="/2020/01/30/JavaWeb学习总结-5-1-Maven、Maven配置、配置Maven阿里云中央仓库/4.png" title="这里注意 路径之间的" alt="\">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;maven简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#maven简介&quot;&gt;¶&lt;/a&gt;Maven简介&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/Maven&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.3)小型AJAX工具、简单实例、JSON</title>
    <link href="https://shuhaohwang.github.io/2020/01/29/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-3-%E5%B0%8F%E5%9E%8BAJAX%E5%B7%A5%E5%85%B7%E3%80%81%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <id>https://shuhaohwang.github.io/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/</id>
    <published>2020-01-29T08:42:02.000Z</published>
    <updated>2020-01-29T14:40:46.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ajax简单小型工具"><a class="header-anchor" href="#ajax简单小型工具">¶</a>AJAX简单小型工具</h4><p>先理清AJAX普遍的核心寻求</p><ul><li>有一个目标url</li><li>给服务器的数据</li><li>获取服务器的结果</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//使用get方式发送ajax请求</span></span><br><span class="line">    <span class="function">function <span class="title">ajaxGet</span><span class="params">(url,param,callsuccess,callfail)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">var</span> isLast = (obj.redyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(isLast)&#123;</span><br><span class="line">                <span class="comment">//加载成功后</span></span><br><span class="line">                <span class="keyword">if</span>(isSuccess)&#123;<span class="comment">//如果状态正常则执行callsuccess回调函数</span></span><br><span class="line">                    <span class="keyword">var</span> rs = obj.responseText;</span><br><span class="line">                    <span class="keyword">if</span>(callsuccess)callsuccess(rs);</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果状态异常则执行callfail回调函数</span></span><br><span class="line">                    <span class="keyword">if</span>(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          obj.open(<span class="string">"get"</span>,url+<span class="string">"?"</span>+param);</span><br><span class="line">          obj.send(<span class="keyword">null</span>);<span class="comment">//get只能null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>整体思路：</p><ul><li>工具函数内首先输入<code>url</code>作为目标路径</li><li>param则代表本次的参数</li><li>callsuccess、callfail分别为加载成功或失败执行对应的回调函数</li><li>三者分别对应：目标在哪里、传什么值、该做什么</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//使用post方式发送ajax请求</span></span><br><span class="line">    <span class="function">function <span class="title">ajaxGet</span><span class="params">(url,param,callsuccess,callfail)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            <span class="keyword">var</span> isLast = (obj.redyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(isLast)&#123;</span><br><span class="line">                <span class="comment">//加载成功后</span></span><br><span class="line">                <span class="keyword">if</span>(isSuccess)&#123;<span class="comment">//如果状态正常则执行callsuccess回调函数</span></span><br><span class="line">                    <span class="keyword">var</span> rs = obj.responseText;</span><br><span class="line">                    <span class="keyword">if</span>(callsuccess)callsuccess(rs);</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果状态异常则执行callfail回调函数</span></span><br><span class="line">                    <span class="keyword">if</span>(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open(<span class="string">"post"</span>,url);</span><br><span class="line">        obj.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        obj.send(param);<span class="comment">//get只能null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="简单演示"><a class="header-anchor" href="#简单演示">¶</a>简单演示</h5><ul><li>以上篇检测用户名1是否存在为例</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    ajaxGet(<span class="string">"./HaveName"</span>,<span class="string">"un=shuhao"</span>,function (data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="string">"true"</span>)&#123;</span><br><span class="line">        alert(<span class="string">"用户名已经存在"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"用户名可以使用！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,function (st) &#123;</span><br><span class="line">    alert(<span class="string">"Error = "</span>+ st);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>实验结果：</li></ul><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/1.png" title="此时传参为un=shuhao"><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/2.png" title="此时传参为 un=ffff"><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/3.png" title="当目标url出错时"><ul><li>全部演示代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //使用get方式发送ajax请求</span><br><span class="line">    function ajaxGet(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                alert("加载成功")</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("get",url+"?"+param);</span><br><span class="line">        obj.send(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用post方式发送ajax请求</span><br><span class="line">    function ajaxpost(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.redyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj.open("post",url);</span><br><span class="line">        obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span><br><span class="line">        obj.send(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ajaxGet("./HaveName","un=shuhao",function (data)&#123;</span><br><span class="line">        if(data == "true")&#123;</span><br><span class="line">            alert("用户名已经存在");</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            alert("用户名可以使用！")</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,function (st) &#123;</span><br><span class="line">        alert("Error = "+ st);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="ajax简单实例-计算两数之和"><a class="header-anchor" href="#ajax简单实例-计算两数之和">¶</a>AJAX简单实例(计算两数之和)</h4><ul><li>思路：<ul><li>通过一个html页面的表单获取两个数字</li><li>创建一个servlet 获取两个值进行相加，随后打印让表单页面进行读取获取</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">name</span>=<span class="string">"a"</span>/&gt;</span>+<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">name</span>=<span class="string">"b"</span>/&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span> = <span class="string">"add();"</span>&gt;</span> = <span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"rs"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //使用get方式发送ajax请求</span><br><span class="line">    function ajaxGet(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("get",url+"?"+param);</span><br><span class="line">        obj.send(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用post方式发送ajax请求</span><br><span class="line">    function ajaxpost(url,param,callsuccess,callfail)&#123;</span><br><span class="line"></span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line">        obj.onreadystatechange = function()&#123;</span><br><span class="line">            var isLast = (obj.readyState==4);</span><br><span class="line">            var isSuccess = (obj.status==200||obj.status==304);</span><br><span class="line">            if(isLast)&#123;</span><br><span class="line">                //加载成功后</span><br><span class="line">                if(isSuccess)&#123;//如果状态正常则执行callsuccess回调函数</span><br><span class="line">                    var rs = obj.responseText;</span><br><span class="line">                    if(callsuccess)callsuccess(rs);</span><br><span class="line"></span><br><span class="line">                &#125;else&#123;//如果状态异常则执行callfail回调函数</span><br><span class="line">                    if(callfail)callfail(obj.status);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open("post",url);</span><br><span class="line">        obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</span><br><span class="line">        obj.send(param);</span><br><span class="line">    &#125;</span><br><span class="line">    function add() &#123;</span><br><span class="line"></span><br><span class="line">        var a = document.getElementById('a').value;</span><br><span class="line">        var b = document.getElementById('b').value;</span><br><span class="line">        var r = "a="+a+"&amp;b="+b;</span><br><span class="line">        console.log(a+"+"+b+"=");</span><br><span class="line"></span><br><span class="line">        ajaxGet("./Add",r,function (data)&#123;</span><br><span class="line">           if(a!=null &amp;&amp; b!=null)document.getElementById('rs').innerHTML = data;</span><br><span class="line">        &#125;,function (st) &#123;</span><br><span class="line">            alert("Error = "+ st);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/4.png" title="上述页面展示"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*servlet*/</span></span><br><span class="line"><span class="keyword">package</span> AJAXLearn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        String a = request.getParameter(<span class="string">"a"</span>);</span><br><span class="line">        String b = request.getParameter(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(<span class="string">"已经取到值 a= "</span>+ a +<span class="string">" b= "</span> + b);</span><br><span class="line"></span><br><span class="line">        response.getWriter().print((Double.parseDouble(a)+Double.parseDouble(b)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：</li></ul><img src="/2020/01/29/JavaWeb学习总结-4-3-小型AJAX工具、简单实例/5.png"><h4 id="补充：json格式"><a class="header-anchor" href="#补充：json格式">¶</a>补充：JSON格式</h4><h5 id="json规则："><a class="header-anchor" href="#json规则：">¶</a>JSON规则：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象 用 大括号 &#123;&#125;</span><br><span class="line">数组 用 中括号 []</span><br><span class="line">赋值 用 冒号 ：</span><br><span class="line">分隔 用 逗号 ,</span><br><span class="line">注意：字符串用双引号，属性名用双引号(严格模式要求)</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Mr.House"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">"科目"</span>:[<span class="string">"数学"</span>,“英语”,“体育”]</span><br><span class="line">    “student”: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON的本质是字符串</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ajax简单小型工具&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ajax简单小型工具&quot;&gt;¶&lt;/a&gt;AJAX简单小型工具&lt;/h4&gt;
&lt;p&gt;先理清AJAX普遍的核心寻求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个目标url&lt;/li&gt;
&lt;li&gt;给服务器的数
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.2)AJAX</title>
    <link href="https://shuhaohwang.github.io/2020/01/26/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-2-AJAX/"/>
    <id>https://shuhaohwang.github.io/2020/01/26/JavaWeb学习总结-4-2-AJAX/</id>
    <published>2020-01-26T07:27:50.000Z</published>
    <updated>2020-01-27T12:37:34.675Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ajax"><a class="header-anchor" href="#ajax">¶</a>AJAX</h4><ul><li>AJAX: &quot; Asnchronous JavaScript and XMI&quot;<ul><li>中文意思:异步Javascript和yML.</li><li>指一种创建交互式网页应用的网页开发技术。</li><li>AJAX并非缩写词,而是由Jesse James Gaiiett创造的名词。</li></ul></li><li>不是指一种单一的技术,而是有机地利用了一系列相关的技术:<ul><li>web标准( Standards-Based Presentation )XHTML+CSs的表示,</li><li>使用DOM ( Document Object Model )进行动态显示及交互,</li><li>使用XML和XSLT进行数据交换及相关操作,</li><li>使用XMHttpReauest进行异步数据查询、检索.</li><li>简单理解为: JavaScript + XMttpReauest + CSS +服务器端的集合.</li></ul></li></ul><h5 id="优点"><a class="header-anchor" href="#优点">¶</a>优点</h5><ul><li>传统的web应用允许用户向web服务器发送一个请求。服务器接收并处理然后返回一个新的网页(同步)。</li><li>这个做法浪费了许多带宽,因为在前后两个页面中的大部分HTML代码往往是相同的。</li><li>AJAX应用可以仅向服务器发送并取回必需的数据,并在客户端采用Javascript处理来自服务器的响应</li><li>因为在服务器和浏览器之间交换的数据大量减少(大约只有原来的5%)结果我们就能看到响应更快的应用。同时很多的处理工作可以在发出请求的客户端机器上完成,所以Web服务器的处理时间也减少了。</li><li>Ajax在本质上是一个浏览器端的技术</li><li>Ajax技术之主要目的在于局部交换客户端及服务器间之数据</li><li>能够不用重新载入整个版面来更新资料,也就是所谓的Refresh without Reload(轻刷新)</li><li>与服务器之间的沟通,完全是透过Javascript来实行</li><li>本身传送的资料量很小,反应更快,让网络程序更像一个桌面应用程序</li><li>AJAX就是运用Javascript在后台悄悄帮你去跟服务器要资料,最后再由 Javascript或DOM来帮你呈现结果,因为所有动作都是由Javascript代劳,所以省去了网页重载的麻烦,使用者也感受不到等待的痛苦</li></ul><hr><h4 id="ajax常用api及简单实例"><a class="header-anchor" href="#ajax常用api及简单实例">¶</a>AJAX常用API及简单实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    //异步对象，可以发送异步请求，可以接受服务器响应</span><br><span class="line">    var obj = new XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">    //访问数据的位置</span><br><span class="line">    obj.open("post","Hello.html");</span><br><span class="line">    </span><br><span class="line">    //访问时发送的数据或请求（参数会传递至服务器）</span><br><span class="line">    obj.send(null);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="常用api"><a class="header-anchor" href="#常用api">¶</a>常用api</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.readystate: 准备状态0.1.2.3.4</span><br><span class="line">obj.status :服务器响应的状态码(404/403/500/200/304) </span><br><span class="line">obj.responseText:服务器给我们的响应文本</span><br><span class="line">obj.onreadystatechange事件: readystate发生变化时触发</span><br></pre></td></tr></table></figure><h6 id="readystate属性"><a class="header-anchor" href="#readystate属性">¶</a>readyState属性</h6><p>readyState属性指出了XMLHttpRequest对象在发送/接收数据过程中所处的几个状态。XMLHtpRequest对象会经历5种不同的状态。</p><ul><li>0：未初始化。对象已经创建,但还未初始化,即还没调用 open方法;</li><li>1：已打开。对象已经创建并初始化,但还未调用send方法：</li><li>2：已发送。已经调用send方法,但该对象正在等待状态码和头的返回</li><li>3：正在接收。已经接收了部分数据,但还不能使用该对象的属性和方法,因为状态和响应头不完整;</li><li>4：已加载。所有数据接收完毕</li></ul><h6 id="status属性"><a class="header-anchor" href="#status属性">¶</a>status属性</h6><ul><li>服务器发送的每一个响应也都带有首部信息。三位数的状态码是服务器发送的响应中最重要的首部信息,并且属于超文本传输协议中的一部分。</li><li>常用状态码及其含义:<ul><li>404没找到页面(not found)</li><li>403禁止访问(forbidden)</li><li>500内部服务器出错(internal service error)</li><li>200一切正常(ok)</li><li>304没有被修改(not modif ied)</li></ul></li><li>在XMLHLLReauest对象中,服务器发送的状态码都保存在status属性里。通过把这个值和200或 304比较,可以确保服务器是否已发送了一个成功的响应</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span></span><br><span class="line">    var obj = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    obj.onreadystatechange = function () &#123;</span><br><span class="line">        alert(obj.readyState);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.open("post","HelloHtml.html");</span><br><span class="line">    obj.send(null);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/1.png" title="通过使用onreadystatechange函数可以看出，当异步请求对象开始发送异步请求时，其readystate再发送改变，一共有5个加载环节"><hr><h4 id="一些简单演示功能实例"><a class="header-anchor" href="#一些简单演示功能实例">¶</a>一些简单演示功能实例</h4><h5 id="时间数据刷新"><a class="header-anchor" href="#时间数据刷新">¶</a>时间数据刷新</h5><h6 id="v1-0"><a class="header-anchor" href="#v1-0">¶</a>v1.0</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">14</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;ShowTimeAndDate&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">当前时间为：&lt;span id="time"&gt;&lt;/span&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button type="button" onclick="getTime()"&gt;获取时间&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取异步请求对象</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast = (obj.readyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(islast &amp;&amp; isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                <span class="keyword">var</span> tspan = document.getElementById(<span class="string">'time'</span>);</span><br><span class="line">                tspan.innerHTML = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"Date.jsp"</span>)</span><br><span class="line"></span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/2.png" title="上述JSP页面展示"><p>数据源<code>Date.jsp</code></p><ul><li>用来刷新时间信息</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="keyword">new</span> Date());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/3.png" title="点击按钮后"><h6 id="v2-0-实现动态刷新页面2"><a class="header-anchor" href="#v2-0-实现动态刷新页面2">¶</a>v2.0(实现动态刷新页面2)</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在getTime()函数内添加一个计时期</span></span><br><span class="line">setTimeout(<span class="string">"getTime()"</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast = (obj.readyState==<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.status==<span class="number">200</span>||obj.status==<span class="number">304</span>);</span><br><span class="line">            <span class="keyword">if</span>(islast &amp;&amp; isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                <span class="keyword">var</span> tspan = document.getElementById(<span class="string">'time'</span>);</span><br><span class="line">                tspan.innerHTML = data;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"Date.jsp"</span>)</span><br><span class="line"></span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        setTimeout(<span class="string">"getTime()"</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/4.png" title="可以发现后台一直访问Date.jsp 导致页面的时间也不停的刷新"><hr><h5 id="简单的用户名存在检测"><a class="header-anchor" href="#简单的用户名存在检测">¶</a>简单的用户名存在检测</h5><ul><li>实例说明</li></ul><p>很多时候在注册的时候都要进行用户检测，看该用户名是否注册过。所以这里可以更新ajax进行提交异步请求来检测用户在注册时输入的用户是否注册过</p><p><strong>初始页面</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"un"</span> id=<span class="string">"ymh"</span>/&gt;</span><br><span class="line">    &lt;button type="button" onclick="IsHavename()"&gt;检测用户名是否存在&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script type=<span class="string">"application/javascript"</span>&gt;</span><br><span class="line">    <span class="function">function <span class="title">IsHavename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            <span class="keyword">var</span> islast= (obj.status == <span class="number">304</span> || obj.status == <span class="number">200</span>);</span><br><span class="line">            <span class="keyword">var</span> isSuccess = (obj.readyState == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(islast&amp;&amp;isSuccess)&#123;</span><br><span class="line">                <span class="keyword">var</span> data = obj.responseText;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> username = document.getElementById(<span class="string">'ymh'</span>).value;</span><br><span class="line">        console.log(username);</span><br><span class="line">        obj.open(<span class="string">"get"</span>,<span class="string">"./HaveName?un="</span>+username);</span><br><span class="line">        obj.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        obj.send(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/5.png" title="上述代码展示的测试也面"><p><strong>后台服务端</strong></p><ul><li>总体处理流程：<ul><li>获取在展示页面获取的内容</li><li>在程序控制进行输出</li><li>用获取到的用户连接数据库进行查询是否存在</li><li>返回结果至此servlet后端服务器输出的页面<ul><li>如果存在则显示true</li><li>不存在则显示false</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LoginDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> User.User;</span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsHaveName</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        String username = request.getParameter(<span class="string">"un"</span>);</span><br><span class="line">        System.out.println(<span class="string">"获取成功！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户信息： 用户名： "</span> + username);</span><br><span class="line"></span><br><span class="line">        UserDao userDao = JDBCUtil.getUserDao();</span><br><span class="line">        response.getWriter().print(userDao.findByUserName(username));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/6.png" title="此时数据库存在的用户"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/7.png" title="测试1"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/8.png" title="测试2"><h6 id="小修改使用post方式进行传参"><a class="header-anchor" href="#小修改使用post方式进行传参">¶</a>小修改使用post方式进行传参</h6><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*修改处*/</span></span><br><span class="line">obj.open(<span class="string">"post"</span>,<span class="string">"./HaveName"</span>);</span><br><span class="line">obj.send(<span class="string">"un="</span> +username);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*全部代码*/</span></span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/9.png" title="修改后"><h6 id="进行提示优化"><a class="header-anchor" href="#进行提示优化">¶</a>进行提示优化</h6><ul><li>当用户名查询存在时报已存在</li><li>不存在时报可用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; name=&quot;un&quot; id=&quot;ymh&quot;/&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; onclick=&quot;IsHavename()&quot;&gt;检测用户名是否存在&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script type=&quot;application/javascript&quot;&gt;</span><br><span class="line">    function IsHavename() &#123;</span><br><span class="line">        var obj = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        obj.onreadystatechange = function () &#123;</span><br><span class="line">            var islast= (obj.status == 304 || obj.status == 200);</span><br><span class="line">            var isSuccess = (obj.readyState == 4);</span><br><span class="line"></span><br><span class="line">            if(islast&amp;&amp;isSuccess)&#123;</span><br><span class="line">                var data = obj.responseText;</span><br><span class="line">                if(data==&apos;true&apos;)&#123;</span><br><span class="line">                    alert(&quot;用户名已经存在请重新设置&quot;);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(&quot;用户名可以使用&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var username = document.getElementById(&apos;ymh&apos;).value;</span><br><span class="line">        console.log(username);</span><br><span class="line">        obj.open(&quot;post&quot;,&quot;./HaveName&quot;);</span><br><span class="line"></span><br><span class="line">        obj.setRequestHeader(&apos;Content-type&apos;,&apos;application/x-www-form-urlencoded&apos;)</span><br><span class="line">        obj.send(&quot;un=&quot; +username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/10.png"><img src="/2020/01/26/JavaWeb学习总结-4-2-AJAX/11.png" title="测试图"><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><ul><li>注意在传参过程中的乱码问题</li><li>处理时要考虑IE浏览器的兼容问题</li><li><code>obj.setRequestHeader('Content-type','application/x-www-form-urlencoded')</code>用来处理post请求的主体类型，使用post必填。填在open之后</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ajax&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#ajax&quot;&gt;¶&lt;/a&gt;AJAX&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;AJAX: &amp;quot; Asnchronous JavaScript and XMI&amp;quot;
&lt;ul&gt;
&lt;li&gt;中文意思:
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(4.1)AJAX前奏-对于同步通讯与异步通讯的理解</title>
    <link href="https://shuhaohwang.github.io/2020/01/26/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-AJAX%E5%89%8D%E5%A5%8F-%E5%AF%B9%E4%BA%8E%E5%90%8C%E6%AD%A5%E9%80%9A%E8%AE%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E9%80%9A%E8%AE%AF%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2020/01/26/JavaWeb学习总结-4-1-AJAX前奏-对于同步通讯与异步通讯的理解/</id>
    <published>2020-01-26T03:14:56.000Z</published>
    <updated>2020-01-26T03:36:23.996Z</updated>
    
    <content type="html"><![CDATA[<h4 id="同步通讯"><a class="header-anchor" href="#同步通讯">¶</a>同步通讯</h4><ul><li>浏览器向服务器提交一个请求后等待服务器响应,服务器收到请求后作出处理,浏览器收到响应数据后显示出来,这就是传统B/S的同步通讯方式,页面中的内容都是同步加载到浏览器中的。</li><li>如果我们想向服务器提交数据,就必须进行页面跳转 ,如果我们想实时获得服务端数据,就必须不停地刷新页面。</li><li>有时候可能我们只是想更新极少的数据,这也要发请求,重新加载整个页面,浪费资源,降低访问速度</li></ul><h4 id="异步通讯"><a class="header-anchor" href="#异步通讯">¶</a>异步通讯</h4><ul><li>在不刷新页面的情况下与服务器进行通讯，就被称为异步通讯<ul><li>框架：如果使用一组框架构造了一个网页，可以只更新其中一个框架，而不必惊动整个页面</li><li><code>XMLHttpRequest</code>：该对象是对JavaScript的一个扩展,可使网页与服务器进行通信。是创建Ajax应用的最佳选择。实际上通常把 Ajax当成<code>XMLHttpRequest</code>对象的代名词</li></ul></li></ul><hr><h4 id="总述"><a class="header-anchor" href="#总述">¶</a>总述</h4><p>总的来说：</p><ul><li><p>**同步加载（刷新）：**每次刷新的是整个页面的数据</p></li><li><p>**异步加载（刷新）：**每次刷新的是整个页面的部分数据</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;同步通讯&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#同步通讯&quot;&gt;¶&lt;/a&gt;同步通讯&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;浏览器向服务器提交一个请求后等待服务器响应,服务器收到请求后作出处理,浏览器收到响应数据后显示出来,这就是传统B/S的同步通讯方
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(3.2)反射与动态实例化</title>
    <link href="https://shuhaohwang.github.io/2020/01/24/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-3-2-%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
    <id>https://shuhaohwang.github.io/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/</id>
    <published>2020-01-24T10:38:48.000Z</published>
    <updated>2020-01-25T06:56:14.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="反射"><a class="header-anchor" href="#反射">¶</a>反射</h4><ul><li><p>反射的概念主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。</p></li><li><p>JAVA反射机制是在运行状态中,对于任意一个类,都能够知道这个类的所有属性和方法;对于任意一个对象,都能够调用它的任意一个方法;这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></li></ul><h5 id="相关api"><a class="header-anchor" href="#相关api">¶</a>相关API</h5><ul><li>java.lang包下<ul><li><code>Class&lt;T&gt;</code>:表示一个正在运行的Java应用程序中的类和接口,是 Reflection的起源</li></ul></li><li>java.lang.reflect包下<ul><li>Field类:代表类的成员变量(也称类的属性)</li><li>Method类:代表类的方法Constructor类:代表类的构造方法</li><li>Array类:提供了动态创建数组,以及访问数组的元素的静态方法</li></ul></li></ul><h6 id="class-t"><a class="header-anchor" href="#class-t">¶</a><code>Class&lt;T&gt;</code></h6><table><thead><tr><th>获取方式</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td><code>object.getClass()</code>每个对象都有此方法</td><td>获取指定实例 对象的Class</td><td>List list = new ArrayListo;<br>Class listClass = list.getClass);</td></tr><tr><td><code>Class.getSuperclass()</code></td><td>获取当前Class的继承类Class</td><td>List list = new ArrayList);<br>Class listClass = list.getClass() <br>Class superClass = listClass<br>getSuperclass):</td></tr><tr><td><code>Object.class</code></td><td>.class直接获取</td><td>Class listClass = ArrayList.class;</td></tr><tr><td><code>Class.forName</code>(类名)</td><td>用Class的静态方法，传入类的全称即可</td><td>try{<br>Class c =Class.forName(“java. uti.ArrayList”);<br>} catch (ClassNotFoundException e)e.printStackTrace):</td></tr><tr><td><code>Primitive.TYPE</code></td><td>基本数据类型的封装类获取Class的方式</td><td>Class longClass =Long.TYPE;<br>Class integerClass = Integer.TYPE;<br>Class voidClass = Void.TYPE</td></tr></tbody></table><h6 id="method"><a class="header-anchor" href="#method">¶</a>Method</h6><ul><li>获得当前类以及超类的public Method:<ul><li><code>Method[] arrMethods = classType. getMethods();</code></li></ul></li><li>获得当前类申明的所有Method:<ul><li><code>Method[] arrMethods = classType. getDeclaredMethods();</code></li></ul></li><li>获得当前类以及超类指定的public Method:<ul><li><code>Method method = classType. getMethod(String name,Class&lt;?&gt;... parameterTypes);</code></li></ul></li><li>获得当前类申明的指定的Method:<ul><li><code>Method method = classType. getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code></li></ul></li><li>通过反射动态运行指定Method:<ul><li><code>Object obj = method. invoke(Object obj, Object... args)</code></li></ul></li></ul><h6 id="field"><a class="header-anchor" href="#field">¶</a>Field</h6><ul><li>获得当前类以及超类的public Field:<ul><li><code>Field[] arrFields = classType. getFields();</code></li></ul></li><li>获得当前类申明的所有Field:<ul><li><code>Field[] arrFields = classType. getDeclaredFields();</code></li></ul></li><li>获得当前类以及超类指定的public Field:<ul><li><code>Field field = classType. getField(String name);</code></li></ul></li><li>获得当前类申明的指定的Field:<ul><li><code>Field field = classType. getDeclaredField(String name);</code></li></ul></li><li>通过反射动态设定Field的值:<ul><li><code>fieldType.set(Object obj, Object value);</code></li></ul></li><li>通过反射动态获取Field的值:<ul><li><code>Object obj = fieldType. get(Object obj);</code></li></ul></li></ul><hr><h4 id="反射的作用"><a class="header-anchor" href="#反射的作用">¶</a>反射的作用</h4><p>反射最主要的作用之一就是可以动态的实例化对象。这里的动态的实例化对象可以类比成动态创建数组一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类比C++的数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>];<span class="comment">//这样创建一个数组它就已经在编译时就规定好了这个arr数组有5个空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*动态规划数组*/</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span>* nums = <span class="keyword">new</span> <span class="keyword">int</span>[a]<span class="comment">//这种创建数组为动态创建，可以更加自己的需要在程序运行的时候进行设置数组的大小</span></span><br></pre></td></tr></table></figure><p>而反射中的动态实例化也是差不多的道理</p><p>例如 我可以通过object来接一些数据，当我需要最终的对象类型是Student时，我就输入一个字符串让这个Object自动加载Student类中的内容、然后时object对象变成Student对象，而此时我又需要一个Book对象的时候可以输入一段字符串使这个object对象加载Book对象中的内容。进行设置转成Book对象。这与以往的自动类型检查机制不同，其中就是可以根据自己的需要在程序跑起来的时候进动态的实例化所需要的对象</p><h5 id="动态实例化过程"><a class="header-anchor" href="#动态实例化过程">¶</a>动态实例化过程</h5><ul><li>首先创建两个类Student与Book 内含一些参数与对应的get、set方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String class_name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String class_name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getClass_name</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClass_name</span><span class="params">(String class_name)</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javabean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Book</span><span class="params">(String id,String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getid</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setid</span><span class="params">(String class_name)</span> </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/1.png" title="当我们输入要求加载Student类的时候，这个object就转换成Student对象"><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/2.png" title="当我们输入要求加载Book类的时候，这个object就转换成Book对象"><p>可以发现这些选择实例化对应的对象的操作都是程序已经在运行的时候发生的</p><h6 id="动态获取实例化的其他获取方法"><a class="header-anchor" href="#动态获取实例化的其他获取方法">¶</a>动态获取实例化的其他获取方法</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(command);</span><br><span class="line"><span class="comment">/*方法1：反射实例化(无参)*/</span></span><br><span class="line">Object o = c.newInstance();<span class="comment">//已被淘汰过期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法2：反射实例化(无参)*/</span></span><br><span class="line">Object o = c.getConstructor(new class[]());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法3：反射实例化(带参)*/</span></span><br><span class="line">Object o = c.getConstructor(new class[]())。newInstance(new Object[]&#123;"对应类参数..."&#125;);</span><br></pre></td></tr></table></figure><p>带参的出现，可以得到的结果就是动态实例化对象还可以更具需求自己调用想实例化的类对象的构造函数并设置对应的类内参数</p><hr><h5 id="动态获取类对象中的方法"><a class="header-anchor" href="#动态获取类对象中的方法">¶</a>动态获取类对象中的方法</h5><p>以上在动态获取类对象的基础上，还可以获取其对应对象类中的所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">            Method[] m = c.getMethods();</span><br><span class="line">            System.out.println(<span class="string">"\n该类的方法有："</span>);</span><br><span class="line">            <span class="keyword">for</span>(Method s:m) System.out.println(s.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/3.png" title="可以发现对应Book的类方法所有被获取了出来"><h6 id="你甚至可以动态的调用对应的类方法"><a class="header-anchor" href="#你甚至可以动态的调用对应的类方法">¶</a>你甚至可以动态的调用对应的类方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"444111"</span>,<span class="string">"西游记"</span>&#125;);<span class="comment">//调用对应加载类的构造函数进行设置</span></span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line">            </span><br><span class="line">            Method isGetidMethod = c.getMethod(<span class="string">"getid"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            Method isGetnameMethod = c.getMethod(<span class="string">"getName"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/4.png" title="这里以Book进行演示动态调用，还可以通过输入对应的方法名来动态调用其他的方法"><p><strong>含参数的动态调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method issetMethod = c.getMethod(<span class="string">"setid"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">issetMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;<span class="string">"123456"</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>详细测试代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/25</span></span><br><span class="line"><span class="comment"> * 用于测试反射机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String command = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">"输入操作类"</span>);</span><br><span class="line">            command = input.next();</span><br><span class="line">            Class c = Class.forName(command);</span><br><span class="line">            Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"444111"</span>,<span class="string">"西游记"</span>&#125;);</span><br><span class="line">            System.out.println(<span class="string">"获取类成功！你动态实例化的类为"</span>+ o.getClass().getName());</span><br><span class="line"></span><br><span class="line">            Method isGetidMethod = c.getMethod(<span class="string">"getid"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            Method isGetnameMethod = c.getMethod(<span class="string">"getName"</span>,<span class="keyword">new</span> Class[]&#123;&#125;);</span><br><span class="line">            Object name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line"></span><br><span class="line">            Method issetMethod = c.getMethod(<span class="string">"setid"</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;);</span><br><span class="line">            issetMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;<span class="string">"123456"</span>&#125;);</span><br><span class="line">            id = isGetidMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            name = isGetnameMethod.invoke(o,<span class="keyword">new</span> Object[]&#123;&#125;);</span><br><span class="line">            System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/5.png" title="可以看到调用了对应Book类中的setid方法"><h6 id="动态属性访问"><a class="header-anchor" href="#动态属性访问">¶</a>动态属性访问</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanSeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Class.forName(<span class="string">"Javabean.Book"</span>);</span><br><span class="line"></span><br><span class="line">        Object o = c.getConstructor(<span class="keyword">new</span> Class[]&#123;String.class,String.class&#125;).newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"666"</span>,<span class="string">"红楼梦"</span>&#125;);</span><br><span class="line"></span><br><span class="line">        Field field = c.getField(<span class="string">"id"</span>);</span><br><span class="line">        Field field2 = c.getField(<span class="string">"name"</span>);</span><br><span class="line">        String id = field.get(o).toString();</span><br><span class="line">        String name = field2.get(o).toString();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/6.png" title="调用出对应的Book的成员变量id 和 name"><p><strong>设置参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*接着上述代码*/</span></span><br><span class="line">field.set(o,<span class="string">"520"</span>);</span><br><span class="line"> id = field.get(o).toString();</span><br><span class="line"> name = field2.get(o).toString();</span><br><span class="line"> System.out.println(<span class="string">"Book类对象内的ID为 "</span> + id + <span class="string">" 书名为 "</span> + name);</span><br></pre></td></tr></table></figure><img src="/2020/01/24/JavaWeb学习总结-3-2-反射与动态实例化/7.png" title="设置对应id参数"><p><strong>附加</strong></p><p>可以使用<code>field.setAccessible(true)</code>进行降权操作，即允许调用私有属性</p><hr><h5 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h5><ul><li>动态调用方法的相关方法的参数中<ul><li>Class[]：为参数类型数组</li><li>object[]：为对应参数的值或对象</li></ul></li></ul><h4 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h4><p>反射最主要的使用情况</p><ul><li>有两个程序员，一个程序员在写程序的时候，需要使用第二个程序员所写的类，但第二个程序员并没完成他所写的类。那么第一个程序员的代码能否通过编译呢？这是不能通过编译的。利用Java反射的机制，就可以让第一个程序员在没有得到第二个程序员所写的类的时候，来完成自身代码的编译。只是如果这个类还没有，获取时会获取不到，但不会导致编译错误，更不会导致程序的崩溃。</li><li>可以在远程进行操作程序，动态的创建需要的对象和调用需要的方法</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;反射&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#反射&quot;&gt;¶&lt;/a&gt;反射&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反射的概念主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAVA反射机制是在运行
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习（1.4）JDBC连接池</title>
    <link href="https://shuhaohwang.github.io/2020/01/23/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-4%EF%BC%89JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://shuhaohwang.github.io/2020/01/23/Java基础学习（1-4）JDBC连接池/</id>
    <published>2020-01-23T09:28:51.000Z</published>
    <updated>2020-01-23T12:58:02.078Z</updated>
    
    <content type="html"><![CDATA[<h4 id="传统jdbc连接存在的问题"><a class="header-anchor" href="#传统jdbc连接存在的问题">¶</a>传统JDBC连接存在的问题</h4><p>开发基于数据库的程序时,传统的模式基本是按以下步骤:</p><ul><li>在主程序中建立数据库连接<code>-&gt;</code>SQL操作<code>-&gt;</code>断开数据库连接。</li></ul><p>这种模式开发,存在的问题:</p><ul><li><p>普通的JDBC数据库连接使用DriverManager来获取,每次向数据库建立连接的时候都要将Connection加载到内存中,再验证用户名和密码(得花费0. 05s~1s的时间)。需要数据库连接的时候,就向数据库要求一个,执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用</strong>,若同时有几百人甚至几千人在线,频繁的进行数据库连接操作将占用很多的系统资源,严重的甚至会造成服务器的崩溃</p></li><li><p>对于每一次数据库连接,使用完后都得断开。否则,如果程序出现异常而未能关闭,将会导致数据库系统中的内存泄漏,最终将导致重启数据库。</p></li><li><p>这种开发不能控制被创建的连接对象数,系统资源会被毫无顾及的分配出去如连接过多,也可能导致内存泄漏,服务器崩溃。</p></li></ul><hr><h4 id="数据库的连接池技术"><a class="header-anchor" href="#数据库的连接池技术">¶</a>数据库的连接池技术</h4><ul><li><p>数据库连接池技术(connection pool)的<strong>基本思想</strong>就是为数据库连接建立一个&quot;缓冲池。预先在缓冲池中放入一定数量的连接,当需要建立数据库连接时,只需从“缓冲池”中取出一个,使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接,它<strong>允许应用程序重复使用一个现有的数据库连接,而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中,这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用,连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数,当应用程序向连接池请求的连接数超过最大连接数量时,这些请求将被加入到等待队列中。</p></li></ul><hr><h4 id="演示"><a class="header-anchor" href="#演示">¶</a>演示</h4><h5 id="dbcp"><a class="header-anchor" href="#dbcp">¶</a>DBCP</h5><ul><li>DBCP是Apache软件基金组织下的开源连接池实现该连接池依赖该组织下的另一个开源系统: Common-pool.如需使用该连接池实现<ul><li>增加如下三个jar文件:<ul><li>Commons-dbcp.jar:连接池的实现 ,</li><li>Commons-pool.jar:连接池实现的依赖库</li><li>commons-logging.jar:连接池实现的依赖库2</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接池对象</span></span><br><span class="line">        BasicDataSource ds = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉连接池如何连接数据库</span></span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//对应原来的class.namefor()对mysql驱动进行加载设置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置连接池一些用户名密码和连接数据库的地址*/</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">        String name = <span class="string">"shuhao"</span>;</span><br><span class="line">        String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">        ds.setUrl(url);             <span class="comment">//设置密码</span></span><br><span class="line">        ds.setUsername(name);       <span class="comment">//设置数据库管理员用户名</span></span><br><span class="line">        ds.setPassword(password);   <span class="comment">//设置管理密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*设置连接池的一些基本属性*/</span></span><br><span class="line">        ds.setMaxTotal(<span class="number">40</span>);         <span class="comment">//最大活动连接数</span></span><br><span class="line">        ds.setMinIdle(<span class="number">2</span>);           <span class="comment">//最小空闲连接数</span></span><br><span class="line">        ds.setInitialSize(<span class="number">10</span>);      <span class="comment">//初始连接数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//向连接池申请一个连接</span></span><br><span class="line">            Connection conn = ds.getConnection();</span><br><span class="line"></span><br><span class="line">            conn.close();       <span class="comment">//归还连接给连接池【已被重写】</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"DBPC以成功获取MYsql连接！！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c3p0"><a class="header-anchor" href="#c3p0">¶</a>C3P0</h5><ul><li>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。</li><li>添加如下两个jar文件<ul><li>c3p0.jar</li><li>mchange-commons-java.jar</li><li>两者需版本对应</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//告诉连接池如何连接数据库</span></span><br><span class="line">            ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//对应原来的class.namefor()对mysql驱动进行加载设置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*设置连接池一些用户名密码和连接数据库的地址*/</span></span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">            String name = <span class="string">"shuhao"</span>;</span><br><span class="line">            String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">            ds.setJdbcUrl(url);             <span class="comment">//设置密码</span></span><br><span class="line">            ds.setUser(name);               <span class="comment">//设置数据库管理员用户名</span></span><br><span class="line">            ds.setPassword(password);       <span class="comment">//设置管理密码</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*设置连接池的一些基本属性*/</span></span><br><span class="line">            ds.setMaxPoolSize(<span class="number">40</span>);          <span class="comment">//最大连接数</span></span><br><span class="line">            ds.setMinPoolSize(<span class="number">2</span>);           <span class="comment">//最小连接数</span></span><br><span class="line">            ds.setInitialPoolSize(<span class="number">10</span>);      <span class="comment">//初始连接数</span></span><br><span class="line"></span><br><span class="line">            Connection conn = ds.getConnection();   <span class="comment">//获取连接</span></span><br><span class="line">            System.out.println(<span class="string">"成功从C3P0连接池获取连接"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="通过使用c3p0编写工具类"><a class="header-anchor" href="#通过使用c3p0编写工具类">¶</a>通过使用C3P0编写工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ShuHao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态连接池</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> ComboPooledDataSource ds = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ds == <span class="keyword">null</span>)&#123;<span class="comment">//如果为空说明没有创建连接池 则重新创建</span></span><br><span class="line">                ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">                ds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String url = <span class="string">"jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;useSSL=false"</span>;</span><br><span class="line">                String name = <span class="string">"shuhao"</span>;</span><br><span class="line">                String password = <span class="string">"991124"</span>;</span><br><span class="line"></span><br><span class="line">                ds.setJdbcUrl(url);</span><br><span class="line">                ds.setUser(name);</span><br><span class="line">                ds.setPassword(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ds.setMaxPoolSize(<span class="number">40</span>);</span><br><span class="line">                ds.setMinPoolSize(<span class="number">2</span>);</span><br><span class="line">                ds.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">                Connection conn = ds.getConnection();</span><br><span class="line">                System.out.println(<span class="string">"成功从C3P0连接池获取连接"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">//最后返回一个getConnection()对象</span></span><br><span class="line">            <span class="keyword">return</span> ds.getConnection();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c3p0使用配置文件进行属性配置"><a class="header-anchor" href="#c3p0使用配置文件进行属性配置">¶</a>C3P0使用配置文件进行属性配置</h5><ul><li>名称必须为c3p0-config.xml,否则无法找到</li><li>文件必须放在classpath下【类根目录 例：src、以及maven的java和resource】</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;amp;useSSL=false"<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>shuhao<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>991124<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span> = <span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/user_learn?serverTimezone=Asia/Shanghai&amp;amp;useSSL=false"<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>shuhao<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>991124<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注意点"><a class="header-anchor" href="#注意点">¶</a>注意点:</h5><ul><li>数据源和数据库连接不同,数据源无需创建多个 ,它是产生数据库连接的工厂,因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后,程序还是像以前一样关闭数据库连接: onn.close0但上面的代码并没有关闭数据库的物理连接,它仅仅把数据库连接释放,归还给了数据库连接池</li><li>C3P0与DBCP区别<ul><li>DBCP没有自动回收空闲连接的功能</li><li>C3P0有自动回收空闲连接功能</li></ul></li></ul><h4 id="连接池技术的优点"><a class="header-anchor" href="#连接池技术的优点">¶</a>连接池技术的优点</h4><ul><li><p>资源重用:</p><ul><li>由于数据库连接得以重用,避免了频繁创建、释放连接引起的大量性能开销。在减少系统消耗的基础上,也增加系统运行环境的平稳性。</li></ul></li><li><p>更快的系统反应速度</p><ul><li>数据库连接池在初始化过程中,往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言 ,直接利用现有可用连接,避免了数据库连接初始化和放过程的时间开销,从而减少了系统的响应时间</li></ul></li><li><p>新的资源分配手段</p><ul><li>对于多应用共享同一数据库的系统而言,可在应用层通过数据库连接池的配置,实现某一应用最大可用数据库连接数的限制,避免某一应用独占所有的数据库资源</li></ul></li><li><p>统一的连接管理,避免数据库连接泄露</p><ul><li>在较为完善的数据库连接池实现中,可根据预先的占用超时设定,强制回收被占用连接,避免了常规数据库连接操作中可能出现的资源泄露</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;传统jdbc连接存在的问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#传统jdbc连接存在的问题&quot;&gt;¶&lt;/a&gt;传统JDBC连接存在的问题&lt;/h4&gt;
&lt;p&gt;开发基于数据库的程序时,传统的模式基本是按以下步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在主程
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(3.1)MVC设计模式</title>
    <link href="https://shuhaohwang.github.io/2020/01/23/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-3-1-MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://shuhaohwang.github.io/2020/01/23/JavaWeb学习总结-3-1-MVC设计模式/</id>
    <published>2020-01-23T08:14:50.000Z</published>
    <updated>2020-01-23T09:27:41.152Z</updated>
    
    <content type="html"><![CDATA[<h4 id="mvc设计模式"><a class="header-anchor" href="#mvc设计模式">¶</a>MVC设计模式</h4><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p><ul><li>Model（模型）表示应用程序核心（比如数据库记录列表）。</li><li>View（视图）显示数据（数据库记录）。</li><li>Controller（控制器）处理输入（写入数据库记录）。</li></ul><p>MVC 模式同时提供了对 HTML、CSS 和 JavaScript 的完全控制。</p><p>**Model（模型）**是应用程序中用于处理应用程序数据逻辑的部分。<br>　　通常模型对象负责在数据库中存取数据。</p><p>**View（视图）**是应用程序中处理数据显示的部分。<br>　　通常视图是依据模型数据创建的。</p><p>**Controller（控制器）**是应用程序中处理用户交互的部分。<br>　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><h5 id="mvc的优点"><a class="header-anchor" href="#mvc的优点">¶</a>MVC的优点</h5><ol><li>各司其职,互不干涉<ul><li>在MVC模式中,三层各司其职,所以一旦哪一层需要发生变化,只需要更改相应层的代码,而不会影响到其它层的代码</li></ul></li><li>有利于开发中的分工<ul><li>在MVC模式中,由于系统按层分开,从而可以更好的实现开发的分工。页面设计人员可以只考虑如何将页面设计得更加美观和易于操作;对业务熟悉的人员可以更加专心地进行业务开发;而协调工作可以交给控制层开发人员完成。</li></ul></li><li>有利于组件的重组<ul><li>在MVC模式中,分层后更有利于组件的重组,如控制层可独立成为一个能用的组件,视图层也可做成通用的操作界面,大大提高了系统的灵活性。</li></ul></li></ol><h5 id="mvc缺点"><a class="header-anchor" href="#mvc缺点">¶</a>MVC缺点</h5><p>MVC的不足体现在以下几个方面：</p><p>(1)增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。</p><p>(2)视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。</p><p>(3)视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p><p>(4) 目前，一般高级的界面工具或构造器不支持MVC模式。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成使用MVC的困难</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;mvc设计模式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#mvc设计模式&quot;&gt;¶&lt;/a&gt;MVC设计模式&lt;/h4&gt;
&lt;p&gt;MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controlle
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(2.3)Session</title>
    <link href="https://shuhaohwang.github.io/2020/01/20/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-3-Session/"/>
    <id>https://shuhaohwang.github.io/2020/01/20/JavaWeb学习总结-2-3-Session/</id>
    <published>2020-01-20T09:26:32.000Z</published>
    <updated>2020-01-20T12:24:23.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="http通信"><a class="header-anchor" href="#http通信">¶</a>HTTP通信</h4><p>​JavaWeb应用程序运行是基于B/S的模式,用户通过客户端浏览器向Web服务器发送一个HTTP请求,服务器收到请求的同时一个连接就建立了,服务器根据请求做必要的处理并生成一个响应信息,然后把它回送给客户端。这一过程结束后,服务器就关闭了该连接,而不会一直与客户端保持着连接的状态。</p><p>当用户发送另一条请求时，所有的请求与响应都和上一次一样，客户和服务器之间必须重新建立连接。</p><p>即：你访问一个网站，此时会发出一个请求，然后服务器给与回应两者就断开了，你和网站的服务器不是一直有着连接，而是这种一瞬间的短连接，这也就是为什么你访问一个网站后 断网了，网站依旧可以在该页面进行浏览。</p><h5 id="http的无状态性"><a class="header-anchor" href="#http的无状态性">¶</a>HTTP的无状态性</h5><p>​Web服务器需要为大量的用户服务。对于一个服务器接受一条网络连接就意味着通过一个套接字侦听进入的请求,如果一服务器同时连接大量的用户, 这会消耗掉服务器大量的资源,包括线程和内存。</p><p>为了能够服务于大量的用户, HTTP被设计成在每一次新请求中都使用新的连接,这种特性称为HTTP的无状态性。</p><h4 id="session"><a class="header-anchor" href="#session">¶</a>Session</h4><p>既然http是无状态的,那服务器该如何对多个用户进行区分呢?</p><p>我们常进的网站通常都是每次只需要登录一次,然后就记住了用户信息和登录状态,这是如何实现的呢?这就需要一种机制来唯一的标识用户,以便跟踪用户在站点中的行为。</p><p>这就是我们要说的会话对象session,可以利用会话对象session来记录用户的数据信息。</p><p>即：JavaWeb可以通过Session来记录每一个用户的使用情况，它是跟踪于浏览器的，假设你登入了一个网站，下次再打开时，它会保持你现在的登入状态，这就是Session的用法之一。</p><ul><li><p>从一个用户打开浏览器并连接到服务器开始到用户关闭浏览器离开这个服务器结束称做一个会话。</p></li><li><p><strong>在多次HTTP连接间维护用户与不同请求之间关联的情况称为维护一个会话(session)</strong></p></li><li><p>当一个用户连接到服务器时可能到不同的页面,而许多 WEB程序需要用户在客户端的一系列请求之间能够互相关联,实现不同的页面之间数据的传递和共享, 而HTTP协议是无状态的,基于WEB的应用程序需要维护这样的状态,这就需要session,利用session可以保存访问者访问页面的数据信息。</p></li></ul><h5 id="特征"><a class="header-anchor" href="#特征">¶</a>特征</h5><ul><li><p>会话能够把用户与同一用户发出的不同请求之间关联起来。不同用户的会话应当是相互独立的。</p></li><li><p>会话一旦建立就应当一直存在,直到用户空闲时间超过了某一个时间界限,容器才应当释放该会话资源。</p><ul><li>例如你登入一个页面，然后很久都没有去访问了，然后就要你重新登入。称为Session过期</li></ul></li><li><p>在会话的存活期间,用户可能给服务器发送了很多请求 ,该用户的这些请求信息都可以存储在会话中。</p></li></ul><hr><h4 id="session使用演示"><a class="header-anchor" href="#session使用演示">¶</a>Session使用演示</h4><h5 id="session的属性"><a class="header-anchor" href="#session的属性">¶</a>Session的属性</h5><ul><li><p>Session对象使用以下方法管理绑定到会话的属性</p><ul><li>设置: void setAttribute(String name, Object value);</li><li>获取: Object getAttribute(String name);</li><li>移除: void removeAttribute(String name) ;</li></ul></li><li><p>与Map的用法相似,其实内部就是键值对。</p></li></ul><h5 id="使用演示"><a class="header-anchor" href="#使用演示">¶</a>使用演示</h5><ul><li>创建两个Servlet 一个名为setSession 用来给session内存值设置值，一个为ShowSession用来展示session内的值</li><li>在使用session时，要先使用request对象获取HttpSession的对象才能对session进行操作使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        HttpSession session = request.getSession();<span class="comment">//获取HttpSession对象</span></span><br><span class="line">        session.setAttribute(<span class="string">"Test"</span>,<span class="string">"HelloWord"</span>);<span class="comment">//往1session内存值</span></span><br><span class="line">        session.setAttribute(<span class="string">"Test2"</span>,<span class="number">1234</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();<span class="comment">//获取HttpSession对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*打印session内的数据*/</span></span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容 :"</span> + session.getAttribute(<span class="string">"Test"</span>));</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容2 :"</span> + session.getAttribute(<span class="string">"Test2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a class="header-anchor" href="#注意点">¶</a>注意点:</h5><ul><li><p>session是根据浏览器不同而不同的，例如你使用IE浏览器对session进行了设置值，然后换另一个浏览器访问展示session页面也会没有接受到session里设置的值</p></li><li><p>与ServletContext对象不同的是，当session过期或者被销毁的时候其值会消失，而不是一直存在与项目本身(主要体现与不同的浏览器进行访问)</p></li></ul><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/1.png" title="当打开SetSession后，再打开ShowSession"><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/2.png" title="此后重新直接打开ShowSession一样显示在SetSession设置后的值，即使是重启浏览器"><p>但是，如果换一个浏览器</p><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/3.png" title="这里换了一个IE浏览器进行访问ShowSession，数据不见了"><p>可以发现，这里就跟以往提到的ServletContext不同了。当换一个浏览器的时候以往给session设置的值不见了，说明session是对于浏览器来说的，即，通过浏览器来辨认不同的用户</p><hr><h4 id="session的id"><a class="header-anchor" href="#session的id">¶</a>session的ID</h4><p>根据上述演示实例，可以发现，同一个浏览器下session是共享的，换一个浏览器session就不同了，实质上：</p><ul><li><p>WEB容器在创建每一个新的HTTP会话对象时,都会赋予一个新的ID号。WEB容器保证它在Web应用范围内是唯一的。</p></li><li><p>这个ID号可以通过Session对象的<code>getld()</code>获得。例如:<code>String sessionld=session.getd();</code></p></li></ul><p>例如：修改上例的Showsession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SessionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容 :"</span> + session.getAttribute(<span class="string">"Test"</span>));</span><br><span class="line">        response.getWriter().println(<span class="string">"从session获取的内容2 :"</span> + session.getAttribute(<span class="string">"Test2"</span>));</span><br><span class="line">        </span><br><span class="line">       response.getWriter().println(<span class="string">"该浏览器的SessionID为 :"</span> + session.getId());<span class="comment">//这里我们把sessionID打印出来</span></span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/20/JavaWeb学习总结-2-3-Session/4.png" title="可以发现 不同的浏览器其sessionID是不同的，说明每个浏览器对应的session都不同"><h4 id="终止session"><a class="header-anchor" href="#终止session">¶</a>终止Session</h4><p>​这里的终止不是说完全把session进行销毁，而是创建一个新的session，session是一直都会有的。</p><ol><li><p>直接调用invalidate方法,终止会话</p><ul><li><code>session.invalidate();</code></li></ul></li><li><p>设置会话超时时间,单位为<strong>秒</strong></p><ul><li><code>session.setMaxinactivelnterval(600);</code></li></ul></li><li><p>在web.xml文件中配置超时时间,<strong>单位分钟</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>当我们不设置session的timeout时,它是有默认时长的,不同的Web服务器默认时长可能不同。<ul><li>Tomcat的默认超时时间是30分钟,可以在conf目录下的web. xml中查看timeout</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;http通信&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#http通信&quot;&gt;¶&lt;/a&gt;HTTP通信&lt;/h4&gt;
&lt;p&gt;​	JavaWeb应用程序运行是基于B/S的模式,用户通过客户端浏览器向Web服务器发送一个HTTP请求,服务器收到请求的同时一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(2.2)ServletContext对象</title>
    <link href="https://shuhaohwang.github.io/2020/01/20/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-2-ServletContext%E5%AF%B9%E8%B1%A1/"/>
    <id>https://shuhaohwang.github.io/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/</id>
    <published>2020-01-20T02:23:13.000Z</published>
    <updated>2020-01-20T12:24:10.473Z</updated>
    
    <content type="html"><![CDATA[<h4 id="servletcontext"><a class="header-anchor" href="#servletcontext">¶</a>servletContext</h4><p>ServletContext官方叫servlet上下文。服务器会为每一个工程创建一个对象，这个对象就是ServletContext对象。这个对象全局唯一，而且工程内部的所有servlet都共享这个对象。所以叫全局应用程序共享对象。</p><p>它代表当前正在运行的web应用程序，也就是当前的网站。它是一个单例对象，整个web项目应用就仅此一个对象，且当web项目一启动就会创建，所以后面要使用它只能通过获取的方式</p><p>里面包含了应用程序的一些基本信息，同时这个对象也可以当做容器来存取数据，想要获取该对象，需要使用request对象进行获取</p><h4 id="使用演示"><a class="header-anchor" href="#使用演示">¶</a>使用演示</h4><ul><li>编写两个<strong>servlet</strong> 一个为Setservlet 一个为 Showservlet</li><li>对应访问路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Setservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ServletContextTest.SetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Showservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ServletContextTest.ShowServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Setservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Setservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Showservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Showservlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>其中在Setservlet 其作用为：获取ServletContext对象然后往里面进行存值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext app = request.getServletContext();</span><br><span class="line">        app.setAttribute(<span class="string">"Test"</span>,<span class="string">"1234Hello!!(*^▽^*)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Showservlet 的作用为 向ServletContext对象中进行取值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        ServletContext app = request.getServletContext();<span class="comment">//获取ServletContext对象</span></span><br><span class="line">        String str =(String) app.getAttribute(<span class="string">"Test"</span>);<span class="comment">//取得ServletContext对象中的值</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"获取到的内容为Test =  "</span> + str);<span class="comment">//输出该值</span></span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点："><a class="header-anchor" href="#注意点：">¶</a>注意点：</h5><ul><li>ServletContext是一个单例对象。整个Web项目都共用一个，有点类似于项目的全局变量区一样</li><li>在往ServletContext对象进行存数据时，首先要使用request对象进行获取ServletContext的对象，然后使用<code>setAttribute(&quot;xx&quot;,&quot;aaaa&quot;);</code>方法进行存值，其存储方式类似于map容器，是一个键值对。</li><li>在进行往ServletContext对象进行取对象时，使用<code>getAttribute(&quot;xxx&quot;)</code>方法进行数据取出，注意！该方法的返回值是object，所以自己要根据取出值进行类型转换</li></ul><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/1.png" title="在地址栏输入Setservlet的地址进行访问"><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/2.png" title="再访问Showservlet 可以发现在Setservlet里面保存的值在Showservlet 中被取出并输出"><hr><h5 id="特殊情况"><a class="header-anchor" href="#特殊情况">¶</a>特殊情况</h5><p>以该上述的演示为例子，如果先进行访问Showservlet 会发现其获得的值是null，原因是它没有提前进行存值，再访问Setservlet 页面进行通过<code>setAttribute()</code>方法进行存值后其ServletContext对象才有对应值。</p><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/3.png" title="重启项目，并且直接访问Showservlet 页面可以发现，并没有获得值"><p>其次：只要服务器、该项目还在运行此值就将一直存在，除非通过重启</p><h5 id="例如：不同的浏览器进行访问"><a class="header-anchor" href="#例如：不同的浏览器进行访问">¶</a>例如：不同的浏览器进行访问</h5><img src="/2020/01/20/JavaWeb学习总结-2-2-ServletContext对象/4.png" title="当使用谷歌浏览器往ServletContext对象中存值 然后通过谷歌和IE浏览器分别打开Showservlet 进行查看"><p>可以看出ServletContext对象，无论是换一个浏览器进行访问它都存在且仅有一个，它是对于服务器来说，只要服务器、该项目还在运行此值就将一直存在，除非通过重启</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;servletcontext&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#servletcontext&quot;&gt;¶&lt;/a&gt;servletContext&lt;/h4&gt;
&lt;p&gt;ServletContext官方叫servlet上下文。服务器会为每一个工程创建
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(2.1)请求响应和重定向</title>
    <link href="https://shuhaohwang.github.io/2020/01/19/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-1-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://shuhaohwang.github.io/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/</id>
    <published>2020-01-19T09:59:19.000Z</published>
    <updated>2020-01-19T14:08:19.525Z</updated>
    
    <content type="html"><![CDATA[<h4 id="页面跳转的两种方式"><a class="header-anchor" href="#页面跳转的两种方式">¶</a>页面跳转的两种方式</h4><ul><li>请求转发<ul><li>服务器内部的转发,服务器内部跳转</li><li><code>RequestDispatcher dispatcher = req.getRequestDispatcher(&quot;xxx.jsp&quot;);</code></li><li><code>dispatcher.forward(req.resp);</code></li><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/1.png"></li><li>类比你向张三借钱，张三没有，然后他自己去向李四借钱然后再给你，整个过程你只提出了一次请求，得到了一次回应</li></ul></li><li>重定向<ul><li>服务器告诉浏览器跳转到某个页面(由浏览器完成)</li><li><code>res.sendRedirect(“index.jsp”)</code></li><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/2.png"></li><li>就类似你去借钱，向张三借，张三说没有，让你去找李四，然后你再去向李四借钱。整个过程你向两个人提出了请求，同时也获得了两次回应</li></ul></li></ul><hr><h4 id="重定向用法演示"><a class="header-anchor" href="#重定向用法演示">¶</a>重定向用法演示</h4><ul><li>首先创建一个<strong>Servlet</strong>(命名为<code>Recive</code>)其访问路径为<code>src/Re.c</code></li><li>然后对其进行重定向至自己创建的HelloHtml.html</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Rd_And_Rs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recive</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Recive`s Get is OK!"</span>);</span><br><span class="line">       String url = req.getContextPath();</span><br><span class="line">       System.out.println(<span class="string">"URL="</span>+ url);</span><br><span class="line"></span><br><span class="line">       resp.sendRedirect(url+<span class="string">"/HelloHtml.html"</span>);</span><br><span class="line">       <span class="keyword">return</span>;<span class="comment">//重定向后要结束当前方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a class="header-anchor" href="#注意点">¶</a><strong>注意点</strong></h5><ul><li><code>resp.sendRedirect(&quot;&quot;);</code>这个方法会使你这个Servlet被访问时重定向跳转至括号里面的内容页面，也就是说浏览器的地址栏的内容当你访问该Servlet时会发生改变，变为上述这个方法括号内的地址</li><li><code>resp.sendRedirect(&quot;&quot;)</code>这个方法括号内默认是以你该Servlet文件为基准的而不是项目路径,即：例如你这个Servlet是位于 项目路径下的 src/Demo/Servlet,你要重定向至src中的其他文件就应该…/Xxx</li><li>重定向后要结束该方法。即：不应该继续执行<code>resp.sendRedirect(&quot;&quot;)</code>后面的代码了(重要！)</li><li>request对象中的<code>getContextPath()</code>方法可以直接获取当前的项目路径，也就是<code>contextRoot</code></li><li>重定向后之前的请求信息就没了，故不能通过表单来实现多个页面的数据传送</li></ul><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/3.png" title="通过直接在浏览器地址栏中打开上诉的Servlet"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/4.png" title="按下回车后，发现它重定向至HelloHtml.html"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/5.png" title="控制台中根据getContextPath()方法打印出了 项目路径 的信息"><hr><h4 id="请求转发用法演示"><a class="header-anchor" href="#请求转发用法演示">¶</a>请求转发用法演示</h4><ul><li>首先创建两个Servlet 一个名为 show 另一个为 code 两者的地址路径分别为 <code>../src/show.c</code> 和 <code>../src/Code</code></li><li>其实创建一个表单<ul><li><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/6.png" title="此处为使用上文的HelloHtml.html中的表单演示 表单提交至show 文件中"></li></ul></li><li>其中这个show 将获取HelloHtml.html表单中的内容然后使用请求转发把值传至code 中进行打印</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*show*/</span></span><br><span class="line"><span class="keyword">package</span> Rd_And_Rs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Demo.HelloServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Show</span> <span class="keyword">extends</span> <span class="title">HelloServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Show`s Get is OK!"</span>);</span><br><span class="line"></span><br><span class="line">        RequestDispatcher dispatcher = req.getRequestDispatcher(<span class="string">"/src/Code"</span>);</span><br><span class="line">        req.setAttribute(<span class="string">"id"</span>,<span class="number">10223</span>);</span><br><span class="line">        dispatcher.forward(req,resp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get is ok"</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"你好世界！注册成功！您的id为"</span> + request.getAttribute(<span class="string">"id"</span>));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"用户名为： "</span> + <span class="keyword">new</span> String(request.getParameter(<span class="string">"un"</span>)));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"密码为： "</span> + request.getParameter(<span class="string">"pw"</span>));</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"请牢记！你们用户名和密码（づ￣3￣）づ╭❤～"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点："><a class="header-anchor" href="#注意点：">¶</a>注意点：</h5><ul><li>注意乱码问题！</li><li>要使用请求转发 首先要获取一个<code>RequestDispatcher</code>对象，该对象可以通过request对象的<code>getRequestDispatcher(&quot;xx&quot;);</code>方法进行获取。其实使用该<code>RequestDispatcher</code>对象的方法 <code>forward(req,resp);</code>进行跳转至request对象的<code>getRequestDispatcher(&quot;xx&quot;);</code>方法括号中填写的页面</li><li>注意！<code>getRequestDispatcher(&quot;xx&quot;);</code>该方法中的参数 默认是以项目路径为准的，而不像重定向中以该Servlet 文件为准，即：你在括号中只填一个‘<code>'/'</code>它意味着是项目路径 下的 xxxx</li><li>请求转发可以实现每个页面的数据传送不像重定向。</li><li>请求转发中使用request对象的<code>setAttribute(“xx”,aaaa);</code>和 <code>getAttribute(&quot;xx&quot;)</code>方法自行设置传输数据和获取自定义的数据</li><li>请求转发中进行跳转时默认是使用post进行数据提交</li></ul><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/6.5.png" title="使用HelloHtml.html中的表单进行填写"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/7.png" title="可以发现页面前面地址栏中的内容提交后 为show.c而不是Code这个文件对应的 code 地址，说明前后的页面跳转是由服务器来实现的,其次使用自行设置的数据也传输成功"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/8.png" title="请求跳转是使用post请求"><img src="/2020/01/19/JavaWeb学习总结-2-1-请求响应和重定向/9.png" title="在合理设置字符集后，使用中文字符依旧成功"><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;页面跳转的两种方式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#页面跳转的两种方式&quot;&gt;¶&lt;/a&gt;页面跳转的两种方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请求转发
&lt;ul&gt;
&lt;li&gt;服务器内部的转发,服务器内部跳转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Req
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.4)Servlet响应、请求乱码问题</title>
    <link href="https://shuhaohwang.github.io/2020/01/18/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-4-Servlet%E5%93%8D%E5%BA%94%E3%80%81%E8%AF%B7%E6%B1%82%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://shuhaohwang.github.io/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/</id>
    <published>2020-01-18T12:13:35.000Z</published>
    <updated>2020-01-18T13:29:37.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="响应时的乱码"><a class="header-anchor" href="#响应时的乱码">¶</a>响应时的乱码</h4><p>当Servlet向网站进行响应时，在响应的过程中，Java源程序的中文字符串数据发生至网站站点，可能会出现乱码问题，如下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get is ok"</span>);</span><br><span class="line">        </span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"This is "</span>);</span><br><span class="line">        out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">        out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"你好世界"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文是通过get请求，当打开该servlet后，会打印一个html页面出来。</p><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/1.png" title="源码中的你好世界为乱码"><p>可以发现，响应至网站的内容含有中文的部分变为乱码 无法识别</p><h5 id="解决方案1"><a class="header-anchor" href="#解决方案1">¶</a>解决方案1</h5><p>对于本案例，可以直接在html标签中的<code>&lt;Head&gt;</code>标签中添加<code>&lt;meta charset = 'utf-8'/&gt;</code>来实现</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">   PrintWriter out = response.getWriter();</span><br><span class="line">   out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;meta charset = 'utf-8'/&gt;&lt;/HEAD&gt;"</span>);<span class="comment">//进行添加&lt;meta charset = 'utf-8'/&gt;</span></span><br><span class="line">   out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"This is "</span>);</span><br><span class="line">   out.println(<span class="keyword">this</span>.getClass());</span><br><span class="line">   out.println(<span class="string">",using the Get method"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"你好世界"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;/HTML&gt;"</span>);</span><br><span class="line">   out.flush();</span><br><span class="line">   out.close();</span><br></pre></td></tr></table></figure></li></ul><h5 id="解决方案2"><a class="header-anchor" href="#解决方案2">¶</a>解决方案2</h5><p>可以直接对content-type属性进行设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//response.setContentType("text/html");</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset = utf-8"</span>);<span class="comment">//对其识别字符集进行设置</span></span><br><span class="line">   PrintWriter out = response.getWriter();</span><br><span class="line">   out.println(<span class="string">"&lt;HTML&gt;"</span>);</span><br><span class="line">   out.println(<span class="string">"&lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/2.png" title="可以看出中文字符被解析成功"><hr><h5 id="附加：content-type"><a class="header-anchor" href="#附加：content-type">¶</a>附加：content-type</h5><ul><li><p>Content-Type</p><ul><li>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</li></ul></li><li><p>常见的媒体格式类型如下：</p></li><li><p>text/html ： HTML格式</p></li><li><p>​    text/plain ：纯文本格式</p></li><li><p>​    text/xml ：  XML格式</p></li><li><p>​    image/gif ：gif图片格式</p></li><li><p>​    image/jpeg ：jpg图片格式</p></li><li><p>​    image/png：png图片格式</p><p>以application开头的媒体格式类型：</p></li></ul><ul><li>application/xhtml+xml ：XHTML格式</li><li>application/xml     ： XML数据格式</li><li>application/atom+xml  ：Atom XML聚合格式</li><li>application/json    ： JSON数据格式</li><li>application/pdf       ：pdf格式</li><li>application/msword  ： Word文档格式</li><li>application/octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application/x-www-form-urlencoded ： <code>&lt;form encType=&quot;&quot;&gt;</code>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</li></ul><pre><code> 另外一种常见的媒体格式是上传文件之时使用的：</code></pre><ul><li>​    multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><hr><h4 id="请求时的乱码"><a class="header-anchor" href="#请求时的乱码">¶</a>请求时的乱码</h4><p>当我们通过表单进行获取用户名或者密码的时候，通常可能会出现提交的时候用户名是中文字符，当提交至服务器进行处理的时候，这个阶段就可能会出现中文的乱码。</p><ul><li>通过post提交来处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line"></span><br><span class="line">    String n = request.getParameter(<span class="string">"um"</span>);</span><br><span class="line">    String pw = request.getParameter(<span class="string">"pw"</span>);</span><br><span class="line">    System.out.println(<span class="string">"用户名:"</span> + n);</span><br><span class="line">    System.out.println(<span class="string">"密码:"</span> + pw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/3.png" title="实际服务器中获取的不是对应的中文用户名，而是一段乱码"><h5 id="对于post提交"><a class="header-anchor" href="#对于post提交">¶</a>对于post提交</h5><h6 id="解决方案1-v2"><a class="header-anchor" href="#解决方案1-v2">¶</a>解决方案1</h6><p>通过使用 <code>request.setCharacterEncoding(&quot;utf-8&quot;);</code>来设置请求req对象的获取请求的字符集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Post is ok"</span>);</span><br><span class="line">    </span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);<span class="comment">//设置获取的字符集</span></span><br><span class="line"></span><br><span class="line">        String n = request.getParameter(<span class="string">"um"</span>);</span><br><span class="line">        String pw = request.getParameter(<span class="string">"pw"</span>);</span><br><span class="line">        System.out.println(<span class="string">"用户名:"</span> + n);</span><br><span class="line">        System.out.println(<span class="string">"密码:"</span> + pw);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/18/JavaWeb学习总结-1-4-Servlet响应、请求乱码问题/4.png" title="可以发现获取的中文字符已经不是乱码"><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;响应时的乱码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#响应时的乱码&quot;&gt;¶&lt;/a&gt;响应时的乱码&lt;/h4&gt;
&lt;p&gt;当Servlet向网站进行响应时，在响应的过程中，Java源程序的中文字符串数据发生至网站站点，可能会出现乱码问题，如下面的例子
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.3)Servlet实操、获取表单内容</title>
    <link href="https://shuhaohwang.github.io/2020/01/16/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-3-Servlet%E5%AE%9E%E6%93%8D%E3%80%81%E8%8E%B7%E5%8F%96%E8%A1%A8%E5%8D%95%E5%86%85%E5%AE%B9/"/>
    <id>https://shuhaohwang.github.io/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/</id>
    <published>2020-01-16T11:12:06.000Z</published>
    <updated>2020-01-16T12:48:20.525Z</updated>
    
    <content type="html"><![CDATA[<h4 id="http请求方式"><a class="header-anchor" href="#http请求方式">¶</a>HTTP请求方式</h4><ul><li>HTTP协议定义了GET和POST两种请求方法，POST方法是对请求发送的数据量没有限制</li><li>GET是使用明文在浏览器地址栏直接显示请求字符串</li><li>post是将数据隐含在HTTP协议的请求报文中发送至服务器</li></ul><p>说白了。GET请求是在用浏览器地址栏直接访问才会发出，而post为网页来发出的隐性请求。从方式来看Post请求比Get请求更加安全。</p><hr><h4 id="servlet实操"><a class="header-anchor" href="#servlet实操">¶</a>Servlet实操</h4><h5 id="servlet的两个入口"><a class="header-anchor" href="#servlet的两个入口">¶</a>Servlet的两个入口</h5><p>Servlet的两个入口也就是上面说的Get和Post，要实现网页网站与Servlet的交互就是通过Get和Post来做到。</p><h5 id="servlet的配置与编写"><a class="header-anchor" href="#servlet的配置与编写">¶</a>Servlet的配置与编写</h5><h6 id="servlet的编写"><a class="header-anchor" href="#servlet的编写">¶</a>Servlet的编写</h6><p>在创建好JavaWeb项目后在src包中编写一个<strong>Servlet</strong>并让其继承于<strong>HttpServlet</strong>类。</p><p>根据上述，要实现网站与Servlet的交互就要通过Get和Post来实现，所以可以通过Servlet类中的doGet和doPost的方法重写来实现上述操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重写doGet和doPost方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Get请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Post请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="servlet的配置"><a class="header-anchor" href="#servlet的配置">¶</a>Servlet的配置</h6><p>完成Servlet文件的编写后，如何通过项目的网页来运行它。这就要在项目的XML文件对这个Servlet进行配置</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/1.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Web.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.Test<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;web-app&gt;</code>标签内添加<code>&lt;servlet&gt;</code>标签用来引用编写的<strong>servlet</strong>，其中<code>&lt;servlet-name&gt;</code>来标组<strong>servlet</strong>的名字</p><p>然后在<code>&lt;servlet-class&gt;</code>给出对应要实现的<strong>servlet</strong>所在的项目路径。</p><p>完成上诉后，还不能运行所编写的<strong>servlet</strong>，还要对项目的<strong>servlet</strong>进行路径连接，通过<code>&lt;servlet-mapping&gt;</code>标签来编辑配置<strong>servlet</strong>的连接。同样<code>&lt;servlet-name&gt;</code>标签来指明<code>&lt;servlet&gt;</code>标签内所添加的<strong>servlet</strong>名，而<code>&lt;url-pattern&gt;</code>标签则为设置<strong>servlet</strong>的链接结点地址映射。</p><p>完成后即可运行Tomcat服务器来启动该项目</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/2.png" title="可以发现通过一开始配置的servlet的链接结点地址映射进行访问即可运行Test中的内容"><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/3.png" title="可以发现直接在地址栏中进行访问的是get请求"><p>上面演示的就为<strong>servlet</strong>的编写与配置的简单演示</p><hr><h4 id="servlet实操-通过post请求获取网站表单内容"><a class="header-anchor" href="#servlet实操-通过post请求获取网站表单内容">¶</a>servlet实操 通过post请求获取网站表单内容</h4><h5 id="方法介绍"><a class="header-anchor" href="#方法介绍">¶</a>方法介绍</h5><p>开始之前，<strong>servlet</strong>如何来获取网站里的内容？它实质是通过doGet或者doPost中获取的<strong>requst</strong>对象来获取网站中提取的内容。</p><p>对此有下列方法来实现提取网站返回的<strong>requst</strong>对象中的内容</p><table><thead><tr><th>说明</th><th>方法名</th></tr></thead><tbody><tr><td>获取单值请求参数的方法</td><td>getParamter();</td></tr><tr><td>获取多值请求参数地方</td><td>getParamterValues();</td></tr><tr><td>获取请求参数名字的方法</td><td>getParamterNames();</td></tr><tr><td>获取session对象的方法</td><td>getSession();</td></tr><tr><td>获取Web应用根路径的方法</td><td>getContextPath();</td></tr><tr><td>获取Servlet路径的方法</td><td>getServletPath();</td></tr><tr><td>获取request中的属性的方法</td><td>getAttribute();</td></tr><tr><td>设置request中的属性的方法</td><td>setAttribute();</td></tr><tr><td>获取请求转发对象的方法</td><td>getRequsetDispatcher();</td></tr></tbody></table><h5 id="例子：获取网站中表单中内容"><a class="header-anchor" href="#例子：获取网站中表单中内容">¶</a>例子：获取网站中表单中内容</h5><h6 id="表单页面的实现"><a class="header-anchor" href="#表单页面的实现">¶</a>表单页面的实现</h6><p>所先通过项目自带的index.jsp来实现一个简单表单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ShuHao</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">1</span>/<span class="number">15</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">05</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ShuHao`s Test&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  This is a page of index；</span><br><span class="line">  &lt;form action=<span class="string">"./src/DataPost.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">      用户名：</span><br><span class="line">      &lt;input type=<span class="string">"text"</span> name=<span class="string">"UserName"</span>/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      性别：</span><br><span class="line">      &lt;input type="radio" name="Sex" value="NULL" checked&gt;私密&lt;/input&gt;</span><br><span class="line">      &lt;input type="radio" name="Sex" value="Man" &gt;男&lt;/input&gt;</span><br><span class="line">      &lt;input type="radio" name="Sex" value="Woman"&gt;女&lt;/input&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      爱好：</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Reading"&gt;看书&lt;/input&gt;</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Shopping"&gt;购物&lt;/input&gt;</span><br><span class="line">      &lt;input type="checkbox" name="Hobby" value="Sport"&gt;运动&lt;/input&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      城市：</span><br><span class="line">      &lt;select name=<span class="string">"City"</span>&gt;</span><br><span class="line">          &lt;option value="BeiJing"&gt;北京&lt;/option&gt;</span><br><span class="line">          &lt;option value="ShangHai"&gt;上海&lt;/option&gt;</span><br><span class="line">          &lt;option value="GuangDong"&gt;广东&lt;/option&gt;</span><br><span class="line">          &lt;option value="Etc"&gt;其他&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      个人描述:</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;textarea name="introduction" id="" cols="30" rows="10"&gt;&lt;/textarea&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>value=<span class="string">"提交！_(:з」∠)_"</span>/&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/4.png" title="上述实现的页面样子"><p>这里要注意。表单<code>&lt;form&gt;</code>标签内的action要填写对应<strong>servlet</strong>对应的链接结点地址映射，提交方法为<strong>post</strong>请求</p><h6 id="servlet的编写-v2"><a class="header-anchor" href="#servlet的编写-v2">¶</a>servlet的编写</h6><p>页面点击提交后，程序只会看对应表单内的name属性和value属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*防止乱码，在使用response对象和request对象的时候就提前设置好字符编码*/</span></span><br><span class="line">       resp.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">       req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">       String name = req.getParameter(<span class="string">"UserName"</span>);</span><br><span class="line">       System.out.println(<span class="string">"用户名："</span> + name);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"性别:"</span> + req.getParameter(<span class="string">"Sex"</span>));</span><br><span class="line"></span><br><span class="line">       String[]hobby = req.getParameterValues(<span class="string">"Hobby"</span>);</span><br><span class="line">       System.out.print(<span class="string">"爱好："</span>);</span><br><span class="line">       <span class="keyword">for</span> (String str:hobby)System.out.print(str+<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println();</span><br><span class="line">       System.out.println(<span class="string">"城市:"</span> + req.getParameter(<span class="string">"City"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"个人介绍:\n"</span> + req.getParameter(<span class="string">"introduction"</span>));</span><br><span class="line"></span><br><span class="line">       resp.getWriter().print(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Data is Posted&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器接到了Post请求"</span>);</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的servlet地址映射为<code>“/src/DataPost.php”</code></p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/4.5.png"><h6 id="测试"><a class="header-anchor" href="#测试">¶</a>测试</h6><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/5.png" title="测试填写表单里的内容"><p>点击提交后</p><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/6.png" title="会跳到对应表单action属性设置的servlet链接映射地址"><img src="/2020/01/16/JavaWeb学习总结-1-3-Servlet实操、获取表单内容/7.png" title="可以发现，表单填写的内容通过post请求获取到了"><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><h5 id="对应多个servlet进行配置"><a class="header-anchor" href="#对应多个servlet进行配置">¶</a>对应多个servlet进行配置</h5><p>对应多个servlet进行配置的时候，要通过多个<code>&lt;servlet&gt;</code>标签</p><p>例如：我要对一开始编写的名为Test的<strong>servlet</strong>和实操例子中的名为MyServlet的<strong>servlet</strong>进行配置，则要分开进行对其逐一配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Demo.Test<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShuHao<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/DataPost.php<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/src/Test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对于项目web-xml项目中-url-pattern-标签中的内容"><a class="header-anchor" href="#对于项目web-xml项目中-url-pattern-标签中的内容">¶</a>对于项目web.xml项目中 <code>&lt;url-pattern&gt;</code>标签中的内容</h5><p><code>&lt;url-pattern&gt;</code>标签内的地址映射可以写除中文和其他字符的所有内容，把地址写为后缀.php都可以。</p><br><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;http请求方式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#http请求方式&quot;&gt;¶&lt;/a&gt;HTTP请求方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTTP协议定义了GET和POST两种请求方法，POST方法是对请求发送的数据量没有限制&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1.2)Tomcat配置编辑器及Servlet介绍</title>
    <link href="https://shuhaohwang.github.io/2020/01/15/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-2-Tomcat%E9%85%8D%E7%BD%AE%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8AServlet%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuhaohwang.github.io/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/</id>
    <published>2020-01-15T12:06:32.000Z</published>
    <updated>2020-01-15T13:01:54.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="idea添加tomcat"><a class="header-anchor" href="#idea添加tomcat">¶</a>IDEA添加Tomcat</h4><p>自用：<a href="https://blog.csdn.net/wsjzzcbq/article/details/89463304" target="_blank" rel="noopener">https://blog.csdn.net/wsjzzcbq/article/details/89463304</a></p><h4 id="servlet简介"><a class="header-anchor" href="#servlet简介">¶</a>Servlet简介</h4><ul><li><strong>Servlet</strong>是用Java语言编写的程序，它运行在Web服务器上，用以处理来自客户端的请求；</li><li>它一般会把处理的结果以HTML形式进行返回，在客户端形成动态网页</li></ul><h5 id="优点"><a class="header-anchor" href="#优点">¶</a>优点</h5><ul><li><strong>Servlet</strong>运行在Web服务器中，可以扩展服务器的功能</li><li><strong>Servlet</strong>可以和其他资源交互(例如：用文件IO流读取文件)，从而返回给客户端相应的内容，这样就形成了动态网页；</li><li>使用Java编写，所以能够跨平台</li><li>Java的所有优点都可以在<strong>Servlet</strong>中体现；</li><li><strong>Servlet</strong>很安全，因为访问<strong>Servlet</strong>的唯一途径是通过服务器</li><li>只有符合<strong>Servlet</strong>规范的<strong>Servlet容器</strong>(例如：Tomcat)都可以运行Servlet</li></ul><h5 id="servlet容器"><a class="header-anchor" href="#servlet容器">¶</a>Servlet容器</h5><ul><li><p><strong>Servlet</strong>和我们以往见过的普通Java类一样，在需要的时候被实例化，在不需要的时候被销毁，而<strong>Servle</strong>t的实例化和销毁工作由 <strong>Servlet容器</strong> 来完成</p></li><li><p><strong>Servlet</strong>在<strong>Servlet容器</strong>内运行，<strong>Servlet容器</strong> 负责调度<strong>Servlet</strong>，并控制着<strong>Servlet</strong>的生命周期</p></li><li><p><strong>Tomcat</strong> 即是Web服务器软件，同时也是符合规范的<strong>Servlet</strong>容器</p></li></ul><h5 id="servlet生命周期"><a class="header-anchor" href="#servlet生命周期">¶</a>Servlet生命周期</h5><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/1.png"><h5 id="servlet常用核心api"><a class="header-anchor" href="#servlet常用核心api">¶</a><strong>Servlet</strong>常用核心API</h5><table><thead><tr><th>接口名</th><th>说明</th><th>包</th></tr></thead><tbody><tr><td>Servlet</td><td>这是每个<strong>Servlet</strong>都必须实现的接口，它定义了一系列必须由<strong>Servlet</strong>实现的方法</td><td>Java.servlet</td></tr><tr><td>ServletRequest</td><td>此接口用于将客户端的请求信息传送给Servlet</td><td>Java.servlet</td></tr><tr><td>ServletResponse</td><td>此接口用于对客户端做出响应</td><td>Java.servlet</td></tr><tr><td>HttpServletRequest</td><td>该接口扩展ServletRequest接口，定义了一系列于描述HTTP请求的方法</td><td>Java.servlet.http</td></tr><tr><td>HttpServletResponse</td><td>该接口扩展ServletResponse接口，提供服务器对客服端的响应对象</td><td>Java.servlet.http</td></tr></tbody></table><hr><h4 id="idea-servlet-快速上手"><a class="header-anchor" href="#idea-servlet-快速上手">¶</a>IDEA <strong>Servlet</strong> 快速上手</h4><ul><li>创建一个JavaWeb动态Web项目</li></ul><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/2.png"><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/3.png"><ul><li>在项目src文件中创建包和类</li></ul><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/4.png"><ul><li>编写类文件<ul><li>注解<code>@WebServlet(&quot;XXXX&quot;)</code>括号内为地址文件 例如 <code>@WebServlet(&quot;/hello.html&quot;)</code>在Tomcat服务器启动后 可以使用 localhost:8080/hello.html 来执行该类中的代码</li><li>需要继承<code>HttpServlet类</code>再实现其内部的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/hello.html"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代码被执行"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"&lt;script&gt;alert('He1231231231231231266666666666666ld')&lt;/script&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实验结果：</p><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/5.png"><img src="/2020/01/15/JavaWeb学习总结-1-2-Tomcat配置编辑器及Servlet介绍/6.png"><hr><p>–(本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;idea添加tomcat&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#idea添加tomcat&quot;&gt;¶&lt;/a&gt;IDEA添加Tomcat&lt;/h4&gt;
&lt;p&gt;自用：&lt;a href=&quot;https://blog.csdn.net/wsjzzcbq/art
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构解题错题和知识积累</title>
    <link href="https://shuhaohwang.github.io/2020/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E9%A2%98%E9%94%99%E9%A2%98%E5%92%8C%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    <id>https://shuhaohwang.github.io/2020/01/14/数据结构解题错题和知识积累/</id>
    <published>2020-01-13T17:29:50.000Z</published>
    <updated>2020-01-13T17:30:59.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构基础知识"><a class="header-anchor" href="#数据结构基础知识">¶</a>数据结构基础知识</h3><ul><li>计算机算法指的是解决某一问题的有限运算序列</li><li>常用的时间复杂度所耗费的时间从小到大依次是：<ul><li>O(1 )&lt; O(logn) &lt; O(n) &lt; O(n*logn) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</li></ul></li><li>若一个算法的时间复杂度用T(n)表示着这个n代表的是该**<em>问题的规模</em>**</li><li>算法的5个重要特征有<ul><li>有穷性：一个算法一定要保证在有限步之后结束。</li><li>确定性：算法的每一步骤必须有确切的定义</li><li>输入：一个算法必须有输入，可以是0个也可以是多个</li><li>输出：一个算法必须有输出，可以是一个或多个，没有输出的算法是没有意义的</li><li>可行性：算法原则上能够精确地运行，而且做有限次运算后即可完成</li></ul></li><li>算法的计算量大小称算法的 <strong>时间复杂度</strong></li><li>数据结构通常是研究数据的 <strong>存储结构和逻辑结构</strong> 及它们之间的相互联系</li><li>抽象数据类型与计算机内部表示和实现无关</li><li>数据的逻辑结构与数据元素本身的内容和形式无关</li><li>数据的最小单位是 <strong>数据项</strong></li><li>在数据结构中，从逻辑上可以分为 线性结构和非线性结构</li></ul><hr><h3 id="线性表"><a class="header-anchor" href="#线性表">¶</a>线性表</h3><h4 id="基础知识："><a class="header-anchor" href="#基础知识：">¶</a>基础知识：</h4><ul><li><p>数据结构上相互之间存在**<em>一种或多种特定关系</em>**的数据元素的集合</p></li><li><p>在单链表中设置头节点的作用是**<em>简化插入和删除操作</em>**</p></li><li><p>数据的逻辑结构是数据间关系的描述</p></li><li><p>线性表是典型的线性结构</p></li><li><p>顺序表将线性表中数据元素之间的相邻关系映射为数据物理位置上的相邻关系</p></li><li><p>带头节点的双向循环链表为空表的条件是 <em>head == head-&gt;next</em></p></li><li><p>顺序存储结构是通过**<em>结点物理上的相邻</em>**表示元素之间的关系</p></li><li><p>链式存储结构上通过**<em>指针</em>**表示元素之间的关系</p></li></ul><hr><h4 id="线性表习题"><a class="header-anchor" href="#线性表习题">¶</a>线性表习题</h4><h5 id="1-在顺序表-长度为127-中插入一个元素平均-63-5-个元素"><a class="header-anchor" href="#1-在顺序表-长度为127-中插入一个元素平均-63-5-个元素">¶</a>1.在顺序表(长度为127)中插入一个元素平均（63.5）个元素。</h5><ul><li><strong>解决</strong>：在长度为n的顺序表中插入一个元素平均移动2/n个元素<br><br></li></ul><h5 id="2-单链表中-增加一个头结点的目的是为了-u-方便运算-u"><a class="header-anchor" href="#2-单链表中-增加一个头结点的目的是为了-u-方便运算-u">¶</a>2.单链表中，增加一个头结点的目的是为了(<u>方便运算</u>)</h5><ul><li><strong>解决</strong>：头结点的目的是为了(<u>方便运算</u>)</li></ul><p>​    <br></p><hr><h3 id="栈-队列-数组"><a class="header-anchor" href="#栈-队列-数组">¶</a>栈，队列，数组</h3><h4 id="栈"><a class="header-anchor" href="#栈">¶</a>栈</h4><ul><li>函数调用时，系统要用栈保存必要的消息</li><li>栈和队列都是线性表，只是在插入和删除时受到了限制(true)</li><li>消除递归不一定需要使用栈(true)</li></ul><h4 id="队列"><a class="header-anchor" href="#队列">¶</a>队列</h4><ul><li><p>循环队列可以解决普通队列中假溢出的问题(<strong>循环队列防止假溢出</strong>)</p></li><li><p>循环队列中的一些常用判断条件</p><ul><li>队列为满的条件：(rear + 1) % MaxSize == front</li><li>队列为空的条件：front == rear</li><li>队列中元素的个数：(rear - front + MaxSize) % MaxSize</li><li>入队：rear = (rear+1) % MaxSize</li><li>出队：front = (front+1) % MaxSize</li></ul></li><li><p>用链接方式存储的队列，在进行插入运算时 头、尾指针可能都要修改</p></li><li><p>用循环链表表示的队列长度为n，若只设头指针，则出队和入队的时间复杂度分别是<strong>O(1)<strong>和</strong>O(n)</strong>;若只设尾指针，则出队和入队的时间复杂度分别是<strong>O(1)<strong>和</strong>O(1)</strong></p><p>​</p></li></ul><h4 id="串"><a class="header-anchor" href="#串">¶</a>串</h4><ul><li>KMP算法的特点是在模式匹配时指示主串的指针不会变小。</li><li>串是一种特殊的线性表，特殊<strong>在数据元素是一个字符</strong></li><li>设有两个串S1和S2，求S2在S1首次出现的位置的运算称作<strong>模型匹配</strong></li><li>字符串的子串数目为 <code>n(n+1)/2 + 1</code>（这里的加一是把空串也加上了）</li></ul><h4 id="栈-队列-数组的习题"><a class="header-anchor" href="#栈-队列-数组的习题">¶</a>栈，队列，数组的习题</h4><h5 id="1-一个栈的输入序列为123-n-若输出序列的第一个元素是n-输出第i-1-i-n-个元素是-u-n-i-1-u"><a class="header-anchor" href="#1-一个栈的输入序列为123-n-若输出序列的第一个元素是n-输出第i-1-i-n-个元素是-u-n-i-1-u">¶</a>1.一个栈的输入序列为123…n,若输出序列的第一个元素是n,输出第i(1 &lt;= i &lt;=n)个元素是(<u>n-i+1</u>)</h5><ul><li><strong>解决</strong>：使用代入法 当n等于 4的时候 输出第一个元素就为4 第二个为 3 通过代入获得</li><li><strong>错因</strong>：以为第一个取出后整体长度变短了一位</li></ul><br><h5 id="2-已知字符串s为-abaabaabacacaabaabcc-模式串t为-abaabc-采用kmp算法进行匹配-第一次出现-失配-s-i-t-i-时-i-j-5-则下次开始匹配时-i和j的值分别是-u-i-5-j-2-u"><a class="header-anchor" href="#2-已知字符串s为-abaabaabacacaabaabcc-模式串t为-abaabc-采用kmp算法进行匹配-第一次出现-失配-s-i-t-i-时-i-j-5-则下次开始匹配时-i和j的值分别是-u-i-5-j-2-u">¶</a>2.已知字符串S为“abaabaabacacaabaabcc”. 模式串t为“abaabc”, 采用KMP算法进行匹配，第一次出现“失配”(s[i] != t[i])时，i = j = 5,则下次开始匹配时，i和j的值分别是（<u>i = 5; j = 2</u>）</h5><ul><li><strong>解决</strong>：</li></ul><br><h5 id="3-设s为一个长度为n的字符串-其中的字符各不相同-则s中的互异的非平凡子串-非空且不同于s本身-的个数为-u-n-n-1-2-1-u"><a class="header-anchor" href="#3-设s为一个长度为n的字符串-其中的字符各不相同-则s中的互异的非平凡子串-非空且不同于s本身-的个数为-u-n-n-1-2-1-u">¶</a>3.设S为一个长度为n的字符串,其中的字符各不相同，则S中的互异的非平凡子串(非空且不同于S本身)的个数为( <u>n(n+1)/2 - 1</u> )</h5><ul><li><p><strong>解决</strong>：比如S字串为&quot;abcdefg&quot;,长度为7.则S中的包含的互不相同的字串有如下一些：<br>1.长度为6的个数为2：&quot;abcdef&quot;和&quot;bcdefg&quot;<br>2.长度为5的个数为3：“abcde”,“bcdef”,“cdefg”<br>.<br>6.长度为1的个数为7：“a”,“b”,“c”,“d”,“e”,“f”,&quot;g&quot;<br>个数总和就是2+3+4+5+6+7 = (1+2+3+…+7) - 1 = 7x(7+1)/2 - 1.<br>其中：<br>1+2+3+…+n = (1+n) + (2+(n-1)) + (3+(n-2)) + …（首尾两项相加的和都是n+1,共 n/2个）<br>= n(n+1)/2</p><p>再减去S本身 得n(n+1)/2  - 1</p></li></ul><br><h5 id="4-组成串的数据元素只能是-字符-字符型-char"><a class="header-anchor" href="#4-组成串的数据元素只能是-字符-字符型-char">¶</a>4.组成串的数据元素只能是(字符、【字符型】、【char】)</h5><ul><li><strong>解决</strong>：组成串的数据元素只能是(<u>字符、【字符型】、【char】</u>)</li></ul><br><h5 id="5-字符串-ababaaaab-的nextval数组值序列为-1-0-1-0-1-3-1-0"><a class="header-anchor" href="#5-字符串-ababaaaab-的nextval数组值序列为-1-0-1-0-1-3-1-0">¶</a>5.字符串“ababaaaab”的nextVal数组值序列为(-1 0 -1 0 -1 3 1 0）</h5><ul><li><strong>解决</strong>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先给字符串进行标号</span><br><span class="line">1 2 3 4 5 6 7 8 9 </span><br><span class="line">a b a b a a a a b </span><br><span class="line">0 0 1 2 3 1 1 1 2  //求最大前缀后缀</span><br><span class="line">-1 0 0 1 2 3 1 1 1  //消除最后一位，前面补-1 右移动对齐 </span><br><span class="line">0 1 1 2 3 4 2 2 2//然后加1 得到next数组  (对应版本的next数组需要减 1 )</span><br><span class="line">0 1 0 1 0 4 2 2 1   //然后next数组与最大前缀后缀进行比较，如果相等填next数组对应的值，如果不相等 则填此时next数组值对应一开始标号序号的next值</span><br><span class="line"></span><br><span class="line">得到的最终结果 0 1 0 1 0 4 2 2 1 //全部减一得到</span><br><span class="line">-1 0 -1 0 -1 3 1 1 0 //为最终答案</span><br></pre></td></tr></table></figure><br><hr><h3 id="树与二叉树"><a class="header-anchor" href="#树与二叉树">¶</a>树与二叉树</h3><h4 id="二叉树"><a class="header-anchor" href="#二叉树">¶</a>二叉树</h4><ul><li>树的后根遍历序列等同于该树对应二叉树的中序遍历<ul><li>后根遍历就是后序遍历、中根，前根一样</li></ul></li><li>将森林转换成二叉树后，有以下的性质<ul><li>森林叶结点 <strong>n<sub>0</sub></strong> 的个数是其对应二叉树中 左指针为空的结点个数</li><li>森林中 度为1的结点 <strong>n<sub>1</sub></strong> 的个数是其对应二叉树中，右指针为空的结点个数</li></ul></li><li>采用孩子兄弟链表作存储结构，树的前序遍历和其相应的二叉树的前序遍历的结果是一样的</li><li>给定一颗树，可以找到唯一的一颗二叉树与之对应</li></ul><h4 id="哈夫曼树"><a class="header-anchor" href="#哈夫曼树">¶</a>哈夫曼树</h4><ul><li>哈夫曼树中，所有的字符串结点都是和其他字符串结点或者权值结点构成子树，因此不可能存在度为1的结点 即：<strong>哈夫曼树中一定没有度为1的结点</strong></li><li>树中两个权值最小的结点一定是兄弟结点。</li><li>树中任一非叶结点的权值一定不小于下一任一结点的权值</li><li>若从二叉树的任一个结点出发，到根的路径上所经过的结点序列按其关键字有序，则该二叉树一定是哈夫曼树**（X）**</li><li>一棵哈夫曼树的带权路径长度等于其中所有分支结点的权值之和 <strong>(X)</strong></li><li>在哈夫曼树中，任何一个结点的度都是( <strong>0 或 2</strong> )</li></ul><h4 id="堆"><a class="header-anchor" href="#堆">¶</a>堆</h4><ul><li>从堆中删除一个元素的时间复杂度为(<strong>O(logn)</strong>)</li></ul><h4 id="二叉树对应的一些公式"><a class="header-anchor" href="#二叉树对应的一些公式">¶</a>二叉树对应的一些公式</h4><ul><li>哈夫曼树的总结点数与叶节点数的关系<ul><li>由于哈夫曼树中没有度为1得结点. 只有度为0和度为2得结点. 则一棵<strong>有n个叶子结点</strong>得<strong>哈夫曼树</strong>共有<strong>2n-1个结点</strong></li></ul></li></ul><br><ul><li>在含有n个结点的树中，边数只能是 <strong>n-1</strong> 条</li></ul><br><ul><li>完全二叉树中，结点个数为n，结点的编号从1开始，则编号最大的分支结点的编号为 <strong>n/2</strong></li></ul><br><ul><li>一颗树高为K的完全二叉树至少有 <strong>2<sup>k-1</sup></strong> 个结点<ul><li>一棵高为k的完全二叉树，当第k层只有最左边一个结点时具有最少的结点。根据二叉树的性质，第1层到第k-1层共有结点2<sup>k-1</sup> - 1个，因此它至少有2<sup>k-1</sup> - 1 + 1 = 2<sup>k-1</sup>个结点。</li></ul></li></ul><br><ul><li>有 <strong>n</strong> 个结点，并且高度为 <strong>n</strong> 的二叉树的数目为 <strong>2<sup>n-1</sup></strong><br><br></li><li>叶子结点和二度结点数目关系：<strong>n<sub>0</sub>=n<sub>2</sub>+1</strong><ul><li>二叉树中的度<strong>只算出度</strong>，往下的出度为多少其度数就为多少</li></ul></li></ul><br><ul><li>如果这是一个<strong>完全二叉树</strong>，那么一度结点的个数是有限的，要么为0要么为1。所以可以最后得到结点总数目和叶子结点的关系：<ul><li>当n1=0时，n=2n0-1所以n0=(n+1)/2。这里的n为奇数。</li><li>当n1=1时，n=2n0所以n0=n/2。这里的n为偶数。</li></ul></li><li>一个具有n个节点的完全二叉树,其叶子节点的个数n<sub>0</sub>为: <strong>(n+1) / 2</strong> 向下取整。(重要！！！)</li></ul><h4 id="二叉树中的一些习题"><a class="header-anchor" href="#二叉树中的一些习题">¶</a>二叉树中的一些习题</h4><h5 id="1-将森林转换为对应的二叉树-若在二叉树中-结点u是结点v的父结点的父结点-则在原来的森林中-u和v可能具有的关系是"><a class="header-anchor" href="#1-将森林转换为对应的二叉树-若在二叉树中-结点u是结点v的父结点的父结点-则在原来的森林中-u和v可能具有的关系是">¶</a>1  将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是( )</h5><p>Ⅰ．父子关系<br>Ⅱ．兄弟关系<br>Ⅲ．u的父结点与v的父结点是兄弟关系（X）</p><ul><li><strong>解析</strong>：森林与二又树的转换规则为“左孩子右兄弟”。在最后生成的二叉树中，父子关系在对应森林关系中可能是兄弟关系或原本就是父子关系。<br>情形Ⅰ：若结点v是结点u的第二个孩子结点，在转换时，结点v就变成结点u第一个孩子的右孩子，符合要求。<br>情形Ⅱ：结点u和v是兄弟结点的关系，但两者之中还有一个兄弟结点k，则转换后，结点v就变为结点k的右孩子，而结点k则是结点u的右孩子，符合要求。<br>情形Ⅲ：结点v的父结点是原先的父结点或兄弟结点。若结点u的父结点与v的父结点是兄弟关系，则转换之后，不可能出现结点u是结点v的父结点的父结点。</li></ul><h5 id="2-若用一维数组表示一个深度为5-结点个数为10的二叉树-数组的长度至少为-16"><a class="header-anchor" href="#2-若用一维数组表示一个深度为5-结点个数为10的二叉树-数组的长度至少为-16">¶</a>2.若用一维数组表示一个深度为5、结点个数为10的二叉树，数组的长度至少为(16)</h5><ul><li><strong>相关知识</strong>：二叉树存储在一个一维数组时，是以层次遍历来存储进一位数组的</li></ul><h5 id="3-已知一棵完全二叉树的第6层-设根是第1层-有8个叶结点-则该完全二叉树的结点个数最多是-111"><a class="header-anchor" href="#3-已知一棵完全二叉树的第6层-设根是第1层-有8个叶结点-则该完全二叉树的结点个数最多是-111">¶</a>3.已知一棵完全二叉树的第6层（设根是第1层）有8个叶结点，则该完全二叉树的结点个数最多是（111）</h5><ul><li><strong>解析</strong>：即第六层有32个节点，其中有8个是叶子节点，说明其余24个是有子节点的，又由于是完全二叉树，所以那24个节点每个节点有2个子节点，共计48个节点，也就是第七层的节点有48个，所以前六层的63加第七层的48就是111个节点了</li></ul><h5 id="4-若一棵二叉树的前序遍历序列为a-e-b-d-c-后序遍历序列为b-c-d-e-a-则根结点的孩子结点-a-只有e"><a class="header-anchor" href="#4-若一棵二叉树的前序遍历序列为a-e-b-d-c-后序遍历序列为b-c-d-e-a-则根结点的孩子结点-a-只有e">¶</a>4.若一棵二叉树的前序遍历序列为a，e，b，d，c，后序遍历序列为b，c，d，e，a，则根结点的孩子结点（A.只有e）</h5><p>A．只有e<br>B．有e、b<br>C．有e、c<br>D．无法确定</p><ul><li><strong>解析</strong>：根据题中给出的二叉树的前序遍历a、e、b、d、c和后序遍历b、c、d、e、a可以确定的是a为二叉树的根结点。那么根据前序遍历的访问次序为根结点、左子树、右子树，可以确定e为左子树或右子树的根结点，即根结点的孩子结点。假设e为左孩子结点，那么根据后序遍历的结果可知，b、c、d一定在左子树上，不可能为a的孩子结点。若e为右子树的根结点，根据前序遍历结果可知，此二又树没有左子树。</li></ul><h5 id="5-设f是一个森林-b是由f变换得到的二叉树-f中有n个非终端结点-则b中右指针域为空的结点为-c-n-1"><a class="header-anchor" href="#5-设f是一个森林-b是由f变换得到的二叉树-f中有n个非终端结点-则b中右指针域为空的结点为-c-n-1">¶</a>5.设F是一个森林,B是由F变换得到的二叉树.F中有n个非终端结点,则B中右指针域为空的结点为（C.n+1 ）</h5><p>A.n-1</p><p>B.n</p><p>C.n+1</p><p>D.n+2</p><ul><li><strong>解析</strong>：F有n个非终端节点,所以转换为二叉树后所有的空的右指针域(right)就是n个.<br>根节点没有兄弟,所以该右指针域也为空.(注:这里根节点也是一个有指针域.上文中根节点属于非终端节点,那里它所指向的右指针域不是它本身而是它的最右边的儿子.)<br>所以综上,二叉树中右指针域为空的节点有(n+1)个.</li></ul><h5 id="6-将森林f转换为对应的二叉树t-f中叶结点的个数等于-c-t中左孩子指针为空的结点个数"><a class="header-anchor" href="#6-将森林f转换为对应的二叉树t-f中叶结点的个数等于-c-t中左孩子指针为空的结点个数">¶</a>6.将森林F转换为对应的二叉树T，F中叶结点的个数等于 （C. T中左孩子指针为空的结点个数）</h5><p>A. T中叶结点的个数</p><p>B. T中度为1的结点个数</p><p>C. T中左孩子指针为空的结点个数</p><p>D. T中右孩子指针为空的结点个数</p><ul><li><p><strong>解析</strong>：在二叉树中，节点的左指针指向其孩子，节点的右指针指向其兄弟。所以在一颗二叉树中，如果某个节点的左指针为NULL，就说明这个节点在原来的森林中没有孩子，是叶子结点，如果某个节点的右指针为NULL，就说明这个节点在原来的森林中没有兄弟。</p><p>所以森林中的叶子节点=二叉树中左指针为NULL的个数</p></li></ul><h5 id="7-一棵124个叶结点的完全二叉树-最多有-b-248-个结点"><a class="header-anchor" href="#7-一棵124个叶结点的完全二叉树-最多有-b-248-个结点">¶</a>7.一棵124个叶结点的完全二叉树，最多有(B. 248)个结点。</h5><p>A. 249</p><p>B. 248</p><p>C. 250</p><p>D. 247</p><ul><li><strong>解决</strong>：根据公式：<code>一个具有n个节点的完全二叉树,其叶子节点的个数n0为: (n+1) / 2 向下取整</code>，且题目中要求是最多几个结点，那么就极端假设，有N个结点，代入公式最大值有124.5个叶结点，向下取整得到的124个叶结点，所以用124.5反代公式得到的结果最多有248个结点</li></ul><hr><h3 id="图"><a class="header-anchor" href="#图">¶</a>图</h3><h4 id="基础知识"><a class="header-anchor" href="#基础知识">¶</a>基础知识</h4><ul><li>图的深度遍历是一个递归过程</li><li>用邻接表存储图所用的空间大小(<strong>与图的顶点数和边数都有关</strong>)</li><li>判断一个有向图是否有环（回路）除了拓扑排序方法，还可以用( <strong>深度优先遍历</strong> )</li><li>若用邻接矩阵存储有向图，矩阵中主对角线以下的元素均为零，则关于该图拓扑序列的结论是 <strong>存在，可能不唯一</strong></li><li>在有向图G的的拓扑序列中，若顶点Vi在顶点Vj之前，则下列情形不可能出现的是 <strong>G中有一条从Vi到Vj的路径</strong></li><li>回路 <strong>不是</strong> 简单路径</li><li>在有向图的邻接表存储结构中，顶点v在链表中出现的次数是 <strong>顶点v的入度</strong></li><li>当各边上的权值 <strong>均相等</strong> 时，BFS算法可用来解决单源最短路径问题</li><li>无向连通图中，边数<strong>不一定大于</strong>顶点个数减1</li><li>无向连通图中，所有顶点的度数之和为偶数</li><li>无向连通图中，至少有一个顶点的度为1     ( <strong>X</strong> )</li><li><strong>迪杰克斯拉</strong> 最短路径算法从源点到其余顶点的最短路径的路径长度按 <strong>递增</strong> 次序依次产生，当弧上的权值为 <strong>负数</strong> 时，该算法不能正确产生最短路径</li><li>若一个有向图具有拓扑排序序列，那么它的邻接矩阵必定为 <strong>一般矩阵</strong></li><li>用邻接表存储图所用的空间大小 <strong>与图的顶点数和边数都有关</strong></li><li>n 个结点的无向图。若不允许结点到自身的边，也不允许结点到自身的边，也不允许结点到结点的多重编，且边的总数为 n(n-1)/2,则该无向图一定是连通图</li><li><strong>Floyed</strong> 求每对不同顶点对的算法中运行弧上的权为负，但不能有权和为负的回路</li><li>连通图上各边权值均不相同，则该图的最小生成树是唯一的</li></ul><h4 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">¶</a>时间复杂度</h4><ul><li>对有 <strong>n</strong> 个顶点，<strong>e</strong> 条边且使用邻接表存储的有向图进行广度优先遍历，其算法时间复杂度是( <strong>O(n+e)</strong> )</li><li>若将 <strong>n</strong> 个顶点 <strong>e</strong> 条弧的有向图采用邻接表存储，则拓扑排序算法的时间复杂度( O(n+e) )</li></ul><h4 id="生成树"><a class="header-anchor" href="#生成树">¶</a>生成树</h4><ul><li>图的BFS生成树的树高 h1 比DFS生成树的树高 h2 (<strong>小或者相等</strong>)</li></ul><h4 id="图的一些公式"><a class="header-anchor" href="#图的一些公式">¶</a>图的一些公式</h4><ul><li>设无向图的顶点个数为n，则该图<strong>最多</strong>有 <strong>n (n-1) / 2</strong>  条边。</li><li>一个有n个结点的图，最少有 <strong>1</strong>   个连通分量，最多有  <strong>n</strong>  个连通分量。</li><li>在一个<strong>无向图</strong>中，所有顶点的度数之和等于所有边数的 <strong>2</strong> 倍；</li><li>要连通具有 <strong>n</strong> 个顶点的有向图，至少需要 <strong>n</strong> 条边    （<strong>掉坑数</strong>：1）</li><li>一个 <strong>n</strong> 个顶点的连通无向图，其边的个数至少为 <strong>n-1</strong></li><li>在有n 个顶点的有向图中，每个顶点的度最大可达 <em><em>2</em>(n-1)</em>*</li><li><strong>n <strong>个结点的</strong>完全有向图</strong>含有边的数目 <em><em>n</em>(n-1)</em>*</li><li>握手定理：各顶点度数之和 = 边数的两倍</li><li>在有 <strong>n</strong> 个顶点的有向图中，若要使任意两点间可以互相到达，则至少需要 <strong>n</strong> 条弧</li><li>若用 <strong>n</strong> 表示图中顶点数目，则有 <em><em>n</em>(n-1)/2</em>* 条边的无向图称为完全图</li><li>无向图G 中有<strong>n</strong>个顶点 <strong>e</strong>条边，则其对应的邻接表中的表头结点 个数为 <strong>n</strong> ； 边表结点的个数为 2e</li></ul><h4 id="图的一些习题"><a class="header-anchor" href="#图的一些习题">¶</a>图的一些习题</h4><h5 id="1-g是一个非连通无向图-共有28条边-则该图至少有-u-9-u-个顶点"><a class="header-anchor" href="#1-g是一个非连通无向图-共有28条边-则该图至少有-u-9-u-个顶点">¶</a>1.G是一个非连通无向图，共有28条边，则该图至少有 <u>9</u>  个顶点</h5><ul><li><p><strong>解析</strong>：假设至少有N个顶点。由于是非连通图，并且要满足28条边，所以N=边为28的完全图（顶点最少）的顶点数+1（与完全图不连通）。</p><p>完全图边数=28，解n(n-1)/2=28，得n=8，因此N=8+1=9.</p></li></ul><h5 id="2-下列关于无向连通图特性的叙述中-正确的是-a"><a class="header-anchor" href="#2-下列关于无向连通图特性的叙述中-正确的是-a">¶</a>2.下列关于无向连通图特性的叙述中，正确的是(A )</h5><p>Ⅰ．所有顶点的度之和为偶数<br>Ⅱ．边数大于顶点个数减1<br>Ⅲ．至少有一个顶点的度为1</p><p>A．只有Ⅰ<br>B．只有Ⅱ<br>C．Ⅰ和Ⅱ<br>D．Ⅰ和Ⅲ</p><ul><li><strong>解析</strong>：考查无向连通图的特性。<br>Ⅰ．每条边都连接了两个结点，则在计算顶点的度之时，这条边都被计算了两次，故所有顶点的度之和为边数的两倍，显然必为偶数。<br>Ⅱ．边数大于顶点个数减1，如果定点数为3，则边数为2，边数=定点个数减1；<br>Ⅲ．在顶点数n≥3的完全有向图中，没有度为1的节点，如下图所示：</li><li>注意：对顶点数n≥3的无向完全图，不存在度为1的顶点，并且边数与顶点数的差要大于等于0。</li></ul><h5 id="3-若无向图g-v-e-中含7个顶点-为保证图g在任何情况下都是连通的-则需要的边数最少是-c"><a class="header-anchor" href="#3-若无向图g-v-e-中含7个顶点-为保证图g在任何情况下都是连通的-则需要的边数最少是-c">¶</a>3.若无向图G(V，E)中含7个顶点，为保证图G在任何情况下都是连通的，则需要的边数最少是(C )</h5><p>A．6<br>B．15<br>C．16<br>D．20</p><ul><li><strong>解析</strong>：要保证元向图G在任何情况下都是连通的，即任意变动图G中的边，G始终保持连通，首先需要G的任意6个结点构成完全连通子图G1，需15条边，然后再添一条边将第7结点与G1连接起来，共需16条边。</li></ul><hr><h3 id="排序与查找"><a class="header-anchor" href="#排序与查找">¶</a>排序与查找</h3><h4 id="hash表"><a class="header-anchor" href="#hash表">¶</a>Hash表</h4><ul><li>为提高散列（Hash）表的查找效率，可以采取的正确措施是 <strong>设计冲突少的散列函数</strong></li><li>哈希查找中 不存在特别好与坏的哈希函数，要视情况而定</li><li>用哈希方法处理 冲突 时可能出现堆积现象，其中 <strong>平均查找长度</strong> 会手堆积现象的直接影响</li><li>随着装载因子a的增大，用闭散列法解决冲突，其平均搜索长度比用开散列法解决冲突时的平均搜索长度增长得慢 （<strong>X</strong>）</li><li>开放地址法：Hi=(H(key)+di) mod m,   其中H(key)为哈希函数，m为哈希表长，di为增量序列，增量序列有以下取法：<ul><li>di=1,2,3,4…,m-1 称为线性探测再散列</li><li>di=1^2 ，- 1<sup>2,2</sup>2，- 2<sup>2，…,k</sup>2,-k^2(k&lt;=m/2),称为<strong>二次探测再散列</strong></li><li>di=伪随机数序列，称为随机探测再散列；</li></ul></li><li>采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找</li></ul><h4 id="排序"><a class="header-anchor" href="#排序">¶</a>排序</h4><ul><li>在排序过程中，对尚未确定最终位置的所有元素进行一遍处理称为一趟排序。其中 每一趟排序结束时都至少能够确定一个元素最终位置的方法是 <strong>简单选择排序、快速排序、堆排序</strong></li><li>归并排序既适合内排序也适合外排序</li><li>若不考虑基数排序，则在排序过程中，主要进行的两种基本排序操作是关键字的 <strong>比较</strong> 和记录的 <strong>移动</strong></li><li>为实现快速排序算法，待排序序列宜采用的存储方式是 <strong>顺序存储</strong></li><li><strong>n</strong> 个待排序的记录关键字，则在堆排序中需要 <strong>1</strong> 个辅助记录单元</li></ul><h4 id="查找"><a class="header-anchor" href="#查找">¶</a>查找</h4><ul><li>当采用分块查找时，数据的组织方式为 数据分成若干块，每块内数据不必有序，但块间必须有序，没块内最大(或最小)的数据组成索引块</li></ul><h4 id="时间复杂度-v2"><a class="header-anchor" href="#时间复杂度-v2">¶</a>时间复杂度</h4><ul><li>设被排序的结点序列共有<strong>N</strong>个结点，在该序列中的结点已十分接近排序的情况下，用<strong>直接插入法</strong>的时间复杂度为<strong>O(N)</strong>,用 <strong>归并法</strong> 的时间复杂度为<em><em>O(N</em>logN)</em>* 用<strong>快速排序法</strong>的时间复杂度为<strong>O(N^2)</strong></li></ul><h4 id="公式"><a class="header-anchor" href="#公式">¶</a>公式</h4><ul><li>假定有<strong>K</strong>个关键字互为同义词，若用线性探测法吧这<strong>K</strong>个关键字存入散列表中，至少要进行<em><em>k</em>(K+1)/2</em>*次探测</li></ul><h4 id="习题"><a class="header-anchor" href="#习题">¶</a>习题</h4><h5 id="1-分别采用堆排序-快速排序-冒泡排序和归并排序-对初态为有序的表-则最省时间的是-u-冒泡排序-u-最费时间的是-u-快速排序-u"><a class="header-anchor" href="#1-分别采用堆排序-快速排序-冒泡排序和归并排序-对初态为有序的表-则最省时间的是-u-冒泡排序-u-最费时间的是-u-快速排序-u">¶</a>1.分别采用堆排序、快速排序、冒泡排序和归并排序，对初态为有序的表，则最省时间的是 <u>冒泡排序</u>，最费时间的是 <u>快速排序</u></h5><ul><li><strong>扩展解析</strong>:简单排序的算法（直接插入，冒泡，简单选择排序）简单且稳定，适合与待排记录较小的情况，当当待排序的关键码序列已经基本有序时，用直接插入排序最快。<br>就平均时间的性能而言，快速排序最佳，即排序速度最快，所以在随机情况下，快速排序是最佳选择。一般情况下，快速排序效率最好。<br>既要节省空间，又要有较快的排序速度，堆排序是最佳选择，其不足之处是建堆时需要消耗较多时间。<br>若希望排序是稳定的，且有较快的排序速度，则可选用2路归并排序，其缺点需要较大的辅助空间分配</li></ul><h5 id="2-采用线性探测法处理散列时的冲突-当从哈希表删除一个记录时-不应将这个记录的所在位置置空-因为这会影响以后的查找-正确"><a class="header-anchor" href="#2-采用线性探测法处理散列时的冲突-当从哈希表删除一个记录时-不应将这个记录的所在位置置空-因为这会影响以后的查找-正确">¶</a>2.采用线性探测法处理散列时的冲突，当从哈希表删除一个记录时，不应将这个记录的所在位置置空，因为这会影响以后的查找(正确)</h5><ul><li><strong>解析</strong>：考虑置空位置a后面存有数b，当查询b的时候，可能由于查询到a位置为空，就不往下查了，导致查询结果错误</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据结构基础知识&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数据结构基础知识&quot;&gt;¶&lt;/a&gt;数据结构基础知识&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计算机算法指的是解决某一问题的有限运算序列&lt;/li&gt;
&lt;li&gt;常用的时间复杂度所耗费的时间从小到大依次是
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习总结(1-1)Tomcat安装与使用介绍</title>
    <link href="https://shuhaohwang.github.io/2020/01/14/JavaWeb%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-1-1-Tomcat%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <id>https://shuhaohwang.github.io/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/</id>
    <published>2020-01-13T16:11:20.000Z</published>
    <updated>2020-01-13T17:32:12.307Z</updated>
    
    <content type="html"><![CDATA[<h4 id="tomcat介绍"><a class="header-anchor" href="#tomcat介绍">¶</a>Tomcat介绍</h4><p>​Tomcat 服务器是一个免费的开放源代码的Web 应用服务器是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noopener">HTML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073" target="_blank" rel="noopener">标准通用标记语言</a>下的一个应用）页面的访问请求。</p><p>​说白了就是可以帮助你搭建服务器，从而上传自己的网站站点。当你访问开启Tomcat服务器电脑或者服务器的IP地址时即可访问该电脑或服务器里面的内容。</p><hr><h4 id="tomcat的安装"><a class="header-anchor" href="#tomcat的安装">¶</a>Tomcat的安装</h4><ul><li>安装步骤<ul><li>进入官网下载安装包</li><li>压解安装包</li><li>配置环境变量(重要！因为Tomcat是依靠于系统环境变量中的JAVA_HOME变量)</li><li>打开安装包里面的<code>bin</code>文件目录下的<code>startup.bat</code></li><li>打开浏览器 输入地址 <code>localhost:8080</code>验证安装是否成功</li></ul></li></ul><h5 id="安装包的下载"><a class="header-anchor" href="#安装包的下载">¶</a>安装包的下载</h5><ul><li>Tomcat官方站点<ul><li><a href="http://tomcat.apache.org" target="_blank" rel="noopener">http://tomcat.apache.org</a></li></ul></li><li>获取Tomcat安装包<ul><li>tar.gz文件是Linux操作系统下的安装版本</li><li>exe文件是window系统下的安装版本</li><li>zip文件是Windows系统下的压缩版本(推荐！压解即可运行)</li></ul></li></ul><h5 id="环境变量的配置"><a class="header-anchor" href="#环境变量的配置">¶</a>环境变量的配置</h5><ul><li>JAVA_HOME 中必须配置，内容为jdk安装目录</li></ul><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/1.png"><ul><li>Path 中需要把jdk文档中的bin目录添入</li></ul><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/2.png"><h5 id="启动tomcat服务器"><a class="header-anchor" href="#启动tomcat服务器">¶</a>启动Tomcat服务器</h5><p>打开Tomcat文件目录下的bin文件里面的<code>startup.bat</code>，当出现Server startup in xxxx ms时 即为启动Tomcat服务器成功</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/3.png" title="出现此为启动成功"><h5 id="打开浏览器输入本机ip地址验证是否启动成功"><a class="header-anchor" href="#打开浏览器输入本机ip地址验证是否启动成功">¶</a>打开浏览器输入本机IP地址验证是否启动成功</h5><p>在浏览器中输入 localhost:8080 或者 127.0.0.1:8080 若打开的内容为下图所示即为 Tomcat 服务器安装且启动成功</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/4.png" title="Tomcat启动成功！"><hr><h5 id="tomcat的其他问题"><a class="header-anchor" href="#tomcat的其他问题">¶</a>Tomcat的其他问题</h5><ul><li><p>为啥一定要是8080端口？</p><ul><li><p>这个为Tomcat默认的端口设置，倘若端口被占用或者想修改为其他端口可以在Tomcat目录下的<code>conf</code> 中的<code>server.xml</code>文件中修改</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--server.xml--&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- A "Connector" represents an endpoint by which requests are received</span></span><br><span class="line"><span class="comment">         and responses are returned. Documentation at :</span></span><br><span class="line"><span class="comment">         Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</span></span><br><span class="line"><span class="comment">         Java AJP  Connector: /docs/config/ajp.html</span></span><br><span class="line"><span class="comment">         APR (HTTP/AJP) Connector: /docs/apr.html</span></span><br><span class="line"><span class="comment">         Define a non-SSL HTTP/1.1 Connector on port 8080</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- A "Connector" using the shared thread pool--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector executor="tomcatThreadPool"</span></span><br><span class="line"><span class="comment">               port="8080" protocol="HTTP/1.1"</span></span><br><span class="line"><span class="comment">               connectionTimeout="20000"</span></span><br><span class="line"><span class="comment">               redirectPort="8443" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的port 后的 <code>8080</code> 修改为其他端口即可</p></li><li><p><strong>注意</strong>！：修改后应该重启Tomcat服务器才会生效</p></li></ul></li></ul><hr><h4 id="tomcat中发布自己的站点"><a class="header-anchor" href="#tomcat中发布自己的站点">¶</a>Tomcat中发布自己的站点</h4><p>在Tomcat文件中有一个<code>webapps</code>文件 里面即可放置自己的站点文件 来通过 服务器开启IP地址来访问对应的站点 或者文件</p><p>这里我们在<code>webapps</code>创建一个<code>myweb</code>文件夹 里面放置了一个图片和一个测试的网站</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/7.png"><p>然后在Tomcat开启的IP地址后加<code>/myweb/xxx..</code>来访问对应的内容</p><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/8.png" title="访问文件中的图片"><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/9.png" title="访问文件中的html站点"><h5 id="虚拟目录映射"><a class="header-anchor" href="#虚拟目录映射">¶</a>虚拟目录映射</h5><p>虚拟目录映射就是把 你实际的目录例如上面的<code>127.0.0.1:8080/myweb/xxx..</code>中的<code>myweb/xxx</code>等实际目录信息替换成别的字符串，来起到便捷或者安全的作用  。</p><p>**例如：**把 <code>myweb/xxx</code>替换成 <code>hello</code> 即 使用地址 <code>127.0.0.1:8080/hello</code>也可访问到<code>127.0.0.1:8080/myweb/xxx..</code>所访问的内容</p><p><strong>如何设置</strong></p><ul><li>打开tomcat目录中的<code>conf</code>文件下的<code>server.xml</code></li><li>在该文件下的 <code>&lt;Host&gt; ...&lt;/Host&gt;</code>中添加 <code>&lt;Context path =&quot;/XXXX(虚拟目录名称)&quot; docBase = &quot;myweb/xxx.(实际目录的名称)&quot;/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--server.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Host区域内添加相应内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--server.xml--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span> =<span class="string">"hello"</span> <span class="attr">docBase</span> = <span class="string">"myweb"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/10.png" title="可以发现用hello/index.html也可以访问 myweb/index.html"><hr><h4 id="tomcat目录中的文件结构"><a class="header-anchor" href="#tomcat目录中的文件结构">¶</a>Tomcat目录中的文件结构</h4><img src="/2020/01/14/JavaWeb学习总结-1-1-Tomcat安装与介绍/11.png" title="Tomcat目录"><ul><li><strong>bin</strong> 文件<ul><li>存放启动和关闭 <strong>Tomcat</strong> 的脚本文件</li></ul></li><li><strong>conf</strong> 文件<ul><li>存放Tomcat服务器的各种配置文件</li></ul></li><li><strong>lib</strong> 文件<ul><li>存放<strong>Tomcat</strong>服务器的支撑jar包</li></ul></li><li><strong>logs</strong> 文件<ul><li>存放<strong>Tomcat</strong> 的日志文件</li></ul></li><li><strong>temp</strong> 文件<ul><li>存放 <strong>Tomcat</strong> 运行时产生的临时文件(缓存文件)</li></ul></li><li><strong>webpps</strong> 文件<ul><li>web应用的所在目录，即供外界访问的<strong>web</strong>资源的存放目录</li></ul></li><li><strong>work</strong> 文件<ul><li><strong>Tomcat</strong> 的工作目录</li></ul></li></ul><hr><p><strong>其他补充</strong>：当你访问服务器文件(例如上面的 myweb 文件夹) 下的其他应用文件(exe、MP3 、MP4…)时 会 启用下载</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;tomcat介绍&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#tomcat介绍&quot;&gt;¶&lt;/a&gt;Tomcat介绍&lt;/h4&gt;
&lt;p&gt;​	Tomcat 服务器是一个免费的开放源代码的Web 应用服务器是开发和调试JSP 程序的首选。对于一个初学者来说
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="JavaWeb" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/JavaWeb/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(1.1) view容器</title>
    <link href="https://shuhaohwang.github.io/2020/01/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-1-1-view%E5%AE%B9%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2020/01/12/微信小程序-1-1-view容器/</id>
    <published>2020-01-12T03:28:11.000Z</published>
    <updated>2020-01-12T13:08:39.432Z</updated>
    
    <content type="html"><![CDATA[<h4 id="view组件的一些属性"><a class="header-anchor" href="#view组件的一些属性">¶</a>View组件的一些属性</h4><h5 id="view"><a class="header-anchor" href="#view">¶</a>view</h5><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>hover-class</td><td>string</td><td>none</td><td>否</td><td>指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td>1.0.0</td></tr><tr><td>hover-stop-propagation</td><td>boolean</td><td>false</td><td>否</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td>1.5.0</td></tr><tr><td>hover-start-time</td><td>number</td><td>50</td><td>否</td><td>按住后多久出现点击态，单位毫秒</td><td>1.0.0</td></tr><tr><td>hover-stay-time</td><td>number</td><td>400</td><td>否</td><td>手指松开后点击态保留时间，单位毫秒</td><td>1.0.0</td></tr></tbody></table><ul><li><strong>hover-class</strong><ul><li>解释：当按下后会把原本的样式改成hover-class后边所带的样式</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;Mission&#125;&#125;"</span> <span class="attr">wx:key</span> =<span class="string">"*this"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_group"</span> <span class="attr">bindtap</span>=<span class="string">"test"</span> <span class="attr">hover-class</span>=<span class="string">"p_group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_name"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_desc"</span>&gt;</span>&#123;&#123;item.desc&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"m_date"</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**index.wxss**/</span></span><br><span class="line"><span class="comment">/*初始样式*/</span></span><br><span class="line"><span class="selector-tag">m_group</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>:<span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1575569560956&amp;di=5adf4bd524cb8d7eab23c194fa11f5ca&amp;imgtype=0&amp;src=http%3A%2F%2Fa.hiphotos.baidu.com%2Fimage%2Fpic%2Fitem%2F838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*按下后的样式*/</span></span><br><span class="line"><span class="selector-tag">p_group</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">m_name</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: STKaiti;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">m_date</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/12/微信小程序-1-1-view容器/1.png" title="按下前"><img src="/2020/01/12/微信小程序-1-1-view容器/2.png" title="按下后"><hr><ul><li>hover-stop-propagation<ul><li>当出现容器组件相互包含的时候，当点击一个子容器的时候样式的改变会导致其外面的父容器的样式也被改变，通过使用<u>hover-stop-propagation</u>的设置可以设置成只有点击出的容器发生样式改变而不影响其父容器</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>view组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view-parent-container"</span> <span class="attr">hover-class</span>=<span class="string">"hover-parent-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view-container"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">hover-class</span>=<span class="string">"hover-container"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">hover-stop-propagation</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">hover-start-time</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">hover-stay-time</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/weui.wxss'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/common.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** view **/</span></span><br><span class="line"><span class="selector-class">.view-parent-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-parent-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.view-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">background</span>: chocolate;</span><br><span class="line">    <span class="comment">/* transition: all .5s; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,0.7)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/01/12/微信小程序-1-1-view容器/3.png" title="按下前"><img src="/2020/01/12/微信小程序-1-1-view容器/4.png" title="当hover-stop-propagation设置为false 按下后"><ul><li>可以发现hover-stop-propagation的设置与否可以关系到子组件与父组件的相互影响，当没有设置的时候子组件的样式改变会影响到父组件</li></ul><img src="/2020/01/12/微信小程序-1-1-view容器/5.png" title="当hover-stop-propagation设置为true按下后"><hr><h5 id="scroll-view"><a class="header-anchor" href="#scroll-view">¶</a>scroll-view</h5><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>scroll-x</td><td>boolean</td><td>false</td><td>否</td><td>允许横向滚动</td></tr><tr><td>scroll-y</td><td>boolean</td><td>false</td><td>否</td><td>允许纵向滚动</td></tr><tr><td>upper-threshold</td><td>number/string</td><td>50</td><td>否</td><td>距顶部/左边多远时，触发 scrolltoupper 事件</td></tr><tr><td>lower-threshold</td><td>number/string</td><td>50</td><td>否</td><td>距底部/右边多远时，触发 scrolltolower 事件</td></tr><tr><td>scroll-top</td><td>number/string</td><td></td><td>否</td><td>设置竖向滚动条位置</td></tr><tr><td>scroll-left</td><td>number/string</td><td></td><td>否</td><td>设置横向滚动条位置</td></tr><tr><td>scroll-into-view</td><td>string</td><td></td><td>否</td><td>值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素</td></tr><tr><td>scroll-with-animation</td><td>boolean</td><td>false</td><td>否</td><td>在设置滚动条位置时使用动画过渡</td></tr><tr><td>enable-back-to-top</td><td>boolean</td><td>false</td><td>否</td><td>iOS点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向</td></tr><tr><td>enable-flex</td><td>boolean</td><td>false</td><td>否</td><td>启用 flexbox 布局。开启后，当前节点声明了 <code>display: flex</code> 就会成为 flex container，并作用于其孩子节点。</td></tr><tr><td>scroll-anchoring</td><td>boolean</td><td>false</td><td>否</td><td>开启 scroll anchoring 特性，即控制滚动位置不随内容变化而抖动，仅在 iOS 下生效，安卓下可参考 CSS <code>overflow-anchor</code> 属性。</td></tr><tr><td>bindscrolltoupper</td><td>eventhandle</td><td></td><td>否</td><td>滚动到顶部/左边时触发</td></tr><tr><td>bindscrolltolower</td><td>eventhandle</td><td></td><td>否</td><td>滚动到底部/右边时触发</td></tr><tr><td>bindscroll</td><td>eventhandle</td><td></td><td>否</td><td>滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>];</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        toView: <span class="string">'red'</span>,</span><br><span class="line">        scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * scroll-view api</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    upper: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    lower: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    scroll: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">    tap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; order.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (order[i] === <span class="keyword">this</span>.data.toView) &#123;</span><br><span class="line">                <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">                    toView: order[i + <span class="number">1</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    tapMove: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            scrollTop: <span class="keyword">this</span>.data.scrollTop + <span class="number">20</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--scorllview.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>scroll-view组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>竖向滚动<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">style</span>=<span class="string">"height: 200px;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-y</span></span></span><br><span class="line"><span class="tag">        <span class="attr">bindscrolltoupper</span>=<span class="string">"upper"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindscrolltolower</span>=<span class="string">"lower"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindscroll</span>=<span class="string">"scroll"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-into-view</span>=<span class="string">"&#123;&#123;toView&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-top</span>=<span class="string">"&#123;&#123;scrollTop&#125;&#125;"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">enable-back-to-top</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scroll-with-animation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"green"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_green"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"red"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_red"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"yellow"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"blue"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item bc_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn-area"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"tap"</span>&gt;</span>click me to scroll into view <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"tapMove"</span>&gt;</span>click me to scroll<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"section__title"</span>&gt;</span>横向滚动<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"scroll-view_H"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">scroll-x</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"green"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_green"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"red"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_red"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"yellow"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"blue"</span> <span class="attr">class</span>=<span class="string">"scroll-view-item_H bc_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这里设置了一个上下滚动的view scroll容器，然后滚动的时候会调用回调函数scroll【详见js文件】，到顶和到头的时候会调用upper和lower</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/weui.wxss'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'../../common/common.wxss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** scroll-view **/</span></span><br><span class="line"><span class="selector-class">.scroll-view-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600</span>rpx;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_green</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_green</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_red</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_red</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_yellow</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_yellow</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item</span><span class="selector-class">.bc_blue</span>,</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span><span class="selector-class">.bc_blue</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view_H</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.scroll-view-item_H</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;view组件的一些属性&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#view组件的一些属性&quot;&gt;¶&lt;/a&gt;View组件的一些属性&lt;/h4&gt;
&lt;h5 id=&quot;view&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#view&quot;&gt;
      
    
    </summary>
    
      <category term="微信小程序" scheme="https://shuhaohwang.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="微信小程序" scheme="https://shuhaohwang.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习（1.3）DAO设计模式</title>
    <link href="https://shuhaohwang.github.io/2019/11/21/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%881-3%EF%BC%89DAO%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/"/>
    <id>https://shuhaohwang.github.io/2019/11/21/Java基础学习（1-3）DAO设计模式-1/</id>
    <published>2019-11-21T14:52:18.000Z</published>
    <updated>2019-11-23T02:13:54.309Z</updated>
    
    <content type="html"><![CDATA[<h4 id="dao设计模式"><a class="header-anchor" href="#dao设计模式">¶</a>DAO设计模式</h4><p>DAO设计模式是数据层的操作，可以简化代码，增加程序移植性和易用性。</p><p>在程序编写过程中都是使用实体对象，如User，Hero等，当我们想储存这些对象时，就需要把属性一项一项的拆解出来，混合着JDBC代码进行数据存储。想要从数据库中读取时还要一项一项的读取出来再组合成一个实体对象，<strong>难编写，难维护</strong>。</p><p>而使用DAO设计模式可以很好地解决这些问题。</p><p>DAO设计模式包含：</p><ol><li>DAO接口</li><li>DAO实现类</li><li>DAO工厂类</li><li>实体模型</li><li>数据库链接类</li></ol><br><h5 id="小结："><a class="header-anchor" href="#小结：">¶</a>小结：</h5><p>在实际开发中，我们是要对对象进行操作的。然后可以使用设计一个DAO数据持久层，专门把数据库的一条条数据进行转换成对象，或者专门把对象转换一条条字符串数据存入数据库。这样在实际开发中就不必大段大段的写转换代码，直接从DAO成获取已经成型的对象，或者通过DAO层直接把对象分割成字符串数据存入数据库。</p><hr><h4 id="通过io流实例演示dao层"><a class="header-anchor" href="#通过io流实例演示dao层">¶</a>通过IO流实例演示DAO层</h4><p>DAO设计模式中就是单独分一个层实现对象与数据的相互转换</p><p>按照要求有：</p><h5 id="实现dao接口"><a class="header-anchor" href="#实现dao接口">¶</a>实现DAO接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *保存</span></span><br><span class="line"><span class="comment">    *作用：接收User对象并把它拆解为数据字符串存储起来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *更新</span></span><br><span class="line"><span class="comment">    *作用：通过传入的对象对数据进行更新</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *删除</span></span><br><span class="line"><span class="comment">    *作用：根据id删除指定数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据对象进行删除数据*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">delete</span><span class="params">(User u)</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *根据ID进行查找</span></span><br><span class="line"><span class="comment">    *作用：通过输入的ID对数据库内容进行查询并返回一个对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*查找获取所有内容返回一个list集合*/</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dao实现类-核心"><a class="header-anchor" href="#dao实现类-核心">¶</a>DAO实现类(核心)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.IOforDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"src/user.data"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*简单实现一个工厂来获取IO流BufferedReader对象*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedReader <span class="title">createReader</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        FileReader in = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(in);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *简单实现一个工厂来获取IO流BufferedWriter对象</span></span><br><span class="line"><span class="comment">    *参数 append：true：返回一个不覆盖写入数据的对象</span></span><br><span class="line"><span class="comment">    *  false：返回一个覆盖写入数据的对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedWriter <span class="title">createWriter</span><span class="params">(<span class="keyword">boolean</span> append)</span><span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">        FileWriter out = <span class="keyword">new</span> FileWriter(file,append);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedWriter(out);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*一个专门关闭IO流的方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(BufferedWriter out, BufferedReader in)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(out != <span class="keyword">null</span>)out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(in != <span class="keyword">null</span>)in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写Save方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span></span>&#123;</span><br><span class="line">        BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            out = createWriter(<span class="keyword">true</span>);<span class="comment">//获取一个不能覆盖写入的Writer对象</span></span><br><span class="line">            </span><br><span class="line">            out.write(u.getId()+<span class="string">""</span>);<span class="comment">//整型通过加一个空字符串转换成字符串类型</span></span><br><span class="line">            out.write(<span class="string">","</span>);</span><br><span class="line">            out.write(u.getName());</span><br><span class="line">out.write(<span class="string">","</span>);</span><br><span class="line">out.write(u.getPassword());</span><br><span class="line">out.newLine();<span class="comment">//结尾换行，方便下次数据的添加</span></span><br><span class="line">            </span><br><span class="line">out.flush();<span class="comment">//刷新缓冲流，把字符串数据保存进文件中</span></span><br><span class="line">            out.close();<span class="comment">//写入完毕关闭流</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            close(out.<span class="keyword">null</span>)<span class="comment">//finally块中调用close方法防止因为异常不能正常关闭io流</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写delete方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span> <span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in = createReader();</span><br><span class="line">            out = createWriter();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(String str;(str = in.readline())!=<span class="keyword">null</span>;)&#123;</span><br><span class="line">                String[]arr = str.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(!arr[<span class="number">0</span>].equals(id +<span class="string">""</span>))&#123;<span class="comment">//如果id与传入的参数的id不相同就加入list，从而排除id相同的项</span></span><br><span class="line">                    list.add(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">                out.write(str);</span><br><span class="line">                out.newline();</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            close(out,in);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">delete(u.getId());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*重写更新方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">delete(u);</span><br><span class="line">save(u);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = createReader();</span><br><span class="line"><span class="keyword">for</span>(String str; (str = in.readLine())!=<span class="keyword">null</span>;) &#123;</span><br><span class="line">String[]arr = str.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">if</span>(arr[<span class="number">0</span>].equals(id+<span class="string">""</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(id, arr[<span class="number">1</span>], arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">close(<span class="keyword">null</span>, in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; uList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">in = createReader();</span><br><span class="line"><span class="keyword">for</span>(String str; (str = in.readLine()) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">String[]temp = str.split(<span class="string">","</span>);</span><br><span class="line">uList.add(<span class="keyword">new</span> User(Integer.parseInt(temp[<span class="number">0</span>]),temp[<span class="number">1</span>],temp[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line"><span class="keyword">return</span> uList;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">close(<span class="keyword">null</span>, in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">              </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>小结</strong>：delete方法的一些实现思路<ul><li>该方法中同时使用了读与写</li><li>先读取内容后进行分割后进行判断，如果第一项的id与输入的id相匹配那么说明该项应该被删除，则不计入list中。</li><li>上诉过程结束后，获得了id不含待删除id的list字符串数据</li><li>最后将字符串list集合再一个个写入文件，完成删除操作</li></ul></li></ul><br><h5 id="实体模型"><a class="header-anchor" href="#实体模型">¶</a>实体模型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> i,String n,String pw)</span> </span>&#123;</span><br><span class="line">id = i;</span><br><span class="line">name = n;</span><br><span class="line">password = pw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="使用mysql实现dao层"><a class="header-anchor" href="#使用mysql实现dao层">¶</a>使用Mysql实现DAO层</h4><h5 id="dao实现类-核心-v2"><a class="header-anchor" href="#dao实现类-核心-v2">¶</a>DAO实现类(核心)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.MySQLForDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> demo.model.User;</span><br><span class="line"><span class="keyword">import</span> utils.JDBCUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOImpl</span> <span class="keyword">implements</span> <span class="title">UserDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *保存</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"insert into user values (0,?,?)"</span>);</span><br><span class="line">pst.setString(<span class="number">1</span>, u.getName());</span><br><span class="line">pst.setString(<span class="number">2</span>, u.getPassword());</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *更新</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"update user set name = ?,Password = ? where id = ?"</span>);</span><br><span class="line">pst.setString(<span class="number">1</span>, u.getName());</span><br><span class="line">pst.setString(<span class="number">2</span>, u.getPassword());</span><br><span class="line">pst.setInt(<span class="number">3</span>, u.getId());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*删除根据ID进行删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"delete from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, id);</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"delete from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, u.getId());</span><br><span class="line"><span class="keyword">return</span> pst.executeUpdate();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *根据ID查找</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"select * from user where id = ?"</span>);</span><br><span class="line">pst.setInt(<span class="number">1</span>, id);</span><br><span class="line">rs = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(rs.getInt(<span class="string">"id"</span>),rs.getString(<span class="string">"name"</span>),rs.getString(<span class="string">"password"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *查找所有数据，返回一个对象集合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;User&gt; uList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pst = conn.prepareStatement(<span class="string">"select * from user"</span>);</span><br><span class="line">rs = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(rs.getInt(<span class="number">1</span>),rs.getString(<span class="number">2</span>),rs.getString(<span class="number">3</span>));</span><br><span class="line">uList.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uList;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(conn, pst, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>错误小结</strong><ul><li>在数据库中，使用<code>executeQuery()</code>获得的结果集，每一列的下标不像数组一样是从0开始的，即第一项的下标就为1，而不是0。</li></ul></li></ul><br><h5 id="dao工厂的实现"><a class="header-anchor" href="#dao工厂的实现">¶</a>DAO工厂的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo.IOforDAO.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DAOUtils</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDaoImpl <span class="title">getUDAOImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现DAO工厂后，可以直接获取一个DAO对象，除了使代码简化还能大大提高程序的可维护性</p><p>，例如修改DAO实现类的时候，只需在工厂类中作出修改，而不用在主程序中大篇幅的修改代码</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;dao设计模式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#dao设计模式&quot;&gt;¶&lt;/a&gt;DAO设计模式&lt;/h4&gt;
&lt;p&gt;DAO设计模式是数据层的操作，可以简化代码，增加程序移植性和易用性。&lt;/p&gt;
&lt;p&gt;在程序编写过程中都是使用实体对象，如U
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Java学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java学习总结" scheme="https://shuhaohwang.github.io/tags/Java%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="Java" scheme="https://shuhaohwang.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
