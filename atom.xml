<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-07-17T03:50:47.752Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构学习总结-（5.3）二叉树的性质及推导</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-3%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E6%8E%A8%E5%AF%BC/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/</id>
    <published>2019-07-17T03:03:38.000Z</published>
    <updated>2019-07-17T03:50:47.752Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的性质"><a class="header-anchor" href="#二叉树的性质">¶</a>二叉树的性质</h4><h5 id="性质1：-层级-📝"><a class="header-anchor" href="#性质1：-层级-📝">¶</a>性质1：(层级)📝</h5><ul><li>在二叉树的第<code>i</code>层上<u>至多</u>有2<sup>i-1</sup>个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/1.png"></li><li>即：下层的结点最多是上层结点的2倍</li></ul><hr><h5 id="性质2：-深度-📝"><a class="header-anchor" href="#性质2：-深度-📝">¶</a>性质2：(深度)📝</h5><ul><li>深度为k的二叉树<u>至多</u>有2<sup>k</sup>-1个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/2.png"></li></ul><hr><h5 id="性质3📝："><a class="header-anchor" href="#性质3📝：">¶</a>性质3📝：</h5><ul><li><p>对于任何一颗二叉树，若2度的结点数有n<sub>2</sub>个，则叶子结点n<sub>0</sub>的个数比为n<sub>2</sub>+1</p></li><li><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>n<sub>0</sub></td><td>度数为0的结点数(叶结点数)</td></tr><tr><td>n</td><td>总结点数</td></tr><tr><td>n<sub>1</sub></td><td>度数为1的结点数</td></tr><tr><td>n<sub>2</sub></td><td>度数为2的结点数</td></tr><tr><td>B</td><td>分枝数</td></tr></tbody></table></li></ul><ul><li><p><strong>n<sub>0</sub> = n<sub>2</sub>+1</strong></p></li><li><p><strong>其他公式</strong>🔎：</p><ul><li>分枝数(B)：<ul><li>B = n<sub>1</sub>+2n<sub>2</sub></li><li>B = n - 1(n为总结点数)B</li></ul></li></ul></li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/3.png"></li><li><p><strong>推导过程（n<sub>0</sub> = n<sub>2</sub>+1）📜</strong>：</p><ul><li>因为 B = n -1① 且 n = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub>②</li><li>所以B = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub> - 1 ③所以 n<sub>0</sub> = B -  n<sub>1</sub> -  n<sub>2</sub> + 1④</li><li>又因为B = n<sub>1</sub>+2n<sub>2</sub>  代入④ n<sub>0</sub> = n<sub>1</sub> + 2n<sub>2</sub> -  n<sub>1</sub> -  n<sub>2</sub> + 1</li><li>得n<sub>0</sub> = n<sub>2</sub>+1</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的性质&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树的性质&quot;&gt;¶&lt;/a&gt;二叉树的性质&lt;/h4&gt;
&lt;h5 id=&quot;性质1：-层级-📝&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#性质1：-层级-📝&quot;&gt;¶&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.2）二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-2%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-2）二叉树/</id>
    <published>2019-07-17T02:36:07.000Z</published>
    <updated>2019-07-17T03:01:21.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树-binary-tree"><a class="header-anchor" href="#二叉树-binary-tree">¶</a>二叉树(Binary Tree)</h4><ul><li><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。</p></li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/1.png"><ul><li>只有一个称为根的结点</li><li>除根外，其余结点分为不相交的子集T1和T2，分别称为T的左子树和右子树，且T1和T2本身又都是二叉树</li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/2.png"></li></ul></li><li><p><strong>二叉树与树</strong>：</p></li><li><table><thead><tr><th>二叉树</th><th>树</th></tr></thead><tbody><tr><td>至多只有两个子树</td><td>没有限制子树的个数上限</td></tr><tr><td>子树有左右之分，其次序不能颠倒(有序树)</td><td>子树可有序也可以无序</td></tr><tr><td>具有递归性质</td><td>具有递归性质</td></tr></tbody></table></li></ul><hr><h4 id="二叉树的五中基本形态"><a class="header-anchor" href="#二叉树的五中基本形态">¶</a>二叉树的五中基本形态</h4><ul><li>空树</li><li>只有一个根结点的二叉树</li><li>只有左子树</li><li>只有右子树</li><li>完全二叉树</li></ul><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/3.png"><hr><h4 id="二叉树的优点"><a class="header-anchor" href="#二叉树的优点">¶</a>二叉树的优点</h4><ul><li>普通树相比二叉树代码很难实现</li><li>二叉树结构简单，规律性强</li><li>所有树都可以转为唯一对应的二叉树</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树-binary-tree&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树-binary-tree&quot;&gt;¶&lt;/a&gt;二叉树(Binary Tree)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二叉树是一个连通的无环图，并且每一个顶点的度不大于3
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.1）树的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-1%EF%BC%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/</id>
    <published>2019-07-16T12:34:49.000Z</published>
    <updated>2019-07-16T14:39:53.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="树"><a class="header-anchor" href="#树">¶</a>树</h4><h5 id="概念及定义"><a class="header-anchor" href="#概念及定义">¶</a>概念及定义</h5><ul><li><p>树是一个有层级结构的数据结构</p></li><li><p>定义：树是有n（n&gt;=0）个结点组成的有限集合</p><ul><li>如果n = 0 ，称为空树</li><li>如果n &gt; 0, 则：<ul><li>有一个特点的称之为为根(root)的结点，它只有直接后继，没有直接前驱。</li><li>除根以外的其他结点划分为m(m &gt;= 0)个互不相交的有限集合，T0、T1、…、Tm-1，每个集合又是一颗树，称为根的子树。和根有直接关系的结点分别是这些子树的根。</li></ul></li></ul></li><li><p>特点：每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树。</p></li><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png"></li></ul><h5 id="树结构与线性结构"><a class="header-anchor" href="#树结构与线性结构">¶</a>树结构与线性结构</h5><ul><li><p>线性结构：一对一</p></li><li><p>树结构：一对多</p></li><li><table><thead><tr><th>线性结构</th><th>树结构</th></tr></thead><tbody><tr><td>第一个元素(无前驱)</td><td>根结点(无前驱)</td></tr><tr><td>最后一个元素(无后继)</td><td>多个叶子结点(无后继)</td></tr><tr><td>其他数据元素(一个前驱、一个后继)</td><td>树中的其他结点(一个前驱、多个后继)</td></tr></tbody></table></li></ul><hr><h4 id="树结构的一些术语"><a class="header-anchor" href="#树结构的一些术语">¶</a>树结构的一些术语</h4><ul><li><strong>根</strong>：唯一没有双亲的结点，其他结点都有唯一的双亲<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/2.png"></li></ul></li><li><strong>结点的度</strong>：一个结点含有的子树的个数称为该结点的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png"></li></ul></li><li><strong>树的度</strong>：树结构中，最大的结点的度称为树的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png" title="树的度为3"></li></ul></li><li><strong>分支结点</strong>：度数不为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="分支结点为D、E、J、F、G、A"></li></ul></li><li><strong>叶结点</strong>：度数为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="叶结点为B、C、H、I、P、Q、K、L、M、N"></li></ul></li><li><strong>孩子结点/子结点</strong>：某个<u>结点</u>的子树的根<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="孩子结点为 J、F、G、E、D"></li></ul></li><li><strong>双亲结点/父节点</strong>：若一个结点含有子结点，则这个结点称为其子结点的父结点</li><li><strong>兄弟结点</strong>：同一个双亲结点的孩子结点之间互为兄弟结点</li><li><strong>结点的祖先</strong>：从根到该节点所经分支上的所有节点</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙</li><li><strong>森林</strong>：多个数的集合<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/4.png"></li></ul></li><li><strong>子树森林</strong>：一个结点的所有子树构成的森林</li><li><strong>结点的深度</strong>：结点的祖先个数+1<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/5.png"></li></ul></li><li><strong>结点的高度</strong>：从结点到其子树叶结点经过的最大边数+1，叶结点的高度为1</li><li><strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/7.png"></li></ul></li><li><strong>树的高度</strong>：高度最大的结点的高度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/6.png"></li></ul></li><li><strong>树的深度</strong>：树中结点的最大层次或结点的最大深度</li><li><strong>堂兄弟结点</strong>：双亲在同一层的节点互为堂兄弟</li></ul><ul><li><strong>有序树</strong>：每个结点的子树有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/8.png"></li></ul></li><li><strong>无序树</strong>：每个结点的子树没有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/9.png"></li></ul></li></ul><hr><h4 id="树的类型"><a class="header-anchor" href="#树的类型">¶</a>树的类型</h4><h5 id="树的抽象数据类型"><a class="header-anchor" href="#树的抽象数据类型">¶</a>树的抽象数据类型</h5><ul><li>ADT Tree</li><li>DATA<ul><li>父子关系</li></ul></li><li>Operator<ul><li>Tree()     //初始化</li><li>Tree(definition) //从输入definition中创建树</li><li>Tree(const Tree &amp; T) //复制树</li><li>Node root() // 返回根结点</li><li>int depth()     //获得树的高度</li><li>int size()     //获得树的结点个数</li><li>Node parent(Node p)   //获得结点p的双亲</li><li>Node[] children§  //返回结点P的所有孩子</li><li>Node[] silbings(parent , p) //返回结点p的所有兄弟</li><li>Node find()    //查找结点</li><li>…</li></ul></li><li>endADT</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#树&quot;&gt;¶&lt;/a&gt;树&lt;/h4&gt;
&lt;h5 id=&quot;概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概念及定义&quot;&gt;¶&lt;/a&gt;概念及定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.2）查询子串位置二-KMP算法[难点]</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-2%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E4%BA%8C-KMP%E7%AE%97%E6%B3%95-%E9%9A%BE%E7%82%B9/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-2）查询子串位置二-KMP算法-难点/</id>
    <published>2019-07-14T02:07:22.000Z</published>
    <updated>2019-07-14T02:46:24.592Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的缺陷"><a class="header-anchor" href="#简单-bf-算法的缺陷">¶</a>简单(BF)算法的缺陷</h4><ul><li><strong>简单算法的实现</strong>📝：就让子串与主串进行<u>一个个</u>判断。<ul><li>例如 <code>“acdcda”</code>中找<code>“cda”</code>那么有：①c先与主串中的<code>‘a’</code>比较不匹配 主串后移、②c与主串中的<code>‘c‘</code>匹配，子串后移让d与主串中的<code>‘b’</code>比较。不匹配主串后移、③c与主串中的<code>‘d’</code>比较，匹配子串后移、④a与主串中的<code>‘c’</code>比较，不匹配,主串后移、⑤c与主串中的<code>‘d’</code>不匹配，主串后移、⑥c与子串中的<code>‘c’</code>匹配,子串后移，d与主串的下一个<code>‘d’</code>匹配，子串再后移，a与主串中的下一个<code>‘a’</code>匹配。找到，返回主串中第二个<code>‘c’</code>的位置。</li></ul></li><li><strong>发现问题​</strong>❗️：从上面可以看出，在③开始子串与已经比较过的主串字符又重新比较一次，从而大大的浪费了效率。</li></ul><hr><h4 id="kmp算法"><a class="header-anchor" href="#kmp算法">¶</a>KMP算法</h4><ul><li>正如上面所说的，简单算法，因为在最差的情况下，会进行大量的无意义的比较匹配。而KMP算法的发明者们便想：能否更加比较不匹配所给出的信息，跳过无意义的比较呢？这就是KMP算法的核心。</li></ul><p>–（本文未完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的缺陷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的缺陷&quot;&gt;¶&lt;/a&gt;简单(BF)算法的缺陷&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单算法的实现&lt;/strong&gt;📝：就让子串与主串进行&lt;u&gt;一个个&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.1）查询子串位置算法一—简单算法</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-1%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E7%AE%97%E6%B3%95%E4%B8%80%E2%80%94%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/</id>
    <published>2019-07-14T01:16:48.000Z</published>
    <updated>2019-07-14T02:20:06.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的代码实现及思路"><a class="header-anchor" href="#简单-bf-算法的代码实现及思路">¶</a>简单(BF)算法的代码实现及思路</h4><ul><li><p>算法作用🔍：查找在给定的子串在主串中的位置。例如：子串<code>“llo”</code>在主串<code>“hello”</code>的位置为3。</p></li><li><p>实现思路💡：BF的算法的核心就是子串对主串逐一比较。所以只需用第一个循环来匹配子串的首字符与主串中的字符是否相等，如果相等那么在对子串后面的字符与此时主串的后面的字符进行比较。</p><ul><li>例如：要在<code>“AB CADB CADA BCA”</code>中查找子串<code>“ CADA”</code>则从主串A中第一个开始查找，因为<code>“A”</code>与<code>“ ”</code>不匹配所以子串与主串的下一个字符比较，但也不同所以后移，当到了第三个的时候开始匹配，所以主串的第四个字符与子串第二个比较…主串第五个与子串第三个比较…。但到了主串的第七个字符与子串第4个字符不一样，所以匹配失败，主串后移一位又与子串的第一位开始比较。</li></ul><hr><ul><li><img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/2.png"></li></ul></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; str.size; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str[k] == str.str[j]) &#123;</span><br><span class="line"> j++;</span><br><span class="line"> k++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line"> j = <span class="number">0</span>;</span><br><span class="line"> n++;</span><br><span class="line"> k = n;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">if</span> (j &lt;= str.size)<span class="keyword">return</span> n;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果🔑: <img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/1.png"></p></li></ul></li></ul><hr><h4 id="算法优化🔧："><a class="header-anchor" href="#算法优化🔧：">¶</a>算法优化🔧：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; size &amp;&amp; j &lt; ch.size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == ch.str[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i = i + <span class="number">1</span> - j;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &lt;= ch.size) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的代码实现及思路&quot;&gt;¶&lt;/a&gt;简单(BF)算法的代码实现及思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算法作用🔍：查找在给定的子串在主串中的位置。例
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.3）实现字符串结构、相关操作代码和实现思路</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-3%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E3%80%81%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/</id>
    <published>2019-07-12T03:03:39.000Z</published>
    <updated>2019-07-12T08:26:54.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串结构的实现"><a class="header-anchor" href="#字符串结构的实现">¶</a>字符串结构的实现</h4><ul><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* str;<span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* ch)&#123;</span><br><span class="line">        <span class="comment">/*计算ch长度*/</span></span><br><span class="line">        <span class="keyword">char</span>* temp = ch;</span><br><span class="line">        <span class="keyword">while</span>(*temp++ != <span class="string">'\0'</span>);</span><br><span class="line">        </span><br><span class="line">        str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - ch];<span class="comment">//创建字符串</span></span><br><span class="line">        size = temp - ch - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)str[i] = ch[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串是由字符数组来实现的,所以字符串的构造函数首先要根据<code>const char* ch</code>（传入的字符数组）求得其长度，然后创建足够大的空间，并对其逐一赋值即可完成<code>String</code>类型的创建。</p></li></ul></li></ul><hr><h4 id="相关简单操作的代码实现和实现思路"><a class="header-anchor" href="#相关简单操作的代码实现和实现思路">¶</a>相关简单操作的代码实现和实现思路</h4><ul><li><p>返回指定位置指定长度的子串 <code>subString()</code></p><ul><li><p>实现思路❗️：根据用户输入指定的长度来创建足够大的空间的<code>char* temp</code>用来储存子串，然后用循环从指定位置开始对<code>temp</code>进行赋值，直到长度达到用户给定的长度即可。<strong>并在后面补上一个结束符(’\0’)</strong>,因为这是一个主串中的子串，后尾赋值的时候没有结束符。最后丢入<code>String</code>类型的构造函数中，释放temp的空间，返回新的字符串。</p></li><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,k = pos; i &lt; len;i++,k++)&#123;<span class="comment">//对子串进行逐一赋值</span></span><br><span class="line">        temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    temp[len] = <span class="string">'\0'</span>;<span class="comment">//末尾补上结束符</span></span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;<span class="comment">//释放堆空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;<span class="comment">//返回新的String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/1.png" title="以hello world为例"></p></li></ul></li></ul></li><li><p>重载运算符+=使其实现字符串的拼接</p><ul><li><p>实现思路❗️:拼接顾名思义，是把两个字符串连起来，所以定义一个<code>new_size</code>用来拼接后的字符串长度，只需分别求左右运算数的<code>size</code>相加即可。然后更加这个<code>new_size</code>长度定义一个新的字符串。之后先对左运算数，进行逐一赋值，然后在对右运算数进行赋值。即可完成拼接。</p></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String&amp; <span class="keyword">operator</span>+= (<span class="keyword">const</span> String&amp; str)&#123;</span><br><span class="line">    <span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size+<span class="number">1</span>];<span class="comment">//最后需要一个结束符所以+1</span></span><br><span class="line">    <span class="keyword">if</span>(!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="keyword">this</span>-&gt;size)&#123;temp[i] = <span class="keyword">this</span>-&gt;str[i]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++,i++)&#123;</span><br><span class="line">        temp[i] = str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;str;</span><br><span class="line">    str = temp;</span><br><span class="line">    size = new_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: </p></li></ul></li></ul></li></ul><hr><h4 id="具体完成代码📜："><a class="header-anchor" href="#具体完成代码📜：">¶</a>具体完成代码📜：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>* str;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">String(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line"><span class="keyword">while</span> (*temp++ != <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - str];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;str)<span class="keyword">throw</span> <span class="string">"内存分配失败"</span>;</span><br><span class="line">size = temp - str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)<span class="keyword">this</span>-&gt;str[i] = str[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回指定位置指定长度的子串*/</span></span><br><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= size)<span class="keyword">throw</span> <span class="string">"指定位置超界"</span>;</span><br><span class="line"><span class="keyword">if</span> (pos + len &gt;= size)<span class="keyword">throw</span><span class="string">"待获取子串超界"</span>;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, k = pos; i &lt;= len ; i++, k++) &#123;</span><br><span class="line">temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp[len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line"><span class="keyword">delete</span>[]temp;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重载运算符+=*/</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> String&amp; str) &#123;</span><br><span class="line"><span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;size) &#123; temp[i] = <span class="keyword">this</span>-&gt;str[i]; i++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++, i++) &#123;</span><br><span class="line">temp[i] = str.str[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = temp;</span><br><span class="line">size = new_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(<span class="string">"hello world "</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"原字符串为:"</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">String str2 = str.subString(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"其位置2开始长度为3的字串为 : "</span> &lt;&lt;str2.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">String <span class="title">str3</span><span class="params">(<span class="string">"ShuHao"</span>)</span></span>;</span><br><span class="line">str += str3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符串结构的实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符串结构的实现&quot;&gt;¶&lt;/a&gt;字符串结构的实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具体代码💻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.2）类中的static函数/成员变量、类函数const后缀、mutable</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-2%EF%BC%89%E7%B1%BB%E4%B8%AD%E7%9A%84static%E5%87%BD%E6%95%B0-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0const%E5%90%8E%E7%BC%80%E3%80%81mutable/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/C-进阶学习总结-（2-2）类中的static函数-成员变量、类函数const后缀、mutable/</id>
    <published>2019-07-11T17:26:36.000Z</published>
    <updated>2019-07-12T02:42:38.162Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述在C++类中static函数/变量的特点、类函数const后缀的运用、mutable关键字（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.2）实现字符串strlen和strcpy</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-2%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2strlen%E5%92%8Cstrcpy/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/</id>
    <published>2019-07-10T14:00:43.000Z</published>
    <updated>2019-07-10T14:33:53.583Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现字符串中的简单操作一"><a class="header-anchor" href="#实现字符串中的简单操作一">¶</a>实现字符串中的简单操作一</h4><h5 id="strlen"><a class="header-anchor" href="#strlen">¶</a>strlen()</h5><ul><li><p>作用：返回字符串的长度</p></li><li><p>实现思路：因为在c/c<ins>中字符串是以char*指针来实现的，并且这些字符串中的末尾都有一个‘\0’结束符，所以在c/c</ins>中可以利用指针和地址来求得字符串的长度，首先定义一个临时指针然后用待求字符串长度的字符串对其进行赋值，再用循环对这个临时指针进行自加移动，当判断在某个地址中的数据为‘\0’结束符的时候，再让其与原来的字符串相减，即可得到字符串的长度。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line">    <span class="keyword">while</span>(*temp != <span class="string">'\0'</span>)&#123;temp++;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp - str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/1.png"></p></li></ul></li></ul><hr><h5 id="strcpy"><a class="header-anchor" href="#strcpy">¶</a>strcpy()</h5><ul><li><p>作用：进行字符串复制操作</p></li><li><p>实现思路：因为这个函数本身是实现复制操作，所以可以用原字符串对目标字符串进行逐一赋值即可实现。用一个临时指针存储目标字符串，然后用原字符串对这个临时指针进行逐一修改赋值，然后返回目标字符串即可。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = p;</span><br><span class="line">    <span class="keyword">while</span>((*temp++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/2.png"></p></li></ul></li></ul><hr><h4 id="错误记录："><a class="header-anchor" href="#错误记录：">¶</a>错误记录：</h4><p>在编写<code>strcpy()</code>时，忘记了<code>char*p</code>是一个指针，结果直接运用循环对其进行自加移动赋值修改，然后再返回该指针。</p><ul><li><p>错误代码:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p , <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/3.png"> <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/4.png"></p></li></ul></li></ul><p><strong>错误总结</strong>:上述错误代码中，因为p是一个指针，在循环的时候虽然是进行了逐一修改赋值，但指针也随之移动了，所以结果s不再是指向该字符串的首字符地址，而是指向了未知的末尾地址，从而造成指针p变成野指针。返回的结果也就想当然的是乱码了。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现字符串中的简单操作一&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实现字符串中的简单操作一&quot;&gt;¶&lt;/a&gt;实现字符串中的简单操作一&lt;/h4&gt;
&lt;h5 id=&quot;strlen&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="错误记录" scheme="https://shuhaohwang.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(4.1)字符串</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-4-1-字符串/</id>
    <published>2019-07-10T02:02:07.000Z</published>
    <updated>2019-07-10T14:31:36.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符-串类型定义及概念"><a class="header-anchor" href="#字符-串类型定义及概念">¶</a>(字符)串类型定义及概念</h4><h5 id="串的一些概念"><a class="header-anchor" href="#串的一些概念">¶</a>串的一些概念</h5><ul><li>以<code>(&quot;Hello world&quot;)</code>为例</li><li><strong>主串</strong>：即整个字符串被称为主串。<ul><li><code>str = “Hello World”；</code>str就是主串</li></ul></li><li><strong>子串</strong>：在主串中的一小段。(顺序相同)<ul><li><code>&quot;llo&quot;</code>是主串<code>“Hello World”</code>的字串、<code>“eH”</code>不是该主串的字串(顺序错了)</li></ul></li><li><strong>位置</strong>：某个字符、或字符段的第一个字符位于主串的位置下标。<ul><li>例如字串<code>“llo”</code>在主串<code>&quot;Hello World&quot;</code>的位置为3</li></ul></li><li><strong>串相等</strong>：当两个字符串之间，完全相同(长度相同，每个字符相同且位置相同)称为两个串相等<ul><li><code>”hello world“</code>与<code>“Hello World”</code>不相等(字符不相等)</li></ul></li><li><strong>空串</strong>：串长度为为0的字符串被称为空串。<ul><li>**注意：**空串与空格串不一样，空格串中的空格也算一个字符长度</li></ul></li></ul><hr><h5 id="串的抽象数据类型"><a class="header-anchor" href="#串的抽象数据类型">¶</a>串的抽象数据类型</h5><ul><li>ADT String<ul><li>Data：字符序列，以c/c++为例，<code>char*</code>类型数据，字符序列</li></ul></li><li>Operation：<ul><li><code>bool init(T,char*)</code> //初始化一个字符串</li><li><code>int find(S ,T)</code>    //查找字符串中是否存在字串</li><li><code>String strcat(T , S)</code>//拼接字符串</li><li><code>String subStr(S,pos,size)</code>//将s中的pos位置开始size长度的字串获取</li><li><code>bool inserStr(s,pos,T)</code>//将T插入到s的pos位置</li><li><code>bool deleteStr(S,pos,size)</code>//将S的pos位置开始的size长度的字串删除</li><li><code>bool copy(T,S)</code>//将S拷贝给T</li><li><code>int size()</code>//获得字符串长度</li><li><code>void clear()</code>//清空字符串</li><li>…</li></ul></li><li>endADT</li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符-串类型定义及概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符-串类型定义及概念&quot;&gt;¶&lt;/a&gt;(字符)串类型定义及概念&lt;/h4&gt;
&lt;h5 id=&quot;串的一些概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#串的一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.1）类与构造函数</title>
    <link href="https://shuhaohwang.github.io/2019/07/08/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-1%EF%BC%89%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/07/08/C-进阶学习总结-（2-1）类与构造函数/</id>
    <published>2019-07-08T03:01:08.000Z</published>
    <updated>2019-07-08T07:58:47.375Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++的类中构造函数及默认参数、隐式转换、explicit、参数列表的基本用法和概念（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.5）顺序存储结构队列</title>
    <link href="https://shuhaohwang.github.io/2019/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/06/数据结构学习总结-（3-5）顺序队列/</id>
    <published>2019-07-06T15:42:47.000Z</published>
    <updated>2019-07-06T16:54:23.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序队列算法即实现思路"><a class="header-anchor" href="#顺序队列算法即实现思路">¶</a>顺序队列算法即实现思路</h4><h5 id="顺序储存结构的队列定义-以char类型为例"><a class="header-anchor" href="#顺序储存结构的队列定义-以char类型为例">¶</a>顺序储存结构的队列定义(以char类型为例)</h5><ul><li><p>实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* datas;<span class="comment">//线性表</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//队列容量</span></span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//队首</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//队尾</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    SqQueue(<span class="keyword">int</span> c)&#123;</span><br><span class="line">        capacity = c;</span><br><span class="line">        datas = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/1.png"></li></ul><h5 id="顺序队列"><a class="header-anchor" href="#顺序队列">¶</a>顺序队列</h5><ul><li><p>入队操作</p><ul><li><p>思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == capacity)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：直接让头数值进行自加即可实现出队操作</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    front++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><font color="red"><strong>出现一个问题</strong></font>:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。</p></li></ul><h5 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a>循环队列</h5><ul><li><p>入队操作：</p><ul><li><p>思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：<code>rear = (rear+1)%capacity</code></p><ul><li>算法解释：(以容量为5的队列为例)<ul><li>第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2…第四个为4。</li><li>第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。</li></ul></li></ul></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((rear+<span class="number">1</span>)%capacity == front)<span class="comment">//满队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>满队的处理：这里是用<code>(rear+1)%capacity == front</code>来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3</p></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即<code>front = (front + 1)% capacity</code>。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(front == rear)<span class="comment">//空队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    front = (front + <span class="number">1</span>)% capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span> &#123;</span></span><br><span class="line">T* datas;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">SqQueue(<span class="keyword">int</span> c = <span class="number">10</span>) &#123;</span><br><span class="line">capacity = c;</span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line">rear = front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">datas[rear] = e;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rear == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tr</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">fb(datas[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqQueue&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'a'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'b'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据c入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'c'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据d入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'d'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据e入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'e'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果:<img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序队列算法即实现思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#顺序队列算法即实现思路&quot;&gt;¶&lt;/a&gt;顺序队列算法即实现思路&lt;/h4&gt;
&lt;h5 id=&quot;顺序储存结构的队列定义-以char类型为例&quot;&gt;&lt;a class=&quot;header-anch
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.7)数据类型转换</title>
    <link href="https://shuhaohwang.github.io/2019/07/04/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/07/04/C++进阶学习总结-(1.7)数据类型转换/</id>
    <published>2019-07-03T18:08:30.000Z</published>
    <updated>2019-07-08T04:59:43.141Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中 static_cast、dynamic_cast、const_cast、reinterpret_cast的概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.4）队列及链式队列的实现</title>
    <link href="https://shuhaohwang.github.io/2019/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/03/数据结构学习总结-（3-4）队列/</id>
    <published>2019-07-02T16:28:38.000Z</published>
    <updated>2019-07-03T17:36:21.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="队列的基本概念及定义"><a class="header-anchor" href="#队列的基本概念及定义">¶</a>队列的基本概念及定义</h4><ul><li><p>定义：</p><ul><li>队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。</li></ul></li><li><p>特征：先进先出(FIFO,First In First Out)</p></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/1.png"></li></ul><h5 id="队列的抽象数据类型"><a class="header-anchor" href="#队列的抽象数据类型">¶</a>队列的抽象数据类型</h5><ul><li>ADT Queue</li><li>Data<ul><li>线性关系(a1,a2,…,an)</li></ul></li><li>Operation<ul><li><code>bool push(e)</code>                                入队操作</li><li><code>bool pop()</code>                                    出队</li><li><code>T&amp;front()</code>                                      获得队首数据</li><li><code>bool empty()</code>                               判断队列是否为空</li><li><code>void clear()</code>                                清空队列</li><li>…</li></ul></li></ul><hr><h4 id="链式队列实现算法及思路"><a class="header-anchor" href="#链式队列实现算法及思路">¶</a>链式队列实现算法及思路</h4><ul><li><table><tr><td bgcolor="yellow">入队操作</td></tr></table>* 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。<ul><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/2.png"></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/3.png"></li><li><p>具体代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><table><tr><td bgcolor="yellow">出队操作</td></tr></table>  </li><li><p>思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。</p></li><li><p>具体代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == head)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    Node* p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现情况："><a class="header-anchor" href="#具体代码实现情况：">¶</a>具体代码实现情况：</h4><ul><li><s>入队</s>(完成)<ul><li>push(T e)</li></ul></li><li><s>出队</s>(完成)<ul><li>pop()</li></ul></li><li><s>是否为空</s>(完成)<ul><li>IsEmpty();</li></ul></li><li><s>获得队首元素</s>(完成)<ul><li>getFirst()</li></ul></li><li><s>清空队列</s>(完成)<ul><li>clear()</li></ul></li></ul><hr><h5 id="具体代码："><a class="header-anchor" href="#具体代码：">¶</a>具体代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node* head;</span><br><span class="line">Node* rear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Queue() &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear-&gt;next = p;</span><br><span class="line">rear = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == rear)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head == rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得首元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空队列*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">Node* q = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> rear;</span><br><span class="line"></span><br><span class="line">rear = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ta</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Queue&lt;<span class="keyword">char</span>&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'a'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'b'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'c'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"d数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'d'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.clear();</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"e数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'e'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'f'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"g数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'g'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"h数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'h'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/07/03/数据结构学习总结-（3-4）队列/4.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;队列的基本概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#队列的基本概念及定义&quot;&gt;¶&lt;/a&gt;队列的基本概念及定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列与栈相似，相比栈的先进后出，队列是先进先出为特
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-括号匹配</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/栈的应用-括号匹配/</id>
    <published>2019-07-02T06:12:48.000Z</published>
    <updated>2019-07-02T06:41:25.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="括号匹配"><a class="header-anchor" href="#括号匹配">¶</a>括号匹配</h4><ul><li>对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。</li><li><strong>实现思路</strong>：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。<ul><li>以<code>（{heheda}[123]())</code>为例。</li><li>第一步扫描上方字符串。发现第一个左括号<code>‘(’</code>使其入栈，第二个<code>'{'</code>入栈，发现<code>'}'</code>为右括号，与栈顶数据进行匹配发现，此时栈顶就是<code>'{'</code>与之匹配那么就出栈。（类似消消乐）</li></ul></li></ul><hr><h5 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LKStack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckStr</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">LkStack&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"字符串："</span> &lt;&lt; str &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">/*如果是左括号那么就入栈，等待匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span> || str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span> || str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">']'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'['</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">'&#125;'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'&#123;'</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty()&amp;&amp; str[i] == <span class="string">')'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'('</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号匹配成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CheckStr(<span class="string">"12312()()[]&#123;&#123;&#125;&#125; "</span>);</span><br><span class="line">CheckStr(<span class="string">"&#125;"</span>);</span><br><span class="line">CheckStr(<span class="string">"[()(),hello&#123;&#125;]"</span>);</span><br><span class="line">CheckStr(<span class="string">"test"</span>);</span><br><span class="line">CheckStr(<span class="string">"()(&#125;[]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实验结果</strong>：<img src="/2019/07/02/栈的应用-括号匹配/1.png"></li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;括号匹配&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#括号匹配&quot;&gt;¶&lt;/a&gt;括号匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。&lt;/l
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法性能分析</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/算法性能分析/</id>
    <published>2019-07-02T02:17:36.000Z</published>
    <updated>2019-07-02T03:20:18.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法性能分析"><a class="header-anchor" href="#算法性能分析">¶</a>算法性能分析</h4><h5 id="好的算法应当满足"><a class="header-anchor" href="#好的算法应当满足">¶</a>好的算法应当满足</h5><ul><li>正确性：算法应能满足具体问题的需求</li><li>可读性：算法应应易于阅读和理解</li><li>健壮性：输入数据非法时，算法也能适当作出反应或进行处理</li><li><strong>高效性</strong>：算法执行时间短，占用存储空间少</li></ul><hr><h5 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">¶</a>时间复杂度</h5><ul><li>程序：算法在计算机上的实现</li><li>程序的执行时间取决于如下因素：<ul><li>算法本身</li><li>问题规模</li><li>编程语言</li><li>硬件性能</li></ul></li><li>选择一个“基本操作”，分析基本操作执行的次数</li><li>用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。</li><li>算法的<font color="red">时间复杂度</font>为：和f(n)同阶的简化无穷大量T(n) = O(f(n))</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;算法性能分析&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法性能分析&quot;&gt;¶&lt;/a&gt;算法性能分析&lt;/h4&gt;
&lt;h5 id=&quot;好的算法应当满足&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#好的算法应当满足&quot;&gt;¶&lt;/a&gt;好的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表应用- 两数相加</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/链表应用-两数相加/</id>
    <published>2019-06-29T15:29:57.000Z</published>
    <updated>2019-06-30T07:28:25.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两数相加"><a class="header-anchor" href="#两数相加">¶</a>两数相加</h4><ul><li>问题：<ul><li>给定两个<strong>非空</strong>链表来表示两个非负整数。位数按照<strong>逆序</strong>方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。<ul><li>示例：<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出: 7 -&gt; 0 -&gt; 8</li><li>原因: 342 + 465 = 807</li></ul></li></ul></li></ul></li></ul><hr><h5 id="一些算法的思路："><a class="header-anchor" href="#一些算法的思路：">¶</a>一些算法的思路：</h5><ol><li><p>先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位…以此类推直到把所以值都后插入链表中。</p></li></ul></li></ol><ol start="2"><li><p>转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。</p></li></ul></li></ol><ol start="3"><li>最后一步把相加的结果再<code>ToLKlist()</code>用变为链表。</li></ol><hr><h5 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lklist</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Lklist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = <span class="number">0</span>;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除第一个数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得第一个元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为空链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*转换为数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数字转换为链表*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两数相加核心代码*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">TwoNumberAdd</span><span class="params">(Lklist num1, Lklist num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = number(num1);</span><br><span class="line"><span class="keyword">int</span> b = number(num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ToLKlist(a + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">Lklist s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入第二个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">s = TwoNumberAdd(ToLKlist(a), ToLKlist(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = s.Getlength();</span><br><span class="line"><span class="keyword">while</span> (!s.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.getfirst();</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.deletefirst();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/1.png"></li></ul><hr><h4 id="标准参考答案："><a class="header-anchor" href="#标准参考答案：">¶</a>标准参考答案：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumber</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ListNode* h = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode** t = &amp;h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l1!=<span class="literal">nullptr</span>||l2!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line"></span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">t = (&amp;node-&gt;next);</span><br><span class="line"></span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(carry % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(ListNode*&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">x = l-&gt;val;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="参考答案的核心算法思路："><a class="header-anchor" href="#参考答案的核心算法思路：">¶</a><strong>参考答案的核心算法思路：</strong></h5><ul><li><code>ListNode* addTwoNumber(ListNode* l1, ListNode* l2)</code></li><li>这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。<ul><li>第一步：<ul><li>取出两个链表中的第一个元素2和5。</li></ul></li><li>第二步：<ul><li>让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7</li></ul></li><li>第三步：<ul><li>把结果7模上10并<code>push_back</code>进结果链表。此时结果为7并且是结果链表的第一个数据</li><li>然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。</li></ul></li><li>第四步：<ul><li>循环上面的步骤</li><li>第二次循环中4和6的和是10，模上10取余后的结果为0，<code>push_back</code>进结果链表作为第二个数据</li><li>因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位</li></ul></li></ul></li><li>总体来看，首先因为题目描述为 <strong>位数按照逆序方式储存</strong>，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。</li></ul><hr><h5 id="个人实现代码优化后："><a class="header-anchor" href="#个人实现代码优化后：">¶</a>个人实现代码优化后：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LKlist</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LKlist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line">LNode* t = head;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"><span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"> <span class="keyword">delete</span> head-&gt;next;</span><br><span class="line"> head-&gt;next = p;</span><br><span class="line"> length--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(LKlist&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">LKlist::LNode* T;</span><br><span class="line"><span class="keyword">if</span> (l.head-&gt;next) &#123;</span><br><span class="line">x = l.head-&gt;next-&gt;data;</span><br><span class="line">T = l.head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> l.head-&gt;next;</span><br><span class="line">l.head-&gt;next = T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LKlist <span class="title">addTwoNumber</span><span class="params">(LKlist&amp; l1, LKlist&amp; l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">LKlist h;</span><br><span class="line"><span class="keyword">while</span> (!l1.IsEmpty() || !l2.IsEmpty()) &#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line">h.push_back(sum % <span class="number">10</span>);</span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">h.push_back(carry % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两数相加&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#两数相加&quot;&gt;¶&lt;/a&gt;两数相加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;问题：
&lt;ul&gt;
&lt;li&gt;给定两个&lt;strong&gt;非空&lt;/strong&gt;链表来表示两个非负整数。位数按照&lt;strong&gt;逆序&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="https://shuhaohwang.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法题" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-进制的转换</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/栈的应用-进制的转换/</id>
    <published>2019-06-29T12:32:55.000Z</published>
    <updated>2019-06-29T13:23:23.375Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数制转换"><a class="header-anchor" href="#数制转换">¶</a>数制转换</h4><ul><li><p>以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。</p></li><li><p>例如：<img src="/2019/06/29/栈的应用-进制的转换/1.png"></p></li><li><p>结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//n为十进制数，b为将要转的进制数</span></span><br><span class="line">    Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>；<span class="comment">//定义一个栈</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(n%b);<span class="comment">//获取余数并入栈</span></span><br><span class="line">        n = n/b;<span class="comment">//更新n</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty())&#123;<span class="comment">//出栈并输出。直至为空栈</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();<span class="comment">//获得栈顶元素</span></span><br><span class="line">        <span class="built_in">stack</span>.pop();<span class="comment">//每输出一个就出栈一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********链栈实现************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Stack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*判断是否为空栈*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据转换*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>.push(n % b);</span><br><span class="line">n = n / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ChangeNumber(<span class="number">75</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/06/29/栈的应用-进制的转换/2.png"></p></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数制转换&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数制转换&quot;&gt;¶&lt;/a&gt;数制转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++ vector容器常用操作和内存释放</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/C-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/C-vector容器常用操作和内存释放/</id>
    <published>2019-06-28T16:38:09.000Z</published>
    <updated>2019-06-29T01:18:25.728Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-对字符串的处理"><a class="header-anchor" href="#一-对字符串的处理">¶</a>一、对字符串的处理</h4><ul><li>对字符串每一个字符进行遍历修改操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> ifo = <span class="string">"ShuHaoHwang"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = ifo.begin(); iter != ifo.end(); iter++) &#123;</span><br><span class="line">*iter = <span class="built_in">toupper</span>(*iter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ifo &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二-查找配置项信息及内存释放"><a class="header-anchor" href="#二-查找配置项信息及内存释放">¶</a>二、查找配置项信息及内存释放</h4><ul><li>用迭代器及<code>vector</code>容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用<code>vector</code>进行内存释放。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">conf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> confname[<span class="number">40</span>];<span class="comment">//配置项名</span></span><br><span class="line"><span class="keyword">char</span> confid[<span class="number">100</span>];<span class="comment">//配置项信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getifo</span><span class="params">(<span class="built_in">vector</span>&lt;conf*&gt;&amp; a, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (iter = a.begin(); iter != a.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>((*iter)-&gt;confname, s) == <span class="number">0</span>) &#123;<span class="comment">//如果找到对应配置项名，就返回其配置项的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (*iter)-&gt;confid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">conf* server = <span class="keyword">new</span> conf;</span><br><span class="line">conf* server2 = <span class="keyword">new</span> conf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名1*/</span></span><br><span class="line">strcpy_s(server-&gt;confname,<span class="keyword">sizeof</span>(server-&gt;confname),<span class="string">"ServerName"</span>);</span><br><span class="line"><span class="comment">/*配置信息1*/</span></span><br><span class="line">strcpy_s(server-&gt;confid, <span class="keyword">sizeof</span>(server-&gt;confid), <span class="string">"1区"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confname, <span class="keyword">sizeof</span>(server2-&gt;confname), <span class="string">"ServerID"</span>);</span><br><span class="line"><span class="comment">/*配置信息2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confid, <span class="keyword">sizeof</span>(server2-&gt;confid), <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt; cinfo;</span><br><span class="line">cinfo.push_back(server);<span class="comment">//把结构指针放入容器</span></span><br><span class="line">cinfo.push_back(server2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找信息*/</span></span><br><span class="line"><span class="keyword">char</span>* temp;</span><br><span class="line">temp = getifo(cinfo, <span class="string">"ServerName"</span>);</span><br><span class="line"><span class="keyword">if</span> (temp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ServerName: "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*释放内存*/</span></span><br><span class="line"><span class="keyword">for</span> (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> (*iter);<span class="comment">//因为*iter是一个指针</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cinfo.clear();<span class="comment">//最后清空容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-对字符串的处理&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一-对字符串的处理&quot;&gt;¶&lt;/a&gt;一、对字符串的处理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对字符串每一个字符进行遍历修改操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++迭代器的失控范例和解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/06/28/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/28/C-迭代器的失控范例和解决方案/</id>
    <published>2019-06-28T03:54:43.000Z</published>
    <updated>2019-06-28T10:41:17.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器失控范例"><a class="header-anchor" href="#迭代器失控范例">¶</a>迭代器失控范例</h4><h5 id="情形一："><a class="header-anchor" href="#情形一：">¶</a>情形一：</h5><ul><li><p>很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对<code>vector</code>容器进行<code>push_back()</code>操作、对<code>vector</code>容器进行插入操作、删除操作。都会使<code>end()</code>函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者下面这种情况</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.insert(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/1.png"></p></li></ul></li><li><p>在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//添加元素后直接跳出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再进行一次迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/2.png"></p></li></ul></li><li><p>如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        iter = arrays.insert(iter,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/3.png"></p></li><li><p>**实现思路:**因为<code>arrays.insert()</code>的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以<code>end()</code>的值没有发生变化)。多次更新迭代器的起始<code>begin()</code>的值，从而使迭代器类型的指向不会失控。</p></li></ul></li><li><p>同样的如果使用<code>push_back()</code>:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        </span><br><span class="line">        arrays.push_back(<span class="number">100</span>);<span class="comment">//不断更新iter的值起始</span></span><br><span class="line">        iter = arrays.begin()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/4.png"></p></li></ul></li><li><p>**总体：**即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。<strong><em>弊端</em></strong>：麻烦，代码较繁杂。</p></li></ul><hr><h5 id="情形二："><a class="header-anchor" href="#情形二：">¶</a>情形二：</h5><ul><li><p>如果在某个时候要对容器进行清空操作，多数下使用容器自带的<code>clear()</code>函数即可。但在某些特殊情况下，要对<code>vector</code>容器的某些元素进行删除，就得使用容器自带的`</p><p>`函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用结果<img src="/2019/06/28/C-迭代器的失控范例和解决方案/5.png"></p></li></ul></li><li><p>如果真的要进行这样的操作可以这样做：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">    iter = arrays.erase(iter);<span class="comment">//直接让erase函数来更新迭代器指向的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for版</span></span><br><span class="line"><span class="keyword">for</span>(iter; iter != arrays.end(); )&#123;</span><br><span class="line">    iter = arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果： <img src="/2019/06/28/C-迭代器的失控范例和解决方案/6.png"></p></li><li><p>**实现思路：**因为<code>erase()</code>函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。</p></li></ul></li><li><p><strong>此情形更好的实现版本</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!arrays.empty())&#123;<span class="comment">//如果不为空就继续</span></span><br><span class="line">    <span class="keyword">auto</span> iter = arrays.begin();<span class="comment">//每开始一轮循环就更新迭代器的指向。</span></span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;迭代器失控范例&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#迭代器失控范例&quot;&gt;¶&lt;/a&gt;迭代器失控范例&lt;/h4&gt;
&lt;h5 id=&quot;情形一：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#情形一：&quot;&gt;¶&lt;/a&gt;情形一：&lt;/h
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.6）迭代器</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/C-进阶学习总结-（1-6）迭代器/</id>
    <published>2019-06-26T05:28:56.000Z</published>
    <updated>2019-06-28T02:25:40.545Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述迭代器的基本概念、实质、及用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
