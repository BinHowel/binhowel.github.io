<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-08-22T07:42:47.118Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构学习总结-（6.7）深度优先搜索(邻接矩阵)</title>
    <link href="https://shuhaohwang.github.io/2019/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-7%EF%BC%89%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/</id>
    <published>2019-08-21T13:26:44.000Z</published>
    <updated>2019-08-22T07:42:47.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵的dfs-深度优先搜索-代码实现及思路"><a class="header-anchor" href="#邻接矩阵的dfs-深度优先搜索-代码实现及思路">¶</a>邻接矩阵的DFS(深度优先搜索)代码实现及思路</h4><ol><li><strong>实现邻接矩阵DFS算法的前提</strong></li></ol><ul><li><p>思路：要实现邻接矩阵的DFS算法，首先就要在邻接矩阵的结构中设置一个标记数组，用来对应顶点数组在遍历过程中的访问情况，即已经访问过的顶点将被标记已被访问，没有访问的将被标记未访问。</p></li><li><p>代码1：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"> ....</span><br><span class="line">     </span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;Mark;<span class="comment">//标记数组</span></span><br><span class="line">     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建标记数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_mark</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//避免重复创建+验证</span></span><br><span class="line">    <span class="keyword">if</span>(Mark.size() != Vertex.size())<span class="keyword">return</span>;<span class="comment">//Vertex是顶点数组</span></span><br><span class="line">    </span><br><span class="line">    Mark.resize(Vertex.size(),<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><strong>遍历实现DFS</strong></li></ol><ul><li><p>思路：根据标识数组来确定是否要访问，函数参数可以更加顶点数组来指定结点开始，并可以通过函数指针作为参数之一多样化的去遍历图</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Mark.size())<span class="keyword">return</span>;</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    vistit(Vertex[ID]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Vertex.size(); k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edges[ID][k] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[k])</span><br><span class="line">                DFS(k,visit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>代码解析</strong></p><table><thead><tr><th style="text-align:center">Mark/Vertex</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">false</td></tr></tbody></table><ul><li>邻接矩阵</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><ul><li>第一步<code>DFS(unsigned int ID,void(*visit)(const VT&amp; vertex))</code><ul><li>Mark[0] = true；</li><li>输出了A</li><li>Edge[0] [0]不输出，输出B,C,D</li></ul></li></ul><hr><ol start="3"><li>堆栈实现</li></ol><ul><li><p>思路：通过堆栈来模拟递归实现</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    create_mark();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vertex.size(); i++)&#123;</span><br><span class="line">        DFS_(i,visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(ID);</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">auto</span> v = s.top();s.pop();</span><br><span class="line">        visit(Vertex[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; Vertex.size(); w++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edge[ID][w] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[w])&#123;</span><br><span class="line">                s.push(w);</span><br><span class="line">                Mark[w] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵的dfs-深度优先搜索-代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接矩阵的dfs-深度优先搜索-代码实现及思路&quot;&gt;¶&lt;/a&gt;邻接矩阵的DFS(深度优先搜索)代码实现及思路&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.6）图的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-6%EF%BC%89%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/20/数据结构学习总结-（6-6）图的遍历/</id>
    <published>2019-08-20T03:53:51.000Z</published>
    <updated>2019-08-22T07:47:14.507Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的遍历-图的遍历是图的基本运算"><a class="header-anchor" href="#图的遍历-图的遍历是图的基本运算">¶</a>图的遍历（图的遍历是图的基本运算）</h4><ul><li>定义：从已给的连通图中的某一个顶点出发，沿着一些边去访问遍历图中所有的顶点，且使每个顶点仅被访问一次</li><li>实质：找每个顶点的邻接点的过程</li></ul><hr><h4 id="遍历算法"><a class="header-anchor" href="#遍历算法">¶</a>遍历算法</h4><ul><li>深度优先搜索(DFS)<ul><li>类似树的先序遍历</li></ul></li><li>广度优先搜索(BFS)<ul><li>类似树的层次遍历</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的遍历-图的遍历是图的基本运算&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图的遍历-图的遍历是图的基本运算&quot;&gt;¶&lt;/a&gt;图的遍历（图的遍历是图的基本运算）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：从已给的连通图中的某一个顶点出发，沿着一些边去访
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.5）图的实现-邻接表</title>
    <link href="https://shuhaohwang.github.io/2019/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-5%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/</id>
    <published>2019-08-17T16:31:21.000Z</published>
    <updated>2019-08-19T13:02:41.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接表"><a class="header-anchor" href="#邻接表">¶</a>邻接表</h4><p>邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承载，通俗点讲，就是把一堆链表用顺序表进行存储的结构。</p><img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/1.png"><hr><h5 id="邻接表的实现及思路"><a class="header-anchor" href="#邻接表的实现及思路">¶</a>邻接表的实现及思路</h5><p><strong>邻接表的结构</strong></p><ul><li><p>思路：邻接表结构是由一个顶点结点数组，和各个邻接点组成的，其中顶点数组中含有顶点数据和指向邻接点的链域，而邻接点由邻接点域(对应顶点数组的顶点下标)和顶点所连接的其他顶点的邻接点地址。所以实现邻接表结构，首先就要有顶点数组和邻接点结构。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*邻接点结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点数组下标</span></span><br><span class="line">        Einfo info;<span class="comment">//保存权重</span></span><br><span class="line">        Edge_Node* next;<span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">        </span><br><span class="line">        Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id,Einfo info):ID(id),info(info),next(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*顶点数组元素结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VerTex_Node</span>&#123;</span></span><br><span class="line">       VT v_data;<span class="comment">//顶点数据</span></span><br><span class="line">       Edge_Node* Edge;</span><br><span class="line">       </span><br><span class="line">       VerTex_Node(VT v):v_data(v),Edge(<span class="literal">nullptr</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VerTex_Node&gt;Vertexs;<span class="comment">//顶点数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;</span><br><span class="line">    <span class="keyword">bool</span> undirected;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>添加顶点</strong></p><ul><li><p>思路：直接进行把顶点加入顶点数组即可</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span></span>&#123;</span><br><span class="line">    Vertexs.push_back(<span class="keyword">new</span> VerTex_Node(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>填加边</strong></p><p>思路：这里要注意的时，邻接表中的邻接点是以链表结合数组进行实现的，所以在添加边的时候，要对边结点的链域进行处理，这里可以采用链表中的前插法，邻接点一个个插入顶点数组的链域之间。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2,Einfo info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id1].Edge;</span><br><span class="line">    Vertexs[id1].Edge = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id2].Edge;</span><br><span class="line">    Vertexs[id2].Edge = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>修改边的权值</strong></p><ul><li><p>思路：这个操作的思路比较明确，更加要修改的边，通过循环遍历该起始点的顶点数组中的链域结构即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1,<span class="keyword">const</span> <span class="keyword">int</span> id2,<span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id1].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id2)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id2].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id1)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span> &#123;</span></span><br><span class="line"><span class="comment">/*邻接表结构-边结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点集的下标</span></span><br><span class="line"></span><br><span class="line">Einfo info;<span class="comment">//权重</span></span><br><span class="line">Edge_Node* next;</span><br><span class="line">Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id, Einfo info) :ID(id), info(info), next(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶点结点结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VT v_data;</span><br><span class="line">Edge_Node* Edge = <span class="literal">nullptr</span>;</span><br><span class="line">Vertex_Node(VT v) :v_data(v) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vertex_Node&gt; VerTexs;<span class="comment">//顶点集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>) :undirected(undirected), Num_Edge(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> VerTexs[i].v_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span> </span>&#123;</span><br><span class="line">VerTexs.push_back(Vertex_Node(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id1, <span class="keyword">unsigned</span> <span class="keyword">int</span> id2, Einfo info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插*/</span></span><br><span class="line">p-&gt;next = VerTexs[id1].Edge;</span><br><span class="line">VerTexs[id1].Edge = p;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;next = VerTexs[id2].Edge;</span><br><span class="line">VerTexs[id2].Edge = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1, <span class="keyword">const</span> <span class="keyword">int</span> id2, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = VerTexs[id1].Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id2)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = VerTexs[id2].Edge;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id1)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Agraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Edge_Node* p = e.Edge;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;ID &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;info &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接表:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Agraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> VerTexs.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：<img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/2.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接表&quot;&gt;¶&lt;/a&gt;邻接表&lt;/h4&gt;
&lt;p&gt;邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.8)临时对象处理和程序优化探讨</title>
    <link href="https://shuhaohwang.github.io/2019/08/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-8-%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E5%92%8C%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%8E%A2%E8%AE%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/17/C-进阶学习总结-2-8-临时对象处理和程序优化探讨/</id>
    <published>2019-08-17T13:00:49.000Z</published>
    <updated>2019-08-17T13:21:17.851Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述临时对象处理方案、程序优化等（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="性能优化" scheme="https://shuhaohwang.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.4）图的实现-邻接矩阵</title>
    <link href="https://shuhaohwang.github.io/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-4%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/</id>
    <published>2019-08-16T03:57:14.000Z</published>
    <updated>2019-08-16T12:29:48.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵"><a class="header-anchor" href="#邻接矩阵">¶</a>邻接矩阵</h4><p>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。</p><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"><p>该存储结构，是借助线性代数的邻接矩阵来表示图的结构。</p><hr><h4 id="具体实现和思路"><a class="header-anchor" href="#具体实现和思路">¶</a>具体实现和思路</h4><ul><li><p><strong>邻接矩阵实现：</strong></p><ul><li><p>思路：邻接矩阵的实现是要借助二维数组来实现，在C++中可以使用vector来代替二维数组，从而实现矩阵。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edge<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirecter(undirected)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加顶点/获得顶点总数：</strong></p><ul><li><p>思路：跟边集构建一样，使用vector进行存储顶点数据</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    VerTex.push_back(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_Vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VerTex.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建邻边矩阵：</strong></p><ul><li><p>思路：因为邻边矩阵是一个NXN的方形矩阵(N为顶点数量)，所以在构建邻边矩阵的时候，要先根据顶点总数来创建代表邻边矩阵的二维数组。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_MGraph</span><span class="params">(Einfo&amp; definfo = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*用来防止多次创建邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N_Vertex = Get_n_Vertex();</span><br><span class="line">        Edge.resize(N_Vertex,<span class="built_in">vector</span>&lt;Einfo&gt;(N_Vertex,definfo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加边</strong></p><ul><li><p>思路：因为邻接矩阵是一个二维数组，所以添加边的时候直接把顶点下标当做邻接矩阵的坐标位置进行编写即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp;info = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*要先创建邻接矩阵才能实现添加边操作*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())</span><br><span class="line">      Create_MGraph();</span><br><span class="line">    </span><br><span class="line">    Edge[i][j] = info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">        Edge[j][i] = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码"><a class="header-anchor" href="#具体代码">¶</a>具体代码</h4><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/2.png"><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">MGraph</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;Vertex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edges; <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//标记是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点总数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Vertex.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_Mgraph</span><span class="params">(<span class="keyword">const</span> Einfo&amp; definfo = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size()) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n_vertex = Get_n_vertex();</span><br><span class="line"></span><br><span class="line">Edges.resize(n_vertex, <span class="built_in">vector</span>&lt;Einfo&gt;(n_vertex, definfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; Vertex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo info)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size())</span><br><span class="line">create_Mgraph();</span><br><span class="line"></span><br><span class="line">Edges[i][j] = info;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edges[j][i] = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Mgraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : Vertex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Mgraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"></p></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接矩阵&quot;&gt;¶&lt;/a&gt;邻接矩阵&lt;/h4&gt;
&lt;p&gt;用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。&lt;/p&gt;
&lt;img s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.3）图的实现边表</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-3%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-3）图的实现边表/</id>
    <published>2019-08-15T13:26:14.000Z</published>
    <updated>2019-08-15T15:38:47.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边表"><a class="header-anchor" href="#边表">¶</a>边表</h4><ul><li>边表是把图的顶点，和边分别用顺序表进行存储的结构</li><li>这种存储结构是最简单、最容易实现的图存储结构</li><li>缺点：如果边的数目过大，会使效率降低</li></ul><hr><h4 id="代码实现及思路"><a class="header-anchor" href="#代码实现及思路">¶</a>代码实现及思路</h4><ul><li><p>边表结构</p><ul><li><p>思路：因为边表是通过两个顺序表分别存储顶点集和边集的存储结构，所以在实现时可以通过创建顶点集和边集的结构，其中边集要有两个顶点在顶点集中的下标数值，和该边对应的权值。其中顺序表可以通过C++内置的vector结构实现。</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt; <span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*实现边集结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="comment">/*边两头的顶点在顶点集的下标*/</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        Einfo info;<span class="comment">//用来存储权的数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*边集构造函数*/</span></span><br><span class="line">        Edge(<span class="keyword">int</span> i,<span class="keyword">int</span> j,Einfo info):x(i),y(j),info(info)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;Edges;<span class="comment">//边集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> undirected;<span class="comment">//用来标记是否为无向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*边表构造函数(默认为无向表)*/</span></span><br><span class="line">     ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirecter)&#123;&#125;; </span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加顶点</p><ul><li><p>思路：直接通过对vector结构进行操作添加即可</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;VerTex.push_back(vertex);&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加边</p><ul><li><p>思路：跟添加顶点操作一致</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;Edges.push_back(Edge(i,j,info));&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="代码实现："><a class="header-anchor" href="#代码实现：">¶</a>代码实现：</h4><img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/1.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* VT 顶点数据</span></span><br><span class="line"><span class="comment">* Einfo 边数据类型(权)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">Einfo info;</span><br><span class="line">Edge(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo inf) :x(i), y(j), info(inf) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt; VerTex;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; Edges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//判断是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*默认为有向图*/</span></span><br><span class="line">ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加顶点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; VerTex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加边*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123; Edges.push_back(Edge(i, j ,info)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载运算符*/</span></span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> VerTex[i];&#125;</span><br><span class="line">VT&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> VerTex[i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_VT</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> VerTex.size(); &#125;</span><br><span class="line"><span class="comment">/*获得边的数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_e</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> Edges.size(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : VerTex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"边："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="string">" "</span> &lt;&lt; e.y &lt;&lt; <span class="string">" "</span> &lt;&lt; e.info &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ElistGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.get_n_VT() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.get_n_e() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>实验结果：<img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/2.png"></p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#边表&quot;&gt;¶&lt;/a&gt;边表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;边表是把图的顶点，和边分别用顺序表进行存储的结构&lt;/li&gt;
&lt;li&gt;这种存储结构是最简单、最容易实现的图存储结构&lt;/li&gt;
&lt;li&gt;缺点：如
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.2）图的抽象数据类型</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-2%EF%BC%89%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-2）图的抽象数据类型/</id>
    <published>2019-08-15T13:05:08.000Z</published>
    <updated>2019-08-15T13:25:09.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的抽象数据类型"><a class="header-anchor" href="#图的抽象数据类型">¶</a>图的抽象数据类型</h4><ul><li>ADT Graph</li><li>Data     V是具有相同特性的数据元素的集合名称为顶点集</li><li>Relation<ul><li>R = {VR}</li><li>VR = {&lt;V,W&gt;|V,W∈V且P(V,W) &lt;V,W&gt;表示从V，W的弧，P(v,w)定义了弧的&lt;v,w&gt;的意义}</li></ul></li><li>Operation<ul><li>createGraph(&amp;G,V,VR)<ul><li>初始条件：V是图的顶点集，VR是图中边/弧的集合</li><li>操作结果：按V和VR的定义构造图G</li></ul></li><li>DFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>深度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li><li>BFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>广度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li></ul></li></ul><hr><h4 id="图的数据存储结构"><a class="header-anchor" href="#图的数据存储结构">¶</a>图的数据存储结构</h4><ul><li>边表</li><li>数组表示法(邻接矩阵)</li><li>邻接表</li><li>十字链表(有向图)</li><li>多重邻接表(无向图)</li></ul><p>– (本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的抽象数据类型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图的抽象数据类型&quot;&gt;¶&lt;/a&gt;图的抽象数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ADT Graph&lt;/li&gt;
&lt;li&gt;Data     V是具有相同特性的数据元素的集合名称为顶点集&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.7）左值和右值、左右值引用、std::move()函数</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC%E3%80%81%E5%B7%A6%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81std-move-%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/C-进阶学习总结-（2-7）左值和右值、左右值引用、std-move-函数/</id>
    <published>2019-08-14T18:10:46.000Z</published>
    <updated>2019-08-15T08:24:27.816Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19D5r2GRS//Mmr7n8v7d049iuC4ZJmY/mNbQ2fIdYaPxtTljM/RNaXV6mqBIn7MVkwsDbVgGKlAcrkne5pzRlH+Ud4Bq4qbRMuJkwWfcp0p/BjKNJRm5jP+AM93xbTde+zV3mVGx/iLDhRbgqNhQSLjKywArZDf1M8mA+8xHuLHf61lCYS4DWYkdAfuHEPLn6sh6Wkv9Ooy6exapkS5Aaoggj0Fla3O8ZD9IWdlFtc/Q0649JEaTEoscxtUjXVvYcEXFRvFUrF2zp0giVS1WJvfCRFvXi1vfy9JB3T/ychmHFgQqLbl5U6pf+AQqNGL7ERP3N/yloBLoO2xqcSRklaregIqLfwU97ICkL7vHiZmbA+DT8mmCuHbP3BnkRYu4zlKfp3eUjhV1ehzvNqu9r3P36RVvE7iRUBtFWmMmYhjOsB58yEOUnj/pel2NxUEtzPZSkdanUEV//2eRnd3+gDYk1WsY3xUJxdfC0m3N51Y83JKpguYlfxr6TlBNjdsWvUuEbgA9ZyydoWdknhn99pwdEnWpOVqTaTi5CE48Re0r/UvF7Q83u5DNIoq4LSRSXgWvN+CQv/McKHy9MVkRuu4LjqnwWiwV7s+/OdYd0uS6xy6RORkNXp6yJItYszviymuf/sqLCGlsuHvY+BafC7GdulxokrzpjNg1u59SNAsZP9p49NkDUmnlRPTouRXK+7MnyECJVnQxuYUklY98M+6iUQvL0zuKuGYaYWaenWLNouaGGnCBLr6Ul2mzqmzAW8vcvQ2dwFNhElxPoWoNF8iMu525P4q/eaHv+bgzxnsDd65s/KMuYkJvrMtBvECoU1Fp7rlM6EFt6WGgUMbRvk5+fxkrMVmVQnLYd3/l++Uqdv+KJme6T/spSRcRqj6A9rQ3iZIcJVDRgf7cbicRBDcLPX2Qx5eA4frFaKTlKdIe0KcImtUqye2BG2MSp71wjWKBkx9QRP5henGEDEcGJYPW4LELi4MAtGSBWOs8MILdFJ5ugmiYwSuorWty7DK9sQTwZpT86xdpMMyX4IbbQ/PiKA4Q5LWUcXfPkgmTSpqZCrPbuaNSa6qG6o1SY4esUOioaiGdzjvAvFV9CeDSdz+fej3OxFRFNielOJejnrJuZ2c2JumIaYQ27zHmbw/sbL2ceDUG81qtN8wDHsIB7PjlHzSOt6exaLdSGBxQuIRpWlAmHDuxkPcPEgFYa6D/jww2PcEZwOh8stEYFopBUtt72JeMA1ZVQLOGk/BTHX4iYDt4tiFx3zES4SOJOWahcsHJVVEOb1T12Dc6vU/RXmFJs1q2tLVqTu8a3K8rz6kfo6jQC36D5w7fqhBksdHAy3+swFdgc8ABywucE1cZsXjzZLW4UjtG+4RqoabXreVprgx6AnLj5EVuTS0xE+eKs2E1EI2HkF7OzYjzWS9+uAgBHDyb/+esqXcSD/kC3VH0jmEIiwz1g843+WBWpJVD91SSAFxgv4PO6TbKHPJiNdmbRZR4jslj+Lnlqp7frgI8Xc7kU+tVw+Z4RHb3zZzZKEwiOcBpgW+69WgoCwgOx8xMnoddq7E+Nzv4ZyoNt9e/wetz1rGExz6pQUwcn3c1AXOUIKvB2HQf7upgO8+WZw4RBev41SSi1ugtw5MdBPTT7EgtjpE+Sc5NJO3bluPHKltdiGi1bflHP/hFYP/spG8Gqg2IJSmJCre+ZYHn3bgTvBhYQcEAEnWyVMzdUq7GxNIXmuCYNToew312tlamjs8X4tSfhUptPjr+nXaDoyoQsQF4AYAbqRkXj+mX0EXgvr7kCk6p9dVIvZR61qUZ/XFhgZFgx8nhMkW8wsf4tqHkhRVqtg54ROLr0F3g66wVLL7bzpCgRX2t2MG+fgUlL0a2VLalLTgHZ3ECtHikp5ba3C5ngVW3sQJtga+zdb4WISrdtG6ooxvSAUQAxEeIuVgraVTikT98RNQRz1CgIl41bYP9lKsUaeA1ewa3Kh9NuXMRlATh8YqA68IdAw5iPwkIlINLKepMC4YwKisuhHhn8j1LtZgm2QTUgswY5gLKp7zZvqF4+LovefcwYBVlzh7ThxZKtEHmpUYq4RFCQQ9akddEnwEpWwYLs6TeJ+2taxW/3QKifs8t5yC+qpkhW268wVO9QvkCk62Ny/Lo8UWuB12owusfJi1P9qG7lDtjw9ayaTivxVL1NBs3Xz5Kfrb4RMN6iVn5Kz9mLpbZ8BmAFD7fIvfslZ4I8jT979dl0xuGCcIhd2SPfHkx8fXNNNnT9lh0ynAavkY29Fh7j+bovfR5aX62sewq8IZL9/gfWZpuVdNI9bkoKV/UV5q7N+vGRGC/crhW0dUb1kgpPFQZY4cWk4hAM1YbHMkEIQ3z0teBnEo7Y+agJBdMAaFaQe4lLTOdwnFUI+0fpy81A3uExTLgGOi2em+Kep4NOpUUTBF05SxWGtFCdB8tK1UJ4zzuGs632WdS+pvKKMXaN4E9T0Wif4+E7g2Z5NsAs+FN31OJD0KLFUcoF1LOV2fRriujmI9M9e+xAv8vQ+wLrIy753XIG2GvqbQUxCjPj6pTEVNg+A/R0cS9BcLMxf59Udk7ufuQITCP1LVCbpSZLW94961sOUoyBGiEfd59xbGDkwcw7KzSL0p8mWsXWln4B/xWxET+aLBEEeM48WiJORCstwtLpKw4bPg3qMlNTGfvd5pxRhxSVyVV+2ATdeGr6wioujSBAS+OHGV631MAcI2OpuxyfmmiBPWymGk9WaFvpW7lZvRhEAukIgTkaxT+N2eshZEOFHU1FtdLbHHxllFf4hxuWU1uSDu6M6aipuiw+sQAUs29eR78uJ26Sb6mDa9o6v5GyqCvSrae/HqGwnjyZOFz/SfwkikdETm/gZxkQOt2Ko+PmH8qbxm4/n0OX/u4zMYejl7XrS3FlnBSCf8P5hGdeLCVFKsTMWGyOkYtjK/3EG+itQS6SSnmoVP+HVi8TAFXyAwTY7aCgJ2fs00mvSZAODwD8ruzA8YnnY/OQfO5sgsjCbc/ZktG0x4Wz0rBpnbuJRMgqfOatWDeVl3V1g/9LRcNM6bzYPXS/S3IOgFI3vnDRfISZeUlkuq1hHA+rRhDPEeceABXAgivz50o4kIWLklLP+j/J1NWRjLvQ9YdP4CT5mb16PY0xTJWyjkRgYZi7lm9Xw85PkFBcUh2x1z3OQ9Z83gSskjoI+3FaV9ZkPdoCTkWUhTQLwv5TMyr/4xJ1NuoPI2M4J4JcUrP0CnFfaEUScGEQx2pbQE3MFbNLRqecZBkePXuu3FJ+YQNI7ds0uWzvJiR9PnFNMNezaYaq7+NVSkybhwWm9EGAM9nQ9ZhzzyUqAKodgftdpa7DMAIrX3MINgGUC1XKmmHhY/5g1gKgfTpF5m2BYQzThG+AywxzWc5jkFcQiHin1IpWee+/zr1CGOrT/LfHhLmnjfFZdZA9TPkufSh8K6iCwfu8DfMuIJSCqcO2PI1AK66VPi29j1YHVhTTR0AtQND3WOwS2QysyOll3TVeB0919R0hP/pvwEzf/fr8POhRT0qlS9niHdp6YlvQrHgudW5LkS9MwL8GMq3TH7qHvY+Q751TTAbQRuqkrdzWuexbAwHlDKsgO0sMOPqW9/D239A7pjxhwLkcZAn8NGkFXSplY5Ha6L+9eehD408kxZip5r9mZ3ugIKXY/864hw6iO3z+v9KojVQ/mjK25SY/r5KVJdX6v6Nggv6Q1ik4DvcpNlXYtjrl5ZE+MogVexf1exl4Am9Qf/gIm1UunXvpQkm7F5mYYDO0cg0hON4HYsAreCsNXdBWrK/aMkYFcieG5pVbb/tnU5uNecq06BuCoZ155yGnAbeBm6GYJqxPCcNc2H8Z6K4svHhQ41zuPPZedsM+S8t4KWSWKJjud41r/xQ8xTDk0i2FNzogMOr/TtdX9AkHU+Y8/kZMf2FSqeDSFPEdGAhTtBKw8xsx9aSE+tl6ZaxquBFIy52AUcEfgKFq8rLAiZPiE3KCQouVkrGidlRg3MYAlh8pcwha5ubCXtYWqvlWyQ9dAKaEm1k+8Le56E0ZxVd60boJBLgdlD546jFw0G3bSW7dLvAZ3WVZtapGp93yIPzIyqXuUO8+fe1n+GBt+HnhYGmxrFGsZg/zBU7DAPAnEIe6vqrhOBWYS1D1cRz5zBGwmM8N2R+Ve1BKPbdCm/csaDFOurW1sPy0Dttz0z5R02oECRF3/dln+qAObwSZTSUTC0O74X76SoftOfJ/ktCNEczf7l9sEOWj1bowoIUxWFVBJssdcMRZ4c+bnS1hlvJZd5OXsYCCj6PG87C2e8L5PaZHxwgOXM9u3jmeuqWvJFdP44uMdgRhF90eew3IfhyG/Z3t4Pyl5pPCPxHvE2aJO5VpoUsyVRnxfhqs/SkNN79/ob83aaPqjgC78zLW+voytUp5kAudLyUo7zNn+GGC6MVLlp/tZiNW3upbzQQp/2kPzGToQfNY6Dkl/ROi5q1qjUx4/+KKwmSLrnOcxaSxBgYUAM7yrEne5LL7suhD59sKA00Rjo9S9GD3RSS8b6ZcAz4ZN6l2lzEQbKbadwzZhbOxKYOAG3jypULwMagdXUUgSceG4aNQMpwStJFi8Bdh7ARtAfuuHX983gk4EG/PjVCfl6XWCy0iyXYB8RZj0TUhMSr4eIZpz+Ym0eSgZvtfJgYihMf5GHlDm6cH/91tpWsOFGKP3viCbkyx+mFEZcC3e1be2x95akFf6psPlBw19IhI0G78rlaGzunVvw/N24ROU9sXFlWkuwjwdWyMEflQFbkkbUGRRpdp88J0qKZ9HYOL0d9YbJsl933/tzSjiNDBvcuWjVDAT8QZAnqbSQWQqOM9/UoBZ2gu9v+vtUmY9x077uYf2sOKAtB4ZbvXRqjWypcXs5csL6GZ/XbZ3LmKJY7yfi5KxZan/gT5y7D81bELgMo10i1V6u3aJoQ05CZ6Ylc8/TtHNN6GFiwFKefTkIys7158irrzHJxsYweniIdTv568eZ+xzrsBPy5l6W4Rmtex6TL3d1jqHubp5eRu7iT3QgYpVEab2lUH3NIFlc7WbisjEQlxCVTo3PLAj0NZTt/4wc2QszHZp9vR8j4i+0ye3dE6QD41m6+LviltaWFZL+8ZJmTkYXt34wu+ApK8ob+sCcXXPHKU1m1z0wEaLDfs5Kn2CQDk5umOdKAoTjcQUz9XYVkmj3GggjkS7FcTm+U4iPyFyoS+/plxpPTvIo9pmDuEiCVGQlhzTamWh9MI1czxAd6dxuzSnxxxGRPIQTsO2q4kODCEeI6r6MlBahiJDtzV6Ce9lOonaWU+uzEoCy2kDzPFz/VC7CX08wUA0wsk/2mpn9I6uiU6+h1vDkhPX6flr+qxJdJkpPMCVbShBdBpv/igOo0FZEInEurAYGI2ntt5FnPDNjZjxKS9joNfD1pCO157qFqq0pqBLKqdlQ7GWX7Wobwaahfeqi8+/DzVJuDWCGVOB8t9Ah9oIPvBovLwep/L78tMZQbdUUeO8S1fjQysq+KQ/YFBt9Y416CsdLqYSUcsG8rEnHS6vZxGYbAMe/vJCoLTZOk1c8Kj87w0Y34UdRu6Idck6cDbSv2FKWNdekoW+K1yZuVXyIWIWkGg3GaILLArFW8KyinyJYph5m/FxT+oWhqG8gYxvx+rmBuUCXg0l5Qx0sccMOMbt+1n6N7Dr4WAtVxv0nxYUBB/BdrwzCBSzwG+cbAfWr0vyHZP5eLb903fr5VKqAkKxVj8HEeTz6kC1t1m3cG4HczPEfI08eiIdFcp/Qs1dIC47kXL1oPgBmrh5QeY5/I0GLvZJ0wrO1uikicS2/HFO6kCqiQZ8N4KWjVkGfYx9gY2+XA1VG5olgPdC5eL9BeLL6lrZ1IVXHGYzkQKZ8z3hJl0FcFe/v0EgXWW9JTfiIb+7cC5j+JavMbk+9uDA9Y8GVTpj9ykS3NexlWQIcmcTAdWsIGrTYAyvbG9D0dl9dEgN8vj4kNYo9fvYw8ZxDouIosxZFuHjL9ouUfs76fUezhRPZVE8gKyjkPfKvM4wuBfcqE43Q53RR83KOFce2lQfa0gWyM9BcR2w6OXfufmba+SDmNmHB2BG5AGIknJQ7t7ck5l9/B6R0GhsJjwCkyAza03htKB42kL4LUwgHSZ6tn2gi0/tS2PfO6bnhLQcPn3Att9lUxMEJ9Bt1pTpaSFf60TST7o4DD4zai98qur1Da4bGA0fPrXSsop8mCgbyAG44rZqVNLfYAJa3Qp1csHrAeaTs6/LeF6f0mPB+GhBTMV/Jwt9ugo803WoJABVB+YVwS+DnmxSgPIST2P+n42OO0uDqchqFFOdNqEPojvOHeSwEUVUPwIaIfxhU+sgKqLMrmbRKcCMQl/596Tp7Ux2Za0ZxUlfMQrvAs4MWDwcLzg0+elhnYUSzqxbyTZny6wOKxZyUDFj1WP9azHSQry3kFWSF+HgEIfnDCPTqZdyXfuYGwWfRg4sTvIH6k2BatEXjDIxCFWHO5/ZwCeuQDmUAwtDB6n3TZkBO0fXcLIkLZAbVSD3DxkO+VZbSNTJf6XgopfnELlzuTln6MO4sdyHJBEogn+eb/i5mvhTiNhPauf0Nc8FYpuXVvPHRq87bshtoVCj+HCEQGuHBiHyOAhs028TUA4tRlVn6oqxSpEa4ILL/gvYHT7BM6VGjNlOqH6bYB/Sr4wjO3mZWKB1shbp3h+3v/8K3BeHgn++8sd9qy6WqQ2eUCzS+uHNDwxSBB7nOXHeXeBXTVC1N6VyqRDiVHCVQgf6DBsCTvPRHzuRDRtI6mqPrGwCmzI34tDw9xV6b1C+U4r+hfD/jkJ/Cm1j7/ZXKh1UjGa1H2mK1jzrheDStxYxzsUfQsmtYc06iQRVvd0hS7wkgmHl9co8TtR/ymuBALF9x8QCNvPrv6BpXJoDCLGSlZiPbLe3grMobj0+0D9wo8vX7iWZnoq7Tg+GG+kCA4wtYgJGCBi2FtF6xeTJXrHJQRR5sn9TO61eSiJe3+12joPuIkhMZVJy2iMlqROo9TIN4yQuQ3RVU9w39sOyCnOJeqIZ+fG5CN90vE1Czzi4TZ22xettyihbB8dboAelXuYNdB52uIvc4KH+tSV976h39H5hsRkYQvDd7BQsxlVTRCsVcWF7guXOPJgIdusPho2NE9kU9ghAIPTo+d+SZQqrrLEPc+phgZUEevjKm5DV/pOGRPS/+dmVoQ0RU9uGYzAPMjymDS3e3QBjEDpxkkfRgDNDyCWKuAM/xAnRH4Fz1bIAo9TqmkEpnZ/N6aiX182Gms211oE4KER/qDAMn9j9IQybiXF9/uI7oymtwiqsb9eMSc8PmgVG9iZrvK7PgyMcsc4ZcYolH2p6Y9uhrANGGbKdH+7HgRHIa9/iq2fk0ges0jV9uMg12dpM84oFG2gi9MhBEf2qnWhdvUa42JtxFo+XnMGI4hNJIMok6d1aaYPc5LDatGdISD3/o2cUOrguARpRqOI7HqkaD0sfZAYzaRcZjlp1C3Ckk5lYtJoLEJtoIGwyIkshz8/xC3pCv5GhGMyaKYjl80A7F6/rZqaNeN285kIiMqu64DjeGuC7U9uOnlQss6oHGw7kg8KJOCMVz2CZ4uxXaQg3Lb3CzvOr/ryNAfJAooDbtYOyybc3ZF7oClgQMmIR/Q4fbfSWxGpQZcBIlTM5hB60zJ3zFNIrU2Mx1UDUObpc1F2+QX2r+7VXdw9tGkdvKowsdddAfva5sadX1jnryarSudN1I6RcyH6AKB1QylIcsL2hCWCc6anlFJE/CeLZwphiW5Q4wVMnJAlfQ5nro4Xidf+mCumr+JjQgXSTCraHQbbjyEwVeAZm1fnHHYpYQgufNPKxzk3va+dKjl4zLuejWSxPZMNC+vuOoeJT26faWPh6oxehC08FlElvkiPOIL68K6two7ElPbOP6/gdMEth91/xUSBA8+xdXvRWOt0e6GNt3vnbKO5KLYDxm+MrF54UKOBqpL3K1cl35fHdGZM/WHGV0KioOzcrg3hKw32SV+9XVi6spW2RJKLBSfJt0wLlcZ+F3J5dKgP3j3hKYHThG0HW2ASVQ09hS0Nv0a3SR40nBZ1mFGs72NWzUKO46BCLIJEI5ZLJitBll/ARfT/FAYYXqDfNRohJQU1WTzsXnLWOPd02o6eZymRH+r1tRBuc1NuHWP9QGQqHapa2DHO1U+U+GS2JqDYSjlCtAxtKDBbxcmyhgD8YqZ5IQ6XcObpbHt4Dg49U1IUCTGRbuEsUE7EPK+ghTOiridPvlYEEDDm6KoJ3wO3afQSviQZIhWjuh274vx+qITKg375tt2Z6PcFO3sxrSsd4Q8r1C0XncOQyWIh1m6e7Jr4j9YBjJw/o39Xyxdo0Ru52H35aws9nEuHUiQUpPeOKo3HGWJMdYgXhzJwtqVy7/7n78ctq2obOvGxIfYlef/qpXQ9DBU9X/H5uMWU74GIiK1E4vWMYweIfIiDhJDS+A6YGH7g5ic4Wzd2ktBZZrFAeQrH9Ojesz9N0xTHPMkujMEJRxUD2h79gy/RmZismVN5UmLTff3ecOXzmx/SNMbmYsF3zmTSH0LrYV8Apt1FPya0Q9jcO1MlwNfhH5CYEVSLF8AQ22Lx/kTpAA/Ci37dFugop3fPwSDgHzsbUXTu6HnBvAwUQ5R/BDpzEBN2aYNG0x+tHDONnkfIUtxBdysxbCItqAmEO0NMLmVLj0rTSriXgA7uqtvr2DDz277eCyaGH/3AnPKTFkM3k0BMcmijHuaVQ8poFQS0cVLDdZSI3zGkpNQ107rkrxhO5xuFHh5wMDlh32iTLIE0QbfJ8h3R96sB39l8ax6jcz026GQ+9SB0qOGny1PRfNw3Lj2oTPy0NH9gyOaEtXyPHT2KktkpddaO3NjqHcQAStAgEPO6Rxj7mRPZiUK4eOFsOdTMKjy/NYnCfaYFy2PCzHmSJ1Ql+g1pUFK5ypgXFHsa9rdFtpUYR+E50g1FjjtxqnoGzHFtSnKckhMfTAiDHcdvj95Z/1AjahChxxiCQbAWlcsX63g2plJGUdqPNxsnliDkDL6azSuIGipG0DKM+mmOvYBdb3JiV+Bm7pXlssAbPivwIOIt5F/+ulr/rpMkezdd0MEL0N4SKnMeY+taapUhNmqzH+h7isge9tvaWqk9UjPOyDPp8beI8QsRl8zBqtAi71w55nTO347Cb+7ky3ontwQGuxCQ2YVqysChBfyn//nhgjs8BVMvOIDmf89J6fCrOZ8aeB2VBHAVWVs/ZIDE43ofHgTf4UDSOu3YEI59SXpxJyS7SKlZRHsq4A2Mgb4no5EzOsf3lrj5qgYOhRENNlQVOGHcAA/QCjiU+SjxPIS1/02EKf0e1ruBcdDCZLnLaGCYkeUytoxdgX3JHYFL5QIcfFl6X2BQvr70t3dbwfQdwQhM/BIac6TTJTy4a0gn089+KRI/OxJrloPX9u+SoThjclW+e2EUa6j1IyaxwhXKyesdHBgdn1MA45oPgtNzZrhDX8NzT20q8TjV7Sins8JRa5oa+HAyj8B0g7z/s3W4xS4P13mSLqQbb7+Ri5pYAXPtQUqvsbzQCDuvLVJ3nXxfB6p8ivI3cmoLZ9E/YpvasIiEchLZU16Gpap1aBuiUtZ17I6v7oeoQ+Le0WSJDFCvTB7yLjwsjNeVX8LRgMmdpNJMyngIBTfrn1jRMr73AL0zxdh7pTqXLbE9i/RTubqFFf4wTl04GvtEYV2VQ/ATJQjxp8d4S7KWiOe3MXBfzefP2a74nla69OToGNIf0J+iY+xajR9EI10VWbmLuksB9Zzz7rl+axir+rh5s8IH2occpkhw3oN+vl9PSrkRAZJMZitNl7IjtweJlNO+4bAF92vvgGooV55j1/k74l22iytqbNG0MpGZgyggCU2LuO5VFzBt7gUkUFgGu9Mocp0OOvPZmzXfgh62GD97TwSg2QU4CWcfWwOxYJFum0/LW3NCfIR30lNABhefGQbjfrvrMeTFFi+wtcSrUisy7pgynuTl91whl8DhxX/LYUSBoRPhJW6W72XKH3cPPJ3zRHQtBzAipbSvEPy8uukJV606MpOJjrH1Cmp2MnNSzVwL7NPxSDWEqekYU/b2pk8XJK4l+p+LnaCycwUw2Cbk/+v1SsMZ74hFPBV06eLaxyo7NfUyJdqGbYptVobVnjJ+RKAjaMlDS6Mu9FxhsjQMHyxsg/LzWVC6OtPcqxyy3ZLIuZ0wX75EpEOPfMYTKoPSC7q/53IZGqUNQQvJWezzgSoKf1UGl0TgvYRwOojs5cNIUv3RUnr4p/BYZq1RuPzRUaj7z1zcTGSnb9LjDU1nSeFNjR3DJW/E3Y6Re15oyJ49u9ajMcOkcYhAYQdRL/VF6xNzW5TIlKxQ67YaceEhh+9LeeuUibkMD51ZRzdqO8AKApeD041EQPN9iCCnB1zCmKrekaPpGIaB/UMBDpQS1agTKdbCV8V4Ewd7k79mqUJAn/DNOJsgLLQMkogwtN2vFw5qPfpuYpbJuE1Xg/p+Kegx+QnvfD7fnPD+Ru/WX1N/hjvOwfrd2U4U3Lo1teF6zUiNwcSBL5YpjrTXWxZTiVP7jUO6YpNUXauwfHGnEMEo70RqBXROJbYlbrnzU5/pF6hwRe2tnFS+SDbP16kiL8vOWnzeY2C4H10GVhzxHEdmkW1FkfvcUM+Ztj1mdaYo6uATRmjfzO2UAVG9MBHLyvrhV98mnwDWyCZVzrsWg555LjvNGBNhjVj7XkElyhUavpzdPljYWf5MQveXxpL3YNfUBRql4BIQmr78uxSt0LXWVB/8bveXzvhVBORQiR/7q1YfEBPed3LNeOE2ETC+XKvu4tCxP9p37UVo8DyQ1HdPdPYndR5PWOa40YHpSJN8nhbBdW8Euw5lv8KO/PSmZpSsm0FmL5OEdVrSsbnQpEs8/V7lAQl72Q3ywL9VwPyadzL0lVLy+KFJ56kf1I7DLjBrfHr+AI0fEtJ1Fp21DHWQoBVsCldPwlfQS43h0y9nV9l6VLBTu4R3SUOI+60AdLyjE/QSYqL2dqkcOubUl2775STILPkxpw4oswZgwmLmyw8qX1s6T4vlQqvHY+Crx2II7lylCzO6MJaUdOvF0G3LA7TH2h1HjxiWAj93D7yqzDVO6v8PByfjqF0D1OQ8nBqZmTe7PEMZnrvaZe7XlaDexy+ZDHPXYkKcn5JWMg888cGLYQeyxGQfy8kHQdoEmB+8dCrEL4Wif5mVS1hTUOrM4/dPJC+cMsuKYsDglk/EQ54YNi0qOHs2u5wvE0wyxdGhuDK2hYH0PIqnMhyoeQfTsXe6gGRrOxYCy7zlXhRaZ0XddJrhmmJRi0NyEHUBrjd1vqOLybX8N7lya5GFhruaP4dpREqJudqb380Zy1BpRPrkBcGnut4bFVUBpT8IrSYyK4NP9t3UnshKsHBV7QqsZKyLbccdp/ZN/zon+8CtrMiIG3om6ADr2PwD+q/4CGkV/opNf2REJbyUlklGVuBikb4n3lP3P7oxjtIbV8FR1OrJ0a9KEII2p8XF83AUOli9mSUWhGF4rD+Yy1ZXeXFtVQwbj0+dK8Y1ckBbDURzFlCeKz7EQ/hgb71B0sFNvSrS+cxTJFL4ToQB8C0am/OxzuoBE/fFj4mMSWmq0GywVLjbsguLeJfDioYW4D8Q6TVKqVl5K0r03vWF+xU3K8QYJu8h+md7U27pNBqiqZ9zwjcMbqSzd6Q3DU2RiyK6hROSeKjo/U4jPzZbaE51F0t8J4z40iBrd/M/1/D00ar1UJNw2kaC7J8vnVFQnkMiTZbTRAlUBZiFv3VH9tOohNFdCwk0loNHqeeXPZkwQ80736K1qFWDiWCaNrYLRuatvQts+C87mRYke8S6P9i9FgihHBk2/94sXOYFvdFADMKlTzcSxLtueajfoEqnBNP34W8qFwbnyAEPEFCO/HiR9hQQQJfeyjH6ztlwq/PI5cJvQ5CXmhY3du600ZileHr3mgJjAGaFAv4D+z2AXluV7jGy7vMdczTp/3XErwRPXzGEOH5CcJ9eUKr0k+AXGlmBtRWmVXQvsZBuMA+Dt7zre23ZxgB65DuoTobcNERaBF2v2de1S4LWkCmG8D8jN0k5pnVG8U01m58ZIEf/fr9IdKn/JPHsZkoryIdOHlfkB0t6PFxT/apm94YlxB9scrCQ0Y8Iv/Hw5hufRL4BIN63nRTEwTKCOv19cxqOOqix0+GfIKLF7LQSbUHwUAtSDfABoi3SCuWxZozkt+FzqKqYWy+d7tcYX3Fl/32WjqcJc//Z93DudugDrZNm5GKFZ7ua7R5E0HnKO4pamoVFLEr2QJ7mGoDEoxnXQgAEdCn8ZeyrVgDSVaxQT9LI2yqJZBWB27IxsHe+4Pz7v/zXPsQ03X6t4KHLDeyvz6woMQnN4A61m7wFNBvp5n2gjQcbqkNZ9GhNqQl5safM4K4/EqY2jqzWNGEZii6tdYyv3pmM2G+2vKeN2rb7GNbrVn0ZvWWVSRM9deuHvRA/0C6z5lteXfa8tVi+iXZUXVrCTdFme9jZqxE2gnVHrVY1d0PRdqh8oa7bUfW7hj4xZThn4qhAXQPKKL5CcJMPhcA1rrQP3oMCS/zrmFy5IZjO1nijMB4aaUszTJq6b6ZNy6BJIvLXxhJY44+S036sq2X+igqhdZCgqQzzUMCxbiM1IvM+IdwECBUHCfGq8l0udpyzOSrG8suksmMJ0XEWMp6XI0bK5ttUyaQ03hNUHuXzKHKEQBCO84FRzWoD12Rd/SHlxJKpPL9yhHTeU480Ywhui/47cQimGwUDcyLvvAfi9KqVssUOwXifQcaHy6LoxrGWvcbd5xV2WflY+9ROFDT3W4IhR3UGDczV0nzhnWTFqzqbTtw4UjnUY6qdWUgoBJT7YbcpXYRS3NJG6KcQ7j+jQU2B4YdXXP/bzIoLymABTYgb4NjoqjfTdI6+zGlZrqTsQQIfvMf6XYMeK8FyDiLNujwz03in5WXL7s2XJ8mVbhJvj+rbAvPYVq4p6swnxVgBEB8x2RT+4OQ8TVwSCJ5UpJMAex31MznerS5lD8RBkYeOrTHTr/iciE9U7OVD4DOZvda6sFaVOf4eAeGfhd9c0/pYOJkhhDGtMFwYdes7Mb1k5fm1Wao/5b3/AOsntfFgPcx28J6FTAvQTS+XJ003zNgXK8Fng5dOpowy9Bf0x5fulyGBzA4AKtfbkYuNdx4B2bWCnr++FEni2MpvJukS6H07CxaJBn0GB0NOSYxkJA2r1zUyBigAU1xk24LVsM+TN9/oLSltFX3sKCNY4Gq5fJZgRlv4yv8x/I8J5ekXcgHrGDzOGkgjN7/893wePm3+Mnhf23Ma2BA278nOaKLeUdbpWcpNxG/RKx4YENjIgz9TtfOhw6DIBNsmtuv/qMRbBL2/blCG1ZDz/UKP9iWLhDCbVeWyh0H7R4xRwPVPOIeRpO/DAG+bTukWRW2oEYcfBxxa3IRQvwCFfdRSLFl5bkhl8hZoOkoqD6KX5xAMVQcFeIOjk3M7W8EsrIMOC4XfaXs31pZfBAYgsRkSNdeuEXB6iOIgTzHdtvScKnM9cVDdjLzZPdvAiqarOkq+BkDXtC5mPnXJlB2ilTXG70QWYm16duuAVF8sEVz4b7+TOBvcOm0ek0x95BqCrBNESsFyj+2OPjnvrGXbBQQIgEPgxwTX3xF8o6jyOazL51TuX/q9jwps6F4g/n5/M0OFIrCcUmRnPcA0monrFnIEUA3m00oQzygK2kG2WH1NZXTDDJ+cJba7UoNwuRPQ+ng6/Acp/0SKKUIRT/o2r81nGG2wrDXL+T5gSh7umx5Uz4FOnw1SoPP7I4fSDeYc1iI9XPkRd9Pis9iH3tBmvP0RNR7rH7NVoyvHshUai28jOaTeEAfinVoxAU6hC6ju5m8AgThZEj/ccovtIMrlafQStplb9MklHsUjyPTOLLssWhDIIG4fmhzPDoJccQpLJ08VRneuYxGfH0APY5MZ1SafMKePvxKBvL4FL2clt+54yt9WjLdFsAeBJoohhuIrPAb/VnbMNyPWfSgwVQAyN4nwVd6AEi0hlEKOs66aJq5NzeJufFh2ZDdlNZR/dmXl/TjrwsmF9nkEM/0Uhqq+bzn3XduGXQ8X/wBDkG3BhEbyaFcaPrhm2p5TRySRjX7/SFNtuezl5kIslRpknAdxL04B7Os4sbKRko8+Jic/RAjKbF+SheO9RqxqlRVcE/6S6vBVvJ6s/YWW1zuvN7aaRhH7K3tprMxVHSURGQRHJumwnqXtUC4huNWszAOnb9c7CGkkKHKQoy3xsVWIIBSxHTaNiGeV6PMAxYdNdv9vT7YVBRH51tV6i+dOea8TRR5Vg0EtNaGoYr7p3lgK2S6YA4wn8U7SF3mrq5hpdDFPgLIypLXA2126RT3OjivU9ygdXCEjSdyuyJIei3z+hZdEsOYNPjN2iSyeex067AAkq8DKBQBqy62ZEhgx3JLuv++yUOA6O5NZI1veApFPuozS2X9dbIHD9UQrqWr9lyEKJdCLQA+RvKsbpniY+iHER/s1oowG4dGoX7kOIgJ+OfzNTdOaGmOc4Ge+pN5b591XIcmBgC82w2KJ5gLBLlOu980+buOBZyssr0MRgyS6hrkZ8kCv3VzLXUXZA2T4Pw+uUhJSF/gTbbmwLuAvr7IXI0Kd+kYMPzcQFYeA4V99sLNr88ETONEGdZ9dGMltoohH19Cul32X/Q3ROfGxubZA2Gs9ZmnB8e4iZ5BgVxqKyTDyT2J+gXo2rMvixHGBKZ4j51CeDeaItnX3zfZR+EE2fJ9aRJZ+GVl23iaQIRMn9nmxORPGO9LCNq/MSPZvTTesOsMOfjVddT9r4meiNMCOF0IJDIoBbzu3EBfqtqenoii9Wr/Lyxl3fNmtDo19SI8lLt2ipXVoL89PI/AYMOD+6KSHhbZ7WXkhMR1bqWmatCFe4jufaLcC57gSCKVRJoVUl7sElJPZs5EQUEqMm+K52nv24uUFueVSLsFVq7PzfxWkbTDLp9ro1SuN7OtjiBsc82mNlW97dAQmULmLtPLusuMde9tVK6HlwhYvNTmtp3j+DJJf17Z4NvPwdZSCddCOGqiFkar4azhG8wgOpOF3eaI6ZJYtG3C7jR4CupH/LdAhM9zyR7MikDcBAfIzelKpXp2ZiAMN6nZCubjRH8J2Uvuba5cHSe2qpWR2AjCMMRbTheYlX45+zJ1qQMXanuzYdZXdmem4wemauL70GihrV3dKO0OIr+NtpESlg3sBFxv2tbklCM9ywlzbMnQmEfl1LVpu3T/IYgfNqSrFlcvDO9vtCvbWW3gN3/lOsOGwUT2Apgon5hXxnmK5EmbWOdanFLdcv/+XlB88pxyjJfRLtufDSQLp0UM4yT6dR52bU9j7UFCkUWIgfO3CBZ2dLnhj/Yv9Teax4GzS1hU79QN3ieTHIO1LsxRa4IAuUurRl8IkSsqpLhU7KAMNwTkjyq7toW2ihRAMBFW+zLXcviWR6crlaNim5JZoX6ZgYU98NnsY6wZz75rLLebFHrl02cXId9h5uW6C80QT2xKbv1eBkCPKSGLsDvnJi7qMNBS5DzpffStx/knfu292E97Tln7paFm6qpJikDN3OaQBdRc8Kh93fvungj+x4PXeX8sjWDqLdjNQexXl/X/yxcubCr1Gmddkx6mii7Pf0u0/+50EJf1Lr30nK8Z9l95+Ksk8sT6ZPhOnvzx4SQKILQuBjo8aakIsJ+Fcjc0ht16vbYBMl7P6VC9Z+TL8ZJIw78+6YpTaarDZqsmruafBH4hgzur3/jPHgg1KdCtvtZ0Z/sk1yLJtygyYM//UQXt30JVERjViSRNLKuuZ6NfjHJnOI5QlPF9zHrINk5ybbt0K/JN+hQsqLsEhfz6Igivgn501/vzHq7WfPbRzL43FFqlTq308m5+LiIZ8g/3HW9Fj0XuXl4g2wNCDgVZuiLADmVgHL/UKkrp2+MRYlexpznNBMgU3KBdwmpyvXEMXV4wcARlq4pyLKYjZ/iDmenhBw89n/0CQZtiL/3x0N8tZCa3UCMcf9axPJFkNk3J0p/lF6UGbZ61uFslujjSC634C5J3oGHXnDpd1WtTBjjiEwBBOvv7JGztcdkKz0TJIGrdgZpMRP5cNK8+HXkHC/EGiKrl7zmjRLOWzh8mOjw89F7Id5gwzi3GhwibqA9l7/Nl+5o5LI1Lx4pwoM5H0K4iMTZVTqEuPEhrv1sKOQHN+5eoAthOu+d/kuPVTbsEyNflrlCjbX01LhQ2KCs2OAfFSIbSX2JZEhAb8dwWmQYP1y+gLb/GOTPXHlwSksxW4pVURvEjTbeZO5yLegY0CNR9bMe2sxKWVhupqIP1ge4T5BnxlcL8OuBwm0lCNYaYCZ6DkA3MdjU3ezJjgO9dWiReqtzZ/42dvyN2a/kLhGWs2Oei25Z0dC3PiF9znHt0bqFxBztB5rTaE7zfnOoTK5xhJauHTSlSTxHeQWakR9AKZ/pzQnwV6+l+tu8RsdLlWZ8pmrj9AsWZBw7sC6tvLzk+VnLd8rUTjCd9LQlKfwK6fWtyh3f24gdzk0Mlcmpsli/sKysjx0O+E3opVjrJE1qrdSWHBmac3j8JKT93X8KAKfpWX8dsO4jlhbpfW//d8PUpXU6j2UDSu40MhKJ5ZEx9v/3KdOxQIi0u2f07i4LGQZR7z9IOL9K4LIAv+OR5sCmdk33RPkkMlINSR7OmFZ4WFQu/GKTykaQ9vQbOs8ZPMERnmylXRRn9zBJ0G7GID2yHpbt7U7I+xaVfjRJRwzSxWOr8/GkGSQwHw0ugxvFeSYtZn10GSP2oDcLuHiTFcEWq0wSLucgXpKwHXREqHxQpFzmOXKdhB/OkGInG8ccEPSgIohrEk4UEEB3rlrIlNlEBMPYbX7xZ3EKKEdb6P2qVo0FzrsoTKJbeURHnv6XJFBkOVBzdakr5nTlNsFikJ59pOonJnrt9yWTiYK6LhhErHogv6CMaVcL4JtVSCrH0qEdCy8HQUw25R4z1QqohLgE1Dh9OOIeon1BLwc+rldEhDQiEAi6QDi3NuzqWAM1u8Q+GgmPCae1srxukkcWrrIXZqYcb2G6hrg6lkTqONugctB1Y+0M4CQdg6RT7f5ahIEZYL52X43XzQ9orn9Ot2uRvrDrT35rwrJYraKuVjgaEmxjbyBjvM/K0VOKN7y4erS4w6yI49p4RR05K1ptSDqx0CnO03zWgG1PCy+vggDqrO0jCU83BsQEP4fqalt6G9Mckco6OB8wfMlXfFwr7yHt/+rrEGoxh6RNjHS2m0EgkqriLZlZG4Q0rJ8dHnwZOWJgunW0yVfASRUI5Znf/3/XCyCBjvCUtY3oY/GqwpYvzBRRnnYPjvTCoE8BNExnN3hH36P08EZVD2MvRSYOHCMN9Yn2MG9vXMgm9MF1KFeqTK8KyLKwNf1+kL19F+yqyrj0FHZ1w8b7SjGqFmReWdS49yKNQRWbEanh6Itde8h4gtXDtB0TfdfRAFT8Ohva307HSjIleMDs6f1/BYgQGUYzBILVUgVlPzIT1iCUXtRCn1JVjqc71AUlw4IOdFqnzruexsHz6lhup4TwY8QN2h1+ZQU23PhiesJYjzPGZg5IlvOY6fN+yImLWbmEI1AiyR1LNR3DRXOkI6NNIWcIwuy3FTZtqcharuC7vKBLynpfDdDETAfRJ1GpW7wOXjhj8KrxEp9lWeYdYK74XNdCp3ysTY11RSMD9qdE8xXql6SKy37Jp1kZz01uM4y4RVkfBoVB+hPiTtAgzvZAJHAuiGrYEW2LCYmxiYLEvpppVytk7yvSp2ctpl9GzA8qPTYPd1I/d357MUr+q1k/FirKAu3sMUwGfBTZXoe3m+GaMnVlvSAXv8JQhui2f+5+570wJbuxAWFLk9ercPT7i/Z15UTO9If2hFaO8x5R//ylUi8wCWljxYdC0gtkNAp8Ge5g30zamoW74fQX5AFDoPkxJSOG6AOsy3k5jOtEFw31bYv8d4YMP8tktHZCaW1SZBQx2d3ClyZOghJObceCVwBu+YrvcZe/5Epv9NWiq49jSVxT8Kf9JM5hSsU/QRKatGCgFAC61n6KWgUS2pQqbZ/5jglVQwWJ8b5eb3Iuumw5rPZvBsCY9uZHFvMJAEVX/KD6LcbVWFtyE8eyNUUTcxPJgkxiPDkbKMI4aSJhjIW5Z9foaNJLG5vcx0oXawyrSw/q6NzmRdjHjuLcZpNGozI8EHdeloz88N6HEA8K7kMKOO5QSgRZMBWVTjuDKAYQnOeKCUFQW+v87xH5KlHGWN28THrZ9ux04oXl4V2pKvmNgBlPZBWc2LTf6dYzkYk6fkrvi4r8b5Vm8/FVmEA1mvYk0CNVnbrDcewI9HERBipTIeA4JZ+z/prtETAEPwlJiY47UZRtM3s6rwoK13KCh2xmgf4el9SvvnY/ZGFBKOrKczL2FF9J0+ghCCcRIBN6/iXVJsYsqXKYndb/+2tKINGMBBsk7GFtSwGhkX46PV+CMtKpa0xsAXNUsP5BAECaDrX2SeDRUpjmD+/suFr2QI1p1Gh6oJkfTwSEeVEqjWG/KAFrCHlfGXjs1pwZJfUcnOlMz7V2X1qjVMo/Q8L2g5l6q41X/o/ClpAhXhaL1ieHk+bo0jOG6VfN1Vkx+0Mxv34HUD+sQAQ4RmwZWNrXPVOuKqnr52vXY+wO99KIM9ztAtJ+puXvCj6im4RgVcgPxUEmC3l1gJdvvPPZOBMbFBJRIhrPhrDKbOeKoLext8sXezGtMCHXJNE/tZQWzkCj53WSgy77nbNfe00bgN1Tr0bGkKZ0aHZD3B46yomv6dGs0bX89mbps3NblfPcexNX/mfH1g0PNfTOFS4bDHlkp4aLCYQ3UvEDXSlvVdcd2Y4znjtKBnIHwnH8MWoqHi09zqbXBrW0eFvsbVK0d410mEHS5+GOypu0BZWf+2fkPv+T4dN0Sc6YEHrZzATVMhvLD1plwd6+hwffdi1cwBabRBn93IqkaoFxRYErRI7tvBh85ndRpjJLH8Y6s7MXpWYmuX8qi4S4c6CE7+SCaYYq/JAA3JmyhUNpY1nM8VpN9pERJ7SS2METmqpKUrtao/DeAlbS44aqnMQ0+R4Ui1kPp8+OHo6vxpMXAemxj3Ry++PPMfY+gMEXKD87oGu0jq/nkhk79o9Avf2UTuKcCKMfUHXDlSyiTPPnjZwY/j3XSJTWXHxXBkb9WaAAzGHAsQtXDlVebuT4QHpjSBxkrCu5vxyiFo8qWQ78mSO3SFJOTYwinYnpDBnfXeDAoI99XpCwzn8e5sNeEdi00JH3Ax2X7kMCwd9aKhrdpguzcy3xlgNCMHlCvoAzf9Aveef3N3Z6l4EGemmAZGwStsAr9ALdpVDmCabcLG9p0kpypqr0JtbNB1L90xzLZPBtr5eJVqCggpBlbQckPEj1KUqcQp87x3MihpB7a8CWIcZ7JlrDMzFlGqPGeFYHgO6S8v9NJNloAro+yic32e1P29uc8vjgVlu4K//Zu4fGkXQmxyhLyFnd1a9VDLHTwgHjYsIulOenm4CVS61VN9cXiwnsTlaxNGt8pCBNzRFrn2qXa/9vUzkmu4YMt+tW4HE/WWqzbrYUA9oAmHcOE9qQGesH+O4N/URiZ597AOu+i2l7GrfcxdOytk1SkmUajeJNqujjFHFSQc8vh/qpAimHnq07qRLl89WyDRppHkZOGPvYnmAT0undcOdNQ9Fo2UztFgy4bjtX5sTNATCF3963+T9Hi0yCJEKb1oEKJvSCWuEjII0pOhzC/NmuqZgkli0D6Chwg3MPH0trtTSdspjduAzcBB9BhpuwHGxEs3ry216b7/LYsCJ4F5gnuugW4VhACuA6B9FY10DvQCNrkgWg70JeBh6ZOJJuH1Cb56u60mwlribAX7khbibAP3CPXyr8E04qzGAhdxLMm3cNNbEvGrCBOLv2qdY9KbhknVb7HeX/UbCbABdDgMtaXpU+KiBAtU77m08ZpDfoDdOZjGyHoUfCwyr5FBEEA99t6ltl9UkZqNlOAx3a0OsHwC/lJ1xWm7u1aaYglq3g0ztBxOBd2FUYCT5NPPMurTwHOYZoAcGAAdT+xJCl8R4aA7zBuy76y0I5OdUpPZ107N4VwFnFFm8n+n9in27DOT6xA9gm1e2K66MJyFbgAsBkXWtMA8ari/AfbNtkzDjthborayiNEcEgutYd4AQndXowCBibC44yEPbo5TcoMnIPun21J8ebTV4Hfz6b8KrnUQGfRgR89VoUk89o6Sqd+elxkYuUnGZqIuJ1UelZs+xSG1KCjrP8r5kTGh6nIdFGyNojSa6irKOxTkYCevmuJjL9TqGwnL0jn7CvfDPL+ezHaiimlDyKFmbZXFwbIu0iufrsTPM73hvDLpPpy5IG6X8bbJyNJ4+oVq3cutuFtp+Ps3QgncKv9VE6D2CjLCeOwcQcO3v6q4RVHBJGK04U7K52X8pPp1XAoZZ6McPBp0GxSydbbMtm1jVOhO8wxPHsP+HIIB7cxTOeXMPQo7iBLbBw9q6XjuhE1UF6wlExecSfxCF0q08lSKpdtxKVAsIY50uoIYdn+3UM7FQF34ZHMaArL5h2NkMRho1xm2QBQJCu02vr09XYe3A2oxhXaZxHipm0QJ395VGjlbVLJJDPoJMoninx2wKTWwqisCtQrAErniXz5rOWKnphVJsduKoWQGmG5u9E1POVW6hRzN82m7yZpWp+0/0e8SUU1mcHbrGANsPDNrBKw/CLPn6cgfVO9jxlAM8Ete5NDt1dJvp9+sctaDhRbref8LZIdDJgdP+HDz5Wq6cCUPLz6q/K8WGZiktFzOkmAFFi+Sn0cYxW0uzIxh5VrjJQPpGA8eFXI28BhgbaBkfWyesvLHgtXrF9j0qTyjNvX6nPRKkgMUfStT7FAeIZGrMubzFiRFpTYiSNonYQkqqyr/tmeRSbigOpKOj6XJ/Bvh2kjAt6GMW0KkacEKyXwrPAMzzzI5Et8E41KPgWanFmpFnpA2vsPkwYzsD2lSik6xIn6jbkUcCLu4oyN3Ix46VvxPHaku7HpSqQHfmwOfFylD8EYzxG+AM6pVBtlmQeCU8VTU4D3O3dQi5ataTL0VEuCUsXR8eqeWhi9kIzFWofWbBsjdhsue0gFiSc6/sFTOQpsVYxxTDefTUaMpzSjPCD8zIRk+K5Dj7gZ8O+M1tWMKZp8M0064G1imQiS8uZbnUL7JcJg/oTyNNJhYkyvqee5VQ/ZpNhpJbDZ/UeViZ8e/RzHRHv34xPL8l09Q5APS+zcg2NcDboXxEtlialZPbYfKaBaXXJUQfN9iHaAkwL2aFv6mTJXYiLqkoER1YbTa7fEUJgiQrxZvT9sdbj2BgVRDru3l9/HQnEWRkJZHEIkEIP+0+LN0odcbOFbOTeERAE8fS4O/7Gm60emLBl5+dFzAGPU8K1A7hBWru59MQXTKwCSx0u4OxPmYPepjWswVITyTP7AgioBSvXfwfL/7PCoRig6WerolZ/pUJm1JpmRi5U54act8kGB9UXrjM4w6iaEqgKRekM6AnZzPQBCd2lDoVaLZtW3D+iacUFNInh/Ced07WcJJmDNqP06XpiIMG4rYv2tI/FLcr59JXHc4BVZrtAxlaQRix2fpuaBgakM9Jgc9UrTthm+5SyvqDqPl7RHDI7EuymxMePyPv2a3DBurLkUeBxKGKiDgb7rsHdTnWVrXrrUeQBCKTrRBQ8s1VPX6bPB9lcAiAAFTxQzfqAHKMqsgKY24Njh4miGV3kj2aJ8SxXEKT/SC67666F/oQBPTCV6cJF3qlQqnKrZv6eJghSuVptOSvdZ7OiXsGXWvN5NHUpMrH1em416zup72iPCTMCr9dg4uA8G53FVTblfMPQc+fLrKpc7AquCDrvar5DaDwOLOqJa/8XbMI6Bb1Hp3aX5tC1MUA8dxP8bZ+SSLXw4vCZJi0UNzqQTQzPDAitBNENm+pEemxmbjY39ZxCbTrpvZjVrbN70ok1jNVsn9oeWMWC6e2N0VloPfBiirfhiyq9RbKNcFzF2gy7CEvyofdlecGyc+9YYv4BYrafzZAsmBPw8dkCZRc/lXU3H3KPwqCmjnljfDZh7AVfqtA/ICEnnHRipaubqbejpPAZNHFNNNqCyCCRuDOhtEnpefXwlcvI5tv6uB2psp7bCgAKCi17WczZIpuqbktrWKUmErBMp2BNGzndPLgqo/cSVk0yPghunhDH+ny6jq5HTwHVNz/GGh9tN2f4gldMiqSkFAJV28MOcBO8wPhjXf1Q2XjmZLcIfNZG3EPc96CvHXNMDQLulPol2BRsfz/D3R5k5Q6QaQI+qCOWES3NjwYP0xGpAYl2XLmwIkeMqHYvVFAG2fa2how7rlMg46Kf0H6UQc8Zj5/FCzzo9E7D4ngIm87x5X8+FiG/T8ldwlVU7WsHgiYusVIu1EyqyYrIfv/CTlcK+Bga9DUdzMQWM4hU4nYN0WJWU8GSHh/fxwVB/l++LSWpjayXG3UbrgmooMtYVvyEpQbFBX+heG7onJIX/5HFGYYP3+KPQ6iG+lBNIcrRcc5HDAZMqCk81SciJXxbJ1jrLe70lgujUnh2NZ6dHGvkzGq5L8tHJokfkOJkM/vRhTHdP7Xh/T04E1f+cZJaUB8c8F3mT+6bXQuI5ub9xpn8UFKjaMLGzHxdIWkE6wfGX1difA3ewygKOkGOf/IZ6JxVzS2TqeRfoVXHy9HQst0wW969r8lBWisvbty64abEpRM+whKlY1n35aWSxhX+D2ILhMv0oAwdVOv7yK8+ZDPx33H9lnmWA+PWnW+uBE+LgHQ86n5Z40mNWXYzNus9j7U7ICBDdd3IGVao6fQ7As4YQPLip2eWkKR5PRx9UF/bVRGJltI/2iugeisS1YlpFYf5llqT8feLFcYMQdmzemRp70B7H86SEd0zZcTAJZJ/amSYjKxf7BR1a5JE/FcqqBYOVXspwT9cx/LfBXnoG+4i6vMk2HQrbqFe31LgZhe0KL/PwEPJ/HuyNP24+6lgWEoU5I3+BP3SqmRw4UWEma3MouCjGhHrbRPeOSqZ6ADxEOHjdro2qQBgangoJg/+k/C4lm40YMPklnXzeMbE6A7g5i3w2UfJhOJFSJsc0VtEtH/RG+gksrZOTdCEPKilTtwqHyhayvntpq9jEEH5VN8BjOKG9uxDP+5v/ZiNmmauxbcHNj8f1IIpD0j98vBXkn2gHnTEuH7y1KxzqatUCA2JURY+hn2sObpOSN56ZnHHfnOUDvUbK9RVb8UY6GK9UPcSQ5gfDMtbZqhCZSefwZRYA0USnEKt6IYdMkGF8I316P9qay9Mo3XfuX6E7aWwkEH58sjgy855cOxthFMdAW3DpWywUVfouWgHhNucWaTC3O1Kjpu6wjDE+D4Alc6LW0vA+lgr27bcAh89CN9mtrorYy9tehPehz9MG7Cnf6pUncO7qSbCvNQq6HIualDg6al52+CtSSfB/xhXom6YjCubPFq4PMUZ9EnQOTQPjgr2XvclzoWJfYsc/vV9qitG/SZp6dAKjzuCa/vXbizEwXO8d9rhzx4n4pTVgwgSdxhV9iSk/JV35faYNk1xHfSaFSjyySHHs1bQ42/dOEPy8DqQPbOQ6MmqCksivW2KVqFyzOMc1PzJKcQdsKUitvkXf/qHssyVb3arRnvk/v2P3+jJXotbbW071aFPrKNIY5mo5vfl03Hfl2XiDee3hVqUBwaOSauUaHFYTZFCZANwlzm4uMR8f9V2p5RMoU1q11hS+SQyVcZh5Ln/boX8ZEFkRmkNS4j1bhcvBtRhqQjoUWqJQrhuO8GI2rGqO8bAb+yVPU4t7aTprSitc7mioNVIodN0eTJHlX4kkN5vDaHqHjnUFQtSfLL6QM0cbx7StMqtDdJr82w0OREpiuE6ch3uhllGPuLD0EsAB1DsvLGjpH/ihw6Afp0NYgV3wUb/hz4Ky4uqEWqz+4+/sM1BXA2yhkJam4C9KDxFPnorw6nwKu2OnT+kGXw4JQ6tlGxhmaFEQQQKp3oFP+7Kbc6vpRAeICB/VyVSM/Ot56FAbix84bSXtooW5FL1sv/zV+NhHoOIsWSNMSOkfzwUAFV3/wmZjY9LpHyYPPbS4nigamNFrQdbIM18nC/ilaWKgzwQx23K2fDSMViJq5cWCFPLnyUIFEkSBoMm9iyWypVvmkVsYEWCxOJuJf5ikX3C1F6I9ku63FqPE5aIUlIYjjSB+fQkJKxp6FFYmeNcaIrKJheVxYt4DCY/1tc3aX56iAQREnc6n7V0LK0zaHRcqmNZaRQ5VMOq3Nf60NFZCjs/SC+MBAB2bKQN/FIfCuAEivgNpVLvGSqdy6xw+XynqXuLiMNJWdC8P52pm2aQXzqqCLn/a4dIdRZpLOB9MhtRBqzn54XqFaK4rb2tNzeasejiILlgk8gclGx2aVFB2sITRu+TJQvdrH/vEHyCrc7s98pQtE3CDehyo2lSM/aOUdRr52JwyJQ/1GQVxe/kPU4MF5EJmHrYpguY4Lu4mUegHoV6F9Z2QQQXGA4U+Z3duQ5pA4jeAFH9HOdezgxbGPdaiut2ugDDcnydHc9yQRFh1hE5tO9KRA2/C4n7ciRDtAWUws4NSOi6w/VqwGaWKcdsOBQw6BcBL9Q0lu9hnGcywfiJPvuMCZIUN6TlyxeqZbkCwajLlk46AfrSRL2vnT7pWUuCrQjXRp/ZDWh1vBw7bIqgR7FzFhqBaKDJ7708147Yn9kq4cr+rZ2b3/JxnbZY1weTFF+z7SG7hjQg5TnUuBrawlkIjNJvAgJb3Uy987h8n2hmMvw8CTMSzYeMEyXYuyV9aZh6arPI4Rg0OSm7lV3eIzQ8l5sKICqpVO1ddqZztnDy7fPRg0W6cDkdpZP+0LjubJ0twxPZ+n1so4fR/eXKOx+dSdDa9SBhuhs4rYlzpX+GLteexqp8uu5CT2c8AMml8zdrnyEjSPQr7kBTdtqGaOeSQq0fjVpXA/8lKL9p/lThtHmb3tZpom5m3w+C6Og/33yt5fO3Dw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述左值和右值、C++11中新版的右值引用运算符 &amp;&amp;、std::move()函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6-1）图的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-1%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/</id>
    <published>2019-08-14T16:44:55.000Z</published>
    <updated>2019-08-14T18:07:05.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图"><a class="header-anchor" href="#图">¶</a>图</h4><ul><li>定义：图G(graph)是一些点和线的集合<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/1.png"></li><li>图中的点叫作<strong>顶点</strong>(VerTex)</li><li>两个顶点的连线叫作<strong>边</strong>(Edges)</li><li>Graph = (V,E)<ul><li>V：顶点(数据元素)的<strong>有穷非空</strong>集合</li><li>E：边的有穷集合</li></ul></li></ul></li></ul><hr><h4 id="图的分类"><a class="header-anchor" href="#图的分类">¶</a>图的分类</h4><ul><li><p>无向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"></li><li>每一条边都是没有方向的</li><li>顶点集合{A,B,C,D}</li><li>边集合{(A,B),(A,D),(C,D),(C,B),(A,C)}</li></ul></li><li><p>有向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/3.png" title="其中B为弧头(Head),D为弧尾(Tail)"></li><li>每一条边有方向的，也称弧(arc)</li><li>顶点集合{A,B,C,D}</li><li>边集合{(B,A),(A,D),(B,C),(C,A)}</li></ul></li><li><p>完全图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/4.png"></li><li>任意两个顶点都有一条边相连的图叫作<strong>完全图</strong></li><li>无向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)/2条边</strong></li><li>有向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)条边</strong></li></ul></li><li><p>网</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/5.png"></li><li>网是边或弧<strong>带权</strong>的图</li><li>无向网</li><li>有向网</li></ul></li></ul><hr><h5 id="子图"><a class="header-anchor" href="#子图">¶</a>子图</h5><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/6.png" title="1和2是3的子图"><ul><li>1和2是3的子图</li></ul><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"><ol><li>如果边(V,U)∈E，则称顶点V和U互为邻接点(Adjacent)<ul><li>例：A/B、B/C、C/D…互为邻接点</li></ul></li><li>边(V,U)依附于(incident)顶点V和U(或边与顶点相关联)<ul><li>例：边(A,B)依附于顶点A、B上</li></ul></li><li>顶点V的度(Degree)是和V相关联的边的数量，记为TD(V)，对于有向图：有出度和入度<ul><li>例：A的度为3、D的度为2</li><li><strong>握手定理</strong>：边数(E) = 各顶点度数和/2</li></ul></li></ol><h5 id="相关术语解释"><a class="header-anchor" href="#相关术语解释">¶</a>相关术语解释</h5><ul><li><p>路径</p><ul><li>若从一个顶点V<sub>i</sub>出发，沿一些边经过一些顶点，再到达顶点V<sub>k</sub>,则称沿途的经过顶点的序列为从V<sub>i</sub>到V<sub>k</sub>的路径</li></ul></li><li><p>路径的长度</p><ul><li>路径上的边或弧的数目</li></ul></li><li><p>回路(环)</p><ul><li>起点与终点相同的路径</li></ul></li><li><p>简单路径</p><ul><li><strong>没有重复</strong>顶点的路径，即不含回路</li></ul></li><li><p>简单回路</p><ul><li>除起点和终点相同外，<strong>没有</strong>其余<strong>重复</strong>顶点的路径</li></ul></li></ul><hr><h5 id="连通图"><a class="header-anchor" href="#连通图">¶</a>连通图</h5><ul><li>在<strong>无向图</strong>G中，如果从顶点V到顶点V`<strong>有路径</strong>，则称V和V’是连通的</li><li>如果对于图中的任意两个顶点V<sub>i</sub>和V<sub>k</sub><strong>都是连通</strong>的，则称G是<strong>连通图</strong></li><li>是否连通是对无向图来说的</li></ul><h5 id="强连通图"><a class="header-anchor" href="#强连通图">¶</a>强连通图</h5><ul><li>在<strong>有向图</strong>G中，从顶点u到顶点v有路径，且从顶点v到顶点u也有路径，则称u和v是强连通的</li><li>如果有向图的任意两个顶点u和v都是强连通，则称G是<strong>强连通图</strong></li><li>是否强连通是对于有向图来说的</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图&quot;&gt;¶&lt;/a&gt;图&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：图G(graph)是一些点和线的集合
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&quot;/2019/08/15/数据结构学习总结-（6-1）图的定义及
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14.1）哈夫曼编码表的代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14-1%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/</id>
    <published>2019-08-11T14:39:41.000Z</published>
    <updated>2019-08-11T16:38:48.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码表"><a class="header-anchor" href="#哈夫曼编码表">¶</a>哈夫曼编码表</h4><ol><li>根据构建的哈夫曼树，左分支标记为0有分支标记为1</li><li>通过二维数组保存编码表</li></ol><hr><h5 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h5><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> code[<span class="number">256</span>][<span class="number">128</span>] <span class="comment">//存储哈夫曼编码表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Codeing</span><span class="params">(haffmanNode* node,<span class="keyword">char</span>* temparray,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*处理空结点的情况+递归出口*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*当到达叶结点的时候*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node-&gt;R_Node || !node-&gt;L_Node)&#123;</span><br><span class="line">        temparray[index] = <span class="string">'\0'</span>;</span><br><span class="line">        </span><br><span class="line">        strcpy_s(code[node-&gt;data<span class="number">-0</span>],<span class="number">128</span>,temparray);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归获取编码表*/</span></span><br><span class="line">    temparray[index] = <span class="string">'0'</span>;</span><br><span class="line">    Codeing(node-&gt;L_Node,temparray,index++);</span><br><span class="line">    temparray[index] = <span class="string">'1'</span>;</span><br><span class="line">    Codeing(node-&gt;R_Node,temparray,index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="技术小结："><a class="header-anchor" href="#技术小结：">¶</a>技术小结：</h5><ul><li>temparray数组用来临时存储字符对应的哈夫曼编码，存储格式为字符串</li><li>这里采用二维数组来存储哈夫曼编码表，第一维下标为字符对于的ASCII码，所储存的为对应的编码</li><li>当到达叶结点的时候，在该位置下标的temparry设置为结束符，意味着一个字符串(字符编码)的存储完毕</li></ul><hr><h4 id="编码过程解析"><a class="header-anchor" href="#编码过程解析">¶</a>编码过程解析</h4><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/1.png"><ul><li>第一步：<code>Codeing(haffmanNode* node,char* temparray,int index)</code><ul><li>根据哈夫曼树构建完毕的node数组</li><li>定义<code>char* temparray[128]；</code>index = 0；</li><li>parent4 拥有左右孩子且不空、temparray[0]  = 0</li></ul></li><li>第二步: <code>Codeing(node(parent4)-&gt;L_Node,temparray,index++);</code><ul><li>index = 1</li><li>B无左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>，temparry[1] = ‘\0’</li><li>code[66(B)] = “0”</li><li>return结束此处递归</li></ul></li><li>第三步： <code>Codeing(node(parent4)-&gt;R_Node,temparray,index++);</code><ul><li>index = 1、temparray[0] = 1</li><li>parent3 拥有左右孩子且不空执行左递归、temparry[1] = 0</li></ul></li><li>第四步：<code>Codeing(node(parent3)-&gt;L_Node,temparray,index++);</code><ul><li>index = 2</li><li>D结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[2] = ‘\0’</li><li>code[68(D)] = “10”</li><li>return结束此处递归</li></ul></li><li>第五步：<code>Codeing(node(parent3)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[1] = 1,index = 2</li><li>parent2拥有左右孩子且不空指向左递归、temparry[2] = 0</li></ul></li><li>第六步：<code>Codeing(node(parent2)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 3</li><li>parent1拥有左右孩子且不空指向左递归、temparry[3] = 0</li></ul></li><li>第七步：<code>Codeing(node(parent1)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 4</li><li>C结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[67©] = “1100”</li><li>return结束此处递归</li></ul></li><li>第八步：<code>Codeing(node(parent1)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[3] = 1，index = 4</li><li>E结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[69(E)] = “1101”</li><li>return结束此处递归</li></ul></li><li>第九步：<code>Codeing(node(parent2)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[2] = 1、index = 3</li><li>A结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[3] = ‘\0’</li><li>code[65(A)] = “111”</li></ul></li></ul><hr><ul><li><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/2.png"></li><li><table><thead><tr><th style="text-align:center">code[下标]</th><th style="text-align:center">储存元素（编码）</th></tr></thead><tbody><tr><td style="text-align:center">65（A）</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">66（B）</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">67（C）</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">68（D）</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">69（E）</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><h5 id="解析过程错误小结："><a class="header-anchor" href="#解析过程错误小结：">¶</a>解析过程错误小结：</h5><ul><li>函数递归时传参是形参，即index在递归时自加了。结束该分支后返回上一个函数时index值还是递归自加前的值</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码表&quot;&gt;¶&lt;/a&gt;哈夫曼编码表&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;根据构建的哈夫曼树，左分支标记为0有分支标记为1&lt;/li&gt;
&lt;li&gt;通过二维数组保存编码表&lt;/li&gt;
&lt;/ol&gt;
&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14）哈夫曼树的构建代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/</id>
    <published>2019-08-10T17:16:45.000Z</published>
    <updated>2019-08-11T14:37:32.852Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树的构建"><a class="header-anchor" href="#哈夫曼树的构建">¶</a>哈夫曼树的构建</h4><h5 id="哈夫曼树的构建步骤"><a class="header-anchor" href="#哈夫曼树的构建步骤">¶</a>哈夫曼树的构建步骤</h5><ol><li>根据权重进行从小到大排列</li><li>取最小的两个构成一个子树,并使两个的权值相加用来代替这两个结点</li><li>根据这个新的权重再进行排列</li><li>重复1.2.3步</li></ol><hr><h5 id="代码实现-顺序结构储存"><a class="header-anchor" href="#代码实现-顺序结构储存">¶</a>代码实现(顺序结构储存)</h5><ul><li><p>结点的构建</p><ul><li><p>根据哈夫曼树的构建，结点首先要包含权值、左右子树指针，其次要包含数据</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">haffmanNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weigth;<span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    </span><br><span class="line">    haffmanNode* L_Node;<span class="comment">//左孩子</span></span><br><span class="line">    haffmanNode* R_Node;<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序结构存储二叉树*/</span></span><br><span class="line"></span><br><span class="line">haffmanNode node[<span class="number">256</span>]；</span><br><span class="line"></span><br><span class="line">haffmanNode allL_Node[<span class="number">128</span>];</span><br><span class="line">haffmanNode allR_Node[<span class="number">128</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据权值进行排序(冒泡排序)</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortHaffmanNode</span><span class="params">(haffmanNode* nodes,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    haffmanNode temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">1</span> - i; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes[k].weight &lt; nodes[k+<span class="number">1</span>].weight)&#123;</span><br><span class="line">                temp = nodes[k];</span><br><span class="line">                nodes[k] = nodes[k+<span class="number">1</span>];</span><br><span class="line">                nodes[k+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>哈夫曼树的构建</p><ul><li><p>对结点先进行排序取最小的构成一颗树</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHaffmanTree</span><span class="params">(haffmanNode* nodes, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据权值进行排序*/</span></span><br><span class="line">    sortHaffmanNode(nodes,length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*用来压缩成哈夫曼编码用*/</span></span><br><span class="line">    allL_Node[length] = nodes[length<span class="number">-1</span>];<span class="comment">//保存左结点</span></span><br><span class="line">    allR_Node[length] = nodes[length<span class="number">-2</span>];<span class="comment">//保存右结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*取最小权重的两个结点重新组成树*/</span></span><br><span class="line">    haffmanNode parent;</span><br><span class="line">    parent.weight = allL_Node[length].weight + allR_Node[length].weight;</span><br><span class="line">    </span><br><span class="line">    parent.L_Node = &amp;allL_Node[length];</span><br><span class="line">    parent.R_Node = &amp;allR_Node[length];</span><br><span class="line">    </span><br><span class="line">    nodes[length - <span class="number">2</span>] = parent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归直至哈夫曼树创建完成</span></span><br><span class="line">    CreateHaffmanTree(nodes,length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="哈夫曼树构建解析"><a class="header-anchor" href="#哈夫曼树构建解析">¶</a>哈夫曼树构建解析</h4><p>例图：<img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/1.png"></p><ul><li><p>第一步：<code>void CreateHaffmanTree(haffNode* node, int length)</code></p><ul><li><p>node数组内容{A(12),B(26),C(5),D(18),E(4)}，length = 5；</p></li><li><p>排序后 node{B,D,A,C,E},取最小结点C、E组成树</p></li><li><p><code>allL_Node[5] = C、allR_Node[5] = E</code></p></li><li><p>parent1：weight = (4 + 5)9、L_Node = C、R_Node = E</p></li><li><p>node 数组内容变更为{B(26),D(18),A(12),parent1(9)}</p></li></ul></li><li><p>第二步：<code>CreateHaffmanTree(node, length - 1(4))</code></p><ul><li>node 数组内容{B(26),D(18),A(12),parent1(9)}，length = 4</li><li>排序后 node{B,D,A,parent1},取最小结点A、parent1组成树</li><li><code>allL_Node[4] = parent1、allR_Node[4] = A</code></li><li>parent2：weight = (9+12)21、L_Node = parent1、R_Node = A\</li><li>node 数组内容变更为{B(26),D(18),parent2(21)}</li></ul></li><li><p>第三步：<code>CreateHaffmanTree(node, length - 1(3))</code></p><ul><li>node 数组内容{B(26),D(18),parent2(21)}、length = 3</li><li>排序后 node{B,parent2,D},取最小结点parent2、D组成树</li><li><code>allL_Node[3] = D、allR_Node[3] = parent2</code></li><li>parent3：weight = (18+21)39、L_Node = D、R_Node = parent2</li><li>node 数组内容变更为{B(26),parent3(39)}</li></ul></li><li><p>第四步：<code>CreateHaffmanTree(node, length - 1(2))</code></p><ul><li>node 数组内容{B(26),parent3(39)}、length = 2</li><li>排序后 node{parent3,B},取最小结点parent3、B组成树</li><li><code>allL_Node[2] = B、allR_Node[2] = parent3</code></li><li>parent4：weight = (26+39)65、L_Node = B、R_Node = parent3</li><li>node 数组内容变更为{parent4(65)}</li></ul></li><li><p>第五步：<code>CreateHaffmanTree(node, length - 1(1))</code></p><ul><li>length = 1 符合<code>if(length &lt;= 1)return;</code>结束递归，哈夫曼树创建完毕</li></ul></li></ul><hr><img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/2.png"><table><thead><tr><th style="text-align:center">allL_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">parent1</td><td style="text-align:center">C</td></tr></tbody></table><table><thead><tr><th style="text-align:center">allR_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">parent3</td><td style="text-align:center">parent2</td><td style="text-align:center">A</td><td style="text-align:center">E</td></tr></tbody></table><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树的构建&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建&quot;&gt;¶&lt;/a&gt;哈夫曼树的构建&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼树的构建步骤&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建步骤&quot;&gt;¶&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.13）哈夫曼编码</title>
    <link href="https://shuhaohwang.github.io/2019/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-13%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://shuhaohwang.github.io/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/</id>
    <published>2019-08-09T16:46:14.000Z</published>
    <updated>2019-08-09T17:49:51.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码"><a class="header-anchor" href="#哈夫曼编码">¶</a>哈夫曼编码</h4><h5 id="哈夫曼编码是什么？"><a class="header-anchor" href="#哈夫曼编码是什么？">¶</a>哈夫曼编码是什么？</h5><p>哈夫曼编码是用来压缩数据的一种手段，在网络上信息的传输都是通过二进制来进行输送的（0和1），在进行数据输送的时候，首先就要将即将输送的数据进行转码，使其变为二进制再进行传输。例如：</p><ul><li><p>要传输<code>‘ABCADBBAED’</code>这段数据。且你知道一个二进制转换编码表：</p><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">000</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">101</td></tr></tbody></table></li></ul></li><li><p>则这段字符串会先转换成二进制码：<code>000100110000111100100000101111</code></p></li><li><p>上面的二进制转换表编码是以3位进行编码的，而用哈夫曼编码进行编译转换，则会让这段字符串传输的时候能够更为简短。</p></li></ul><h5 id="哈夫曼编码的使用"><a class="header-anchor" href="#哈夫曼编码的使用">¶</a>哈夫曼编码的使用</h5><p>哈夫曼编码是通过哈夫曼树进行转换出来的，例如在上面的字符串：<code>‘ABCADBBAED’</code>是出现在一个文章里面的，这个文章里面含有：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">出现次数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">4</td></tr></tbody></table><p>根据上表进行转换为哈夫曼树</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/1.png"><p>通过对哈夫曼树处理，往左走为0往右走为1，通过记录会形成一个新的转换表</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><p>根据表中的内容把要输送的字符串<code>‘ABCADBBAED’</code>进行转换成二进制<code>111011001111000111110110</code></p><p>对比一开始用3个编码进行转换的字符串编码会发现，哈夫曼编码进行转换处理的二进制码数为24个，比前面的少了6个，可以发现运用哈夫曼编码可以使传输的二进制码被压缩成更简单二进制码。</p><hr><h5 id="哈夫曼编码的好处"><a class="header-anchor" href="#哈夫曼编码的好处">¶</a>哈夫曼编码的好处</h5><ul><li><strong>使转换的二进制码更简洁</strong><ul><li>哈夫曼编码是通过检测传输的字符串中字符的出现频率进行生成对应的编码表。采用的是前缀编码。</li></ul></li><li><strong>因为采用的前缀的编码，进行译码的时候减少出错</strong></li><li>…</li></ul><hr><h4 id="译码"><a class="header-anchor" href="#译码">¶</a>译码</h4><p>进行译码的过程很简单，通过一开始构建的哈夫曼树，进行译码。</p><ul><li><p>例如：<code>111011001111000111110110</code></p><ul><li><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"></li></ul></li><li><p>译码过程：<strong>从根开始</strong>遇到0就走左，遇到1就走右，当到达叶结点的时候，翻译出该字符，然后<strong>重新返回根结点重新识别</strong></p></li><li><p>译码结果：ABCADBBAED</p></li></ul><hr><h5 id="小结："><a class="header-anchor" href="#小结：">¶</a>小结：</h5><ul><li>从上面的译码过程可以看出，对哈夫曼编码编码后的二进制码进行译码的时候只需根据编码对哈夫曼树进行遍历即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码&quot;&gt;¶&lt;/a&gt;哈夫曼编码&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼编码是什么？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码是什么？&quot;&gt;¶&lt;/a&gt;哈夫曼
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.12）中序线索二叉树的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-12%EF%BC%89%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/</id>
    <published>2019-08-03T09:03:17.000Z</published>
    <updated>2019-08-03T11:04:43.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中序线索二叉树"><a class="header-anchor" href="#中序线索二叉树">¶</a>中序线索二叉树</h4><p>在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。</p><hr><h4 id="中序线索二叉树的遍历算法"><a class="header-anchor" href="#中序线索二叉树的遍历算法">¶</a>中序线索二叉树的遍历算法</h4><p>通过构建的中序线索二叉树的特点。叶子结点存在直接指向前驱和后继的结点的指针，在遍历的时候就可以快速的定位。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threaded_Mid_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R-&gt;L_Node)&#123;</span><br><span class="line">        R = R-&gt;L_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; R-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!R-&gt;RTag)&#123;</span><br><span class="line">            R = R-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(R-&gt;LTag)&#123;</span><br><span class="line">                R = R-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> R = R-&gt;R_Node; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/1.png"></p></li></ul></li></ul><hr><h4 id="总结："><a class="header-anchor" href="#总结：">¶</a>总结：</h4><p>通过利用线索来进行遍历就可以避免递归或者要使用栈结构来进行遍历。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;中序线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#中序线索二叉树&quot;&gt;¶&lt;/a&gt;中序线索二叉树&lt;/h4&gt;
&lt;p&gt;在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。&lt;/p&gt;

      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.11）线索二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-11%EF%BC%89%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-11）线索二叉树/</id>
    <published>2019-08-03T02:08:19.000Z</published>
    <updated>2019-08-03T09:41:50.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线索二叉树"><a class="header-anchor" href="#线索二叉树">¶</a>线索二叉树</h4><p>在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也会存在左右孩子不存在的情况下，那么这些空的指针往往会造成资源的浪费，这就为什么要存在线索二叉树，它能使这些空掉的指针能重新运用起来。</p><h5 id="线索二叉树的构成"><a class="header-anchor" href="#线索二叉树的构成">¶</a>线索二叉树的构成</h5><p>为了实现线索二叉树能够使空的指针能被重新利用起来，所以在结点结构定义的时候再添加两个标识符变量。这些标识符存在的目的是为了区分一个结点的左右孩子是否为空，如果是空那么就会指向前驱或者后置结点，如果不为空说明这个指针是指向左右孩子的。</p><img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/1.png"><p>从上面的图可以看出来，当右标识符为<code>'0'</code>的时候说明他的右孩子指针指向的是右孩子，当标识符为<code>'1'</code>的时候，说明这个结点的右孩子指针指向的不是右孩子(即：该结点没有右孩子)而是这个结点的前驱结点，同理，左标识符便是判断其左孩子的指针是指向后置结点还是左孩子。</p><hr><h4 id="二叉树线索化"><a class="header-anchor" href="#二叉树线索化">¶</a>二叉树线索化</h4><p>根据上面所说的线索二叉树，从最基本的来看，线索二叉树相比普通二叉树就是在没有左孩子或者右孩子的结点中这些本该指向左右孩子的指针不为空，使其能重新废物利用。所以把一个二叉树线索化的主要思路便是遍历一个二叉树，逐一判断每个结点的左右孩子是否为空，若为空那么就让其能指向这个结点的前驱结点或者后置结点。</p><ul><li><p>综上所述，线索化的主要操作就是基于遍历算法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此区域内实现线索二叉树的主要操作...</span></span><br><span class="line">    </span><br><span class="line">    Tree_Threaded(R -&gt; R_Node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在开始线索化之前还需要将结点结构进行变化，即要多定义两个标识符表示用来进行判断左右孩子指针的指向。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node;</span><br><span class="line">    BiTreeNode* R_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*标识符变量*/</span></span><br><span class="line">    <span class="keyword">int</span> RTag;</span><br><span class="line">    <span class="keyword">int</span> LTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>其次二叉树存在没有利用的指针，线索化后，这些空指针会指向该结点的前驱结点或者后置结点，这也就是说在线索化过程中还要有两个临时变量能够指向受判断结点的前驱结点和后置结点，方便在判断该结点在没有左右孩子的情况下，使其两个指针能够快速的指向前驱和后置结点。</p><hr><h4 id="线索化二叉树的代码实现"><a class="header-anchor" href="#线索化二叉树的代码实现">¶</a>线索化二叉树的代码实现</h4><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R，BiTreeNode* &amp;pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node,pre);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!R-&gt;L_Node)&#123;</span><br><span class="line">        R-&gt;L_Node = pre;</span><br><span class="line">        R-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre &amp;&amp; !pre-&gt;R_Node)&#123;</span><br><span class="line">        pre-&gt;R_Node = R;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> pre = R;</span><br><span class="line">    Tree_Threaded(R -&gt; R_Node,pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="二叉树线索化解析："><a class="header-anchor" href="#二叉树线索化解析：">¶</a>二叉树线索化解析：</h5><p>例图：<img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/2.png"></p><ul><li><p>第一次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr></tbody></table><ul><li>pre指向D</li></ul></li></ul><hr><ul><li><p>第二次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向B，递归至E结点后指向E</li></ul></li></ul><hr><ul><li><p>第三次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向E后指向A</li></ul></li></ul><hr><ul><li><p>第四次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向A后指向C</li></ul></li></ul><hr><h4 id="线索二叉树的好处："><a class="header-anchor" href="#线索二叉树的好处：">¶</a>线索二叉树的好处：</h4><p>从上面可以看出，线索二叉树的一些结点空出来的指针被重新利用起来，再到达叶子结点的时候，可以直接通过左右孩子的指针快速定位到其的前驱结点或后继结点，根据这个性质在进行遍历的时候就可以直接访问这些通过线索链接起来的结点。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#线索二叉树&quot;&gt;¶&lt;/a&gt;线索二叉树&lt;/h4&gt;
&lt;p&gt;在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5-10）前序遍历非递归实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-10%EF%BC%89%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/01/数据结构学习总结-（5-10）前序遍历非递归实现/</id>
    <published>2019-08-01T08:41:16.000Z</published>
    <updated>2019-08-15T13:33:14.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序遍历的非递归实现"><a class="header-anchor" href="#前序遍历的非递归实现">¶</a>前序遍历的非递归实现</h4><ul><li><p>思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问和移动，因为是堆栈所以要注意，在进行左右孩子移动的时候，应该让右孩子先入栈，左孩子后入栈，根据栈结构FIBO(先进后出)的结构特点，所以左孩子会先进行访问</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pre_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = R;</span><br><span class="line">    s.push(T);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(T-&gt;R_Node)s.push(T-&gt;R_Node);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;L_Node)s.push(T-&gt;L_Node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序遍历的非递归实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前序遍历的非递归实现&quot;&gt;¶&lt;/a&gt;前序遍历的非递归实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9.1）二叉树的遍历非递归[附加]</title>
    <link href="https://shuhaohwang.github.io/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9-1%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92-%E9%99%84%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/07/31/数据结构学习总结-（5-9-1）二叉树的遍历非递归-附加/</id>
    <published>2019-07-31T10:26:28.000Z</published>
    <updated>2019-07-31T15:57:24.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码1"><a class="header-anchor" href="#代码1">¶</a>代码1:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()||T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T)&#123;</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">            s.push(T)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            T = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            T = T-&gt;R_Node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码2："><a class="header-anchor" href="#代码2：">¶</a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">BiTreeNode* T = Root;</span><br><span class="line">s.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(T = s.top())</span><br><span class="line">            s.push(T-&gt;L_Node);</span><br><span class="line">        </span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            T = s.top();s.pop();</span><br><span class="line">        <span class="keyword">if</span> (!Visit(T))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s.push(T-&gt;R_Node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码1&quot;&gt;¶&lt;/a&gt;代码1:&lt;/h4&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9）二叉树的遍历非递归</title>
    <link href="https://shuhaohwang.github.io/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://shuhaohwang.github.io/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/</id>
    <published>2019-07-25T06:56:21.000Z</published>
    <updated>2019-07-25T07:51:36.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归的优缺点"><a class="header-anchor" href="#递归的优缺点">¶</a>递归的优缺点</h4><p>二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函数的调用是要消耗系统内存的，在小范围小幅度的递归对程序不会有太大的影响，但是如果递归的深度太大，会使内存枯竭，程序崩溃。即：递归即有好处也有坏处</p><ul><li>递归的优点：<ul><li>代码简洁</li></ul></li><li>递归的缺点：<ul><li>过多递归会影响系统内存和程序运行效率</li></ul></li></ul><hr><h4 id="二叉树非递归的代码实现及思路"><a class="header-anchor" href="#二叉树非递归的代码实现及思路">¶</a>二叉树非递归的代码实现及思路</h4><p>正如上面所说，函数递归在遍历较小的二叉树是没有太大的问题的。但若遍历深度巨大的二叉树，使用递归来遍历是不太可行的。所以二叉树非递归的方式来实现遍历也理所当然的变的重要。</p><ul><li><p>二叉树非递归遍历的实现<strong>思路</strong>：通过栈数据结构，进行入栈操作，先把树的每一个结点的左孩子入栈直至访问到叶结点，随后进行访问，访问一个出栈一个，并检测此时的右孩子是否为空，若不空，重复上述的操作即可。</p></li><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            s.push(T);</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        T = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        T = T-&gt;R_Node;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!s.Empty()||T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/1.png"></p></li></ul></li></ul><hr><h4 id="函数流程演示"><a class="header-anchor" href="#函数流程演示">¶</a>函数流程演示</h4><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/2.png"><ul><li><p>第一步：A结点不空进入循环，入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第二步：B结点入栈、第三次循环D结点入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第三步：跳出循环，T指针指向栈顶,访问栈顶数据，并出栈。</p><ul><li><p><code>T：-&gt;D</code></p></li><li><p><strong>输出了D</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第四步：T重新指向此时指向结点的右孩子。第一次外循环结束。</p><ul><li><code>T：-&gt;D.R_Node(nullptr)</code></li></ul></li><li><p>第五步：开始第二次外循环，因为T为空内循环不执行、T指向栈顶，访问栈顶数据。</p><ul><li><p><code>T：-&gt;B</code></p></li><li><p><strong>输出了B</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li></ul><ul><li><p>第六步：T指向了B结点的右孩子E，结束第二次外循环。</p><ul><li><code>T：-&gt;E</code></li></ul></li><li><p>第七步：此时T不空执行内循环，E入栈,T指向E结点的左孩子,因为E结点的左孩子为空跳出循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">E</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第八步：T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;E</code></p></li><li><p><strong>输出了E</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第九步：T指向E结点的右孩子，因为为空所以结束第三次外循环。</p><ul><li><code>T：-&gt;E.R_Node(nullptr)</code></li></ul></li><li><p>第十步：因为此时T为空不执行内循环，T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;A</code></p></li><li><p><strong>输出了A</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十一步：T指向A结点的右孩子C，因为是空栈，所以也结束第四次外循环，重新开始下一轮循环。</p><ul><li><code>T：-&gt;C</code></li></ul></li><li><p>第十二步：T不为空，指向内循环，入栈，更新T指向C的左孩子，为空结束内循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">C</td></tr></tbody></table></li></ul></li><li><p>第十三步：T指向栈顶，访问栈顶，出栈</p><ul><li><p><code>T：-&gt;C</code></p></li><li><p><strong>输出了C</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十四步：T指向C结点的右孩子，但为空，且栈也为空栈，跳出外循环。结束遍历操作。</p></li><li><p>结果输出：D、B、E、A、C</p></li><li><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/3.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归的优缺点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#递归的优缺点&quot;&gt;¶&lt;/a&gt;递归的优缺点&lt;/h4&gt;
&lt;p&gt;二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.8）哈夫曼树概念及定义</title>
    <link href="https://shuhaohwang.github.io/2019/07/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-8%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%9A%E4%B9%89/"/>
    <id>https://shuhaohwang.github.io/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/</id>
    <published>2019-07-23T13:18:38.000Z</published>
    <updated>2019-07-23T19:16:00.191Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树概念"><a class="header-anchor" href="#哈夫曼树概念">¶</a>哈夫曼树概念</h4><p>给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树。</p><h5 id="相关术语及概念解释"><a class="header-anchor" href="#相关术语及概念解释">¶</a>相关术语及概念解释</h5><ul><li><u>路径和路径长度</u>：从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数量称为路径长度。<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="A到B的路径长度为1，A到F和A到D的路径长度为2"></li></ul></li><li><u>树的路径长度：</u>就是树根到<font color="red">每一个结点</font>的路径长度之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="该树的路径长度为 1+1+2+2+2 = 8"></li></ul></li><li><u>带权路径长度：</u>从根结点到该结点之间的路径长度与权的乘积<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="0号点到3号点的带权路径长度为`1*83 + 2*11 = 105`"></li></ul></li><li><u>树的带权路径长度：</u>就是树的每一个结点路径长度乘以权值之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="树的带权路径长度为`1*83 + 2*11 + 2*9 + 1*27 = 150`"></li></ul></li><li>其中树的带权路径长度(WPL)若为最小，那么就称这个数为哈夫曼树</li></ul><hr><h4 id="哈夫曼树的应用"><a class="header-anchor" href="#哈夫曼树的应用">¶</a>哈夫曼树的应用</h4><ul><li><p>场景设置</p></li><li><p>假设要对一个班级里的50位同学进行评分，其中人员分数分配如下</p></li><li><table><thead><tr><th></th><th>优秀</th><th>良好</th><th>中等</th><th>及格</th><th>不及格</th></tr></thead><tbody><tr><td>分值a</td><td>a&gt;=90</td><td>80&lt;=a&lt;90</td><td>70&lt;=a&lt;80</td><td>60&lt;=a&lt;70</td><td>a&lt;60</td></tr><tr><td>人数</td><td>8</td><td>21</td><td>12</td><td>7</td><td>2</td></tr></tbody></table></li><li><p>并把他们用下面的二叉树进行统计分类</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/3.png"></li><li>会发现 要想把所有人进行统计完毕一共需要判断 <code>2*1 + 2*7 + 3*12 + 4*21 + 4*8 = 168次</code>。</li></ul></li><li><p>如果把上面的树进行变换变为如下的二叉树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/4.png"></li><li>一共需要判断<code>3*2 + 7*3 + 12*2 + 21*2 + 2*8 = 109</code>次相比前面的二叉树发现判断的次数变少了，说明用第二种二叉树进行判断分类效率更高。</li></ul></li><li><p>从上面可以发现，判断次数的计算类似于树的带权距离计算。所以只要保证其树的带权距离最短那么效率就会越高。</p></li></ul><hr><h4 id="哈夫曼树的生成"><a class="header-anchor" href="#哈夫曼树的生成">¶</a>哈夫曼树的生成</h4><p>就以上面的的例子创建哈夫曼树</p><ul><li><p>第一步：对人数进行排序(也就是对权值进行排序)从大到小的顺序分别是</p><ul><li><table><thead><tr><th>良好</th><th>中等</th><th>优秀</th><th>及格</th><th>不及格</th></tr></thead><tbody><tr><td>21</td><td>12</td><td>8</td><td>7</td><td>2</td></tr></tbody></table></li></ul></li><li><p>第二步：取最小的两个作为左右结点(习惯性左节点小于右节点)并让其和称为其根结点</p><ul><li>即：<img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/5.png"></li></ul></li><li><p>第三步：将其和加入原来的从大到小排列的顺序中替代最小的两个，重新排序</p><ul><li><table><thead><tr><th>良好</th><th>中等</th><th>及格/不及格</th><th>优秀</th></tr></thead><tbody><tr><td>21</td><td>12</td><td>9</td><td>8</td></tr></tbody></table></li></ul></li><li><p>第四步：取最小的两个重复第二步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/6.png"></li></ul></li><li><p>第五步：把左右子树的和代替原来的优秀和及格/不及格，重新排序</p><ul><li><table><thead><tr><th>良好</th><th>优秀、及格/不及格</th><th>中等</th></tr></thead><tbody><tr><td>21</td><td>17</td><td>12</td></tr></tbody></table></li></ul></li><li><p>第六步，重复第四步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/7.png"></li></ul></li><li><p>第七步：继续替换并重新排序</p><ul><li><table><thead><tr><th>良好</th><th>优秀、及格/不及格、中等</th></tr></thead><tbody><tr><td>21</td><td>29</td></tr></tbody></table></li></ul></li><li><p>第八步：重复第四步 完成哈夫曼树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/8.png"></li><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/9.png"></li></ul></li></ul><p>根据上图可知：要完全判断分类，需要判断<code>21*1 + 12*2 + 8*3 + 2*4 + 7*4 = 105</code>次比一开始109更有效率，这就哈夫曼树也称最优二叉树的创建。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树概念&quot;&gt;¶&lt;/a&gt;哈夫曼树概念&lt;/h4&gt;
&lt;p&gt;给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树。&lt;/p&gt;
&lt;h5 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.6）RTTI运行时类型检测</title>
    <link href="https://shuhaohwang.github.io/2019/07/22/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89RTTI%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
    <id>https://shuhaohwang.github.io/2019/07/22/C-进阶学习总结-（2-6）RTTI运行时类型检测/</id>
    <published>2019-07-22T14:18:08.000Z</published>
    <updated>2019-07-23T07:55:22.960Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中RTTI的机制、dynamic_cast运算符、typeid运算符（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.5)友元函数、友元类</title>
    <link href="https://shuhaohwang.github.io/2019/07/21/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-5-%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E3%80%81%E5%8F%8B%E5%85%83%E7%B1%BB/"/>
    <id>https://shuhaohwang.github.io/2019/07/21/C-进阶学习总结-2-5-友元函数、友元类/</id>
    <published>2019-07-21T06:12:49.000Z</published>
    <updated>2019-07-21T08:01:57.881Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中的友元函数、友元类、友元成员函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
