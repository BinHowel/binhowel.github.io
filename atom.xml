<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-08-28T15:22:12.371Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>概率论与数理统计（一）</title>
    <link href="https://shuhaohwang.github.io/2019/08/28/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/08/28/概率论与数理统计（一）/</id>
    <published>2019-08-28T14:43:55.000Z</published>
    <updated>2019-08-28T15:22:12.371Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事件运算及概率"><a href="#事件运算及概率" class="headerlink" title="事件运算及概率"></a>事件运算及概率</h4><ul><li>事件运算<ul><li>包含事件<ul><li>A</li></ul></li><li>并事件<ul><li>A∪B = A+B</li></ul></li><li>差事件<ul><li>A - B  = AC<sub>B</sub> = A - AB</li></ul></li><li>交事件<ul><li>A∩B = AB</li></ul></li><li>互斥事件<ul><li>AB = ∅</li></ul></li><li>对立事件<ul><li>A∪C<sub>A</sub> = S; AC<sub>A</sub>  = ∅</li></ul></li><li>独立事件<ul><li>P(AB) = P(A)P(B)</li></ul></li></ul></li><li>其他：<ul><li><strong>A、B独立：</strong><ul><li>A、C<sub>B</sub>     C<sub>A</sub>、B    C<sub>A</sub>、C<sub>B</sub>互相独立</li></ul></li><li><strong>A、B、C独立：</strong><ul><li>A、B、C两两相互独立(充分不必要)</li><li>P(ABC) = P(A)P(B)P(C)</li></ul></li></ul></li></ul><hr><h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><ul><li><p>德摩根率：</p><ul><li><script type="math/tex; mode=display">C_{A∪B} = C_A · C_B\\C_{A∪B} = C_A∪C_B</script></li></ul></li><li><p>加法公式</p><ul><li><script type="math/tex; mode=display">P(A∪B) = P(A) + P(B) - P(AB)\\P(A∪B∪C) = P(A) + P(B) + P(C) - P(AB) - P(AC) - P(BC) + P(ABC)</script></li></ul></li><li><p>减法公式</p><ul><li><script type="math/tex; mode=display">P(A-B) = P(AC_B) = P(A) - P(AB)</script></li></ul></li><li><p>对立事件</p><ul><li><script type="math/tex; mode=display">P(C_A) = 1 - P(A)</script></li></ul></li><li><p>独立事件</p><ul><li><script type="math/tex; mode=display">P(AB) = P(A)·P(B)</script></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事件运算及概率&quot;&gt;&lt;a href=&quot;#事件运算及概率&quot; class=&quot;headerlink&quot; title=&quot;事件运算及概率&quot;&gt;&lt;/a&gt;事件运算及概率&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;事件运算&lt;ul&gt;
&lt;li&gt;包含事件&lt;ul&gt;
&lt;li&gt;A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://shuhaohwang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.7）深度优先搜索(邻接矩阵)</title>
    <link href="https://shuhaohwang.github.io/2019/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-7%EF%BC%89%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/</id>
    <published>2019-08-21T13:26:44.000Z</published>
    <updated>2019-08-22T07:42:47.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵的DFS-深度优先搜索-代码实现及思路"><a href="#邻接矩阵的DFS-深度优先搜索-代码实现及思路" class="headerlink" title="邻接矩阵的DFS(深度优先搜索)代码实现及思路"></a>邻接矩阵的DFS(深度优先搜索)代码实现及思路</h4><ol><li><strong>实现邻接矩阵DFS算法的前提</strong></li></ol><ul><li><p>思路：要实现邻接矩阵的DFS算法，首先就要在邻接矩阵的结构中设置一个标记数组，用来对应顶点数组在遍历过程中的访问情况，即已经访问过的顶点将被标记已被访问，没有访问的将被标记未访问。</p></li><li><p>代码1：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"> ....</span><br><span class="line">     </span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;Mark;<span class="comment">//标记数组</span></span><br><span class="line">     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建标记数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_mark</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//避免重复创建+验证</span></span><br><span class="line">    <span class="keyword">if</span>(Mark.size() != Vertex.size())<span class="keyword">return</span>;<span class="comment">//Vertex是顶点数组</span></span><br><span class="line">    </span><br><span class="line">    Mark.resize(Vertex.size(),<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><strong>遍历实现DFS</strong></li></ol><ul><li><p>思路：根据标识数组来确定是否要访问，函数参数可以更加顶点数组来指定结点开始，并可以通过函数指针作为参数之一多样化的去遍历图</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Mark.size())<span class="keyword">return</span>;</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    vistit(Vertex[ID]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Vertex.size(); k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edges[ID][k] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[k])</span><br><span class="line">                DFS(k,visit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>代码解析</strong></p><img src="/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/1.png"><div class="table-container"><table><thead><tr><th style="text-align:center">Mark/Vertex</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">false</td></tr></tbody></table></div><ul><li>邻接矩阵</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><ul><li>第一步<code>DFS(unsigned int ID,void(*visit)(const VT&amp; vertex))</code><ul><li>Mark[0] = true；</li><li>输出了A</li><li>Edge[0] [0]不输出，输出B,C,D</li></ul></li></ul><hr><ol><li>堆栈实现</li></ol><ul><li><p>思路：通过堆栈来模拟递归实现</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    create_mark();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vertex.size(); i++)&#123;</span><br><span class="line">        DFS_(i,visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(ID);</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">auto</span> v = s.top();s.pop();</span><br><span class="line">        visit(Vertex[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; Vertex.size(); w++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edge[ID][w] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[w])&#123;</span><br><span class="line">                s.push(w);</span><br><span class="line">                Mark[w] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵的DFS-深度优先搜索-代码实现及思路&quot;&gt;&lt;a href=&quot;#邻接矩阵的DFS-深度优先搜索-代码实现及思路&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵的DFS(深度优先搜索)代码实现及思路&quot;&gt;&lt;/a&gt;邻接矩阵的DFS(深度优先搜索)代
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.6）图的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-6%EF%BC%89%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/20/数据结构学习总结-（6-6）图的遍历/</id>
    <published>2019-08-20T03:53:51.000Z</published>
    <updated>2019-08-22T07:47:14.507Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的遍历（图的遍历是图的基本运算）"><a href="#图的遍历（图的遍历是图的基本运算）" class="headerlink" title="图的遍历（图的遍历是图的基本运算）"></a>图的遍历（图的遍历是图的基本运算）</h4><ul><li>定义：从已给的连通图中的某一个顶点出发，沿着一些边去访问遍历图中所有的顶点，且使每个顶点仅被访问一次</li><li>实质：找每个顶点的邻接点的过程</li></ul><hr><h4 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h4><ul><li>深度优先搜索(DFS)<ul><li>类似树的先序遍历</li></ul></li><li>广度优先搜索(BFS)<ul><li>类似树的层次遍历</li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的遍历（图的遍历是图的基本运算）&quot;&gt;&lt;a href=&quot;#图的遍历（图的遍历是图的基本运算）&quot; class=&quot;headerlink&quot; title=&quot;图的遍历（图的遍历是图的基本运算）&quot;&gt;&lt;/a&gt;图的遍历（图的遍历是图的基本运算）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：从
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.5）图的实现-邻接表</title>
    <link href="https://shuhaohwang.github.io/2019/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-5%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/</id>
    <published>2019-08-17T16:31:21.000Z</published>
    <updated>2019-08-19T13:02:41.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承载，通俗点讲，就是把一堆链表用顺序表进行存储的结构。</p><img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/1.png"><hr><h5 id="邻接表的实现及思路"><a href="#邻接表的实现及思路" class="headerlink" title="邻接表的实现及思路"></a>邻接表的实现及思路</h5><p><strong>邻接表的结构</strong></p><ul><li><p>思路：邻接表结构是由一个顶点结点数组，和各个邻接点组成的，其中顶点数组中含有顶点数据和指向邻接点的链域，而邻接点由邻接点域(对应顶点数组的顶点下标)和顶点所连接的其他顶点的邻接点地址。所以实现邻接表结构，首先就要有顶点数组和邻接点结构。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*邻接点结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点数组下标</span></span><br><span class="line">        Einfo info;<span class="comment">//保存权重</span></span><br><span class="line">        Edge_Node* next;<span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">        </span><br><span class="line">        Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id,Einfo info):ID(id),info(info),next(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*顶点数组元素结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VerTex_Node</span>&#123;</span></span><br><span class="line">       VT v_data;<span class="comment">//顶点数据</span></span><br><span class="line">       Edge_Node* Edge;</span><br><span class="line">       </span><br><span class="line">       VerTex_Node(VT v):v_data(v),Edge(<span class="literal">nullptr</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VerTex_Node&gt;Vertexs;<span class="comment">//顶点数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;</span><br><span class="line">    <span class="keyword">bool</span> undirected;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>添加顶点</strong></p><ul><li><p>思路：直接进行把顶点加入顶点数组即可</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span></span>&#123;</span><br><span class="line">    Vertexs.push_back(<span class="keyword">new</span> VerTex_Node(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>填加边</strong></p><p>思路：这里要注意的时，邻接表中的邻接点是以链表结合数组进行实现的，所以在添加边的时候，要对边结点的链域进行处理，这里可以采用链表中的前插法，邻接点一个个插入顶点数组的链域之间。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2,Einfo info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id1].Edge;</span><br><span class="line">    Vertexs[id1].Edge = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id2].Edge;</span><br><span class="line">    Vertexs[id2].Edge = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>修改边的权值</strong></p><ul><li><p>思路：这个操作的思路比较明确，更加要修改的边，通过循环遍历该起始点的顶点数组中的链域结构即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1,<span class="keyword">const</span> <span class="keyword">int</span> id2,<span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id1].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id2)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id2].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id1)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a href="#具体代码实现：" class="headerlink" title="具体代码实现："></a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span> &#123;</span></span><br><span class="line"><span class="comment">/*邻接表结构-边结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点集的下标</span></span><br><span class="line"></span><br><span class="line">Einfo info;<span class="comment">//权重</span></span><br><span class="line">Edge_Node* next;</span><br><span class="line">Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id, Einfo info) :ID(id), info(info), next(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶点结点结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VT v_data;</span><br><span class="line">Edge_Node* Edge = <span class="literal">nullptr</span>;</span><br><span class="line">Vertex_Node(VT v) :v_data(v) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vertex_Node&gt; VerTexs;<span class="comment">//顶点集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>) :undirected(undirected), Num_Edge(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> VerTexs[i].v_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span> </span>&#123;</span><br><span class="line">VerTexs.push_back(Vertex_Node(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id1, <span class="keyword">unsigned</span> <span class="keyword">int</span> id2, Einfo info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插*/</span></span><br><span class="line">p-&gt;next = VerTexs[id1].Edge;</span><br><span class="line">VerTexs[id1].Edge = p;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;next = VerTexs[id2].Edge;</span><br><span class="line">VerTexs[id2].Edge = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1, <span class="keyword">const</span> <span class="keyword">int</span> id2, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = VerTexs[id1].Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id2)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = VerTexs[id2].Edge;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id1)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Agraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Edge_Node* p = e.Edge;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;ID &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;info &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接表:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Agraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> VerTexs.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：<img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/2.png"></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接表&quot;&gt;&lt;a href=&quot;#邻接表&quot; class=&quot;headerlink&quot; title=&quot;邻接表&quot;&gt;&lt;/a&gt;邻接表&lt;/h4&gt;&lt;p&gt;邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.8)临时对象处理和程序优化探讨</title>
    <link href="https://shuhaohwang.github.io/2019/08/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-8-%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E5%92%8C%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%8E%A2%E8%AE%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/17/C-进阶学习总结-2-8-临时对象处理和程序优化探讨/</id>
    <published>2019-08-17T13:00:49.000Z</published>
    <updated>2019-08-17T13:21:17.851Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述临时对象处理方案、程序优化等（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="性能优化" scheme="https://shuhaohwang.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.4）图的实现-邻接矩阵</title>
    <link href="https://shuhaohwang.github.io/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-4%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/</id>
    <published>2019-08-16T03:57:14.000Z</published>
    <updated>2019-08-16T12:29:48.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。<br><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"><br>该存储结构，是借助线性代数的邻接矩阵来表示图的结构。</p><hr><h4 id="具体实现和思路"><a href="#具体实现和思路" class="headerlink" title="具体实现和思路"></a>具体实现和思路</h4><ul><li><p><strong>邻接矩阵实现：</strong></p><ul><li><p>思路：邻接矩阵的实现是要借助二维数组来实现，在C++中可以使用vector来代替二维数组，从而实现矩阵。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edge<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirecter(undirected)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加顶点/获得顶点总数：</strong></p><ul><li><p>思路：跟边集构建一样，使用vector进行存储顶点数据</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    VerTex.push_back(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_Vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VerTex.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建邻边矩阵：</strong></p><ul><li><p>思路：因为邻边矩阵是一个NXN的方形矩阵(N为顶点数量)，所以在构建邻边矩阵的时候，要先根据顶点总数来创建代表邻边矩阵的二维数组。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_MGraph</span><span class="params">(Einfo&amp; definfo = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*用来防止多次创建邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N_Vertex = Get_n_Vertex();</span><br><span class="line">        Edge.resize(N_Vertex,<span class="built_in">vector</span>&lt;Einfo&gt;(N_Vertex,definfo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加边</strong></p><ul><li><p>思路：因为邻接矩阵是一个二维数组，所以添加边的时候直接把顶点下标当做邻接矩阵的坐标位置进行编写即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp;info = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*要先创建邻接矩阵才能实现添加边操作*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())</span><br><span class="line">      Create_MGraph();</span><br><span class="line">    </span><br><span class="line">    Edge[i][j] = info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">        Edge[j][i] = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/2.png"><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">MGraph</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;Vertex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edges; <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//标记是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点总数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Vertex.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_Mgraph</span><span class="params">(<span class="keyword">const</span> Einfo&amp; definfo = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size()) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n_vertex = Get_n_vertex();</span><br><span class="line"></span><br><span class="line">Edges.resize(n_vertex, <span class="built_in">vector</span>&lt;Einfo&gt;(n_vertex, definfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; Vertex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo info)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size())</span><br><span class="line">create_Mgraph();</span><br><span class="line"></span><br><span class="line">Edges[i][j] = info;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edges[j][i] = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Mgraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : Vertex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Mgraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"></p></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵&quot;&gt;&lt;a href=&quot;#邻接矩阵&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵&quot;&gt;&lt;/a&gt;邻接矩阵&lt;/h4&gt;&lt;p&gt;用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。&lt;br
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.3）图的实现边表</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-3%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-3）图的实现边表/</id>
    <published>2019-08-15T13:26:14.000Z</published>
    <updated>2019-08-15T15:38:47.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边表"><a href="#边表" class="headerlink" title="边表"></a>边表</h4><ul><li>边表是把图的顶点，和边分别用顺序表进行存储的结构</li><li>这种存储结构是最简单、最容易实现的图存储结构</li><li>缺点：如果边的数目过大，会使效率降低</li></ul><hr><h4 id="代码实现及思路"><a href="#代码实现及思路" class="headerlink" title="代码实现及思路"></a>代码实现及思路</h4><ul><li><p>边表结构</p><ul><li><p>思路：因为边表是通过两个顺序表分别存储顶点集和边集的存储结构，所以在实现时可以通过创建顶点集和边集的结构，其中边集要有两个顶点在顶点集中的下标数值，和该边对应的权值。其中顺序表可以通过C++内置的vector结构实现。</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt; <span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*实现边集结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="comment">/*边两头的顶点在顶点集的下标*/</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        Einfo info;<span class="comment">//用来存储权的数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*边集构造函数*/</span></span><br><span class="line">        Edge(<span class="keyword">int</span> i,<span class="keyword">int</span> j,Einfo info):x(i),y(j),info(info)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;Edges;<span class="comment">//边集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> undirected;<span class="comment">//用来标记是否为无向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*边表构造函数(默认为无向表)*/</span></span><br><span class="line">     ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirecter)&#123;&#125;; </span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加顶点</p><ul><li><p>思路：直接通过对vector结构进行操作添加即可</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;VerTex.push_back(vertex);&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加边</p><ul><li><p>思路：跟添加顶点操作一致</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;Edges.push_back(Edge(i,j,info));&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/1.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* VT 顶点数据</span></span><br><span class="line"><span class="comment">* Einfo 边数据类型(权)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">Einfo info;</span><br><span class="line">Edge(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo inf) :x(i), y(j), info(inf) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt; VerTex;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; Edges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//判断是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*默认为有向图*/</span></span><br><span class="line">ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加顶点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; VerTex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加边*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123; Edges.push_back(Edge(i, j ,info)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载运算符*/</span></span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> VerTex[i];&#125;</span><br><span class="line">VT&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> VerTex[i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_VT</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> VerTex.size(); &#125;</span><br><span class="line"><span class="comment">/*获得边的数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_e</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> Edges.size(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : VerTex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"边："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="string">" "</span> &lt;&lt; e.y &lt;&lt; <span class="string">" "</span> &lt;&lt; e.info &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ElistGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.get_n_VT() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.get_n_e() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><p>实验结果：<img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/2.png"></p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边表&quot;&gt;&lt;a href=&quot;#边表&quot; class=&quot;headerlink&quot; title=&quot;边表&quot;&gt;&lt;/a&gt;边表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;边表是把图的顶点，和边分别用顺序表进行存储的结构&lt;/li&gt;
&lt;li&gt;这种存储结构是最简单、最容易实现的图存储结构&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.2）图的抽象数据类型</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-2%EF%BC%89%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-2）图的抽象数据类型/</id>
    <published>2019-08-15T13:05:08.000Z</published>
    <updated>2019-08-15T13:25:09.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的抽象数据类型"><a href="#图的抽象数据类型" class="headerlink" title="图的抽象数据类型"></a>图的抽象数据类型</h4><ul><li>ADT Graph</li><li>Data     V是具有相同特性的数据元素的集合名称为顶点集</li><li>Relation<ul><li>R = {VR}</li><li>VR = {<v,w>|V,W∈V且P(V,W) <v,w>表示从V，W的弧，P(v,w)定义了弧的<v,w>的意义}</v,w></v,w></v,w></li></ul></li><li>Operation<ul><li>createGraph(&amp;G,V,VR)<ul><li>初始条件：V是图的顶点集，VR是图中边/弧的集合</li><li>操作结果：按V和VR的定义构造图G</li></ul></li><li>DFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>深度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li><li>BFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>广度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li></ul></li></ul><hr><h4 id="图的数据存储结构"><a href="#图的数据存储结构" class="headerlink" title="图的数据存储结构"></a>图的数据存储结构</h4><ul><li>边表</li><li>数组表示法(邻接矩阵)</li><li>邻接表</li><li>十字链表(有向图)</li><li>多重邻接表(无向图)</li></ul><p>— (本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的抽象数据类型&quot;&gt;&lt;a href=&quot;#图的抽象数据类型&quot; class=&quot;headerlink&quot; title=&quot;图的抽象数据类型&quot;&gt;&lt;/a&gt;图的抽象数据类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ADT Graph&lt;/li&gt;
&lt;li&gt;Data     V是具有相同特性的数据元
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.7）左值和右值、左右值引用、std::move()函数</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC%E3%80%81%E5%B7%A6%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81std-move-%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/C-进阶学习总结-（2-7）左值和右值、左右值引用、std-move-函数/</id>
    <published>2019-08-14T18:10:46.000Z</published>
    <updated>2019-08-15T08:24:27.816Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述左值和右值、C++11中新版的右值引用运算符 &amp;&amp;、std::move()函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6-1）图的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-1%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/</id>
    <published>2019-08-14T16:44:55.000Z</published>
    <updated>2019-08-14T18:07:05.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><ul><li>定义：图G(graph)是一些点和线的集合<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/1.png"></li><li>图中的点叫作<strong>顶点</strong>(VerTex)</li><li>两个顶点的连线叫作<strong>边</strong>(Edges)</li><li>Graph = (V,E)<ul><li>V：顶点(数据元素)的<strong>有穷非空</strong>集合</li><li>E：边的有穷集合</li></ul></li></ul></li></ul><hr><h4 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h4><ul><li><p>无向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"></li><li>每一条边都是没有方向的</li><li>顶点集合{A,B,C,D}</li><li>边集合{(A,B),(A,D),(C,D),(C,B),(A,C)}</li></ul></li><li><p>有向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/3.png" title="其中B为弧头(Head),D为弧尾(Tail)"></li><li>每一条边有方向的，也称弧(arc)</li><li>顶点集合{A,B,C,D}</li><li>边集合{(B,A),(A,D),(B,C),(C,A)}</li></ul></li><li>完全图<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/4.png"></li><li>任意两个顶点都有一条边相连的图叫作<strong>完全图</strong></li><li>无向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)/2条边</strong></li><li>有向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)条边</strong></li></ul></li><li>网<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/5.png"></li><li>网是边或弧<strong>带权</strong>的图</li><li>无向网</li><li>有向网</li></ul></li></ul><hr><h5 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h5><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/6.png" title="1和2是3的子图"><ul><li>1和2是3的子图</li></ul><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"><ol><li>如果边(V,U)∈E，则称顶点V和U互为邻接点(Adjacent)<ul><li>例：A/B、B/C、C/D…互为邻接点</li></ul></li><li>边(V,U)依附于(incident)顶点V和U(或边与顶点相关联)<ul><li>例：边(A,B)依附于顶点A、B上</li></ul></li><li>顶点V的度(Degree)是和V相关联的边的数量，记为TD(V)，对于有向图：有出度和入度<ul><li>例：A的度为3、D的度为2</li><li><strong>握手定理</strong>：边数(E) = 各顶点度数和/2</li></ul></li></ol><h5 id="相关术语解释"><a href="#相关术语解释" class="headerlink" title="相关术语解释"></a>相关术语解释</h5><ul><li><p>路径</p><ul><li>若从一个顶点V<sub>i</sub>出发，沿一些边经过一些顶点，再到达顶点V<sub>k</sub>,则称沿途的经过顶点的序列为从V<sub>i</sub>到V<sub>k</sub>的路径</li></ul></li><li><p>路径的长度</p><ul><li>路径上的边或弧的数目</li></ul></li><li>回路(环)<ul><li>起点与终点相同的路径</li></ul></li><li>简单路径<ul><li><strong>没有重复</strong>顶点的路径，即不含回路</li></ul></li><li>简单回路<ul><li>除起点和终点相同外，<strong>没有</strong>其余<strong>重复</strong>顶点的路径</li></ul></li></ul><hr><h5 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h5><ul><li>在<strong>无向图</strong>G中，如果从顶点V到顶点V`<strong>有路径</strong>，则称V和V’是连通的</li><li>如果对于图中的任意两个顶点V<sub>i</sub>和V<sub>k</sub><strong>都是连通</strong>的，则称G是<strong>连通图</strong></li><li>是否连通是对无向图来说的</li></ul><h5 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h5><ul><li>在<strong>有向图</strong>G中，从顶点u到顶点v有路径，且从顶点v到顶点u也有路径，则称u和v是强连通的</li><li>如果有向图的任意两个顶点u和v都是强连通，则称G是<strong>强连通图</strong></li><li>是否强连通是对于有向图来说的</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：图G(graph)是一些点和线的集合&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/2019/08/15/数据结构学习总结-（6-1）图的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14.1）哈夫曼编码表的代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14-1%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/</id>
    <published>2019-08-11T14:39:41.000Z</published>
    <updated>2019-08-11T16:38:48.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码表"><a href="#哈夫曼编码表" class="headerlink" title="哈夫曼编码表"></a>哈夫曼编码表</h4><ol><li>根据构建的哈夫曼树，左分支标记为0有分支标记为1</li><li>通过二维数组保存编码表</li></ol><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> code[<span class="number">256</span>][<span class="number">128</span>] <span class="comment">//存储哈夫曼编码表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Codeing</span><span class="params">(haffmanNode* node,<span class="keyword">char</span>* temparray,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*处理空结点的情况+递归出口*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*当到达叶结点的时候*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node-&gt;R_Node || !node-&gt;L_Node)&#123;</span><br><span class="line">        temparray[index] = <span class="string">'\0'</span>;</span><br><span class="line">        </span><br><span class="line">        strcpy_s(code[node-&gt;data<span class="number">-0</span>],<span class="number">128</span>,temparray);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归获取编码表*/</span></span><br><span class="line">    temparray[index] = <span class="string">'0'</span>;</span><br><span class="line">    Codeing(node-&gt;L_Node,temparray,index++);</span><br><span class="line">    temparray[index] = <span class="string">'1'</span>;</span><br><span class="line">    Codeing(node-&gt;R_Node,temparray,index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="技术小结："><a href="#技术小结：" class="headerlink" title="技术小结："></a>技术小结：</h5><ul><li>temparray数组用来临时存储字符对应的哈夫曼编码，存储格式为字符串</li><li>这里采用二维数组来存储哈夫曼编码表，第一维下标为字符对于的ASCII码，所储存的为对应的编码</li><li>当到达叶结点的时候，在该位置下标的temparry设置为结束符，意味着一个字符串(字符编码)的存储完毕</li></ul><hr><h4 id="编码过程解析"><a href="#编码过程解析" class="headerlink" title="编码过程解析"></a>编码过程解析</h4><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/1.png"><ul><li>第一步：<code>Codeing(haffmanNode* node,char* temparray,int index)</code><ul><li>根据哈夫曼树构建完毕的node数组</li><li>定义<code>char* temparray[128]；</code>index = 0；</li><li>parent4 拥有左右孩子且不空、temparray[0]  = 0</li></ul></li><li>第二步: <code>Codeing(node(parent4)-&gt;L_Node,temparray,index++);</code><ul><li>index = 1</li><li>B无左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>，temparry[1] = ‘\0’</li><li>code[66(B)] = “0”</li><li>return结束此处递归</li></ul></li><li>第三步： <code>Codeing(node(parent4)-&gt;R_Node,temparray,index++);</code><ul><li>index = 1、temparray[0] = 1</li><li>parent3 拥有左右孩子且不空执行左递归、temparry[1] = 0</li></ul></li><li>第四步：<code>Codeing(node(parent3)-&gt;L_Node,temparray,index++);</code><ul><li>index = 2 </li><li>D结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[2] = ‘\0’</li><li>code[68(D)] = “10”</li><li>return结束此处递归</li></ul></li><li>第五步：<code>Codeing(node(parent3)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[1] = 1,index = 2</li><li>parent2拥有左右孩子且不空指向左递归、temparry[2] = 0</li></ul></li><li>第六步：<code>Codeing(node(parent2)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 3</li><li>parent1拥有左右孩子且不空指向左递归、temparry[3] = 0</li></ul></li><li>第七步：<code>Codeing(node(parent1)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 4</li><li>C结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[67(C)] = “1100”</li><li>return结束此处递归</li></ul></li><li>第八步：<code>Codeing(node(parent1)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[3] = 1，index = 4</li><li>E结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[69(E)] = “1101”</li><li>return结束此处递归</li></ul></li><li>第九步：<code>Codeing(node(parent2)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[2] = 1、index = 3</li><li>A结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[3] = ‘\0’</li><li>code[65(A)] = “111”</li></ul></li></ul><hr><ul><li><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/2.png"></li><li>| code[下标] | 储存元素（编码） |<br>| :————: | :———————: |<br>|  65（A）   |       111        |<br>|  66（B）   |        0         |<br>|  67（C）   |       1100       |<br>|  68（D）   |        10        |<br>|  69（E）   |       1101       |</li></ul><h5 id="解析过程错误小结："><a href="#解析过程错误小结：" class="headerlink" title="解析过程错误小结："></a>解析过程错误小结：</h5><ul><li>函数递归时传参是形参，即index在递归时自加了。结束该分支后返回上一个函数时index值还是递归自加前的值</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码表&quot;&gt;&lt;a href=&quot;#哈夫曼编码表&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼编码表&quot;&gt;&lt;/a&gt;哈夫曼编码表&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;根据构建的哈夫曼树，左分支标记为0有分支标记为1&lt;/li&gt;
&lt;li&gt;通过二维数组保存编码表&lt;/l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14）哈夫曼树的构建代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/</id>
    <published>2019-08-10T17:16:45.000Z</published>
    <updated>2019-08-11T14:37:32.852Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树的构建"><a href="#哈夫曼树的构建" class="headerlink" title="哈夫曼树的构建"></a>哈夫曼树的构建</h4><h5 id="哈夫曼树的构建步骤"><a href="#哈夫曼树的构建步骤" class="headerlink" title="哈夫曼树的构建步骤"></a>哈夫曼树的构建步骤</h5><ol><li>根据权重进行从小到大排列</li><li>取最小的两个构成一个子树,并使两个的权值相加用来代替这两个结点</li><li>根据这个新的权重再进行排列</li><li>重复1.2.3步</li></ol><hr><h5 id="代码实现-顺序结构储存"><a href="#代码实现-顺序结构储存" class="headerlink" title="代码实现(顺序结构储存)"></a>代码实现(顺序结构储存)</h5><ul><li><p>结点的构建</p><ul><li><p>根据哈夫曼树的构建，结点首先要包含权值、左右子树指针，其次要包含数据</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">haffmanNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weigth;<span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    </span><br><span class="line">    haffmanNode* L_Node;<span class="comment">//左孩子</span></span><br><span class="line">    haffmanNode* R_Node;<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序结构存储二叉树*/</span></span><br><span class="line"></span><br><span class="line">haffmanNode node[<span class="number">256</span>]；</span><br><span class="line"></span><br><span class="line">haffmanNode allL_Node[<span class="number">128</span>];</span><br><span class="line">haffmanNode allR_Node[<span class="number">128</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据权值进行排序(冒泡排序)</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortHaffmanNode</span><span class="params">(haffmanNode* nodes,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    haffmanNode temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">1</span> - i; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes[k].weight &lt; nodes[k+<span class="number">1</span>].weight)&#123;</span><br><span class="line">                temp = nodes[k];</span><br><span class="line">                nodes[k] = nodes[k+<span class="number">1</span>];</span><br><span class="line">                nodes[k+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>哈夫曼树的构建</p><ul><li><p>对结点先进行排序取最小的构成一颗树</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHaffmanTree</span><span class="params">(haffmanNode* nodes, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据权值进行排序*/</span></span><br><span class="line">    sortHaffmanNode(nodes,length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*用来压缩成哈夫曼编码用*/</span></span><br><span class="line">    allL_Node[length] = nodes[length<span class="number">-1</span>];<span class="comment">//保存左结点</span></span><br><span class="line">    allR_Node[length] = nodes[length<span class="number">-2</span>];<span class="comment">//保存右结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*取最小权重的两个结点重新组成树*/</span></span><br><span class="line">    haffmanNode parent;</span><br><span class="line">    parent.weight = allL_Node[length].weight + allR_Node[length].weight;</span><br><span class="line">    </span><br><span class="line">    parent.L_Node = &amp;allL_Node[length];</span><br><span class="line">    parent.R_Node = &amp;allR_Node[length];</span><br><span class="line">    </span><br><span class="line">    nodes[length - <span class="number">2</span>] = parent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归直至哈夫曼树创建完成</span></span><br><span class="line">    CreateHaffmanTree(nodes,length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="哈夫曼树构建解析"><a href="#哈夫曼树构建解析" class="headerlink" title="哈夫曼树构建解析"></a>哈夫曼树构建解析</h4><p>例图：<img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/1.png"></p><ul><li><p>第一步：<code>void CreateHaffmanTree(haffNode* node, int length)</code></p><ul><li><p>node数组内容{A(12),B(26),C(5),D(18),E(4)}，length = 5；</p></li><li><p>排序后 node{B,D,A,C,E},取最小结点C、E组成树</p></li><li><p><code>allL_Node[5] = C、allR_Node[5] = E</code></p></li><li><p>parent1：weight = (4 + 5)9、L_Node = C、R_Node = E</p></li><li><p>node 数组内容变更为{B(26),D(18),A(12),parent1(9)}</p></li></ul></li><li><p>第二步：<code>CreateHaffmanTree(node, length - 1(4))</code></p><ul><li>node 数组内容{B(26),D(18),A(12),parent1(9)}，length = 4</li><li>排序后 node{B,D,A,parent1},取最小结点A、parent1组成树</li><li><code>allL_Node[4] = parent1、allR_Node[4] = A</code></li><li>parent2：weight = (9+12)21、L_Node = parent1、R_Node = A\</li><li>node 数组内容变更为{B(26),D(18),parent2(21)}</li></ul></li><li><p>第三步：<code>CreateHaffmanTree(node, length - 1(3))</code></p><ul><li>node 数组内容{B(26),D(18),parent2(21)}、length = 3</li><li>排序后 node{B,parent2,D},取最小结点parent2、D组成树</li><li><code>allL_Node[3] = D、allR_Node[3] = parent2</code></li><li>parent3：weight = (18+21)39、L_Node = D、R_Node = parent2</li><li>node 数组内容变更为{B(26),parent3(39)}</li></ul></li><li><p>第四步：<code>CreateHaffmanTree(node, length - 1(2))</code></p><ul><li>node 数组内容{B(26),parent3(39)}、length = 2</li><li>排序后 node{parent3,B},取最小结点parent3、B组成树</li><li><code>allL_Node[2] = B、allR_Node[2] = parent3</code></li><li>parent4：weight = (26+39)65、L_Node = B、R_Node = parent3</li><li>node 数组内容变更为{parent4(65)}</li></ul></li><li><p>第五步：<code>CreateHaffmanTree(node, length - 1(1))</code></p><ul><li>length = 1 符合<code>if(length &lt;= 1)return;</code>结束递归，哈夫曼树创建完毕</li></ul></li></ul><hr><img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/2.png"><div class="table-container"><table><thead><tr><th style="text-align:center">allL_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">parent1</td><td style="text-align:center">C</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">allR_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">parent3</td><td style="text-align:center">parent2</td><td style="text-align:center">A</td><td style="text-align:center">E</td></tr></tbody></table></div><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树的构建&quot;&gt;&lt;a href=&quot;#哈夫曼树的构建&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树的构建&quot;&gt;&lt;/a&gt;哈夫曼树的构建&lt;/h4&gt;&lt;h5 id=&quot;哈夫曼树的构建步骤&quot;&gt;&lt;a href=&quot;#哈夫曼树的构建步骤&quot; class=&quot;header
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.13）哈夫曼编码</title>
    <link href="https://shuhaohwang.github.io/2019/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-13%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://shuhaohwang.github.io/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/</id>
    <published>2019-08-09T16:46:14.000Z</published>
    <updated>2019-08-09T17:49:51.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><h5 id="哈夫曼编码是什么？"><a href="#哈夫曼编码是什么？" class="headerlink" title="哈夫曼编码是什么？"></a>哈夫曼编码是什么？</h5><p>哈夫曼编码是用来压缩数据的一种手段，在网络上信息的传输都是通过二进制来进行输送的（0和1），在进行数据输送的时候，首先就要将即将输送的数据进行转码，使其变为二进制再进行传输。例如：</p><ul><li><p>要传输<code>‘ABCADBBAED’</code>这段数据。且你知道一个二进制转换编码表：</p><ul><li>| 字符 | 编码 |<br>| :—: | :—: |<br>|  A   | 000  |<br>|  B   | 100  |<br>|  C   | 110  |<br>|  D   | 111  |<br>|  E   | 101  |</li></ul></li><li><p>则这段字符串会先转换成二进制码：<code>000100110000111100100000101111</code></p></li><li><p>上面的二进制转换表编码是以3位进行编码的，而用哈夫曼编码进行编译转换，则会让这段字符串传输的时候能够更为简短。</p></li></ul><h5 id="哈夫曼编码的使用"><a href="#哈夫曼编码的使用" class="headerlink" title="哈夫曼编码的使用"></a>哈夫曼编码的使用</h5><p>哈夫曼编码是通过哈夫曼树进行转换出来的，例如在上面的字符串：<code>‘ABCADBBAED’</code>是出现在一个文章里面的，这个文章里面含有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">出现次数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">4</td></tr></tbody></table></div><p>根据上表进行转换为哈夫曼树</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/1.png"><p>通过对哈夫曼树处理，往左走为0往右走为1，通过记录会形成一个新的转换表</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"><ul><li>| 字符 | 编码 |<br>| :—: | :—: |<br>|  A   | 111  |<br>|  B   |  0   |<br>|  C   | 1100 |<br>|  D   |  10  |<br>|  E   | 1101 |</li></ul><p>根据表中的内容把要输送的字符串<code>‘ABCADBBAED’</code>进行转换成二进制<code>111011001111000111110110</code></p><p>对比一开始用3个编码进行转换的字符串编码会发现，哈夫曼编码进行转换处理的二进制码数为24个，比前面的少了6个，可以发现运用哈夫曼编码可以使传输的二进制码被压缩成更简单二进制码。</p><hr><h5 id="哈夫曼编码的好处"><a href="#哈夫曼编码的好处" class="headerlink" title="哈夫曼编码的好处"></a>哈夫曼编码的好处</h5><ul><li><strong>使转换的二进制码更简洁</strong><ul><li>哈夫曼编码是通过检测传输的字符串中字符的出现频率进行生成对应的编码表。采用的是前缀编码。</li></ul></li><li><strong>因为采用的前缀的编码，进行译码的时候减少出错</strong></li><li>….</li></ul><hr><h4 id="译码"><a href="#译码" class="headerlink" title="译码"></a>译码</h4><p>进行译码的过程很简单，通过一开始构建的哈夫曼树，进行译码。</p><ul><li><p>例如：<code>111011001111000111110110</code></p><ul><li><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"></li></ul></li><li><p>译码过程：<strong>从根开始</strong>遇到0就走左，遇到1就走右，当到达叶结点的时候，翻译出该字符，然后<strong>重新返回根结点重新识别</strong></p></li><li><p>译码结果：ABCADBBAED</p></li></ul><hr><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><ul><li>从上面的译码过程可以看出，对哈夫曼编码编码后的二进制码进行译码的时候只需根据编码对哈夫曼树进行遍历即可。</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码&quot;&gt;&lt;a href=&quot;#哈夫曼编码&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼编码&quot;&gt;&lt;/a&gt;哈夫曼编码&lt;/h4&gt;&lt;h5 id=&quot;哈夫曼编码是什么？&quot;&gt;&lt;a href=&quot;#哈夫曼编码是什么？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.12）中序线索二叉树的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-12%EF%BC%89%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/</id>
    <published>2019-08-03T09:03:17.000Z</published>
    <updated>2019-08-03T11:04:43.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h4><p>在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。</p><hr><h4 id="中序线索二叉树的遍历算法"><a href="#中序线索二叉树的遍历算法" class="headerlink" title="中序线索二叉树的遍历算法"></a>中序线索二叉树的遍历算法</h4><p>通过构建的中序线索二叉树的特点。叶子结点存在直接指向前驱和后继的结点的指针，在遍历的时候就可以快速的定位。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threaded_Mid_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R-&gt;L_Node)&#123;</span><br><span class="line">        R = R-&gt;L_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; R-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!R-&gt;RTag)&#123;</span><br><span class="line">            R = R-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(R-&gt;LTag)&#123;</span><br><span class="line">                R = R-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> R = R-&gt;R_Node; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/1.png"></p></li></ul></li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>通过利用线索来进行遍历就可以避免递归或者要使用栈结构来进行遍历。</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;中序线索二叉树&quot;&gt;&lt;a href=&quot;#中序线索二叉树&quot; class=&quot;headerlink&quot; title=&quot;中序线索二叉树&quot;&gt;&lt;/a&gt;中序线索二叉树&lt;/h4&gt;&lt;p&gt;在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.11）线索二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-11%EF%BC%89%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-11）线索二叉树/</id>
    <published>2019-08-03T02:08:19.000Z</published>
    <updated>2019-08-03T09:41:50.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也会存在左右孩子不存在的情况下，那么这些空的指针往往会造成资源的浪费，这就为什么要存在线索二叉树，它能使这些空掉的指针能重新运用起来。</p><h5 id="线索二叉树的构成"><a href="#线索二叉树的构成" class="headerlink" title="线索二叉树的构成"></a>线索二叉树的构成</h5><p>为了实现线索二叉树能够使空的指针能被重新利用起来，所以在结点结构定义的时候再添加两个标识符变量。这些标识符存在的目的是为了区分一个结点的左右孩子是否为空，如果是空那么就会指向前驱或者后置结点，如果不为空说明这个指针是指向左右孩子的。</p><img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/1.png"><p>从上面的图可以看出来，当右标识符为<code>&#39;0&#39;</code>的时候说明他的右孩子指针指向的是右孩子，当标识符为<code>&#39;1&#39;</code>的时候，说明这个结点的右孩子指针指向的不是右孩子(即：该结点没有右孩子)而是这个结点的前驱结点，同理，左标识符便是判断其左孩子的指针是指向后置结点还是左孩子。</p><hr><h4 id="二叉树线索化"><a href="#二叉树线索化" class="headerlink" title="二叉树线索化"></a>二叉树线索化</h4><p>根据上面所说的线索二叉树，从最基本的来看，线索二叉树相比普通二叉树就是在没有左孩子或者右孩子的结点中这些本该指向左右孩子的指针不为空，使其能重新废物利用。所以把一个二叉树线索化的主要思路便是遍历一个二叉树，逐一判断每个结点的左右孩子是否为空，若为空那么就让其能指向这个结点的前驱结点或者后置结点。</p><ul><li><p>综上所述，线索化的主要操作就是基于遍历算法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此区域内实现线索二叉树的主要操作...</span></span><br><span class="line">    </span><br><span class="line">    Tree_Threaded(R -&gt; R_Node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在开始线索化之前还需要将结点结构进行变化，即要多定义两个标识符表示用来进行判断左右孩子指针的指向。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node;</span><br><span class="line">    BiTreeNode* R_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*标识符变量*/</span></span><br><span class="line">    <span class="keyword">int</span> RTag;</span><br><span class="line">    <span class="keyword">int</span> LTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>其次二叉树存在没有利用的指针，线索化后，这些空指针会指向该结点的前驱结点或者后置结点，这也就是说在线索化过程中还要有两个临时变量能够指向受判断结点的前驱结点和后置结点，方便在判断该结点在没有左右孩子的情况下，使其两个指针能够快速的指向前驱和后置结点。</p><hr><h4 id="线索化二叉树的代码实现"><a href="#线索化二叉树的代码实现" class="headerlink" title="线索化二叉树的代码实现"></a>线索化二叉树的代码实现</h4><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R，BiTreeNode* &amp;pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node,pre);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!R-&gt;L_Node)&#123;</span><br><span class="line">        R-&gt;L_Node = pre;</span><br><span class="line">        R-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre &amp;&amp; !pre-&gt;R_Node)&#123;</span><br><span class="line">        pre-&gt;R_Node = R;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> pre = R;</span><br><span class="line">    Tree_Threaded(R -&gt; R_Node,pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="二叉树线索化解析："><a href="#二叉树线索化解析：" class="headerlink" title="二叉树线索化解析："></a>二叉树线索化解析：</h5><p>例图：<img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/2.png"></p><ul><li><p>第一次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |      |      |      |         |      |<br>| L_Node |      |      |      | nullptr |      |<br>|  RTag  |      |      |      |         |      |<br>|  LTag  |      |      |      |    0    |      |</p><ul><li>pre指向D</li></ul></li></ul><hr><ul><li><p>第二次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |      |  E   |      |    B    |      |<br>| L_Node |      |  D   |      | nullptr |  B   |<br>|  RTag  |      |  0   |      |    1    |      |<br>|  LTag  |      |  0   |      |    0    |  1   |</p><ul><li>pre先指向B，递归至E结点后指向E</li></ul></li></ul><hr><ul><li><p>第三次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |  C   |  E   |      |    B    |  A   |<br>| L_Node |  B   |  D   |      | nullptr |  B   |<br>|  RTag  |  0   |  0   |      |    1    |  1   |<br>|  LTag  |  0   |  0   |      |    0    |  1   |</p><ul><li>pre先指向E后指向A</li></ul></li></ul><hr><ul><li><p>第四次：</p></li><li><p>|        |  A   |  B   |    C    |    D    |  E   |<br>| :——: | :—: | :—: | :——-: | :——-: | :—: |<br>| R_Node |  C   |  E   | nullptr |    B    |  A   |<br>| L_Node |  B   |  D   |    A    | nullptr |  B   |<br>|  RTag  |  0   |  0   |    0    |    1    |  1   |<br>|  LTag  |  0   |  0   |    1    |    0    |  1   |</p><ul><li>pre先指向A后指向C</li></ul></li></ul><hr><h4 id="线索二叉树的好处："><a href="#线索二叉树的好处：" class="headerlink" title="线索二叉树的好处："></a>线索二叉树的好处：</h4><p>从上面可以看出，线索二叉树的一些结点空出来的指针被重新利用起来，再到达叶子结点的时候，可以直接通过左右孩子的指针快速定位到其的前驱结点或后继结点，根据这个性质在进行遍历的时候就可以直接访问这些通过线索链接起来的结点。</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线索二叉树&quot;&gt;&lt;a href=&quot;#线索二叉树&quot; class=&quot;headerlink&quot; title=&quot;线索二叉树&quot;&gt;&lt;/a&gt;线索二叉树&lt;/h4&gt;&lt;p&gt;在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5-10）前序遍历非递归实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-10%EF%BC%89%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/01/数据结构学习总结-（5-10）前序遍历非递归实现/</id>
    <published>2019-08-01T08:41:16.000Z</published>
    <updated>2019-08-15T13:33:14.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序遍历的非递归实现"><a href="#前序遍历的非递归实现" class="headerlink" title="前序遍历的非递归实现"></a>前序遍历的非递归实现</h4><ul><li><p>思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问和移动，因为是堆栈所以要注意，在进行左右孩子移动的时候，应该让右孩子先入栈，左孩子后入栈，根据栈结构FIBO(先进后出)的结构特点，所以左孩子会先进行访问</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pre_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = R;</span><br><span class="line">    s.push(T);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(T-&gt;R_Node)s.push(T-&gt;R_Node);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;L_Node)s.push(T-&gt;L_Node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序遍历的非递归实现&quot;&gt;&lt;a href=&quot;#前序遍历的非递归实现&quot; class=&quot;headerlink&quot; title=&quot;前序遍历的非递归实现&quot;&gt;&lt;/a&gt;前序遍历的非递归实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9.1）二叉树的遍历非递归[附加]</title>
    <link href="https://shuhaohwang.github.io/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9-1%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92-%E9%99%84%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/07/31/数据结构学习总结-（5-9-1）二叉树的遍历非递归-附加/</id>
    <published>2019-07-31T10:26:28.000Z</published>
    <updated>2019-07-31T15:57:24.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1:"></a>代码1:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()||T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T)&#123;</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">            s.push(T)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            T = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            T = T-&gt;R_Node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">BiTreeNode* T = Root;</span><br><span class="line">s.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(T = s.top())</span><br><span class="line">            s.push(T-&gt;L_Node);</span><br><span class="line">        </span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            T = s.top();s.pop();</span><br><span class="line">        <span class="keyword">if</span> (!Visit(T))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s.push(T-&gt;R_Node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码1&quot;&gt;&lt;a href=&quot;#代码1&quot; class=&quot;headerlink&quot; title=&quot;代码1:&quot;&gt;&lt;/a&gt;代码1:&lt;/h4&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9）二叉树的遍历非递归</title>
    <link href="https://shuhaohwang.github.io/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://shuhaohwang.github.io/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/</id>
    <published>2019-07-25T06:56:21.000Z</published>
    <updated>2019-07-25T07:51:36.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归的优缺点"><a href="#递归的优缺点" class="headerlink" title="递归的优缺点"></a>递归的优缺点</h4><p>二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函数的调用是要消耗系统内存的，在小范围小幅度的递归对程序不会有太大的影响，但是如果递归的深度太大，会使内存枯竭，程序崩溃。即：递归即有好处也有坏处</p><ul><li>递归的优点：<ul><li>代码简洁</li></ul></li><li>递归的缺点：<ul><li>过多递归会影响系统内存和程序运行效率</li></ul></li></ul><hr><h4 id="二叉树非递归的代码实现及思路"><a href="#二叉树非递归的代码实现及思路" class="headerlink" title="二叉树非递归的代码实现及思路"></a>二叉树非递归的代码实现及思路</h4><p>正如上面所说，函数递归在遍历较小的二叉树是没有太大的问题的。但若遍历深度巨大的二叉树，使用递归来遍历是不太可行的。所以二叉树非递归的方式来实现遍历也理所当然的变的重要。</p><ul><li><p>二叉树非递归遍历的实现<strong>思路</strong>：通过栈数据结构，进行入栈操作，先把树的每一个结点的左孩子入栈直至访问到叶结点，随后进行访问，访问一个出栈一个，并检测此时的右孩子是否为空，若不空，重复上述的操作即可。</p></li><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            s.push(T);</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        T = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        T = T-&gt;R_Node;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!s.Empty()||T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/1.png"></p></li></ul></li></ul><hr><h4 id="函数流程演示"><a href="#函数流程演示" class="headerlink" title="函数流程演示"></a>函数流程演示</h4><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/2.png"><ul><li><p>第一步：A结点不空进入循环，入栈。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  A   |</li></ul></li><li><p>第二步：B结点入栈、第三次循环D结点入栈。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  D   |<br>|  B   |<br>|  A   |</li></ul></li><li><p>第三步：跳出循环，T指针指向栈顶,访问栈顶数据，并出栈。</p><ul><li><p><code>T：-&gt;D</code></p></li><li><p><strong>输出了D</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  B   |<br>|  A   |</p></li></ul></li><li><p>第四步：T重新指向此时指向结点的右孩子。第一次外循环结束。</p><ul><li><code>T：-&gt;D.R_Node(nullptr)</code></li></ul></li><li><p>第五步：开始第二次外循环，因为T为空内循环不执行、T指向栈顶，访问栈顶数据。</p><ul><li><p><code>T：-&gt;B</code></p></li><li><p><strong>输出了B</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  A   |</p></li></ul></li></ul><ul><li><p>第六步：T指向了B结点的右孩子E，结束第二次外循环。</p><ul><li><code>T：-&gt;E</code></li></ul></li><li><p>第七步：此时T不空执行内循环，E入栈,,T指向E结点的左孩子,因为E结点的左孩子为空跳出循环。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  E   |<br>|  A   |</li></ul></li><li><p>第八步：T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;E</code></p></li><li><p><strong>输出了E</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  A   |</p></li></ul></li><li><p>第九步：T指向E结点的右孩子，因为为空所以结束第三次外循环。</p><ul><li><code>T：-&gt;E.R_Node(nullptr)</code></li></ul></li><li><p>第十步：因为此时T为空不执行内循环，T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;A</code></p></li><li><p><strong>输出了A</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  空  |</p></li></ul></li><li><p>第十一步：T指向A结点的右孩子C，因为是空栈，所以也结束第四次外循环，重新开始下一轮循环。</p><ul><li><code>T：-&gt;C</code></li></ul></li><li><p>第十二步：T不为空，指向内循环，入栈，更新T指向C的左孩子，为空结束内循环。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  C   |</li></ul></li><li><p>第十三步：T指向栈顶，访问栈顶，出栈</p><ul><li><p><code>T：-&gt;C</code></p></li><li><p><strong>输出了C</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  空  |</p></li></ul></li><li><p>第十四步：T指向C结点的右孩子，但为空，且栈也为空栈，跳出外循环。结束遍历操作。</p></li><li><p>结果输出：D、B、E、A、C</p></li><li><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/3.png"></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归的优缺点&quot;&gt;&lt;a href=&quot;#递归的优缺点&quot; class=&quot;headerlink&quot; title=&quot;递归的优缺点&quot;&gt;&lt;/a&gt;递归的优缺点&lt;/h4&gt;&lt;p&gt;二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.8）哈夫曼树概念及定义</title>
    <link href="https://shuhaohwang.github.io/2019/07/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-8%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%9A%E4%B9%89/"/>
    <id>https://shuhaohwang.github.io/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/</id>
    <published>2019-07-23T13:18:38.000Z</published>
    <updated>2019-07-23T19:16:00.191Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树概念"><a href="#哈夫曼树概念" class="headerlink" title="哈夫曼树概念"></a>哈夫曼树概念</h4><p>给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树。</p><h5 id="相关术语及概念解释"><a href="#相关术语及概念解释" class="headerlink" title="相关术语及概念解释"></a>相关术语及概念解释</h5><ul><li><u>路径和路径长度</u>：从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数量称为路径长度。<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="A到B的路径长度为1，A到F和A到D的路径长度为2"></li></ul></li><li><u>树的路径长度：</u>就是树根到<font color="red">每一个结点</font>的路径长度之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="该树的路径长度为 1+1+2+2+2 = 8"></li></ul></li><li><u>带权路径长度：</u>从根结点到该结点之间的路径长度与权的乘积<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="0号点到3号点的带权路径长度为`1*83 + 2*11 = 105`"></li></ul></li><li><u>树的带权路径长度：</u>就是树的每一个结点路径长度乘以权值之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="树的带权路径长度为`1*83 + 2*11 + 2*9 + 1*27 = 150`"></li></ul></li><li>其中树的带权路径长度(WPL)若为最小，那么就称这个数为哈夫曼树</li></ul><hr><h4 id="哈夫曼树的应用"><a href="#哈夫曼树的应用" class="headerlink" title="哈夫曼树的应用"></a>哈夫曼树的应用</h4><ul><li><p>场景设置</p></li><li><p>假设要对一个班级里的50位同学进行评分，其中人员分数分配如下</p></li><li><p>|       | 优秀  | 良好     | 中等     | 及格     | 不及格 |<br>| ——- | ——- | ———— | ———— | ———— | ——— |<br>| 分值a | a&gt;=90 | 80&lt;=a&lt;90 | 70&lt;=a&lt;80 | 60&lt;=a&lt;70 | a&lt;60   |<br>| 人数  | 8     | 21       | 12       | 7        | 2      |</p></li><li><p>并把他们用下面的二叉树进行统计分类</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/3.png"></li><li>会发现 要想把所有人进行统计完毕一共需要判断 <code>2*1 + 2*7 + 3*12 + 4*21 + 4*8 = 168次</code>。</li></ul></li><li><p>如果把上面的树进行变换变为如下的二叉树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/4.png"></li><li>一共需要判断<code>3*2 + 7*3 + 12*2 + 21*2 + 2*8 = 109</code>次相比前面的二叉树发现判断的次数变少了，说明用第二种二叉树进行判断分类效率更高。</li></ul></li><li><p>从上面可以发现，判断次数的计算类似于树的带权距离计算。所以只要保证其树的带权距离最短那么效率就会越高。</p></li></ul><hr><h4 id="哈夫曼树的生成"><a href="#哈夫曼树的生成" class="headerlink" title="哈夫曼树的生成"></a>哈夫曼树的生成</h4><p>就以上面的的例子创建哈夫曼树</p><ul><li><p>第一步：对人数进行排序(也就是对权值进行排序)从大到小的顺序分别是</p><ul><li>| 良好 | 中等 | 优秀 | 及格 | 不及格 |<br>| —— | —— | —— | —— | ——— |<br>| 21   | 12   | 8    | 7    | 2      |</li></ul></li><li><p>第二步：取最小的两个作为左右结点(习惯性左节点小于右节点)并让其和称为其根结点</p><ul><li>即：<img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/5.png"></li></ul></li><li><p>第三步：将其和加入原来的从大到小排列的顺序中替代最小的两个，重新排序</p><ul><li>| 良好 | 中等 | 及格/不及格 | 优秀 |<br>| —— | —— | —————- | —— |<br>| 21   | 12   | 9           | 8    |</li></ul></li><li><p>第四步：取最小的两个重复第二步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/6.png"></li></ul></li><li><p>第五步：把左右子树的和代替原来的优秀和及格/不及格，重新排序</p><ul><li>| 良好 | 优秀、及格/不及格 | 中等 |<br>| —— | ————————- | —— |<br>| 21   | 17                | 12   |</li></ul></li><li><p>第六步，重复第四步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/7.png"></li></ul></li><li><p>第七步：继续替换并重新排序</p><ul><li>| 良好 | 优秀、及格/不及格、中等 |<br>| —— | ———————————- |<br>| 21   | 29                      |</li></ul></li><li><p>第八步：重复第四步 完成哈夫曼树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/8.png"></li><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/9.png"></li></ul></li></ul><p>根据上图可知：要完全判断分类，需要判断<code>21*1 + 12*2 + 8*3 + 2*4 + 7*4 = 105</code>次比一开始109更有效率，这就哈夫曼树也称最优二叉树的创建。</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树概念&quot;&gt;&lt;a href=&quot;#哈夫曼树概念&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树概念&quot;&gt;&lt;/a&gt;哈夫曼树概念&lt;/h4&gt;&lt;p&gt;给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.6）RTTI运行时类型检测</title>
    <link href="https://shuhaohwang.github.io/2019/07/22/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89RTTI%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
    <id>https://shuhaohwang.github.io/2019/07/22/C-进阶学习总结-（2-6）RTTI运行时类型检测/</id>
    <published>2019-07-22T14:18:08.000Z</published>
    <updated>2019-07-23T07:55:22.960Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中RTTI的机制、dynamic_cast运算符、typeid运算符（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
