<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-08-20T03:53:51.871Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构学习总结-（6.6）图的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-6%EF%BC%89%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/20/数据结构学习总结-（6-6）图的遍历/</id>
    <published>2019-08-20T03:53:51.000Z</published>
    <updated>2019-08-20T03:53:51.871Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19SJoS1nvJ5XTKuyQRI3hHpXTbP2mNejtc=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      （加密文章）
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.5）图的实现-邻接表</title>
    <link href="https://shuhaohwang.github.io/2019/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-5%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/</id>
    <published>2019-08-17T16:31:21.000Z</published>
    <updated>2019-08-19T13:02:41.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接表"><a class="header-anchor" href="#邻接表">¶</a>邻接表</h4><p>邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承载，通俗点讲，就是把一堆链表用顺序表进行存储的结构。</p><img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/1.png"><hr><h5 id="邻接表的实现及思路"><a class="header-anchor" href="#邻接表的实现及思路">¶</a>邻接表的实现及思路</h5><p><strong>邻接表的结构</strong></p><ul><li><p>思路：邻接表结构是由一个顶点结点数组，和各个邻接点组成的，其中顶点数组中含有顶点数据和指向邻接点的链域，而邻接点由邻接点域(对应顶点数组的顶点下标)和顶点所连接的其他顶点的邻接点地址。所以实现邻接表结构，首先就要有顶点数组和邻接点结构。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*邻接点结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点数组下标</span></span><br><span class="line">        Einfo info;<span class="comment">//保存权重</span></span><br><span class="line">        Edge_Node* next;<span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">        </span><br><span class="line">        Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id,Einfo info):ID(id),info(info),next(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*顶点数组元素结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VerTex_Node</span>&#123;</span></span><br><span class="line">       VT v_data;<span class="comment">//顶点数据</span></span><br><span class="line">       Edge_Node* Edge;</span><br><span class="line">       </span><br><span class="line">       VerTex_Node(VT v):v_data(v),Edge(<span class="literal">nullptr</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VerTex_Node&gt;Vertexs;<span class="comment">//顶点数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;</span><br><span class="line">    <span class="keyword">bool</span> undirected;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>添加顶点</strong></p><ul><li><p>思路：直接进行把顶点加入顶点数组即可</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span></span>&#123;</span><br><span class="line">    Vertexs.push_back(<span class="keyword">new</span> VerTex_Node(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>填加边</strong></p><p>思路：这里要注意的时，邻接表中的邻接点是以链表结合数组进行实现的，所以在添加边的时候，要对边结点的链域进行处理，这里可以采用链表中的前插法，邻接点一个个插入顶点数组的链域之间。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2,Einfo info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id1].Edge;</span><br><span class="line">    Vertexs[id1].Edge = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id2].Edge;</span><br><span class="line">    Vertexs[id2].Edge = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>修改边的权值</strong></p><ul><li><p>思路：这个操作的思路比较明确，更加要修改的边，通过循环遍历该起始点的顶点数组中的链域结构即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1,<span class="keyword">const</span> <span class="keyword">int</span> id2,<span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id1].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id2)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id2].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id1)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span> &#123;</span></span><br><span class="line"><span class="comment">/*邻接表结构-边结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点集的下标</span></span><br><span class="line"></span><br><span class="line">Einfo info;<span class="comment">//权重</span></span><br><span class="line">Edge_Node* next;</span><br><span class="line">Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id, Einfo info) :ID(id), info(info), next(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶点结点结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VT v_data;</span><br><span class="line">Edge_Node* Edge = <span class="literal">nullptr</span>;</span><br><span class="line">Vertex_Node(VT v) :v_data(v) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vertex_Node&gt; VerTexs;<span class="comment">//顶点集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>) :undirected(undirected), Num_Edge(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> VerTexs[i].v_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span> </span>&#123;</span><br><span class="line">VerTexs.push_back(Vertex_Node(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id1, <span class="keyword">unsigned</span> <span class="keyword">int</span> id2, Einfo info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插*/</span></span><br><span class="line">p-&gt;next = VerTexs[id1].Edge;</span><br><span class="line">VerTexs[id1].Edge = p;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;next = VerTexs[id2].Edge;</span><br><span class="line">VerTexs[id2].Edge = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1, <span class="keyword">const</span> <span class="keyword">int</span> id2, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = VerTexs[id1].Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id2)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = VerTexs[id2].Edge;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id1)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Agraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Edge_Node* p = e.Edge;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;ID &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;info &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接表:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Agraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> VerTexs.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：<img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/2.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接表&quot;&gt;¶&lt;/a&gt;邻接表&lt;/h4&gt;
&lt;p&gt;邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.8)临时对象处理和程序优化探讨</title>
    <link href="https://shuhaohwang.github.io/2019/08/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-8-%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E5%92%8C%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%8E%A2%E8%AE%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/17/C-进阶学习总结-2-8-临时对象处理和程序优化探讨/</id>
    <published>2019-08-17T13:00:49.000Z</published>
    <updated>2019-08-17T13:21:17.851Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述临时对象处理方案、程序优化等（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="性能优化" scheme="https://shuhaohwang.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.4）图的实现-邻接矩阵</title>
    <link href="https://shuhaohwang.github.io/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-4%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/</id>
    <published>2019-08-16T03:57:14.000Z</published>
    <updated>2019-08-16T12:29:48.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵"><a class="header-anchor" href="#邻接矩阵">¶</a>邻接矩阵</h4><p>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。</p><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"><p>该存储结构，是借助线性代数的邻接矩阵来表示图的结构。</p><hr><h4 id="具体实现和思路"><a class="header-anchor" href="#具体实现和思路">¶</a>具体实现和思路</h4><ul><li><p><strong>邻接矩阵实现：</strong></p><ul><li><p>思路：邻接矩阵的实现是要借助二维数组来实现，在C++中可以使用vector来代替二维数组，从而实现矩阵。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edge<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirecter(undirected)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加顶点/获得顶点总数：</strong></p><ul><li><p>思路：跟边集构建一样，使用vector进行存储顶点数据</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    VerTex.push_back(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_Vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VerTex.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建邻边矩阵：</strong></p><ul><li><p>思路：因为邻边矩阵是一个NXN的方形矩阵(N为顶点数量)，所以在构建邻边矩阵的时候，要先根据顶点总数来创建代表邻边矩阵的二维数组。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_MGraph</span><span class="params">(Einfo&amp; definfo = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*用来防止多次创建邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N_Vertex = Get_n_Vertex();</span><br><span class="line">        Edge.resize(N_Vertex,<span class="built_in">vector</span>&lt;Einfo&gt;(N_Vertex,definfo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加边</strong></p><ul><li><p>思路：因为邻接矩阵是一个二维数组，所以添加边的时候直接把顶点下标当做邻接矩阵的坐标位置进行编写即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp;info = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*要先创建邻接矩阵才能实现添加边操作*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())</span><br><span class="line">      Create_MGraph();</span><br><span class="line">    </span><br><span class="line">    Edge[i][j] = info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">        Edge[j][i] = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码"><a class="header-anchor" href="#具体代码">¶</a>具体代码</h4><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/2.png"><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">MGraph</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;Vertex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edges; <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//标记是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点总数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Vertex.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_Mgraph</span><span class="params">(<span class="keyword">const</span> Einfo&amp; definfo = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size()) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n_vertex = Get_n_vertex();</span><br><span class="line"></span><br><span class="line">Edges.resize(n_vertex, <span class="built_in">vector</span>&lt;Einfo&gt;(n_vertex, definfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; Vertex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo info)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size())</span><br><span class="line">create_Mgraph();</span><br><span class="line"></span><br><span class="line">Edges[i][j] = info;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edges[j][i] = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Mgraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : Vertex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Mgraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"></p></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#邻接矩阵&quot;&gt;¶&lt;/a&gt;邻接矩阵&lt;/h4&gt;
&lt;p&gt;用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。&lt;/p&gt;
&lt;img s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.3）图的实现边表</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-3%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-3）图的实现边表/</id>
    <published>2019-08-15T13:26:14.000Z</published>
    <updated>2019-08-15T15:38:47.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边表"><a class="header-anchor" href="#边表">¶</a>边表</h4><ul><li>边表是把图的顶点，和边分别用顺序表进行存储的结构</li><li>这种存储结构是最简单、最容易实现的图存储结构</li><li>缺点：如果边的数目过大，会使效率降低</li></ul><hr><h4 id="代码实现及思路"><a class="header-anchor" href="#代码实现及思路">¶</a>代码实现及思路</h4><ul><li><p>边表结构</p><ul><li><p>思路：因为边表是通过两个顺序表分别存储顶点集和边集的存储结构，所以在实现时可以通过创建顶点集和边集的结构，其中边集要有两个顶点在顶点集中的下标数值，和该边对应的权值。其中顺序表可以通过C++内置的vector结构实现。</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt; <span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*实现边集结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="comment">/*边两头的顶点在顶点集的下标*/</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        Einfo info;<span class="comment">//用来存储权的数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*边集构造函数*/</span></span><br><span class="line">        Edge(<span class="keyword">int</span> i,<span class="keyword">int</span> j,Einfo info):x(i),y(j),info(info)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;Edges;<span class="comment">//边集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> undirected;<span class="comment">//用来标记是否为无向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*边表构造函数(默认为无向表)*/</span></span><br><span class="line">     ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirecter)&#123;&#125;; </span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加顶点</p><ul><li><p>思路：直接通过对vector结构进行操作添加即可</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;VerTex.push_back(vertex);&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加边</p><ul><li><p>思路：跟添加顶点操作一致</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;Edges.push_back(Edge(i,j,info));&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="代码实现："><a class="header-anchor" href="#代码实现：">¶</a>代码实现：</h4><img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/1.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* VT 顶点数据</span></span><br><span class="line"><span class="comment">* Einfo 边数据类型(权)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">Einfo info;</span><br><span class="line">Edge(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo inf) :x(i), y(j), info(inf) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt; VerTex;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; Edges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//判断是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*默认为有向图*/</span></span><br><span class="line">ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加顶点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; VerTex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加边*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123; Edges.push_back(Edge(i, j ,info)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载运算符*/</span></span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> VerTex[i];&#125;</span><br><span class="line">VT&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> VerTex[i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_VT</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> VerTex.size(); &#125;</span><br><span class="line"><span class="comment">/*获得边的数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_e</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> Edges.size(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : VerTex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"边："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="string">" "</span> &lt;&lt; e.y &lt;&lt; <span class="string">" "</span> &lt;&lt; e.info &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ElistGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.get_n_VT() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.get_n_e() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>实验结果：<img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/2.png"></p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#边表&quot;&gt;¶&lt;/a&gt;边表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;边表是把图的顶点，和边分别用顺序表进行存储的结构&lt;/li&gt;
&lt;li&gt;这种存储结构是最简单、最容易实现的图存储结构&lt;/li&gt;
&lt;li&gt;缺点：如
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.2）图的抽象数据类型</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-2%EF%BC%89%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-2）图的抽象数据类型/</id>
    <published>2019-08-15T13:05:08.000Z</published>
    <updated>2019-08-15T13:25:09.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的抽象数据类型"><a class="header-anchor" href="#图的抽象数据类型">¶</a>图的抽象数据类型</h4><ul><li>ADT Graph</li><li>Data     V是具有相同特性的数据元素的集合名称为顶点集</li><li>Relation<ul><li>R = {VR}</li><li>VR = {&lt;V,W&gt;|V,W∈V且P(V,W) &lt;V,W&gt;表示从V，W的弧，P(v,w)定义了弧的&lt;v,w&gt;的意义}</li></ul></li><li>Operation<ul><li>createGraph(&amp;G,V,VR)<ul><li>初始条件：V是图的顶点集，VR是图中边/弧的集合</li><li>操作结果：按V和VR的定义构造图G</li></ul></li><li>DFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>深度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li><li>BFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>广度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li></ul></li></ul><hr><h4 id="图的数据存储结构"><a class="header-anchor" href="#图的数据存储结构">¶</a>图的数据存储结构</h4><ul><li>边表</li><li>数组表示法(邻接矩阵)</li><li>邻接表</li><li>十字链表(有向图)</li><li>多重邻接表(无向图)</li></ul><p>– (本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的抽象数据类型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图的抽象数据类型&quot;&gt;¶&lt;/a&gt;图的抽象数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ADT Graph&lt;/li&gt;
&lt;li&gt;Data     V是具有相同特性的数据元素的集合名称为顶点集&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.7）左值和右值、左右值引用、std::move()函数</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC%E3%80%81%E5%B7%A6%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81std-move-%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/C-进阶学习总结-（2-7）左值和右值、左右值引用、std-move-函数/</id>
    <published>2019-08-14T18:10:46.000Z</published>
    <updated>2019-08-15T08:24:27.816Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述左值和右值、C++11中新版的右值引用运算符 &amp;&amp;、std::move()函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6-1）图的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-1%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/</id>
    <published>2019-08-14T16:44:55.000Z</published>
    <updated>2019-08-14T18:07:05.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图"><a class="header-anchor" href="#图">¶</a>图</h4><ul><li>定义：图G(graph)是一些点和线的集合<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/1.png"></li><li>图中的点叫作<strong>顶点</strong>(VerTex)</li><li>两个顶点的连线叫作<strong>边</strong>(Edges)</li><li>Graph = (V,E)<ul><li>V：顶点(数据元素)的<strong>有穷非空</strong>集合</li><li>E：边的有穷集合</li></ul></li></ul></li></ul><hr><h4 id="图的分类"><a class="header-anchor" href="#图的分类">¶</a>图的分类</h4><ul><li><p>无向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"></li><li>每一条边都是没有方向的</li><li>顶点集合{A,B,C,D}</li><li>边集合{(A,B),(A,D),(C,D),(C,B),(A,C)}</li></ul></li><li><p>有向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/3.png" title="其中B为弧头(Head),D为弧尾(Tail)"></li><li>每一条边有方向的，也称弧(arc)</li><li>顶点集合{A,B,C,D}</li><li>边集合{(B,A),(A,D),(B,C),(C,A)}</li></ul></li><li><p>完全图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/4.png"></li><li>任意两个顶点都有一条边相连的图叫作<strong>完全图</strong></li><li>无向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)/2条边</strong></li><li>有向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)条边</strong></li></ul></li><li><p>网</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/5.png"></li><li>网是边或弧<strong>带权</strong>的图</li><li>无向网</li><li>有向网</li></ul></li></ul><hr><h5 id="子图"><a class="header-anchor" href="#子图">¶</a>子图</h5><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/6.png" title="1和2是3的子图"><ul><li>1和2是3的子图</li></ul><hr><h4 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h4><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"><ol><li>如果边(V,U)∈E，则称顶点V和U互为邻接点(Adjacent)<ul><li>例：A/B、B/C、C/D…互为邻接点</li></ul></li><li>边(V,U)依附于(incident)顶点V和U(或边与顶点相关联)<ul><li>例：边(A,B)依附于顶点A、B上</li></ul></li><li>顶点V的度(Degree)是和V相关联的边的数量，记为TD(V)，对于有向图：有出度和入度<ul><li>例：A的度为3、D的度为2</li><li><strong>握手定理</strong>：边数(E) = 各顶点度数和/2</li></ul></li></ol><h5 id="相关术语解释"><a class="header-anchor" href="#相关术语解释">¶</a>相关术语解释</h5><ul><li><p>路径</p><ul><li>若从一个顶点V<sub>i</sub>出发，沿一些边经过一些顶点，再到达顶点V<sub>k</sub>,则称沿途的经过顶点的序列为从V<sub>i</sub>到V<sub>k</sub>的路径</li></ul></li><li><p>路径的长度</p><ul><li>路径上的边或弧的数目</li></ul></li><li><p>回路(环)</p><ul><li>起点与终点相同的路径</li></ul></li><li><p>简单路径</p><ul><li><strong>没有重复</strong>顶点的路径，即不含回路</li></ul></li><li><p>简单回路</p><ul><li>除起点和终点相同外，<strong>没有</strong>其余<strong>重复</strong>顶点的路径</li></ul></li></ul><hr><h5 id="连通图"><a class="header-anchor" href="#连通图">¶</a>连通图</h5><ul><li>在<strong>无向图</strong>G中，如果从顶点V到顶点V`<strong>有路径</strong>，则称V和V’是连通的</li><li>如果对于图中的任意两个顶点V<sub>i</sub>和V<sub>k</sub><strong>都是连通</strong>的，则称G是<strong>连通图</strong></li><li>是否连通是对无向图来说的</li></ul><h5 id="强连通图"><a class="header-anchor" href="#强连通图">¶</a>强连通图</h5><ul><li>在<strong>有向图</strong>G中，从顶点u到顶点v有路径，且从顶点v到顶点u也有路径，则称u和v是强连通的</li><li>如果有向图的任意两个顶点u和v都是强连通，则称G是<strong>强连通图</strong></li><li>是否强连通是对于有向图来说的</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#图&quot;&gt;¶&lt;/a&gt;图&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;定义：图G(graph)是一些点和线的集合
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&quot;/2019/08/15/数据结构学习总结-（6-1）图的定义及
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14.1）哈夫曼编码表的代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14-1%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/</id>
    <published>2019-08-11T14:39:41.000Z</published>
    <updated>2019-08-11T16:38:48.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码表"><a class="header-anchor" href="#哈夫曼编码表">¶</a>哈夫曼编码表</h4><ol><li>根据构建的哈夫曼树，左分支标记为0有分支标记为1</li><li>通过二维数组保存编码表</li></ol><hr><h5 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h5><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> code[<span class="number">256</span>][<span class="number">128</span>] <span class="comment">//存储哈夫曼编码表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Codeing</span><span class="params">(haffmanNode* node,<span class="keyword">char</span>* temparray,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*处理空结点的情况+递归出口*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*当到达叶结点的时候*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node-&gt;R_Node || !node-&gt;L_Node)&#123;</span><br><span class="line">        temparray[index] = <span class="string">'\0'</span>;</span><br><span class="line">        </span><br><span class="line">        strcpy_s(code[node-&gt;data<span class="number">-0</span>],<span class="number">128</span>,temparray);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归获取编码表*/</span></span><br><span class="line">    temparray[index] = <span class="string">'0'</span>;</span><br><span class="line">    Codeing(node-&gt;L_Node,temparray,index++);</span><br><span class="line">    temparray[index] = <span class="string">'1'</span>;</span><br><span class="line">    Codeing(node-&gt;R_Node,temparray,index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="技术小结："><a class="header-anchor" href="#技术小结：">¶</a>技术小结：</h5><ul><li>temparray数组用来临时存储字符对应的哈夫曼编码，存储格式为字符串</li><li>这里采用二维数组来存储哈夫曼编码表，第一维下标为字符对于的ASCII码，所储存的为对应的编码</li><li>当到达叶结点的时候，在该位置下标的temparry设置为结束符，意味着一个字符串(字符编码)的存储完毕</li></ul><hr><h4 id="编码过程解析"><a class="header-anchor" href="#编码过程解析">¶</a>编码过程解析</h4><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/1.png"><ul><li>第一步：<code>Codeing(haffmanNode* node,char* temparray,int index)</code><ul><li>根据哈夫曼树构建完毕的node数组</li><li>定义<code>char* temparray[128]；</code>index = 0；</li><li>parent4 拥有左右孩子且不空、temparray[0]  = 0</li></ul></li><li>第二步: <code>Codeing(node(parent4)-&gt;L_Node,temparray,index++);</code><ul><li>index = 1</li><li>B无左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>，temparry[1] = ‘\0’</li><li>code[66(B)] = “0”</li><li>return结束此处递归</li></ul></li><li>第三步： <code>Codeing(node(parent4)-&gt;R_Node,temparray,index++);</code><ul><li>index = 1、temparray[0] = 1</li><li>parent3 拥有左右孩子且不空执行左递归、temparry[1] = 0</li></ul></li><li>第四步：<code>Codeing(node(parent3)-&gt;L_Node,temparray,index++);</code><ul><li>index = 2</li><li>D结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[2] = ‘\0’</li><li>code[68(D)] = “10”</li><li>return结束此处递归</li></ul></li><li>第五步：<code>Codeing(node(parent3)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[1] = 1,index = 2</li><li>parent2拥有左右孩子且不空指向左递归、temparry[2] = 0</li></ul></li><li>第六步：<code>Codeing(node(parent2)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 3</li><li>parent1拥有左右孩子且不空指向左递归、temparry[3] = 0</li></ul></li><li>第七步：<code>Codeing(node(parent1)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 4</li><li>C结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[67©] = “1100”</li><li>return结束此处递归</li></ul></li><li>第八步：<code>Codeing(node(parent1)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[3] = 1，index = 4</li><li>E结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[69(E)] = “1101”</li><li>return结束此处递归</li></ul></li><li>第九步：<code>Codeing(node(parent2)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[2] = 1、index = 3</li><li>A结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[3] = ‘\0’</li><li>code[65(A)] = “111”</li></ul></li></ul><hr><ul><li><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/2.png"></li><li><table><thead><tr><th style="text-align:center">code[下标]</th><th style="text-align:center">储存元素（编码）</th></tr></thead><tbody><tr><td style="text-align:center">65（A）</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">66（B）</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">67（C）</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">68（D）</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">69（E）</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><h5 id="解析过程错误小结："><a class="header-anchor" href="#解析过程错误小结：">¶</a>解析过程错误小结：</h5><ul><li>函数递归时传参是形参，即index在递归时自加了。结束该分支后返回上一个函数时index值还是递归自加前的值</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码表&quot;&gt;¶&lt;/a&gt;哈夫曼编码表&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;根据构建的哈夫曼树，左分支标记为0有分支标记为1&lt;/li&gt;
&lt;li&gt;通过二维数组保存编码表&lt;/li&gt;
&lt;/ol&gt;
&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14）哈夫曼树的构建代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/</id>
    <published>2019-08-10T17:16:45.000Z</published>
    <updated>2019-08-11T14:37:32.852Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树的构建"><a class="header-anchor" href="#哈夫曼树的构建">¶</a>哈夫曼树的构建</h4><h5 id="哈夫曼树的构建步骤"><a class="header-anchor" href="#哈夫曼树的构建步骤">¶</a>哈夫曼树的构建步骤</h5><ol><li>根据权重进行从小到大排列</li><li>取最小的两个构成一个子树,并使两个的权值相加用来代替这两个结点</li><li>根据这个新的权重再进行排列</li><li>重复1.2.3步</li></ol><hr><h5 id="代码实现-顺序结构储存"><a class="header-anchor" href="#代码实现-顺序结构储存">¶</a>代码实现(顺序结构储存)</h5><ul><li><p>结点的构建</p><ul><li><p>根据哈夫曼树的构建，结点首先要包含权值、左右子树指针，其次要包含数据</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">haffmanNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weigth;<span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    </span><br><span class="line">    haffmanNode* L_Node;<span class="comment">//左孩子</span></span><br><span class="line">    haffmanNode* R_Node;<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序结构存储二叉树*/</span></span><br><span class="line"></span><br><span class="line">haffmanNode node[<span class="number">256</span>]；</span><br><span class="line"></span><br><span class="line">haffmanNode allL_Node[<span class="number">128</span>];</span><br><span class="line">haffmanNode allR_Node[<span class="number">128</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据权值进行排序(冒泡排序)</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortHaffmanNode</span><span class="params">(haffmanNode* nodes,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    haffmanNode temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">1</span> - i; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes[k].weight &lt; nodes[k+<span class="number">1</span>].weight)&#123;</span><br><span class="line">                temp = nodes[k];</span><br><span class="line">                nodes[k] = nodes[k+<span class="number">1</span>];</span><br><span class="line">                nodes[k+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>哈夫曼树的构建</p><ul><li><p>对结点先进行排序取最小的构成一颗树</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHaffmanTree</span><span class="params">(haffmanNode* nodes, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据权值进行排序*/</span></span><br><span class="line">    sortHaffmanNode(nodes,length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*用来压缩成哈夫曼编码用*/</span></span><br><span class="line">    allL_Node[length] = nodes[length<span class="number">-1</span>];<span class="comment">//保存左结点</span></span><br><span class="line">    allR_Node[length] = nodes[length<span class="number">-2</span>];<span class="comment">//保存右结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*取最小权重的两个结点重新组成树*/</span></span><br><span class="line">    haffmanNode parent;</span><br><span class="line">    parent.weight = allL_Node[length].weight + allR_Node[length].weight;</span><br><span class="line">    </span><br><span class="line">    parent.L_Node = &amp;allL_Node[length];</span><br><span class="line">    parent.R_Node = &amp;allR_Node[length];</span><br><span class="line">    </span><br><span class="line">    nodes[length - <span class="number">2</span>] = parent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归直至哈夫曼树创建完成</span></span><br><span class="line">    CreateHaffmanTree(nodes,length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="哈夫曼树构建解析"><a class="header-anchor" href="#哈夫曼树构建解析">¶</a>哈夫曼树构建解析</h4><p>例图：<img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/1.png"></p><ul><li><p>第一步：<code>void CreateHaffmanTree(haffNode* node, int length)</code></p><ul><li><p>node数组内容{A(12),B(26),C(5),D(18),E(4)}，length = 5；</p></li><li><p>排序后 node{B,D,A,C,E},取最小结点C、E组成树</p></li><li><p><code>allL_Node[5] = C、allR_Node[5] = E</code></p></li><li><p>parent1：weight = (4 + 5)9、L_Node = C、R_Node = E</p></li><li><p>node 数组内容变更为{B(26),D(18),A(12),parent1(9)}</p></li></ul></li><li><p>第二步：<code>CreateHaffmanTree(node, length - 1(4))</code></p><ul><li>node 数组内容{B(26),D(18),A(12),parent1(9)}，length = 4</li><li>排序后 node{B,D,A,parent1},取最小结点A、parent1组成树</li><li><code>allL_Node[4] = parent1、allR_Node[4] = A</code></li><li>parent2：weight = (9+12)21、L_Node = parent1、R_Node = A\</li><li>node 数组内容变更为{B(26),D(18),parent2(21)}</li></ul></li><li><p>第三步：<code>CreateHaffmanTree(node, length - 1(3))</code></p><ul><li>node 数组内容{B(26),D(18),parent2(21)}、length = 3</li><li>排序后 node{B,parent2,D},取最小结点parent2、D组成树</li><li><code>allL_Node[3] = D、allR_Node[3] = parent2</code></li><li>parent3：weight = (18+21)39、L_Node = D、R_Node = parent2</li><li>node 数组内容变更为{B(26),parent3(39)}</li></ul></li><li><p>第四步：<code>CreateHaffmanTree(node, length - 1(2))</code></p><ul><li>node 数组内容{B(26),parent3(39)}、length = 2</li><li>排序后 node{parent3,B},取最小结点parent3、B组成树</li><li><code>allL_Node[2] = B、allR_Node[2] = parent3</code></li><li>parent4：weight = (26+39)65、L_Node = B、R_Node = parent3</li><li>node 数组内容变更为{parent4(65)}</li></ul></li><li><p>第五步：<code>CreateHaffmanTree(node, length - 1(1))</code></p><ul><li>length = 1 符合<code>if(length &lt;= 1)return;</code>结束递归，哈夫曼树创建完毕</li></ul></li></ul><hr><img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/2.png"><table><thead><tr><th style="text-align:center">allL_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">parent1</td><td style="text-align:center">C</td></tr></tbody></table><table><thead><tr><th style="text-align:center">allR_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">parent3</td><td style="text-align:center">parent2</td><td style="text-align:center">A</td><td style="text-align:center">E</td></tr></tbody></table><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树的构建&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建&quot;&gt;¶&lt;/a&gt;哈夫曼树的构建&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼树的构建步骤&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树的构建步骤&quot;&gt;¶&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.13）哈夫曼编码</title>
    <link href="https://shuhaohwang.github.io/2019/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-13%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://shuhaohwang.github.io/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/</id>
    <published>2019-08-09T16:46:14.000Z</published>
    <updated>2019-08-09T17:49:51.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码"><a class="header-anchor" href="#哈夫曼编码">¶</a>哈夫曼编码</h4><h5 id="哈夫曼编码是什么？"><a class="header-anchor" href="#哈夫曼编码是什么？">¶</a>哈夫曼编码是什么？</h5><p>哈夫曼编码是用来压缩数据的一种手段，在网络上信息的传输都是通过二进制来进行输送的（0和1），在进行数据输送的时候，首先就要将即将输送的数据进行转码，使其变为二进制再进行传输。例如：</p><ul><li><p>要传输<code>‘ABCADBBAED’</code>这段数据。且你知道一个二进制转换编码表：</p><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">000</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">101</td></tr></tbody></table></li></ul></li><li><p>则这段字符串会先转换成二进制码：<code>000100110000111100100000101111</code></p></li><li><p>上面的二进制转换表编码是以3位进行编码的，而用哈夫曼编码进行编译转换，则会让这段字符串传输的时候能够更为简短。</p></li></ul><h5 id="哈夫曼编码的使用"><a class="header-anchor" href="#哈夫曼编码的使用">¶</a>哈夫曼编码的使用</h5><p>哈夫曼编码是通过哈夫曼树进行转换出来的，例如在上面的字符串：<code>‘ABCADBBAED’</code>是出现在一个文章里面的，这个文章里面含有：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">出现次数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">4</td></tr></tbody></table><p>根据上表进行转换为哈夫曼树</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/1.png"><p>通过对哈夫曼树处理，往左走为0往右走为1，通过记录会形成一个新的转换表</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"><ul><li><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">111</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">1101</td></tr></tbody></table></li></ul><p>根据表中的内容把要输送的字符串<code>‘ABCADBBAED’</code>进行转换成二进制<code>111011001111000111110110</code></p><p>对比一开始用3个编码进行转换的字符串编码会发现，哈夫曼编码进行转换处理的二进制码数为24个，比前面的少了6个，可以发现运用哈夫曼编码可以使传输的二进制码被压缩成更简单二进制码。</p><hr><h5 id="哈夫曼编码的好处"><a class="header-anchor" href="#哈夫曼编码的好处">¶</a>哈夫曼编码的好处</h5><ul><li><strong>使转换的二进制码更简洁</strong><ul><li>哈夫曼编码是通过检测传输的字符串中字符的出现频率进行生成对应的编码表。采用的是前缀编码。</li></ul></li><li><strong>因为采用的前缀的编码，进行译码的时候减少出错</strong></li><li>…</li></ul><hr><h4 id="译码"><a class="header-anchor" href="#译码">¶</a>译码</h4><p>进行译码的过程很简单，通过一开始构建的哈夫曼树，进行译码。</p><ul><li><p>例如：<code>111011001111000111110110</code></p><ul><li><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"></li></ul></li><li><p>译码过程：<strong>从根开始</strong>遇到0就走左，遇到1就走右，当到达叶结点的时候，翻译出该字符，然后<strong>重新返回根结点重新识别</strong></p></li><li><p>译码结果：ABCADBBAED</p></li></ul><hr><h5 id="小结："><a class="header-anchor" href="#小结：">¶</a>小结：</h5><ul><li>从上面的译码过程可以看出，对哈夫曼编码编码后的二进制码进行译码的时候只需根据编码对哈夫曼树进行遍历即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码&quot;&gt;¶&lt;/a&gt;哈夫曼编码&lt;/h4&gt;
&lt;h5 id=&quot;哈夫曼编码是什么？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼编码是什么？&quot;&gt;¶&lt;/a&gt;哈夫曼
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.12）中序线索二叉树的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-12%EF%BC%89%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/</id>
    <published>2019-08-03T09:03:17.000Z</published>
    <updated>2019-08-03T11:04:43.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中序线索二叉树"><a class="header-anchor" href="#中序线索二叉树">¶</a>中序线索二叉树</h4><p>在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。</p><hr><h4 id="中序线索二叉树的遍历算法"><a class="header-anchor" href="#中序线索二叉树的遍历算法">¶</a>中序线索二叉树的遍历算法</h4><p>通过构建的中序线索二叉树的特点。叶子结点存在直接指向前驱和后继的结点的指针，在遍历的时候就可以快速的定位。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threaded_Mid_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R-&gt;L_Node)&#123;</span><br><span class="line">        R = R-&gt;L_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; R-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!R-&gt;RTag)&#123;</span><br><span class="line">            R = R-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(R-&gt;LTag)&#123;</span><br><span class="line">                R = R-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> R = R-&gt;R_Node; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/1.png"></p></li></ul></li></ul><hr><h4 id="总结："><a class="header-anchor" href="#总结：">¶</a>总结：</h4><p>通过利用线索来进行遍历就可以避免递归或者要使用栈结构来进行遍历。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;中序线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#中序线索二叉树&quot;&gt;¶&lt;/a&gt;中序线索二叉树&lt;/h4&gt;
&lt;p&gt;在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。&lt;/p&gt;

      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.11）线索二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-11%EF%BC%89%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-11）线索二叉树/</id>
    <published>2019-08-03T02:08:19.000Z</published>
    <updated>2019-08-03T09:41:50.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线索二叉树"><a class="header-anchor" href="#线索二叉树">¶</a>线索二叉树</h4><p>在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也会存在左右孩子不存在的情况下，那么这些空的指针往往会造成资源的浪费，这就为什么要存在线索二叉树，它能使这些空掉的指针能重新运用起来。</p><h5 id="线索二叉树的构成"><a class="header-anchor" href="#线索二叉树的构成">¶</a>线索二叉树的构成</h5><p>为了实现线索二叉树能够使空的指针能被重新利用起来，所以在结点结构定义的时候再添加两个标识符变量。这些标识符存在的目的是为了区分一个结点的左右孩子是否为空，如果是空那么就会指向前驱或者后置结点，如果不为空说明这个指针是指向左右孩子的。</p><img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/1.png"><p>从上面的图可以看出来，当右标识符为<code>'0'</code>的时候说明他的右孩子指针指向的是右孩子，当标识符为<code>'1'</code>的时候，说明这个结点的右孩子指针指向的不是右孩子(即：该结点没有右孩子)而是这个结点的前驱结点，同理，左标识符便是判断其左孩子的指针是指向后置结点还是左孩子。</p><hr><h4 id="二叉树线索化"><a class="header-anchor" href="#二叉树线索化">¶</a>二叉树线索化</h4><p>根据上面所说的线索二叉树，从最基本的来看，线索二叉树相比普通二叉树就是在没有左孩子或者右孩子的结点中这些本该指向左右孩子的指针不为空，使其能重新废物利用。所以把一个二叉树线索化的主要思路便是遍历一个二叉树，逐一判断每个结点的左右孩子是否为空，若为空那么就让其能指向这个结点的前驱结点或者后置结点。</p><ul><li><p>综上所述，线索化的主要操作就是基于遍历算法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此区域内实现线索二叉树的主要操作...</span></span><br><span class="line">    </span><br><span class="line">    Tree_Threaded(R -&gt; R_Node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在开始线索化之前还需要将结点结构进行变化，即要多定义两个标识符表示用来进行判断左右孩子指针的指向。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node;</span><br><span class="line">    BiTreeNode* R_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*标识符变量*/</span></span><br><span class="line">    <span class="keyword">int</span> RTag;</span><br><span class="line">    <span class="keyword">int</span> LTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>其次二叉树存在没有利用的指针，线索化后，这些空指针会指向该结点的前驱结点或者后置结点，这也就是说在线索化过程中还要有两个临时变量能够指向受判断结点的前驱结点和后置结点，方便在判断该结点在没有左右孩子的情况下，使其两个指针能够快速的指向前驱和后置结点。</p><hr><h4 id="线索化二叉树的代码实现"><a class="header-anchor" href="#线索化二叉树的代码实现">¶</a>线索化二叉树的代码实现</h4><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R，BiTreeNode* &amp;pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node,pre);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!R-&gt;L_Node)&#123;</span><br><span class="line">        R-&gt;L_Node = pre;</span><br><span class="line">        R-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre &amp;&amp; !pre-&gt;R_Node)&#123;</span><br><span class="line">        pre-&gt;R_Node = R;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> pre = R;</span><br><span class="line">    Tree_Threaded(R -&gt; R_Node,pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="二叉树线索化解析："><a class="header-anchor" href="#二叉树线索化解析：">¶</a>二叉树线索化解析：</h5><p>例图：<img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/2.png"></p><ul><li><p>第一次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr></tbody></table><ul><li>pre指向D</li></ul></li></ul><hr><ul><li><p>第二次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center"></td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center"></td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向B，递归至E结点后指向E</li></ul></li></ul><hr><ul><li><p>第三次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center"></td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center"></td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向E后指向A</li></ul></li></ul><hr><ul><li><p>第四次：</p></li><li><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:center">R_Node</td><td style="text-align:center">C</td><td style="text-align:center">E</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td><td style="text-align:center">A</td></tr><tr><td style="text-align:center">L_Node</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">A</td><td style="text-align:center">nullptr</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">RTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">LTag</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><ul><li>pre先指向A后指向C</li></ul></li></ul><hr><h4 id="线索二叉树的好处："><a class="header-anchor" href="#线索二叉树的好处：">¶</a>线索二叉树的好处：</h4><p>从上面可以看出，线索二叉树的一些结点空出来的指针被重新利用起来，再到达叶子结点的时候，可以直接通过左右孩子的指针快速定位到其的前驱结点或后继结点，根据这个性质在进行遍历的时候就可以直接访问这些通过线索链接起来的结点。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线索二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#线索二叉树&quot;&gt;¶&lt;/a&gt;线索二叉树&lt;/h4&gt;
&lt;p&gt;在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5-10）前序遍历非递归实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-10%EF%BC%89%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/01/数据结构学习总结-（5-10）前序遍历非递归实现/</id>
    <published>2019-08-01T08:41:16.000Z</published>
    <updated>2019-08-15T13:33:14.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序遍历的非递归实现"><a class="header-anchor" href="#前序遍历的非递归实现">¶</a>前序遍历的非递归实现</h4><ul><li><p>思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问和移动，因为是堆栈所以要注意，在进行左右孩子移动的时候，应该让右孩子先入栈，左孩子后入栈，根据栈结构FIBO(先进后出)的结构特点，所以左孩子会先进行访问</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pre_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = R;</span><br><span class="line">    s.push(T);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(T-&gt;R_Node)s.push(T-&gt;R_Node);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;L_Node)s.push(T-&gt;L_Node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序遍历的非递归实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前序遍历的非递归实现&quot;&gt;¶&lt;/a&gt;前序遍历的非递归实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9.1）二叉树的遍历非递归[附加]</title>
    <link href="https://shuhaohwang.github.io/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9-1%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92-%E9%99%84%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/07/31/数据结构学习总结-（5-9-1）二叉树的遍历非递归-附加/</id>
    <published>2019-07-31T10:26:28.000Z</published>
    <updated>2019-07-31T15:57:24.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码1"><a class="header-anchor" href="#代码1">¶</a>代码1:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()||T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T)&#123;</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">            s.push(T)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            T = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            T = T-&gt;R_Node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码2："><a class="header-anchor" href="#代码2：">¶</a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">BiTreeNode* T = Root;</span><br><span class="line">s.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(T = s.top())</span><br><span class="line">            s.push(T-&gt;L_Node);</span><br><span class="line">        </span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            T = s.top();s.pop();</span><br><span class="line">        <span class="keyword">if</span> (!Visit(T))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s.push(T-&gt;R_Node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码1&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#代码1&quot;&gt;¶&lt;/a&gt;代码1:&lt;/h4&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9）二叉树的遍历非递归</title>
    <link href="https://shuhaohwang.github.io/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://shuhaohwang.github.io/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/</id>
    <published>2019-07-25T06:56:21.000Z</published>
    <updated>2019-07-25T07:51:36.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归的优缺点"><a class="header-anchor" href="#递归的优缺点">¶</a>递归的优缺点</h4><p>二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函数的调用是要消耗系统内存的，在小范围小幅度的递归对程序不会有太大的影响，但是如果递归的深度太大，会使内存枯竭，程序崩溃。即：递归即有好处也有坏处</p><ul><li>递归的优点：<ul><li>代码简洁</li></ul></li><li>递归的缺点：<ul><li>过多递归会影响系统内存和程序运行效率</li></ul></li></ul><hr><h4 id="二叉树非递归的代码实现及思路"><a class="header-anchor" href="#二叉树非递归的代码实现及思路">¶</a>二叉树非递归的代码实现及思路</h4><p>正如上面所说，函数递归在遍历较小的二叉树是没有太大的问题的。但若遍历深度巨大的二叉树，使用递归来遍历是不太可行的。所以二叉树非递归的方式来实现遍历也理所当然的变的重要。</p><ul><li><p>二叉树非递归遍历的实现<strong>思路</strong>：通过栈数据结构，进行入栈操作，先把树的每一个结点的左孩子入栈直至访问到叶结点，随后进行访问，访问一个出栈一个，并检测此时的右孩子是否为空，若不空，重复上述的操作即可。</p></li><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            s.push(T);</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        T = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        T = T-&gt;R_Node;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!s.Empty()||T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/1.png"></p></li></ul></li></ul><hr><h4 id="函数流程演示"><a class="header-anchor" href="#函数流程演示">¶</a>函数流程演示</h4><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/2.png"><ul><li><p>第一步：A结点不空进入循环，入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第二步：B结点入栈、第三次循环D结点入栈。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">D</td></tr><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第三步：跳出循环，T指针指向栈顶,访问栈顶数据，并出栈。</p><ul><li><p><code>T：-&gt;D</code></p></li><li><p><strong>输出了D</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">B</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第四步：T重新指向此时指向结点的右孩子。第一次外循环结束。</p><ul><li><code>T：-&gt;D.R_Node(nullptr)</code></li></ul></li><li><p>第五步：开始第二次外循环，因为T为空内循环不执行、T指向栈顶，访问栈顶数据。</p><ul><li><p><code>T：-&gt;B</code></p></li><li><p><strong>输出了B</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li></ul><ul><li><p>第六步：T指向了B结点的右孩子E，结束第二次外循环。</p><ul><li><code>T：-&gt;E</code></li></ul></li><li><p>第七步：此时T不空执行内循环，E入栈,T指向E结点的左孩子,因为E结点的左孩子为空跳出循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">E</td></tr><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第八步：T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;E</code></p></li><li><p><strong>输出了E</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">A</td></tr></tbody></table></li></ul></li><li><p>第九步：T指向E结点的右孩子，因为为空所以结束第三次外循环。</p><ul><li><code>T：-&gt;E.R_Node(nullptr)</code></li></ul></li><li><p>第十步：因为此时T为空不执行内循环，T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;A</code></p></li><li><p><strong>输出了A</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十一步：T指向A结点的右孩子C，因为是空栈，所以也结束第四次外循环，重新开始下一轮循环。</p><ul><li><code>T：-&gt;C</code></li></ul></li><li><p>第十二步：T不为空，指向内循环，入栈，更新T指向C的左孩子，为空结束内循环。</p><ul><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">C</td></tr></tbody></table></li></ul></li><li><p>第十三步：T指向栈顶，访问栈顶，出栈</p><ul><li><p><code>T：-&gt;C</code></p></li><li><p><strong>输出了C</strong></p></li><li><table><thead><tr><th style="text-align:center">栈顶</th></tr></thead><tbody><tr><td style="text-align:center">空</td></tr></tbody></table></li></ul></li><li><p>第十四步：T指向C结点的右孩子，但为空，且栈也为空栈，跳出外循环。结束遍历操作。</p></li><li><p>结果输出：D、B、E、A、C</p></li><li><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/3.png"></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归的优缺点&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#递归的优缺点&quot;&gt;¶&lt;/a&gt;递归的优缺点&lt;/h4&gt;
&lt;p&gt;二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.8）哈夫曼树概念及定义</title>
    <link href="https://shuhaohwang.github.io/2019/07/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-8%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%9A%E4%B9%89/"/>
    <id>https://shuhaohwang.github.io/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/</id>
    <published>2019-07-23T13:18:38.000Z</published>
    <updated>2019-07-23T19:16:00.191Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树概念"><a class="header-anchor" href="#哈夫曼树概念">¶</a>哈夫曼树概念</h4><p>给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树。</p><h5 id="相关术语及概念解释"><a class="header-anchor" href="#相关术语及概念解释">¶</a>相关术语及概念解释</h5><ul><li><u>路径和路径长度</u>：从树中一个结点到另一个结点之间的分支构成两个结点之间的路径，路径上的分支数量称为路径长度。<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="A到B的路径长度为1，A到F和A到D的路径长度为2"></li></ul></li><li><u>树的路径长度：</u>就是树根到<font color="red">每一个结点</font>的路径长度之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/1.png" title="该树的路径长度为 1+1+2+2+2 = 8"></li></ul></li><li><u>带权路径长度：</u>从根结点到该结点之间的路径长度与权的乘积<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="0号点到3号点的带权路径长度为`1*83 + 2*11 = 105`"></li></ul></li><li><u>树的带权路径长度：</u>就是树的每一个结点路径长度乘以权值之和<ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/2.png" title="树的带权路径长度为`1*83 + 2*11 + 2*9 + 1*27 = 150`"></li></ul></li><li>其中树的带权路径长度(WPL)若为最小，那么就称这个数为哈夫曼树</li></ul><hr><h4 id="哈夫曼树的应用"><a class="header-anchor" href="#哈夫曼树的应用">¶</a>哈夫曼树的应用</h4><ul><li><p>场景设置</p></li><li><p>假设要对一个班级里的50位同学进行评分，其中人员分数分配如下</p></li><li><table><thead><tr><th></th><th>优秀</th><th>良好</th><th>中等</th><th>及格</th><th>不及格</th></tr></thead><tbody><tr><td>分值a</td><td>a&gt;=90</td><td>80&lt;=a&lt;90</td><td>70&lt;=a&lt;80</td><td>60&lt;=a&lt;70</td><td>a&lt;60</td></tr><tr><td>人数</td><td>8</td><td>21</td><td>12</td><td>7</td><td>2</td></tr></tbody></table></li><li><p>并把他们用下面的二叉树进行统计分类</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/3.png"></li><li>会发现 要想把所有人进行统计完毕一共需要判断 <code>2*1 + 2*7 + 3*12 + 4*21 + 4*8 = 168次</code>。</li></ul></li><li><p>如果把上面的树进行变换变为如下的二叉树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/4.png"></li><li>一共需要判断<code>3*2 + 7*3 + 12*2 + 21*2 + 2*8 = 109</code>次相比前面的二叉树发现判断的次数变少了，说明用第二种二叉树进行判断分类效率更高。</li></ul></li><li><p>从上面可以发现，判断次数的计算类似于树的带权距离计算。所以只要保证其树的带权距离最短那么效率就会越高。</p></li></ul><hr><h4 id="哈夫曼树的生成"><a class="header-anchor" href="#哈夫曼树的生成">¶</a>哈夫曼树的生成</h4><p>就以上面的的例子创建哈夫曼树</p><ul><li><p>第一步：对人数进行排序(也就是对权值进行排序)从大到小的顺序分别是</p><ul><li><table><thead><tr><th>良好</th><th>中等</th><th>优秀</th><th>及格</th><th>不及格</th></tr></thead><tbody><tr><td>21</td><td>12</td><td>8</td><td>7</td><td>2</td></tr></tbody></table></li></ul></li><li><p>第二步：取最小的两个作为左右结点(习惯性左节点小于右节点)并让其和称为其根结点</p><ul><li>即：<img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/5.png"></li></ul></li><li><p>第三步：将其和加入原来的从大到小排列的顺序中替代最小的两个，重新排序</p><ul><li><table><thead><tr><th>良好</th><th>中等</th><th>及格/不及格</th><th>优秀</th></tr></thead><tbody><tr><td>21</td><td>12</td><td>9</td><td>8</td></tr></tbody></table></li></ul></li><li><p>第四步：取最小的两个重复第二步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/6.png"></li></ul></li><li><p>第五步：把左右子树的和代替原来的优秀和及格/不及格，重新排序</p><ul><li><table><thead><tr><th>良好</th><th>优秀、及格/不及格</th><th>中等</th></tr></thead><tbody><tr><td>21</td><td>17</td><td>12</td></tr></tbody></table></li></ul></li><li><p>第六步，重复第四步操作</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/7.png"></li></ul></li><li><p>第七步：继续替换并重新排序</p><ul><li><table><thead><tr><th>良好</th><th>优秀、及格/不及格、中等</th></tr></thead><tbody><tr><td>21</td><td>29</td></tr></tbody></table></li></ul></li><li><p>第八步：重复第四步 完成哈夫曼树</p><ul><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/8.png"></li><li><img src="/2019/07/23/数据结构学习总结-（5-8）哈夫曼树概念及定义/9.png"></li></ul></li></ul><p>根据上图可知：要完全判断分类，需要判断<code>21*1 + 12*2 + 8*3 + 2*4 + 7*4 = 105</code>次比一开始109更有效率，这就哈夫曼树也称最优二叉树的创建。</p><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#哈夫曼树概念&quot;&gt;¶&lt;/a&gt;哈夫曼树概念&lt;/h4&gt;
&lt;p&gt;给定n个权作为n个结点，构造一颗二叉树，若树的带权路径长度(WPL)最短，就称其为哈夫曼树也称其为最优二叉树。&lt;/p&gt;
&lt;h5 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.6）RTTI运行时类型检测</title>
    <link href="https://shuhaohwang.github.io/2019/07/22/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89RTTI%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B/"/>
    <id>https://shuhaohwang.github.io/2019/07/22/C-进阶学习总结-（2-6）RTTI运行时类型检测/</id>
    <published>2019-07-22T14:18:08.000Z</published>
    <updated>2019-07-23T07:55:22.960Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中RTTI的机制、dynamic_cast运算符、typeid运算符（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.5)友元函数、友元类</title>
    <link href="https://shuhaohwang.github.io/2019/07/21/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-5-%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E3%80%81%E5%8F%8B%E5%85%83%E7%B1%BB/"/>
    <id>https://shuhaohwang.github.io/2019/07/21/C-进阶学习总结-2-5-友元函数、友元类/</id>
    <published>2019-07-21T06:12:49.000Z</published>
    <updated>2019-07-21T08:01:57.881Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中的友元函数、友元类、友元成员函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.7）二叉树遍历的衍生运用</title>
    <link href="https://shuhaohwang.github.io/2019/07/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-7%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E8%A1%8D%E7%94%9F%E8%BF%90%E7%94%A8/"/>
    <id>https://shuhaohwang.github.io/2019/07/21/数据结构学习总结-（5-7）二叉树遍历的衍生运用/</id>
    <published>2019-07-20T16:54:58.000Z</published>
    <updated>2019-07-20T17:14:47.593Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树遍历的衍生运用"><a class="header-anchor" href="#二叉树遍历的衍生运用">¶</a>二叉树遍历的衍生运用</h4><p>例图：<img src="/2019/07/21/数据结构学习总结-（5-7）二叉树遍历的衍生运用/1.png"></p><h5 id="递归求树的深度-高度"><a class="header-anchor" href="#递归求树的深度-高度">¶</a>递归求树的深度/高度</h5><ul><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTreeDepth</span><span class="params">(BiTreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l = GetTreeDepth(T-&gt;L_Node);</span><br><span class="line">    <span class="keyword">int</span> r = GetTreeDepth(T-&gt;R_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (l &gt; r) ? (l + <span class="number">1</span>) : (r + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/21/数据结构学习总结-（5-7）二叉树遍历的衍生运用/2.png"></p></li></ul></li><li><p>实现思路: 根据树的深度的概念—树中结点的最大层次或结点的最大深度，结点的深度又为结点的祖先个数+1，所以可以通过递归，从根结点开始往左右子树进行递归操作，当左右子树某一边的深度大于另一边的时候，返回最大的另一边的深度 + 1即可。</p></li></ul><hr><h5 id="递归求得树的总结点个数"><a class="header-anchor" href="#递归求得树的总结点个数">¶</a>递归求得树的总结点个数</h5><ul><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AllNodeCount</span><span class="params">(BiTreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l = AllNodeCount(T-&gt;L_Node);</span><br><span class="line">    <span class="keyword">int</span> r = AllNodeCount(T-&gt;R_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (l + r + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/07/21/数据结构学习总结-（5-7）二叉树遍历的衍生运用/3.png"></p></li></ul></li><li><p>实现思路：进行递归只要某个结点不为空就返回 1，通过递归进行累加，最终根结点会得到所有子树结点数量累加值。</p></li></ul><hr><p>–（本文未完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树遍历的衍生运用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树遍历的衍生运用&quot;&gt;¶&lt;/a&gt;二叉树遍历的衍生运用&lt;/h4&gt;
&lt;p&gt;例图：&lt;img src=&quot;/2019/07/21/数据结构学习总结-（5-7）二叉树遍历的衍生运用/1.
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
