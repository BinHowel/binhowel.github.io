<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-07-16T14:39:53.810Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构学习总结-（5.1）树的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-1%EF%BC%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/</id>
    <published>2019-07-16T12:34:49.000Z</published>
    <updated>2019-07-16T14:39:53.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="树"><a class="header-anchor" href="#树">¶</a>树</h4><h5 id="概念及定义"><a class="header-anchor" href="#概念及定义">¶</a>概念及定义</h5><ul><li><p>树是一个有层级结构的数据结构</p></li><li><p>定义：树是有n（n&gt;=0）个结点组成的有限集合</p><ul><li>如果n = 0 ，称为空树</li><li>如果n &gt; 0, 则：<ul><li>有一个特点的称之为为根(root)的结点，它只有直接后继，没有直接前驱。</li><li>除根以外的其他结点划分为m(m &gt;= 0)个互不相交的有限集合，T0、T1、…、Tm-1，每个集合又是一颗树，称为根的子树。和根有直接关系的结点分别是这些子树的根。</li></ul></li></ul></li><li><p>特点：每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树。</p></li><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png"></li></ul><h5 id="树结构与线性结构"><a class="header-anchor" href="#树结构与线性结构">¶</a>树结构与线性结构</h5><ul><li><p>线性结构：一对一</p></li><li><p>树结构：一对多</p></li><li><table><thead><tr><th>线性结构</th><th>树结构</th></tr></thead><tbody><tr><td>第一个元素(无前驱)</td><td>根结点(无前驱)</td></tr><tr><td>最后一个元素(无后继)</td><td>多个叶子结点(无后继)</td></tr><tr><td>其他数据元素(一个前驱、一个后继)</td><td>树中的其他结点(一个前驱、多个后继)</td></tr></tbody></table></li></ul><hr><h4 id="树结构的一些术语"><a class="header-anchor" href="#树结构的一些术语">¶</a>树结构的一些术语</h4><ul><li><strong>根</strong>：唯一没有双亲的结点，其他结点都有唯一的双亲<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/2.png"></li></ul></li><li><strong>结点的度</strong>：一个结点含有的子树的个数称为该结点的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png"></li></ul></li><li><strong>树的度</strong>：树结构中，最大的结点的度称为树的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png" title="树的度为3"></li></ul></li><li><strong>分支结点</strong>：度数不为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="分支结点为D、E、J、F、G、A"></li></ul></li><li><strong>叶结点</strong>：度数为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="叶结点为B、C、H、I、P、Q、K、L、M、N"></li></ul></li><li><strong>孩子结点/子结点</strong>：某个<u>结点</u>的子树的根<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="孩子结点为 J、F、G、E、D"></li></ul></li><li><strong>双亲结点/父节点</strong>：若一个结点含有子结点，则这个结点称为其子结点的父结点</li><li><strong>兄弟结点</strong>：同一个双亲结点的孩子结点之间互为兄弟结点</li><li><strong>结点的祖先</strong>：从根到该节点所经分支上的所有节点</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙</li><li><strong>森林</strong>：多个数的集合<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/4.png"></li></ul></li><li><strong>子树森林</strong>：一个结点的所有子树构成的森林</li><li><strong>结点的深度</strong>：结点的祖先个数+1<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/5.png"></li></ul></li><li><strong>结点的高度</strong>：从结点到其子树叶结点经过的最大边数+1，叶结点的高度为1</li><li><strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/7.png"></li></ul></li><li><strong>树的高度</strong>：高度最大的结点的高度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/6.png"></li></ul></li><li><strong>树的深度</strong>：树中结点的最大层次或结点的最大深度</li><li><strong>堂兄弟结点</strong>：双亲在同一层的节点互为堂兄弟</li></ul><ul><li><strong>有序树</strong>：每个结点的子树有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/8.png"></li></ul></li><li><strong>无序树</strong>：每个结点的子树没有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/9.png"></li></ul></li></ul><hr><h4 id="树的类型"><a class="header-anchor" href="#树的类型">¶</a>树的类型</h4><h5 id="树的抽象数据类型"><a class="header-anchor" href="#树的抽象数据类型">¶</a>树的抽象数据类型</h5><ul><li>ADT Tree</li><li>DATA<ul><li>父子关系</li></ul></li><li>Operator<ul><li>Tree()     //初始化</li><li>Tree(definition) //从输入definition中创建树</li><li>Tree(const Tree &amp; T) //复制树</li><li>Node root() // 返回根结点</li><li>int depth()     //获得树的高度</li><li>int size()     //获得树的结点个数</li><li>Node parent(Node p)   //获得结点p的双亲</li><li>Node[] children§  //返回结点P的所有孩子</li><li>Node[] silbings(parent , p) //返回结点p的所有兄弟</li><li>Node find()    //查找结点</li><li>…</li></ul></li><li>endADT</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#树&quot;&gt;¶&lt;/a&gt;树&lt;/h4&gt;
&lt;h5 id=&quot;概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概念及定义&quot;&gt;¶&lt;/a&gt;概念及定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.2）查询子串位置二-KMP算法[难点]</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-2%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E4%BA%8C-KMP%E7%AE%97%E6%B3%95-%E9%9A%BE%E7%82%B9/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-2）查询子串位置二-KMP算法-难点/</id>
    <published>2019-07-14T02:07:22.000Z</published>
    <updated>2019-07-14T02:46:24.592Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的缺陷"><a class="header-anchor" href="#简单-bf-算法的缺陷">¶</a>简单(BF)算法的缺陷</h4><ul><li><strong>简单算法的实现</strong>📝：就让子串与主串进行<u>一个个</u>判断。<ul><li>例如 <code>“acdcda”</code>中找<code>“cda”</code>那么有：①c先与主串中的<code>‘a’</code>比较不匹配 主串后移、②c与主串中的<code>‘c‘</code>匹配，子串后移让d与主串中的<code>‘b’</code>比较。不匹配主串后移、③c与主串中的<code>‘d’</code>比较，匹配子串后移、④a与主串中的<code>‘c’</code>比较，不匹配,主串后移、⑤c与主串中的<code>‘d’</code>不匹配，主串后移、⑥c与子串中的<code>‘c’</code>匹配,子串后移，d与主串的下一个<code>‘d’</code>匹配，子串再后移，a与主串中的下一个<code>‘a’</code>匹配。找到，返回主串中第二个<code>‘c’</code>的位置。</li></ul></li><li><strong>发现问题​</strong>❗️：从上面可以看出，在③开始子串与已经比较过的主串字符又重新比较一次，从而大大的浪费了效率。</li></ul><hr><h4 id="kmp算法"><a class="header-anchor" href="#kmp算法">¶</a>KMP算法</h4><ul><li>正如上面所说的，简单算法，因为在最差的情况下，会进行大量的无意义的比较匹配。而KMP算法的发明者们便想：能否更加比较不匹配所给出的信息，跳过无意义的比较呢？这就是KMP算法的核心。</li></ul><p>–（本文未完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的缺陷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的缺陷&quot;&gt;¶&lt;/a&gt;简单(BF)算法的缺陷&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单算法的实现&lt;/strong&gt;📝：就让子串与主串进行&lt;u&gt;一个个&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.1）查询子串位置算法一—简单算法</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-1%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E7%AE%97%E6%B3%95%E4%B8%80%E2%80%94%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/</id>
    <published>2019-07-14T01:16:48.000Z</published>
    <updated>2019-07-14T02:20:06.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的代码实现及思路"><a class="header-anchor" href="#简单-bf-算法的代码实现及思路">¶</a>简单(BF)算法的代码实现及思路</h4><ul><li><p>算法作用🔍：查找在给定的子串在主串中的位置。例如：子串<code>“llo”</code>在主串<code>“hello”</code>的位置为3。</p></li><li><p>实现思路💡：BF的算法的核心就是子串对主串逐一比较。所以只需用第一个循环来匹配子串的首字符与主串中的字符是否相等，如果相等那么在对子串后面的字符与此时主串的后面的字符进行比较。</p><ul><li>例如：要在<code>“AB CADB CADA BCA”</code>中查找子串<code>“ CADA”</code>则从主串A中第一个开始查找，因为<code>“A”</code>与<code>“ ”</code>不匹配所以子串与主串的下一个字符比较，但也不同所以后移，当到了第三个的时候开始匹配，所以主串的第四个字符与子串第二个比较…主串第五个与子串第三个比较…。但到了主串的第七个字符与子串第4个字符不一样，所以匹配失败，主串后移一位又与子串的第一位开始比较。</li></ul><hr><ul><li><img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/2.png"></li></ul></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; str.size; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str[k] == str.str[j]) &#123;</span><br><span class="line"> j++;</span><br><span class="line"> k++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line"> j = <span class="number">0</span>;</span><br><span class="line"> n++;</span><br><span class="line"> k = n;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">if</span> (j &lt;= str.size)<span class="keyword">return</span> n;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果🔑: <img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/1.png"></p></li></ul></li></ul><hr><h4 id="算法优化🔧："><a class="header-anchor" href="#算法优化🔧：">¶</a>算法优化🔧：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; size &amp;&amp; j &lt; ch.size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == ch.str[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i = i + <span class="number">1</span> - j;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &lt;= ch.size) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的代码实现及思路&quot;&gt;¶&lt;/a&gt;简单(BF)算法的代码实现及思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算法作用🔍：查找在给定的子串在主串中的位置。例
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.3）实现字符串结构、相关操作代码和实现思路</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-3%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E3%80%81%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/</id>
    <published>2019-07-12T03:03:39.000Z</published>
    <updated>2019-07-12T08:26:54.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串结构的实现"><a class="header-anchor" href="#字符串结构的实现">¶</a>字符串结构的实现</h4><ul><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* str;<span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* ch)&#123;</span><br><span class="line">        <span class="comment">/*计算ch长度*/</span></span><br><span class="line">        <span class="keyword">char</span>* temp = ch;</span><br><span class="line">        <span class="keyword">while</span>(*temp++ != <span class="string">'\0'</span>);</span><br><span class="line">        </span><br><span class="line">        str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - ch];<span class="comment">//创建字符串</span></span><br><span class="line">        size = temp - ch - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)str[i] = ch[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串是由字符数组来实现的,所以字符串的构造函数首先要根据<code>const char* ch</code>（传入的字符数组）求得其长度，然后创建足够大的空间，并对其逐一赋值即可完成<code>String</code>类型的创建。</p></li></ul></li></ul><hr><h4 id="相关简单操作的代码实现和实现思路"><a class="header-anchor" href="#相关简单操作的代码实现和实现思路">¶</a>相关简单操作的代码实现和实现思路</h4><ul><li><p>返回指定位置指定长度的子串 <code>subString()</code></p><ul><li><p>实现思路❗️：根据用户输入指定的长度来创建足够大的空间的<code>char* temp</code>用来储存子串，然后用循环从指定位置开始对<code>temp</code>进行赋值，直到长度达到用户给定的长度即可。<strong>并在后面补上一个结束符(’\0’)</strong>,因为这是一个主串中的子串，后尾赋值的时候没有结束符。最后丢入<code>String</code>类型的构造函数中，释放temp的空间，返回新的字符串。</p></li><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,k = pos; i &lt; len;i++,k++)&#123;<span class="comment">//对子串进行逐一赋值</span></span><br><span class="line">        temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    temp[len] = <span class="string">'\0'</span>;<span class="comment">//末尾补上结束符</span></span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;<span class="comment">//释放堆空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;<span class="comment">//返回新的String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/1.png" title="以hello world为例"></p></li></ul></li></ul></li><li><p>重载运算符+=使其实现字符串的拼接</p><ul><li><p>实现思路❗️:拼接顾名思义，是把两个字符串连起来，所以定义一个<code>new_size</code>用来拼接后的字符串长度，只需分别求左右运算数的<code>size</code>相加即可。然后更加这个<code>new_size</code>长度定义一个新的字符串。之后先对左运算数，进行逐一赋值，然后在对右运算数进行赋值。即可完成拼接。</p></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String&amp; <span class="keyword">operator</span>+= (<span class="keyword">const</span> String&amp; str)&#123;</span><br><span class="line">    <span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size+<span class="number">1</span>];<span class="comment">//最后需要一个结束符所以+1</span></span><br><span class="line">    <span class="keyword">if</span>(!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="keyword">this</span>-&gt;size)&#123;temp[i] = <span class="keyword">this</span>-&gt;str[i]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++,i++)&#123;</span><br><span class="line">        temp[i] = str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;str;</span><br><span class="line">    str = temp;</span><br><span class="line">    size = new_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: </p></li></ul></li></ul></li></ul><hr><h4 id="具体完成代码📜："><a class="header-anchor" href="#具体完成代码📜：">¶</a>具体完成代码📜：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>* str;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">String(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line"><span class="keyword">while</span> (*temp++ != <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - str];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;str)<span class="keyword">throw</span> <span class="string">"内存分配失败"</span>;</span><br><span class="line">size = temp - str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)<span class="keyword">this</span>-&gt;str[i] = str[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回指定位置指定长度的子串*/</span></span><br><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= size)<span class="keyword">throw</span> <span class="string">"指定位置超界"</span>;</span><br><span class="line"><span class="keyword">if</span> (pos + len &gt;= size)<span class="keyword">throw</span><span class="string">"待获取子串超界"</span>;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, k = pos; i &lt;= len ; i++, k++) &#123;</span><br><span class="line">temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp[len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line"><span class="keyword">delete</span>[]temp;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重载运算符+=*/</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> String&amp; str) &#123;</span><br><span class="line"><span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;size) &#123; temp[i] = <span class="keyword">this</span>-&gt;str[i]; i++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++, i++) &#123;</span><br><span class="line">temp[i] = str.str[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = temp;</span><br><span class="line">size = new_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(<span class="string">"hello world "</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"原字符串为:"</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">String str2 = str.subString(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"其位置2开始长度为3的字串为 : "</span> &lt;&lt;str2.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">String <span class="title">str3</span><span class="params">(<span class="string">"ShuHao"</span>)</span></span>;</span><br><span class="line">str += str3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符串结构的实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符串结构的实现&quot;&gt;¶&lt;/a&gt;字符串结构的实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具体代码💻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.2）类中的static函数/成员变量、类函数const后缀、mutable</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-2%EF%BC%89%E7%B1%BB%E4%B8%AD%E7%9A%84static%E5%87%BD%E6%95%B0-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0const%E5%90%8E%E7%BC%80%E3%80%81mutable/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/C-进阶学习总结-（2-2）类中的static函数-成员变量、类函数const后缀、mutable/</id>
    <published>2019-07-11T17:26:36.000Z</published>
    <updated>2019-07-12T02:42:38.162Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述在C++类中static函数/变量的特点、类函数const后缀的运用、mutable关键字（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.2）实现字符串strlen和strcpy</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-2%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2strlen%E5%92%8Cstrcpy/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/</id>
    <published>2019-07-10T14:00:43.000Z</published>
    <updated>2019-07-10T14:33:53.583Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现字符串中的简单操作一"><a class="header-anchor" href="#实现字符串中的简单操作一">¶</a>实现字符串中的简单操作一</h4><h5 id="strlen"><a class="header-anchor" href="#strlen">¶</a>strlen()</h5><ul><li><p>作用：返回字符串的长度</p></li><li><p>实现思路：因为在c/c<ins>中字符串是以char*指针来实现的，并且这些字符串中的末尾都有一个‘\0’结束符，所以在c/c</ins>中可以利用指针和地址来求得字符串的长度，首先定义一个临时指针然后用待求字符串长度的字符串对其进行赋值，再用循环对这个临时指针进行自加移动，当判断在某个地址中的数据为‘\0’结束符的时候，再让其与原来的字符串相减，即可得到字符串的长度。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line">    <span class="keyword">while</span>(*temp != <span class="string">'\0'</span>)&#123;temp++;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp - str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/1.png"></p></li></ul></li></ul><hr><h5 id="strcpy"><a class="header-anchor" href="#strcpy">¶</a>strcpy()</h5><ul><li><p>作用：进行字符串复制操作</p></li><li><p>实现思路：因为这个函数本身是实现复制操作，所以可以用原字符串对目标字符串进行逐一赋值即可实现。用一个临时指针存储目标字符串，然后用原字符串对这个临时指针进行逐一修改赋值，然后返回目标字符串即可。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = p;</span><br><span class="line">    <span class="keyword">while</span>((*temp++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/2.png"></p></li></ul></li></ul><hr><h4 id="错误记录："><a class="header-anchor" href="#错误记录：">¶</a>错误记录：</h4><p>在编写<code>strcpy()</code>时，忘记了<code>char*p</code>是一个指针，结果直接运用循环对其进行自加移动赋值修改，然后再返回该指针。</p><ul><li><p>错误代码:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p , <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/3.png"> <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/4.png"></p></li></ul></li></ul><p><strong>错误总结</strong>:上述错误代码中，因为p是一个指针，在循环的时候虽然是进行了逐一修改赋值，但指针也随之移动了，所以结果s不再是指向该字符串的首字符地址，而是指向了未知的末尾地址，从而造成指针p变成野指针。返回的结果也就想当然的是乱码了。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现字符串中的简单操作一&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实现字符串中的简单操作一&quot;&gt;¶&lt;/a&gt;实现字符串中的简单操作一&lt;/h4&gt;
&lt;h5 id=&quot;strlen&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="错误记录" scheme="https://shuhaohwang.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(4.1)字符串</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-4-1-字符串/</id>
    <published>2019-07-10T02:02:07.000Z</published>
    <updated>2019-07-10T14:31:36.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符-串类型定义及概念"><a class="header-anchor" href="#字符-串类型定义及概念">¶</a>(字符)串类型定义及概念</h4><h5 id="串的一些概念"><a class="header-anchor" href="#串的一些概念">¶</a>串的一些概念</h5><ul><li>以<code>(&quot;Hello world&quot;)</code>为例</li><li><strong>主串</strong>：即整个字符串被称为主串。<ul><li><code>str = “Hello World”；</code>str就是主串</li></ul></li><li><strong>子串</strong>：在主串中的一小段。(顺序相同)<ul><li><code>&quot;llo&quot;</code>是主串<code>“Hello World”</code>的字串、<code>“eH”</code>不是该主串的字串(顺序错了)</li></ul></li><li><strong>位置</strong>：某个字符、或字符段的第一个字符位于主串的位置下标。<ul><li>例如字串<code>“llo”</code>在主串<code>&quot;Hello World&quot;</code>的位置为3</li></ul></li><li><strong>串相等</strong>：当两个字符串之间，完全相同(长度相同，每个字符相同且位置相同)称为两个串相等<ul><li><code>”hello world“</code>与<code>“Hello World”</code>不相等(字符不相等)</li></ul></li><li><strong>空串</strong>：串长度为为0的字符串被称为空串。<ul><li>**注意：**空串与空格串不一样，空格串中的空格也算一个字符长度</li></ul></li></ul><hr><h5 id="串的抽象数据类型"><a class="header-anchor" href="#串的抽象数据类型">¶</a>串的抽象数据类型</h5><ul><li>ADT String<ul><li>Data：字符序列，以c/c++为例，<code>char*</code>类型数据，字符序列</li></ul></li><li>Operation：<ul><li><code>bool init(T,char*)</code> //初始化一个字符串</li><li><code>int find(S ,T)</code>    //查找字符串中是否存在字串</li><li><code>String strcat(T , S)</code>//拼接字符串</li><li><code>String subStr(S,pos,size)</code>//将s中的pos位置开始size长度的字串获取</li><li><code>bool inserStr(s,pos,T)</code>//将T插入到s的pos位置</li><li><code>bool deleteStr(S,pos,size)</code>//将S的pos位置开始的size长度的字串删除</li><li><code>bool copy(T,S)</code>//将S拷贝给T</li><li><code>int size()</code>//获得字符串长度</li><li><code>void clear()</code>//清空字符串</li><li>…</li></ul></li><li>endADT</li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符-串类型定义及概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符-串类型定义及概念&quot;&gt;¶&lt;/a&gt;(字符)串类型定义及概念&lt;/h4&gt;
&lt;h5 id=&quot;串的一些概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#串的一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.1）类与构造函数</title>
    <link href="https://shuhaohwang.github.io/2019/07/08/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-1%EF%BC%89%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/07/08/C-进阶学习总结-（2-1）类与构造函数/</id>
    <published>2019-07-08T03:01:08.000Z</published>
    <updated>2019-07-08T07:58:47.375Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++的类中构造函数及默认参数、隐式转换、explicit、参数列表的基本用法和概念（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.5）顺序存储结构队列</title>
    <link href="https://shuhaohwang.github.io/2019/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/06/数据结构学习总结-（3-5）顺序队列/</id>
    <published>2019-07-06T15:42:47.000Z</published>
    <updated>2019-07-06T16:54:23.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序队列算法即实现思路"><a class="header-anchor" href="#顺序队列算法即实现思路">¶</a>顺序队列算法即实现思路</h4><h5 id="顺序储存结构的队列定义-以char类型为例"><a class="header-anchor" href="#顺序储存结构的队列定义-以char类型为例">¶</a>顺序储存结构的队列定义(以char类型为例)</h5><ul><li><p>实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* datas;<span class="comment">//线性表</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//队列容量</span></span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//队首</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//队尾</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    SqQueue(<span class="keyword">int</span> c)&#123;</span><br><span class="line">        capacity = c;</span><br><span class="line">        datas = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/1.png"></li></ul><h5 id="顺序队列"><a class="header-anchor" href="#顺序队列">¶</a>顺序队列</h5><ul><li><p>入队操作</p><ul><li><p>思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == capacity)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：直接让头数值进行自加即可实现出队操作</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    front++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><font color="red"><strong>出现一个问题</strong></font>:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。</p></li></ul><h5 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a>循环队列</h5><ul><li><p>入队操作：</p><ul><li><p>思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：<code>rear = (rear+1)%capacity</code></p><ul><li>算法解释：(以容量为5的队列为例)<ul><li>第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2…第四个为4。</li><li>第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。</li></ul></li></ul></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((rear+<span class="number">1</span>)%capacity == front)<span class="comment">//满队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>满队的处理：这里是用<code>(rear+1)%capacity == front</code>来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3</p></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即<code>front = (front + 1)% capacity</code>。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(front == rear)<span class="comment">//空队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    front = (front + <span class="number">1</span>)% capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span> &#123;</span></span><br><span class="line">T* datas;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">SqQueue(<span class="keyword">int</span> c = <span class="number">10</span>) &#123;</span><br><span class="line">capacity = c;</span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line">rear = front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">datas[rear] = e;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rear == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tr</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">fb(datas[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqQueue&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'a'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'b'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据c入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'c'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据d入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'d'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据e入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'e'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果:<img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序队列算法即实现思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#顺序队列算法即实现思路&quot;&gt;¶&lt;/a&gt;顺序队列算法即实现思路&lt;/h4&gt;
&lt;h5 id=&quot;顺序储存结构的队列定义-以char类型为例&quot;&gt;&lt;a class=&quot;header-anch
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.7)数据类型转换</title>
    <link href="https://shuhaohwang.github.io/2019/07/04/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/07/04/C++进阶学习总结-(1.7)数据类型转换/</id>
    <published>2019-07-03T18:08:30.000Z</published>
    <updated>2019-07-08T04:59:43.141Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中 static_cast、dynamic_cast、const_cast、reinterpret_cast的概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.4）队列及链式队列的实现</title>
    <link href="https://shuhaohwang.github.io/2019/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/03/数据结构学习总结-（3-4）队列/</id>
    <published>2019-07-02T16:28:38.000Z</published>
    <updated>2019-07-03T17:36:21.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="队列的基本概念及定义"><a class="header-anchor" href="#队列的基本概念及定义">¶</a>队列的基本概念及定义</h4><ul><li><p>定义：</p><ul><li>队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。</li></ul></li><li><p>特征：先进先出(FIFO,First In First Out)</p></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/1.png"></li></ul><h5 id="队列的抽象数据类型"><a class="header-anchor" href="#队列的抽象数据类型">¶</a>队列的抽象数据类型</h5><ul><li>ADT Queue</li><li>Data<ul><li>线性关系(a1,a2,…,an)</li></ul></li><li>Operation<ul><li><code>bool push(e)</code>                                入队操作</li><li><code>bool pop()</code>                                    出队</li><li><code>T&amp;front()</code>                                      获得队首数据</li><li><code>bool empty()</code>                               判断队列是否为空</li><li><code>void clear()</code>                                清空队列</li><li>…</li></ul></li></ul><hr><h4 id="链式队列实现算法及思路"><a class="header-anchor" href="#链式队列实现算法及思路">¶</a>链式队列实现算法及思路</h4><ul><li><table><tr><td bgcolor="yellow">入队操作</td></tr></table>* 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。<ul><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/2.png"></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/3.png"></li><li><p>具体代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><table><tr><td bgcolor="yellow">出队操作</td></tr></table>  </li><li><p>思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。</p></li><li><p>具体代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == head)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    Node* p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现情况："><a class="header-anchor" href="#具体代码实现情况：">¶</a>具体代码实现情况：</h4><ul><li><s>入队</s>(完成)<ul><li>push(T e)</li></ul></li><li><s>出队</s>(完成)<ul><li>pop()</li></ul></li><li><s>是否为空</s>(完成)<ul><li>IsEmpty();</li></ul></li><li><s>获得队首元素</s>(完成)<ul><li>getFirst()</li></ul></li><li><s>清空队列</s>(完成)<ul><li>clear()</li></ul></li></ul><hr><h5 id="具体代码："><a class="header-anchor" href="#具体代码：">¶</a>具体代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node* head;</span><br><span class="line">Node* rear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Queue() &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear-&gt;next = p;</span><br><span class="line">rear = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == rear)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head == rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得首元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空队列*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">Node* q = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> rear;</span><br><span class="line"></span><br><span class="line">rear = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ta</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Queue&lt;<span class="keyword">char</span>&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'a'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'b'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'c'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"d数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'d'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.clear();</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"e数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'e'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'f'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"g数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'g'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"h数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'h'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/07/03/数据结构学习总结-（3-4）队列/4.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;队列的基本概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#队列的基本概念及定义&quot;&gt;¶&lt;/a&gt;队列的基本概念及定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列与栈相似，相比栈的先进后出，队列是先进先出为特
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-括号匹配</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/栈的应用-括号匹配/</id>
    <published>2019-07-02T06:12:48.000Z</published>
    <updated>2019-07-02T06:41:25.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="括号匹配"><a class="header-anchor" href="#括号匹配">¶</a>括号匹配</h4><ul><li>对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。</li><li><strong>实现思路</strong>：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。<ul><li>以<code>（{heheda}[123]())</code>为例。</li><li>第一步扫描上方字符串。发现第一个左括号<code>‘(’</code>使其入栈，第二个<code>'{'</code>入栈，发现<code>'}'</code>为右括号，与栈顶数据进行匹配发现，此时栈顶就是<code>'{'</code>与之匹配那么就出栈。（类似消消乐）</li></ul></li></ul><hr><h5 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LKStack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckStr</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">LkStack&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"字符串："</span> &lt;&lt; str &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">/*如果是左括号那么就入栈，等待匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span> || str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span> || str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">']'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'['</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">'&#125;'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'&#123;'</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty()&amp;&amp; str[i] == <span class="string">')'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'('</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号匹配成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CheckStr(<span class="string">"12312()()[]&#123;&#123;&#125;&#125; "</span>);</span><br><span class="line">CheckStr(<span class="string">"&#125;"</span>);</span><br><span class="line">CheckStr(<span class="string">"[()(),hello&#123;&#125;]"</span>);</span><br><span class="line">CheckStr(<span class="string">"test"</span>);</span><br><span class="line">CheckStr(<span class="string">"()(&#125;[]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实验结果</strong>：<img src="/2019/07/02/栈的应用-括号匹配/1.png"></li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;括号匹配&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#括号匹配&quot;&gt;¶&lt;/a&gt;括号匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。&lt;/l
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法性能分析</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/算法性能分析/</id>
    <published>2019-07-02T02:17:36.000Z</published>
    <updated>2019-07-02T03:20:18.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法性能分析"><a class="header-anchor" href="#算法性能分析">¶</a>算法性能分析</h4><h5 id="好的算法应当满足"><a class="header-anchor" href="#好的算法应当满足">¶</a>好的算法应当满足</h5><ul><li>正确性：算法应能满足具体问题的需求</li><li>可读性：算法应应易于阅读和理解</li><li>健壮性：输入数据非法时，算法也能适当作出反应或进行处理</li><li><strong>高效性</strong>：算法执行时间短，占用存储空间少</li></ul><hr><h5 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">¶</a>时间复杂度</h5><ul><li>程序：算法在计算机上的实现</li><li>程序的执行时间取决于如下因素：<ul><li>算法本身</li><li>问题规模</li><li>编程语言</li><li>硬件性能</li></ul></li><li>选择一个“基本操作”，分析基本操作执行的次数</li><li>用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。</li><li>算法的<font color="red">时间复杂度</font>为：和f(n)同阶的简化无穷大量T(n) = O(f(n))</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;算法性能分析&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法性能分析&quot;&gt;¶&lt;/a&gt;算法性能分析&lt;/h4&gt;
&lt;h5 id=&quot;好的算法应当满足&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#好的算法应当满足&quot;&gt;¶&lt;/a&gt;好的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表应用- 两数相加</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/链表应用-两数相加/</id>
    <published>2019-06-29T15:29:57.000Z</published>
    <updated>2019-06-30T07:28:25.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两数相加"><a class="header-anchor" href="#两数相加">¶</a>两数相加</h4><ul><li>问题：<ul><li>给定两个<strong>非空</strong>链表来表示两个非负整数。位数按照<strong>逆序</strong>方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。<ul><li>示例：<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出: 7 -&gt; 0 -&gt; 8</li><li>原因: 342 + 465 = 807</li></ul></li></ul></li></ul></li></ul><hr><h5 id="一些算法的思路："><a class="header-anchor" href="#一些算法的思路：">¶</a>一些算法的思路：</h5><ol><li><p>先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位…以此类推直到把所以值都后插入链表中。</p></li></ul></li></ol><ol start="2"><li><p>转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。</p></li></ul></li></ol><ol start="3"><li>最后一步把相加的结果再<code>ToLKlist()</code>用变为链表。</li></ol><hr><h5 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lklist</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Lklist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = <span class="number">0</span>;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除第一个数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得第一个元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为空链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*转换为数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数字转换为链表*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两数相加核心代码*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">TwoNumberAdd</span><span class="params">(Lklist num1, Lklist num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = number(num1);</span><br><span class="line"><span class="keyword">int</span> b = number(num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ToLKlist(a + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">Lklist s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入第二个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">s = TwoNumberAdd(ToLKlist(a), ToLKlist(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = s.Getlength();</span><br><span class="line"><span class="keyword">while</span> (!s.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.getfirst();</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.deletefirst();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/1.png"></li></ul><hr><h4 id="标准参考答案："><a class="header-anchor" href="#标准参考答案：">¶</a>标准参考答案：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumber</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ListNode* h = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode** t = &amp;h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l1!=<span class="literal">nullptr</span>||l2!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line"></span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">t = (&amp;node-&gt;next);</span><br><span class="line"></span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(carry % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(ListNode*&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">x = l-&gt;val;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="参考答案的核心算法思路："><a class="header-anchor" href="#参考答案的核心算法思路：">¶</a><strong>参考答案的核心算法思路：</strong></h5><ul><li><code>ListNode* addTwoNumber(ListNode* l1, ListNode* l2)</code></li><li>这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。<ul><li>第一步：<ul><li>取出两个链表中的第一个元素2和5。</li></ul></li><li>第二步：<ul><li>让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7</li></ul></li><li>第三步：<ul><li>把结果7模上10并<code>push_back</code>进结果链表。此时结果为7并且是结果链表的第一个数据</li><li>然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。</li></ul></li><li>第四步：<ul><li>循环上面的步骤</li><li>第二次循环中4和6的和是10，模上10取余后的结果为0，<code>push_back</code>进结果链表作为第二个数据</li><li>因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位</li></ul></li></ul></li><li>总体来看，首先因为题目描述为 <strong>位数按照逆序方式储存</strong>，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。</li></ul><hr><h5 id="个人实现代码优化后："><a class="header-anchor" href="#个人实现代码优化后：">¶</a>个人实现代码优化后：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LKlist</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LKlist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line">LNode* t = head;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"><span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"> <span class="keyword">delete</span> head-&gt;next;</span><br><span class="line"> head-&gt;next = p;</span><br><span class="line"> length--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(LKlist&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">LKlist::LNode* T;</span><br><span class="line"><span class="keyword">if</span> (l.head-&gt;next) &#123;</span><br><span class="line">x = l.head-&gt;next-&gt;data;</span><br><span class="line">T = l.head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> l.head-&gt;next;</span><br><span class="line">l.head-&gt;next = T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LKlist <span class="title">addTwoNumber</span><span class="params">(LKlist&amp; l1, LKlist&amp; l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">LKlist h;</span><br><span class="line"><span class="keyword">while</span> (!l1.IsEmpty() || !l2.IsEmpty()) &#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line">h.push_back(sum % <span class="number">10</span>);</span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">h.push_back(carry % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两数相加&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#两数相加&quot;&gt;¶&lt;/a&gt;两数相加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;问题：
&lt;ul&gt;
&lt;li&gt;给定两个&lt;strong&gt;非空&lt;/strong&gt;链表来表示两个非负整数。位数按照&lt;strong&gt;逆序&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="https://shuhaohwang.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法题" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-进制的转换</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E8%BF%9B%E5%88%B6%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/栈的应用-进制的转换/</id>
    <published>2019-06-29T12:32:55.000Z</published>
    <updated>2019-06-29T13:23:23.375Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数制转换"><a class="header-anchor" href="#数制转换">¶</a>数制转换</h4><ul><li><p>以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。</p></li><li><p>例如：<img src="/2019/06/29/栈的应用-进制的转换/1.png"></p></li><li><p>结合数据结构栈，可以发现转换最终结果跟栈的出栈一样，所以用栈来实现十进制的转换就较为方便</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span></span>&#123;<span class="comment">//n为十进制数，b为将要转的进制数</span></span><br><span class="line">    Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>；<span class="comment">//定义一个栈</span></span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(n%b);<span class="comment">//获取余数并入栈</span></span><br><span class="line">        n = n/b;<span class="comment">//更新n</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.isEmpty())&#123;<span class="comment">//出栈并输出。直至为空栈</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();<span class="comment">//获得栈顶元素</span></span><br><span class="line">        <span class="built_in">stack</span>.pop();<span class="comment">//每输出一个就出栈一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********链栈实现************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Stack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*判断是否为空栈*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据转换*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeNumber</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>.push(n % b);</span><br><span class="line">n = n / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.getTop();</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ChangeNumber(<span class="number">75</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/06/29/栈的应用-进制的转换/2.png"></p></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;数制转换&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数制转换&quot;&gt;¶&lt;/a&gt;数制转换&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以十进制转八进制为例，十进制转八进制的时候是把十进制模8取其余数直至除尽，最终结果为余数从下到上的数。&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C++ vector容器常用操作和内存释放</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/C-vector%E5%AE%B9%E5%99%A8%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/C-vector容器常用操作和内存释放/</id>
    <published>2019-06-28T16:38:09.000Z</published>
    <updated>2019-06-29T01:18:25.728Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-对字符串的处理"><a class="header-anchor" href="#一-对字符串的处理">¶</a>一、对字符串的处理</h4><ul><li>对字符串每一个字符进行遍历修改操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> ifo = <span class="string">"ShuHaoHwang"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = ifo.begin(); iter != ifo.end(); iter++) &#123;</span><br><span class="line">*iter = <span class="built_in">toupper</span>(*iter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ifo &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="二-查找配置项信息及内存释放"><a class="header-anchor" href="#二-查找配置项信息及内存释放">¶</a>二、查找配置项信息及内存释放</h4><ul><li>用迭代器及<code>vector</code>容器实现通过一个配置项名就能查询获得相应配置项的信息，最后利用<code>vector</code>进行内存释放。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">conf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> confname[<span class="number">40</span>];<span class="comment">//配置项名</span></span><br><span class="line"><span class="keyword">char</span> confid[<span class="number">100</span>];<span class="comment">//配置项信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getifo</span><span class="params">(<span class="built_in">vector</span>&lt;conf*&gt;&amp; a, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (iter = a.begin(); iter != a.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>((*iter)-&gt;confname, s) == <span class="number">0</span>) &#123;<span class="comment">//如果找到对应配置项名，就返回其配置项的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (*iter)-&gt;confid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">conf* server = <span class="keyword">new</span> conf;</span><br><span class="line">conf* server2 = <span class="keyword">new</span> conf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名1*/</span></span><br><span class="line">strcpy_s(server-&gt;confname,<span class="keyword">sizeof</span>(server-&gt;confname),<span class="string">"ServerName"</span>);</span><br><span class="line"><span class="comment">/*配置信息1*/</span></span><br><span class="line">strcpy_s(server-&gt;confid, <span class="keyword">sizeof</span>(server-&gt;confid), <span class="string">"1区"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*配置项名2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confname, <span class="keyword">sizeof</span>(server2-&gt;confname), <span class="string">"ServerID"</span>);</span><br><span class="line"><span class="comment">/*配置信息2*/</span></span><br><span class="line">strcpy_s(server2-&gt;confid, <span class="keyword">sizeof</span>(server2-&gt;confid), <span class="string">"10000"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt; cinfo;</span><br><span class="line">cinfo.push_back(server);<span class="comment">//把结构指针放入容器</span></span><br><span class="line">cinfo.push_back(server2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;conf*&gt;::iterator iter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找信息*/</span></span><br><span class="line"><span class="keyword">char</span>* temp;</span><br><span class="line">temp = getifo(cinfo, <span class="string">"ServerName"</span>);</span><br><span class="line"><span class="keyword">if</span> (temp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ServerName: "</span> &lt;&lt; temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*释放内存*/</span></span><br><span class="line"><span class="keyword">for</span> (iter = cinfo.begin(); iter != cinfo.end(); iter++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> (*iter);<span class="comment">//因为*iter是一个指针</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cinfo.clear();<span class="comment">//最后清空容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一-对字符串的处理&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一-对字符串的处理&quot;&gt;¶&lt;/a&gt;一、对字符串的处理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对字符串每一个字符进行遍历修改操作&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++迭代器的失控范例和解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/06/28/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/28/C-迭代器的失控范例和解决方案/</id>
    <published>2019-06-28T03:54:43.000Z</published>
    <updated>2019-06-28T10:41:17.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器失控范例"><a class="header-anchor" href="#迭代器失控范例">¶</a>迭代器失控范例</h4><h5 id="情形一："><a class="header-anchor" href="#情形一：">¶</a>情形一：</h5><ul><li><p>很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对<code>vector</code>容器进行<code>push_back()</code>操作、对<code>vector</code>容器进行插入操作、删除操作。都会使<code>end()</code>函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者下面这种情况</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.insert(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/1.png"></p></li></ul></li><li><p>在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//添加元素后直接跳出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再进行一次迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/2.png"></p></li></ul></li><li><p>如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        iter = arrays.insert(iter,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/3.png"></p></li><li><p>**实现思路:**因为<code>arrays.insert()</code>的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以<code>end()</code>的值没有发生变化)。多次更新迭代器的起始<code>begin()</code>的值，从而使迭代器类型的指向不会失控。</p></li></ul></li><li><p>同样的如果使用<code>push_back()</code>:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        </span><br><span class="line">        arrays.push_back(<span class="number">100</span>);<span class="comment">//不断更新iter的值起始</span></span><br><span class="line">        iter = arrays.begin()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/4.png"></p></li></ul></li><li><p>**总体：**即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。<strong><em>弊端</em></strong>：麻烦，代码较繁杂。</p></li></ul><hr><h5 id="情形二："><a class="header-anchor" href="#情形二：">¶</a>情形二：</h5><ul><li><p>如果在某个时候要对容器进行清空操作，多数下使用容器自带的<code>clear()</code>函数即可。但在某些特殊情况下，要对<code>vector</code>容器的某些元素进行删除，就得使用容器自带的`</p><p>`函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用结果<img src="/2019/06/28/C-迭代器的失控范例和解决方案/5.png"></p></li></ul></li><li><p>如果真的要进行这样的操作可以这样做：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">    iter = arrays.erase(iter);<span class="comment">//直接让erase函数来更新迭代器指向的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for版</span></span><br><span class="line"><span class="keyword">for</span>(iter; iter != arrays.end(); )&#123;</span><br><span class="line">    iter = arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果： <img src="/2019/06/28/C-迭代器的失控范例和解决方案/6.png"></p></li><li><p>**实现思路：**因为<code>erase()</code>函数是清除该位置的数据，并返回下一个元素的位置，所以可以通过它来对迭代器进行更新，从而不会时迭代器指向失控。</p></li></ul></li><li><p><strong>此情形更好的实现版本</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!arrays.empty())&#123;<span class="comment">//如果不为空就继续</span></span><br><span class="line">    <span class="keyword">auto</span> iter = arrays.begin();<span class="comment">//每开始一轮循环就更新迭代器的指向。</span></span><br><span class="line">    arrays.erase(iter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;迭代器失控范例&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#迭代器失控范例&quot;&gt;¶&lt;/a&gt;迭代器失控范例&lt;/h4&gt;
&lt;h5 id=&quot;情形一：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#情形一：&quot;&gt;¶&lt;/a&gt;情形一：&lt;/h
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.6）迭代器</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/C-进阶学习总结-（1-6）迭代器/</id>
    <published>2019-06-26T05:28:56.000Z</published>
    <updated>2019-06-28T02:25:40.545Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述迭代器的基本概念、实质、及用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.3）链栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/数据结构学习总结-（3-3）链栈/</id>
    <published>2019-06-26T04:27:15.000Z</published>
    <updated>2019-06-26T05:03:16.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="栈的链式实现算法及思路"><a class="header-anchor" href="#栈的链式实现算法及思路">¶</a>栈的链式实现算法及思路</h4><ul><li><p>栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。</p></li><li><table><tr><td bgcolor="yellow">入栈</td></tr></table><ul><li><p>思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    LNode*p = <span class="keyword">new</span> LNode();</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">出栈</td></tr></table><ul><li><p>思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈)</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!head-&gt;next)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">析构函数</td></tr></table><ul><li><p>思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~LkStack()&#123;</span><br><span class="line">    LNode*p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">LkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LkStack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~LkStack() &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode();</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获得栈顶数据*/</span></span><br><span class="line"><span class="function">T&amp; <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">LkStack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据1"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据2"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据3"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据4"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据5"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.GetTop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;栈的链式实现算法及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#栈的链式实现算法及思路&quot;&gt;¶&lt;/a&gt;栈的链式实现算法及思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++个人学习路线</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-个人学习路线/</id>
    <published>2019-06-25T15:41:26.000Z</published>
    <updated>2019-06-25T16:40:52.386Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      （加密文章）
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
</feed>
