<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-07-19T14:58:39.989Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++进阶学习总结-（2.4）虚函数、纯虚函数、override/final、虚析构函数</title>
    <link href="https://shuhaohwang.github.io/2019/07/19/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-4%EF%BC%89%E8%99%9A%E5%87%BD%E6%95%B0%E3%80%81%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E3%80%81override-final%E3%80%81%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/07/19/C-进阶学习总结-（2-4）虚函数、纯虚函数、override-final、虚析构函数/</id>
    <published>2019-07-19T13:40:50.000Z</published>
    <updated>2019-07-19T14:58:39.989Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述了C++11新引入的override/final关键字、虚函数、纯虚函数、虚析构函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.5）二叉树的链式实现与二叉树的先、中、后序遍历</title>
    <link href="https://shuhaohwang.github.io/2019/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-5%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%85%88%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/</id>
    <published>2019-07-19T08:12:35.000Z</published>
    <updated>2019-07-19T09:34:52.668Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的链式实现"><a class="header-anchor" href="#二叉树的链式实现">¶</a>二叉树的链式实现</h4><h5 id="创建链表二叉树"><a class="header-anchor" href="#创建链表二叉树">¶</a>创建链表二叉树</h5><ul><li><p>二叉树的链表实现有两种情况</p><ul><li>二叉链表：一个结点带有指向左右子树的指针和一个数据<ul><li><img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/1.png"></li></ul></li><li>三叉链表：除了带有分别指向左右子树的两个指针外还有一个指向双亲结点的指针<ul><li><img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/2.png"></li></ul></li></ul></li><li><p>现以二叉链表为例创建一个二叉树</p><ul><li><img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/3.png"></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node = <span class="literal">nullptr</span>;<span class="comment">//指向左子树的指针</span></span><br><span class="line">    BiTreeNode* R_Node = <span class="literal">nullptr</span>;<span class="comment">//指向右子树的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTreeNode* T = <span class="keyword">new</span> BiTreeNode(); T-&gt;data = <span class="string">'A'</span>;</span><br><span class="line">T-&gt;L_Node = <span class="keyword">new</span> BiTreeNode(); T-&gt;L_Node-&gt;data = <span class="string">'B'</span>;</span><br><span class="line">T-&gt;R_Node = <span class="keyword">new</span> BiTreeNode(); T-&gt;R_Node-&gt;data = <span class="string">'C'</span>;</span><br><span class="line">BiTreeNode* p = T-&gt;L_Node;</span><br><span class="line">p-&gt;L_Node = <span class="keyword">new</span> BiTreeNode(); p-&gt;L_Node-&gt;data = <span class="string">'D'</span>;</span><br><span class="line">p-&gt;R_Node = <span class="keyword">new</span> BiTreeNode(); p-&gt;R_Node-&gt;data = <span class="string">'E'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="二叉树的遍历"><a class="header-anchor" href="#二叉树的遍历">¶</a>二叉树的遍历</h4><ul><li><u>遍历</u>对于二叉树来说是非常重要的。遍历是数结构插入、删除、修改、查找和排序运算的前提，<u>是二叉树一切运算的基础和核心</u>。</li><li>二叉树的遍历分为三种<ul><li>前序遍历(根-左子树-右子树)</li><li>中序遍历(左子树-根-右子树)</li><li>后序遍历(左子树-右子树-根)</li></ul></li></ul><h5 id="前序遍历"><a class="header-anchor" href="#前序遍历">¶</a>前序遍历</h5><ul><li><p>前序遍历就是先从根开始然后<strong>递归</strong>左子树再<strong>递归</strong>右子树。</p></li><li><p>例如：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/3.png"></p></li><li><p>遍历的结果为： A、B、D、E、C</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre_Traversal</span><span class="params">(BiTreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span>;<span class="comment">//如果T为空那么就结束</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;<span class="comment">//先从根开始</span></span><br><span class="line">    Pre_Traversal(T-&gt;L_Node);<span class="comment">//递归遍历左子树</span></span><br><span class="line">    Pre_Traversal(T-&gt;R_Node);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/4.png"></p></li></ul></li><li><p>具体递归实现解释：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/5.png"></p></li></ul><hr><h5 id="中序遍历"><a class="header-anchor" href="#中序遍历">¶</a>中序遍历</h5><ul><li><p>中序遍历就是先<strong>递归</strong>左子树开始然后再到根再<strong>递归</strong>右子树。</p></li><li><p>例如：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/3.png"></p></li><li><p>遍历的结果为： D、B、E、A、C</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span>;<span class="comment">//如果T为空那么就结束</span></span><br><span class="line">    </span><br><span class="line">    Mid_Traversal(T-&gt;L_Node);<span class="comment">//递归遍历左子树</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">    Mid_Traversal(T-&gt;R_Node);<span class="comment">//递归遍历右子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/6.png"></p></li></ul></li></ul><hr><h5 id="后序遍历"><a class="header-anchor" href="#后序遍历">¶</a>后序遍历</h5><ul><li><p>例如：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/3.png"></p></li><li><p>遍历的结果为： D、E、B、C、A</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Post_Traversal</span><span class="params">(BiTreeNode* T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!T)<span class="keyword">return</span>;<span class="comment">//如果T为空那么就结束</span></span><br><span class="line">    </span><br><span class="line">    Post_Traversal(T-&gt;L_Node);<span class="comment">//递归遍历左子树</span></span><br><span class="line">    Post_Traversal(T-&gt;R_Node);<span class="comment">//递归遍历右子树</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; T-&gt;data;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/07/19/数据结构学习总结-（5-5）二叉树的链式实现与二叉树的先、中、后序遍历/7.png"></p></li></ul></li><li><p>具体文字解释：</p></li><li><p>①先从<code>Post_Traversal(T(A))</code>开始进入函数执行<code>Post_Traversal(T(A)-&gt;L_Node(B))</code></p></li><li><p>②在<code>Post_Traversal(T(B))</code>中又先执行执行<code>Post_Traversal(T(B)-&gt;L_Node(D))</code></p></li><li><p>③在执行<code>Post_Traversal(T(D))</code>的时候因为执行D结点中的<code>Post_Traversal(T(D)-&gt;L_Node)</code>为空结束递归，执行下一句<code>Post_Traversal(T(D)-&gt;R_Node)</code>也为空结束递归，执行<code>cout &lt;&lt; ‘D’;</code>到这里<code>Post_Traversal(T(D))</code>函数执行完毕，继续执行B结点中的<code>Post_Traversal(T(B)-&gt;R_Node(E))</code></p></li><li><p>④在执行<code>Post_Traversal(T(E))</code>的时候发现E的左右子树都为空，那么就只执行了<code>cout &lt;&lt; ‘E’;</code>返回B结点执行下一句<code>cout &lt;&lt; ‘B’;</code>至此<code>Post_Traversal(T(A)-&gt;L_Node(B))</code>已经执行完毕返回至A结点</p></li><li><p>⑤执行A结点中的<code>Post_Traversal(T(A)-&gt;R_Node(C))</code>也就是执行<code>Post_Traversal(T(C))</code>发现C结点的左右子树也为空，那么只执行了C结点中的<code>cout &lt;&lt; ‘C’;</code>返回A结点的函数，到这里A结点的<code>Post_Traversal(T(A)-&gt;R_Node(C))</code>执行完毕，再执行下一句<code>cout &lt;&lt; ‘A’;</code></p></li><li><p>⑥当<code>cout &lt;&lt; ‘A’;</code>执行完毕后<code>Post_Traversal(T(A))</code>函数结束。屏幕上输出DEBCA</p></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的链式实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树的链式实现&quot;&gt;¶&lt;/a&gt;二叉树的链式实现&lt;/h4&gt;
&lt;h5 id=&quot;创建链表二叉树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#创建链表二叉树&quot;&gt;¶&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.4）二叉树的顺序储存结构</title>
    <link href="https://shuhaohwang.github.io/2019/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-4%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>https://shuhaohwang.github.io/2019/07/19/数据结构学习总结-（5-4）二叉树的顺序储存结构/</id>
    <published>2019-07-18T19:16:38.000Z</published>
    <updated>2019-07-18T19:41:38.182Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的抽象数据结构"><a class="header-anchor" href="#二叉树的抽象数据结构">¶</a>二叉树的抽象数据结构</h4><ul><li>ADT BinaryTree</li><li>Data<ul><li>D是具有相同特征的数据元素的集合</li></ul></li><li>Relative<ul><li>若D = ∅，则R = ∅；</li><li>若D ≠ ∅，则R = {H}；</li><li>root唯一</li><li>D<sub>j</sub>∩D<sub>k</sub> = ∅</li><li>…</li></ul></li><li>Operation<ul><li>createBiTree(&amp;T , defination)//构建二叉树</li><li>…</li></ul></li><li>endADT</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的抽象数据结构&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树的抽象数据结构&quot;&gt;¶&lt;/a&gt;二叉树的抽象数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ADT BinaryTree&lt;/li&gt;
&lt;li&gt;Data
&lt;ul&gt;
&lt;li&gt;D是具有相同特征
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.3）拷贝构造函数、继承与访问等级、函数遮蔽</title>
    <link href="https://shuhaohwang.github.io/2019/07/18/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-3%EF%BC%89%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%AE%BF%E9%97%AE%E7%AD%89%E7%BA%A7%E3%80%81%E5%87%BD%E6%95%B0%E9%81%AE%E8%94%BD/"/>
    <id>https://shuhaohwang.github.io/2019/07/18/C-进阶学习总结-（2-3）拷贝构造函数、继承与访问等级、函数遮蔽/</id>
    <published>2019-07-18T11:38:55.000Z</published>
    <updated>2019-07-18T13:59:15.756Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述了C++中的特殊的拷贝构造函数、继承与访问权限等级、函数遮蔽问题（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.3）二叉树的性质及推导</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-3%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E6%8E%A8%E5%AF%BC/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/</id>
    <published>2019-07-17T03:03:38.000Z</published>
    <updated>2019-07-17T03:50:47.752Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树的性质"><a class="header-anchor" href="#二叉树的性质">¶</a>二叉树的性质</h4><h5 id="性质1：-层级-📝"><a class="header-anchor" href="#性质1：-层级-📝">¶</a>性质1：(层级)📝</h5><ul><li>在二叉树的第<code>i</code>层上<u>至多</u>有2<sup>i-1</sup>个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/1.png"></li><li>即：下层的结点最多是上层结点的2倍</li></ul><hr><h5 id="性质2：-深度-📝"><a class="header-anchor" href="#性质2：-深度-📝">¶</a>性质2：(深度)📝</h5><ul><li>深度为k的二叉树<u>至多</u>有2<sup>k</sup>-1个结点。</li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/2.png"></li></ul><hr><h5 id="性质3📝："><a class="header-anchor" href="#性质3📝：">¶</a>性质3📝：</h5><ul><li><p>对于任何一颗二叉树，若2度的结点数有n<sub>2</sub>个，则叶子结点n<sub>0</sub>的个数比为n<sub>2</sub>+1</p></li><li><table><thead><tr><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>n<sub>0</sub></td><td>度数为0的结点数(叶结点数)</td></tr><tr><td>n</td><td>总结点数</td></tr><tr><td>n<sub>1</sub></td><td>度数为1的结点数</td></tr><tr><td>n<sub>2</sub></td><td>度数为2的结点数</td></tr><tr><td>B</td><td>分枝数</td></tr></tbody></table></li></ul><ul><li><p><strong>n<sub>0</sub> = n<sub>2</sub>+1</strong></p></li><li><p><strong>其他公式</strong>🔎：</p><ul><li>分枝数(B)：<ul><li>B = n<sub>1</sub>+2n<sub>2</sub></li><li>B = n - 1(n为总结点数)B</li></ul></li></ul></li><li><img src="/2019/07/17/数据结构学习总结-（5-3）二叉树的性质及推导/3.png"></li><li><p><strong>推导过程（n<sub>0</sub> = n<sub>2</sub>+1）📜</strong>：</p><ul><li>因为 B = n -1① 且 n = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub>②</li><li>所以B = n<sub>0</sub> + n<sub>1</sub> + n<sub>2</sub> - 1 ③所以 n<sub>0</sub> = B -  n<sub>1</sub> -  n<sub>2</sub> + 1④</li><li>又因为B = n<sub>1</sub>+2n<sub>2</sub>  代入④ n<sub>0</sub> = n<sub>1</sub> + 2n<sub>2</sub> -  n<sub>1</sub> -  n<sub>2</sub> + 1</li><li>得n<sub>0</sub> = n<sub>2</sub>+1</li></ul></li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树的性质&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树的性质&quot;&gt;¶&lt;/a&gt;二叉树的性质&lt;/h4&gt;
&lt;h5 id=&quot;性质1：-层级-📝&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#性质1：-层级-📝&quot;&gt;¶&lt;/
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.2）二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/07/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-2%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/07/17/数据结构学习总结-（5-2）二叉树/</id>
    <published>2019-07-17T02:36:07.000Z</published>
    <updated>2019-07-17T03:01:21.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树-binary-tree"><a class="header-anchor" href="#二叉树-binary-tree">¶</a>二叉树(Binary Tree)</h4><ul><li><p>二叉树是一个连通的无环图，并且每一个顶点的度不大于3。有根二叉树还要满足根结点的度不大于2。</p></li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/1.png"><ul><li>只有一个称为根的结点</li><li>除根外，其余结点分为不相交的子集T1和T2，分别称为T的左子树和右子树，且T1和T2本身又都是二叉树</li><li><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/2.png"></li></ul></li><li><p><strong>二叉树与树</strong>：</p></li><li><table><thead><tr><th>二叉树</th><th>树</th></tr></thead><tbody><tr><td>至多只有两个子树</td><td>没有限制子树的个数上限</td></tr><tr><td>子树有左右之分，其次序不能颠倒(有序树)</td><td>子树可有序也可以无序</td></tr><tr><td>具有递归性质</td><td>具有递归性质</td></tr></tbody></table></li></ul><hr><h4 id="二叉树的五中基本形态"><a class="header-anchor" href="#二叉树的五中基本形态">¶</a>二叉树的五中基本形态</h4><ul><li>空树</li><li>只有一个根结点的二叉树</li><li>只有左子树</li><li>只有右子树</li><li>完全二叉树</li></ul><img src="/2019/07/17/数据结构学习总结-（5-2）二叉树/3.png"><hr><h4 id="二叉树的优点"><a class="header-anchor" href="#二叉树的优点">¶</a>二叉树的优点</h4><ul><li>普通树相比二叉树代码很难实现</li><li>二叉树结构简单，规律性强</li><li>所有树都可以转为唯一对应的二叉树</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;二叉树-binary-tree&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#二叉树-binary-tree&quot;&gt;¶&lt;/a&gt;二叉树(Binary Tree)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;二叉树是一个连通的无环图，并且每一个顶点的度不大于3
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.1）树的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/07/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-1%EF%BC%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/</id>
    <published>2019-07-16T12:34:49.000Z</published>
    <updated>2019-07-16T14:39:53.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="树"><a class="header-anchor" href="#树">¶</a>树</h4><h5 id="概念及定义"><a class="header-anchor" href="#概念及定义">¶</a>概念及定义</h5><ul><li><p>树是一个有层级结构的数据结构</p></li><li><p>定义：树是有n（n&gt;=0）个结点组成的有限集合</p><ul><li>如果n = 0 ，称为空树</li><li>如果n &gt; 0, 则：<ul><li>有一个特点的称之为为根(root)的结点，它只有直接后继，没有直接前驱。</li><li>除根以外的其他结点划分为m(m &gt;= 0)个互不相交的有限集合，T0、T1、…、Tm-1，每个集合又是一颗树，称为根的子树。和根有直接关系的结点分别是这些子树的根。</li></ul></li></ul></li><li><p>特点：每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树。</p></li><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png"></li></ul><h5 id="树结构与线性结构"><a class="header-anchor" href="#树结构与线性结构">¶</a>树结构与线性结构</h5><ul><li><p>线性结构：一对一</p></li><li><p>树结构：一对多</p></li><li><table><thead><tr><th>线性结构</th><th>树结构</th></tr></thead><tbody><tr><td>第一个元素(无前驱)</td><td>根结点(无前驱)</td></tr><tr><td>最后一个元素(无后继)</td><td>多个叶子结点(无后继)</td></tr><tr><td>其他数据元素(一个前驱、一个后继)</td><td>树中的其他结点(一个前驱、多个后继)</td></tr></tbody></table></li></ul><hr><h4 id="树结构的一些术语"><a class="header-anchor" href="#树结构的一些术语">¶</a>树结构的一些术语</h4><ul><li><strong>根</strong>：唯一没有双亲的结点，其他结点都有唯一的双亲<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/2.png"></li></ul></li><li><strong>结点的度</strong>：一个结点含有的子树的个数称为该结点的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png"></li></ul></li><li><strong>树的度</strong>：树结构中，最大的结点的度称为树的度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/3.png" title="树的度为3"></li></ul></li><li><strong>分支结点</strong>：度数不为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="分支结点为D、E、J、F、G、A"></li></ul></li><li><strong>叶结点</strong>：度数为0的结点<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="叶结点为B、C、H、I、P、Q、K、L、M、N"></li></ul></li><li><strong>孩子结点/子结点</strong>：某个<u>结点</u>的子树的根<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/1.png" title="孩子结点为 J、F、G、E、D"></li></ul></li><li><strong>双亲结点/父节点</strong>：若一个结点含有子结点，则这个结点称为其子结点的父结点</li><li><strong>兄弟结点</strong>：同一个双亲结点的孩子结点之间互为兄弟结点</li><li><strong>结点的祖先</strong>：从根到该节点所经分支上的所有节点</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙</li><li><strong>森林</strong>：多个数的集合<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/4.png"></li></ul></li><li><strong>子树森林</strong>：一个结点的所有子树构成的森林</li><li><strong>结点的深度</strong>：结点的祖先个数+1<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/5.png"></li></ul></li><li><strong>结点的高度</strong>：从结点到其子树叶结点经过的最大边数+1，叶结点的高度为1</li><li><strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/7.png"></li></ul></li><li><strong>树的高度</strong>：高度最大的结点的高度<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/6.png"></li></ul></li><li><strong>树的深度</strong>：树中结点的最大层次或结点的最大深度</li><li><strong>堂兄弟结点</strong>：双亲在同一层的节点互为堂兄弟</li></ul><ul><li><strong>有序树</strong>：每个结点的子树有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/8.png"></li></ul></li><li><strong>无序树</strong>：每个结点的子树没有次序之分<ul><li><img src="/2019/07/16/数据结构学习总结-（5-1）树的定义及概念/9.png"></li></ul></li></ul><hr><h4 id="树的类型"><a class="header-anchor" href="#树的类型">¶</a>树的类型</h4><h5 id="树的抽象数据类型"><a class="header-anchor" href="#树的抽象数据类型">¶</a>树的抽象数据类型</h5><ul><li>ADT Tree</li><li>DATA<ul><li>父子关系</li></ul></li><li>Operator<ul><li>Tree()     //初始化</li><li>Tree(definition) //从输入definition中创建树</li><li>Tree(const Tree &amp; T) //复制树</li><li>Node root() // 返回根结点</li><li>int depth()     //获得树的高度</li><li>int size()     //获得树的结点个数</li><li>Node parent(Node p)   //获得结点p的双亲</li><li>Node[] children§  //返回结点P的所有孩子</li><li>Node[] silbings(parent , p) //返回结点p的所有兄弟</li><li>Node find()    //查找结点</li><li>…</li></ul></li><li>endADT</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;树&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#树&quot;&gt;¶&lt;/a&gt;树&lt;/h4&gt;
&lt;h5 id=&quot;概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概念及定义&quot;&gt;¶&lt;/a&gt;概念及定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.2）查询子串位置二-KMP算法[难点]</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-2%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E4%BA%8C-KMP%E7%AE%97%E6%B3%95-%E9%9A%BE%E7%82%B9/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-2）查询子串位置二-KMP算法-难点/</id>
    <published>2019-07-14T02:07:22.000Z</published>
    <updated>2019-07-14T02:46:24.592Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的缺陷"><a class="header-anchor" href="#简单-bf-算法的缺陷">¶</a>简单(BF)算法的缺陷</h4><ul><li><strong>简单算法的实现</strong>📝：就让子串与主串进行<u>一个个</u>判断。<ul><li>例如 <code>“acdcda”</code>中找<code>“cda”</code>那么有：①c先与主串中的<code>‘a’</code>比较不匹配 主串后移、②c与主串中的<code>‘c‘</code>匹配，子串后移让d与主串中的<code>‘b’</code>比较。不匹配主串后移、③c与主串中的<code>‘d’</code>比较，匹配子串后移、④a与主串中的<code>‘c’</code>比较，不匹配,主串后移、⑤c与主串中的<code>‘d’</code>不匹配，主串后移、⑥c与子串中的<code>‘c’</code>匹配,子串后移，d与主串的下一个<code>‘d’</code>匹配，子串再后移，a与主串中的下一个<code>‘a’</code>匹配。找到，返回主串中第二个<code>‘c’</code>的位置。</li></ul></li><li><strong>发现问题​</strong>❗️：从上面可以看出，在③开始子串与已经比较过的主串字符又重新比较一次，从而大大的浪费了效率。</li></ul><hr><h4 id="kmp算法"><a class="header-anchor" href="#kmp算法">¶</a>KMP算法</h4><ul><li>正如上面所说的，简单算法，因为在最差的情况下，会进行大量的无意义的比较匹配。而KMP算法的发明者们便想：能否更加比较不匹配所给出的信息，跳过无意义的比较呢？这就是KMP算法的核心。</li></ul><p>–（本文未完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的缺陷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的缺陷&quot;&gt;¶&lt;/a&gt;简单(BF)算法的缺陷&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单算法的实现&lt;/strong&gt;📝：就让子串与主串进行&lt;u&gt;一个个&lt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.4.1）查询子串位置算法一—简单算法</title>
    <link href="https://shuhaohwang.github.io/2019/07/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-4-1%EF%BC%89%E6%9F%A5%E8%AF%A2%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE%E7%AE%97%E6%B3%95%E4%B8%80%E2%80%94%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/</id>
    <published>2019-07-14T01:16:48.000Z</published>
    <updated>2019-07-14T02:20:06.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单-bf-算法的代码实现及思路"><a class="header-anchor" href="#简单-bf-算法的代码实现及思路">¶</a>简单(BF)算法的代码实现及思路</h4><ul><li><p>算法作用🔍：查找在给定的子串在主串中的位置。例如：子串<code>“llo”</code>在主串<code>“hello”</code>的位置为3。</p></li><li><p>实现思路💡：BF的算法的核心就是子串对主串逐一比较。所以只需用第一个循环来匹配子串的首字符与主串中的字符是否相等，如果相等那么在对子串后面的字符与此时主串的后面的字符进行比较。</p><ul><li>例如：要在<code>“AB CADB CADA BCA”</code>中查找子串<code>“ CADA”</code>则从主串A中第一个开始查找，因为<code>“A”</code>与<code>“ ”</code>不匹配所以子串与主串的下一个字符比较，但也不同所以后移，当到了第三个的时候开始匹配，所以主串的第四个字符与子串第二个比较…主串第五个与子串第三个比较…。但到了主串的第七个字符与子串第4个字符不一样，所以匹配失败，主串后移一位又与子串的第一位开始比较。</li></ul><hr><ul><li><img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/2.png"></li></ul></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size &amp;&amp; j &lt; str.size; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str[k] == str.str[j]) &#123;</span><br><span class="line"> j++;</span><br><span class="line"> k++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line"> j = <span class="number">0</span>;</span><br><span class="line"> n++;</span><br><span class="line"> k = n;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">       </span><br><span class="line"> <span class="keyword">if</span> (j &lt;= str.size)<span class="keyword">return</span> n;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果🔑: <img src="/2019/07/14/数据结构学习总结-（4-4-1）查询子串位置算法一—简单算法/1.png"></p></li></ul></li></ul><hr><h4 id="算法优化🔧："><a class="header-anchor" href="#算法优化🔧：">¶</a>算法优化🔧：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(String ch)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; size &amp;&amp; j &lt; ch.size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == ch.str[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i = i + <span class="number">1</span> - j;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &lt;= ch.size) <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单-bf-算法的代码实现及思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简单-bf-算法的代码实现及思路&quot;&gt;¶&lt;/a&gt;简单(BF)算法的代码实现及思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算法作用🔍：查找在给定的子串在主串中的位置。例
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.3）实现字符串结构、相关操作代码和实现思路</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-3%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%93%E6%9E%84%E3%80%81%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E4%BB%A3%E7%A0%81%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/</id>
    <published>2019-07-12T03:03:39.000Z</published>
    <updated>2019-07-12T08:26:54.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符串结构的实现"><a class="header-anchor" href="#字符串结构的实现">¶</a>字符串结构的实现</h4><ul><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* str;<span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//字符串长度</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    String(<span class="keyword">const</span> <span class="keyword">char</span>* ch)&#123;</span><br><span class="line">        <span class="comment">/*计算ch长度*/</span></span><br><span class="line">        <span class="keyword">char</span>* temp = ch;</span><br><span class="line">        <span class="keyword">while</span>(*temp++ != <span class="string">'\0'</span>);</span><br><span class="line">        </span><br><span class="line">        str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - ch];<span class="comment">//创建字符串</span></span><br><span class="line">        size = temp - ch - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)str[i] = ch[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串是由字符数组来实现的,所以字符串的构造函数首先要根据<code>const char* ch</code>（传入的字符数组）求得其长度，然后创建足够大的空间，并对其逐一赋值即可完成<code>String</code>类型的创建。</p></li></ul></li></ul><hr><h4 id="相关简单操作的代码实现和实现思路"><a class="header-anchor" href="#相关简单操作的代码实现和实现思路">¶</a>相关简单操作的代码实现和实现思路</h4><ul><li><p>返回指定位置指定长度的子串 <code>subString()</code></p><ul><li><p>实现思路❗️：根据用户输入指定的长度来创建足够大的空间的<code>char* temp</code>用来储存子串，然后用循环从指定位置开始对<code>temp</code>进行赋值，直到长度达到用户给定的长度即可。<strong>并在后面补上一个结束符(’\0’)</strong>,因为这是一个主串中的子串，后尾赋值的时候没有结束符。最后丢入<code>String</code>类型的构造函数中，释放temp的空间，返回新的字符串。</p></li><li><p>具体代码💻：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,k = pos; i &lt; len;i++,k++)&#123;<span class="comment">//对子串进行逐一赋值</span></span><br><span class="line">        temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    temp[len] = <span class="string">'\0'</span>;<span class="comment">//末尾补上结束符</span></span><br><span class="line">    <span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>[] temp;<span class="comment">//释放堆空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;<span class="comment">//返回新的String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/12/数据结构学习总结-（4-3）实现字符串结构、相关操作代码和实现思路/1.png" title="以hello world为例"></p></li></ul></li></ul></li><li><p>重载运算符+=使其实现字符串的拼接</p><ul><li><p>实现思路❗️:拼接顾名思义，是把两个字符串连起来，所以定义一个<code>new_size</code>用来拼接后的字符串长度，只需分别求左右运算数的<code>size</code>相加即可。然后更加这个<code>new_size</code>长度定义一个新的字符串。之后先对左运算数，进行逐一赋值，然后在对右运算数进行赋值。即可完成拼接。</p></li><li><p>具体实现💻:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String&amp; <span class="keyword">operator</span>+= (<span class="keyword">const</span> String&amp; str)&#123;</span><br><span class="line">    <span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line">    <span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size+<span class="number">1</span>];<span class="comment">//最后需要一个结束符所以+1</span></span><br><span class="line">    <span class="keyword">if</span>(!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="keyword">this</span>-&gt;size)&#123;temp[i] = <span class="keyword">this</span>-&gt;str[i]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++,i++)&#123;</span><br><span class="line">        temp[i] = str[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;str;</span><br><span class="line">    str = temp;</span><br><span class="line">    size = new_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: </p></li></ul></li></ul></li></ul><hr><h4 id="具体完成代码📜："><a class="header-anchor" href="#具体完成代码📜：">¶</a>具体完成代码📜：</h4><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>* str;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">String(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line"><span class="keyword">while</span> (*temp++ != <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[temp - str];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;str)<span class="keyword">throw</span> <span class="string">"内存分配失败"</span>;</span><br><span class="line">size = temp - str - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size; i++)<span class="keyword">this</span>-&gt;str[i] = str[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*返回指定位置指定长度的子串*/</span></span><br><span class="line"><span class="function">String <span class="title">subString</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= size)<span class="keyword">throw</span> <span class="string">"指定位置超界"</span>;</span><br><span class="line"><span class="keyword">if</span> (pos + len &gt;= size)<span class="keyword">throw</span><span class="string">"待获取子串超界"</span>;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, k = pos; i &lt;= len ; i++, k++) &#123;</span><br><span class="line">temp[i] = <span class="keyword">this</span>-&gt;str[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp[len] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(temp)</span></span>;</span><br><span class="line"><span class="keyword">delete</span>[]temp;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*重载运算符+=*/</span></span><br><span class="line">String&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> String&amp; str) &#123;</span><br><span class="line"><span class="keyword">int</span> new_size = <span class="keyword">this</span>-&gt;size + str.size;</span><br><span class="line"><span class="keyword">char</span>* temp = <span class="keyword">new</span> <span class="keyword">char</span>[new_size + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!temp)<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;size) &#123; temp[i] = <span class="keyword">this</span>-&gt;str[i]; i++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= str.size; k++, i++) &#123;</span><br><span class="line">temp[i] = str.str[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line"><span class="keyword">this</span>-&gt;str = temp;</span><br><span class="line">size = new_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">str</span><span class="params">(<span class="string">"hello world "</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"原字符串为:"</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">String str2 = str.subString(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"其位置2开始长度为3的字串为 : "</span> &lt;&lt;str2.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function">String <span class="title">str3</span><span class="params">(<span class="string">"ShuHao"</span>)</span></span>;</span><br><span class="line">str += str3;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符串结构的实现&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符串结构的实现&quot;&gt;¶&lt;/a&gt;字符串结构的实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;具体代码💻：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.2）类中的static函数/成员变量、类函数const后缀、mutable</title>
    <link href="https://shuhaohwang.github.io/2019/07/12/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-2%EF%BC%89%E7%B1%BB%E4%B8%AD%E7%9A%84static%E5%87%BD%E6%95%B0-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E3%80%81%E7%B1%BB%E5%87%BD%E6%95%B0const%E5%90%8E%E7%BC%80%E3%80%81mutable/"/>
    <id>https://shuhaohwang.github.io/2019/07/12/C-进阶学习总结-（2-2）类中的static函数-成员变量、类函数const后缀、mutable/</id>
    <published>2019-07-11T17:26:36.000Z</published>
    <updated>2019-07-12T02:42:38.162Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述在C++类中static函数/变量的特点、类函数const后缀的运用、mutable关键字（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（4.2）实现字符串strlen和strcpy</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%884-2%EF%BC%89%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2strlen%E5%92%8Cstrcpy/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/</id>
    <published>2019-07-10T14:00:43.000Z</published>
    <updated>2019-07-10T14:33:53.583Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实现字符串中的简单操作一"><a class="header-anchor" href="#实现字符串中的简单操作一">¶</a>实现字符串中的简单操作一</h4><h5 id="strlen"><a class="header-anchor" href="#strlen">¶</a>strlen()</h5><ul><li><p>作用：返回字符串的长度</p></li><li><p>实现思路：因为在c/c<ins>中字符串是以char*指针来实现的，并且这些字符串中的末尾都有一个‘\0’结束符，所以在c/c</ins>中可以利用指针和地址来求得字符串的长度，首先定义一个临时指针然后用待求字符串长度的字符串对其进行赋值，再用循环对这个临时指针进行自加移动，当判断在某个地址中的数据为‘\0’结束符的时候，再让其与原来的字符串相减，即可得到字符串的长度。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* temp = str;</span><br><span class="line">    <span class="keyword">while</span>(*temp != <span class="string">'\0'</span>)&#123;temp++;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp - str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/1.png"></p></li></ul></li></ul><hr><h5 id="strcpy"><a class="header-anchor" href="#strcpy">¶</a>strcpy()</h5><ul><li><p>作用：进行字符串复制操作</p></li><li><p>实现思路：因为这个函数本身是实现复制操作，所以可以用原字符串对目标字符串进行逐一赋值即可实现。用一个临时指针存储目标字符串，然后用原字符串对这个临时指针进行逐一修改赋值，然后返回目标字符串即可。</p></li><li><p>具体实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p,<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* temp = p;</span><br><span class="line">    <span class="keyword">while</span>((*temp++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/2.png"></p></li></ul></li></ul><hr><h4 id="错误记录："><a class="header-anchor" href="#错误记录：">¶</a>错误记录：</h4><p>在编写<code>strcpy()</code>时，忘记了<code>char*p</code>是一个指针，结果直接运用循环对其进行自加移动赋值修改，然后再返回该指针。</p><ul><li><p>错误代码:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strcpy</span><span class="params">(<span class="keyword">char</span>* p , <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>((*p++ = *s++) != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果: <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/3.png"> <img src="/2019/07/10/数据结构学习总结-（4-2）实现字符串strlen和strcpy/4.png"></p></li></ul></li></ul><p><strong>错误总结</strong>:上述错误代码中，因为p是一个指针，在循环的时候虽然是进行了逐一修改赋值，但指针也随之移动了，所以结果s不再是指向该字符串的首字符地址，而是指向了未知的末尾地址，从而造成指针p变成野指针。返回的结果也就想当然的是乱码了。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;实现字符串中的简单操作一&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#实现字符串中的简单操作一&quot;&gt;¶&lt;/a&gt;实现字符串中的简单操作一&lt;/h4&gt;
&lt;h5 id=&quot;strlen&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="错误记录" scheme="https://shuhaohwang.github.io/tags/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(4.1)字符串</title>
    <link href="https://shuhaohwang.github.io/2019/07/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-4-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://shuhaohwang.github.io/2019/07/10/数据结构学习总结-4-1-字符串/</id>
    <published>2019-07-10T02:02:07.000Z</published>
    <updated>2019-07-10T14:31:36.166Z</updated>
    
    <content type="html"><![CDATA[<h4 id="字符-串类型定义及概念"><a class="header-anchor" href="#字符-串类型定义及概念">¶</a>(字符)串类型定义及概念</h4><h5 id="串的一些概念"><a class="header-anchor" href="#串的一些概念">¶</a>串的一些概念</h5><ul><li>以<code>(&quot;Hello world&quot;)</code>为例</li><li><strong>主串</strong>：即整个字符串被称为主串。<ul><li><code>str = “Hello World”；</code>str就是主串</li></ul></li><li><strong>子串</strong>：在主串中的一小段。(顺序相同)<ul><li><code>&quot;llo&quot;</code>是主串<code>“Hello World”</code>的字串、<code>“eH”</code>不是该主串的字串(顺序错了)</li></ul></li><li><strong>位置</strong>：某个字符、或字符段的第一个字符位于主串的位置下标。<ul><li>例如字串<code>“llo”</code>在主串<code>&quot;Hello World&quot;</code>的位置为3</li></ul></li><li><strong>串相等</strong>：当两个字符串之间，完全相同(长度相同，每个字符相同且位置相同)称为两个串相等<ul><li><code>”hello world“</code>与<code>“Hello World”</code>不相等(字符不相等)</li></ul></li><li><strong>空串</strong>：串长度为为0的字符串被称为空串。<ul><li>**注意：**空串与空格串不一样，空格串中的空格也算一个字符长度</li></ul></li></ul><hr><h5 id="串的抽象数据类型"><a class="header-anchor" href="#串的抽象数据类型">¶</a>串的抽象数据类型</h5><ul><li>ADT String<ul><li>Data：字符序列，以c/c++为例，<code>char*</code>类型数据，字符序列</li></ul></li><li>Operation：<ul><li><code>bool init(T,char*)</code> //初始化一个字符串</li><li><code>int find(S ,T)</code>    //查找字符串中是否存在字串</li><li><code>String strcat(T , S)</code>//拼接字符串</li><li><code>String subStr(S,pos,size)</code>//将s中的pos位置开始size长度的字串获取</li><li><code>bool inserStr(s,pos,T)</code>//将T插入到s的pos位置</li><li><code>bool deleteStr(S,pos,size)</code>//将S的pos位置开始的size长度的字串删除</li><li><code>bool copy(T,S)</code>//将S拷贝给T</li><li><code>int size()</code>//获得字符串长度</li><li><code>void clear()</code>//清空字符串</li><li>…</li></ul></li><li>endADT</li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;字符-串类型定义及概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字符-串类型定义及概念&quot;&gt;¶&lt;/a&gt;(字符)串类型定义及概念&lt;/h4&gt;
&lt;h5 id=&quot;串的一些概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#串的一
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.1）类与构造函数</title>
    <link href="https://shuhaohwang.github.io/2019/07/08/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-1%EF%BC%89%E7%B1%BB%E4%B8%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/07/08/C-进阶学习总结-（2-1）类与构造函数/</id>
    <published>2019-07-08T03:01:08.000Z</published>
    <updated>2019-07-08T07:58:47.375Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++的类中构造函数及默认参数、隐式转换、explicit、参数列表的基本用法和概念（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.5）顺序存储结构队列</title>
    <link href="https://shuhaohwang.github.io/2019/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-5%EF%BC%89%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/06/数据结构学习总结-（3-5）顺序队列/</id>
    <published>2019-07-06T15:42:47.000Z</published>
    <updated>2019-07-06T16:54:23.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序队列算法即实现思路"><a class="header-anchor" href="#顺序队列算法即实现思路">¶</a>顺序队列算法即实现思路</h4><h5 id="顺序储存结构的队列定义-以char类型为例"><a class="header-anchor" href="#顺序储存结构的队列定义-以char类型为例">¶</a>顺序储存结构的队列定义(以char类型为例)</h5><ul><li><p>实现思路：因为顺序队列是要基于数组来实现队列的操作，所以可以定义两个数值头数值(front)和尾数值(rear)，在创建队列的时候根据capacity(队列容量)的大小创建线性表，然后让头数值和尾数值都为0代表数组下标为0的第一个数据的位置，入队时对rear进行操作移动即可实现，出队只需移动front即可完成出队。</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* datas;<span class="comment">//线性表</span></span><br><span class="line">    <span class="keyword">int</span> capacity;<span class="comment">//队列容量</span></span><br><span class="line">    <span class="keyword">int</span> front;<span class="comment">//队首</span></span><br><span class="line">    <span class="keyword">int</span> rear;<span class="comment">//队尾</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    SqQueue(<span class="keyword">int</span> c)&#123;</span><br><span class="line">        capacity = c;</span><br><span class="line">        datas = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/1.png"></li></ul><h5 id="顺序队列"><a class="header-anchor" href="#顺序队列">¶</a>顺序队列</h5><ul><li><p>入队操作</p><ul><li><p>思路：因为顺序队列是要通过数组来实现队列的数据结构。所以可以先定义两个值分别代表尾数值和头数值，创建队列时，这头尾两个数值均为0，代表为数组第一个元素。入队时只需让下标为尾数值的数组元素进行添值即可。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == capacity)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：直接让头数值进行自加即可实现出队操作</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    front++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><font color="red"><strong>出现一个问题</strong></font>:前面只是实现了基本的队列应该有的操作，如果对其进行出队操作，一定量的数据出队后会照成队列无法使用的情况。为此可以对顺序队列进行改造优化使它成为环状的顺序队列从而可以循环使用。</p></li></ul><h5 id="循环队列"><a class="header-anchor" href="#循环队列">¶</a>循环队列</h5><ul><li><p>入队操作：</p><ul><li><p>思路：相比顺序队列，循环队列在入队操作时只是对尾数值进行改进使其只能在队列容量之内循环变化。即：<code>rear = (rear+1)%capacity</code></p><ul><li>算法解释：(以容量为5的队列为例)<ul><li>第一步：push入队一个元素rear让其从初值0加1再取模5【(0+1)%5 = 1%5 = 1】以此类推，第二个数据入队，rear为2…第四个为4。</li><li>第二步：当到达尾数值即下标为4的时候再进行上方的运算。即【(4+1)%5 = 5%5=0】重置尾数值为0。</li></ul></li></ul></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((rear+<span class="number">1</span>)%capacity == front)<span class="comment">//满队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    datas[rear] = e;</span><br><span class="line">    rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>满队的处理：这里是用<code>(rear+1)%capacity == front</code>来作为满队判断的，即队首和队尾都只隔了1。例如：当队首为3，队尾为2为满队。因为(2+1)%5 = 3%5 = 3</p></li></ul></li></ul></li><li><p>出队操作</p><ul><li><p>思路：与顺序队列相同，只是队头也要控制在capacity队列容量之内，即<code>front = (front + 1)% capacity</code>。</p></li><li><p>具体实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(front == rear)<span class="comment">//空队判断</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    front = (front + <span class="number">1</span>)% capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">SqQueue</span> &#123;</span></span><br><span class="line">T* datas;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*构造函数*/</span></span><br><span class="line">SqQueue(<span class="keyword">int</span> c = <span class="number">10</span>) &#123;</span><br><span class="line">capacity = c;</span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line">rear = front = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">datas[rear] = e;</span><br><span class="line">rear = (rear+<span class="number">1</span>)%capacity;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rear == front)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tr</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; rear; i++) &#123;</span><br><span class="line">fb(datas[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqQueue&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'a'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'b'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据c入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'c'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据d入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'d'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据e入队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.push(<span class="string">'e'</span>); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"头数据出队了 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop(); s.tr(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果:<img src="/2019/07/06/数据结构学习总结-（3-5）顺序队列/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序队列算法即实现思路&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#顺序队列算法即实现思路&quot;&gt;¶&lt;/a&gt;顺序队列算法即实现思路&lt;/h4&gt;
&lt;h5 id=&quot;顺序储存结构的队列定义-以char类型为例&quot;&gt;&lt;a class=&quot;header-anch
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.7)数据类型转换</title>
    <link href="https://shuhaohwang.github.io/2019/07/04/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.7)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://shuhaohwang.github.io/2019/07/04/C++进阶学习总结-(1.7)数据类型转换/</id>
    <published>2019-07-03T18:08:30.000Z</published>
    <updated>2019-07-08T04:59:43.141Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++中 static_cast、dynamic_cast、const_cast、reinterpret_cast的概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.4）队列及链式队列的实现</title>
    <link href="https://shuhaohwang.github.io/2019/07/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-4%EF%BC%89%E9%98%9F%E5%88%97/"/>
    <id>https://shuhaohwang.github.io/2019/07/03/数据结构学习总结-（3-4）队列/</id>
    <published>2019-07-02T16:28:38.000Z</published>
    <updated>2019-07-03T17:36:21.987Z</updated>
    
    <content type="html"><![CDATA[<h4 id="队列的基本概念及定义"><a class="header-anchor" href="#队列的基本概念及定义">¶</a>队列的基本概念及定义</h4><ul><li><p>定义：</p><ul><li>队列与栈相似，相比栈的先进后出，队列是先进先出为特征的，队列的增添必须是在队列后边进行添加，删除则在前面，正与它的名字一样，队列这种数据结构跟平常时人们买票排队一样，先去排的会先买到票，后面来的只能先排着队。</li></ul></li><li><p>特征：先进先出(FIFO,First In First Out)</p></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/1.png"></li></ul><h5 id="队列的抽象数据类型"><a class="header-anchor" href="#队列的抽象数据类型">¶</a>队列的抽象数据类型</h5><ul><li>ADT Queue</li><li>Data<ul><li>线性关系(a1,a2,…,an)</li></ul></li><li>Operation<ul><li><code>bool push(e)</code>                                入队操作</li><li><code>bool pop()</code>                                    出队</li><li><code>T&amp;front()</code>                                      获得队首数据</li><li><code>bool empty()</code>                               判断队列是否为空</li><li><code>void clear()</code>                                清空队列</li><li>…</li></ul></li></ul><hr><h4 id="链式队列实现算法及思路"><a class="header-anchor" href="#链式队列实现算法及思路">¶</a>链式队列实现算法及思路</h4><ul><li><table><tr><td bgcolor="yellow">入队操作</td></tr></table>* 思路：因为队列是先进先出的，所以要使一个指针能始终能指向新进来的元素，方便后续出队操作。所以可以先让尾指针的next指针指向这个新入队的元素，然后再让尾指针指向这个元素。<ul><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/2.png"></li><li><img src="/2019/07/03/数据结构学习总结-（3-4）队列/3.png"></li><li><p>具体代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    rear-&gt;next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><table><tr><td bgcolor="yellow">出队操作</td></tr></table>  </li><li><p>思路：先进先出，此时可以直接删除第一个数据，即头结点next指向的数据。但要记住这操作不能在队列为空的情况下使用。</p></li><li><p>具体代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rear == head)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    Node* p = head-&gt;next;</span><br><span class="line">    head-&gt;next = p-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现情况："><a class="header-anchor" href="#具体代码实现情况：">¶</a>具体代码实现情况：</h4><ul><li><s>入队</s>(完成)<ul><li>push(T e)</li></ul></li><li><s>出队</s>(完成)<ul><li>pop()</li></ul></li><li><s>是否为空</s>(完成)<ul><li>IsEmpty();</li></ul></li><li><s>获得队首元素</s>(完成)<ul><li>getFirst()</li></ul></li><li><s>清空队列</s>(完成)<ul><li>clear()</li></ul></li></ul><hr><h5 id="具体代码："><a class="header-anchor" href="#具体代码：">¶</a>具体代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node* head;</span><br><span class="line">Node* rear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Queue() &#123;</span><br><span class="line">head = <span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*入队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">rear-&gt;next = p;</span><br><span class="line">rear = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == rear)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head == rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得首元素*/</span></span><br><span class="line"><span class="function">T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空队列*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node* p = head-&gt;next;</span><br><span class="line">Node* q = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> rear;</span><br><span class="line"></span><br><span class="line">rear = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ta</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">Node* p = head;</span><br><span class="line"><span class="keyword">while</span> (p != rear)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Queue&lt;<span class="keyword">char</span>&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'a'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'b'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'c'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"d数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'d'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.clear();</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"e数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'e'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"f数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'f'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"g数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'g'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"h数据进队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.push(<span class="string">'h'</span>); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"首数据出队了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">q.pop(); q.Ta(print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/07/03/数据结构学习总结-（3-4）队列/4.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;队列的基本概念及定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#队列的基本概念及定义&quot;&gt;¶&lt;/a&gt;队列的基本概念及定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队列与栈相似，相比栈的先进后出，队列是先进先出为特
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>栈的应用-括号匹配</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/栈的应用-括号匹配/</id>
    <published>2019-07-02T06:12:48.000Z</published>
    <updated>2019-07-02T06:41:25.614Z</updated>
    
    <content type="html"><![CDATA[<h4 id="括号匹配"><a class="header-anchor" href="#括号匹配">¶</a>括号匹配</h4><ul><li>对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。</li><li><strong>实现思路</strong>：可以对一个字符串进行扫描和检查，如果是左括号那么就入栈，如果遇到一个与之匹配的右括号，那么就使其出栈。最后判断栈是否为空从而判断括号是否匹配即可。<ul><li>以<code>（{heheda}[123]())</code>为例。</li><li>第一步扫描上方字符串。发现第一个左括号<code>‘(’</code>使其入栈，第二个<code>'{'</code>入栈，发现<code>'}'</code>为右括号，与栈顶数据进行匹配发现，此时栈顶就是<code>'{'</code>与之匹配那么就出栈。（类似消消乐）</li></ul></li></ul><hr><h5 id="具体代码实现："><a class="header-anchor" href="#具体代码实现：">¶</a>具体代码实现：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LKStack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckStr</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">LkStack&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"字符串："</span> &lt;&lt; str &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="comment">/*如果是左括号那么就入栈，等待匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span> || str[i] == <span class="string">'&#123;'</span> || str[i] == <span class="string">'('</span>) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*如果是右括号那么就对栈顶数据进行判断，如果匹配那么就使此时的栈顶数据出栈*/</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span> || str[i] == <span class="string">'&#125;'</span> || str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*排除只出现右括号没出现左括号的情况，和多出有右括号的情况*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">']'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'['</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty() &amp;&amp; str[i] == <span class="string">'&#125;'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'&#123;'</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">stack</span>.isEmpty()&amp;&amp; str[i] == <span class="string">')'</span> &amp;&amp; <span class="built_in">stack</span>.GetTop() == <span class="string">'('</span>)</span><br><span class="line"> <span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*如果空栈那么就说明左括号全部匹配完毕，括号匹配成功，反之括号不匹配*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号匹配成功！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"括号不匹配！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CheckStr(<span class="string">"12312()()[]&#123;&#123;&#125;&#125; "</span>);</span><br><span class="line">CheckStr(<span class="string">"&#125;"</span>);</span><br><span class="line">CheckStr(<span class="string">"[()(),hello&#123;&#125;]"</span>);</span><br><span class="line">CheckStr(<span class="string">"test"</span>);</span><br><span class="line">CheckStr(<span class="string">"()(&#125;[]"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>实验结果</strong>：<img src="/2019/07/02/栈的应用-括号匹配/1.png"></li></ul><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;括号匹配&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#括号匹配&quot;&gt;¶&lt;/a&gt;括号匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对一段字符串进行检查和判断括号是否匹配。例如：{（）[]{}} 匹配。即出现一个左括号就一定要一个相对应的右括号与其匹配。&lt;/l
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>算法性能分析</title>
    <link href="https://shuhaohwang.github.io/2019/07/02/%E7%AE%97%E6%B3%95%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://shuhaohwang.github.io/2019/07/02/算法性能分析/</id>
    <published>2019-07-02T02:17:36.000Z</published>
    <updated>2019-07-02T03:20:18.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法性能分析"><a class="header-anchor" href="#算法性能分析">¶</a>算法性能分析</h4><h5 id="好的算法应当满足"><a class="header-anchor" href="#好的算法应当满足">¶</a>好的算法应当满足</h5><ul><li>正确性：算法应能满足具体问题的需求</li><li>可读性：算法应应易于阅读和理解</li><li>健壮性：输入数据非法时，算法也能适当作出反应或进行处理</li><li><strong>高效性</strong>：算法执行时间短，占用存储空间少</li></ul><hr><h5 id="时间复杂度"><a class="header-anchor" href="#时间复杂度">¶</a>时间复杂度</h5><ul><li>程序：算法在计算机上的实现</li><li>程序的执行时间取决于如下因素：<ul><li>算法本身</li><li>问题规模</li><li>编程语言</li><li>硬件性能</li></ul></li><li>选择一个“基本操作”，分析基本操作执行的次数</li><li>用该基本操作的重复次数表示算法的执行时间，一般为问题规模n的函数f(n)，简称“频度”。</li><li>算法的<font color="red">时间复杂度</font>为：和f(n)同阶的简化无穷大量T(n) = O(f(n))</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;算法性能分析&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#算法性能分析&quot;&gt;¶&lt;/a&gt;算法性能分析&lt;/h4&gt;
&lt;h5 id=&quot;好的算法应当满足&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#好的算法应当满足&quot;&gt;¶&lt;/a&gt;好的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表应用- 两数相加</title>
    <link href="https://shuhaohwang.github.io/2019/06/29/%E9%93%BE%E8%A1%A8%E5%BA%94%E7%94%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/06/29/链表应用-两数相加/</id>
    <published>2019-06-29T15:29:57.000Z</published>
    <updated>2019-06-30T07:28:25.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两数相加"><a class="header-anchor" href="#两数相加">¶</a>两数相加</h4><ul><li>问题：<ul><li>给定两个<strong>非空</strong>链表来表示两个非负整数。位数按照<strong>逆序</strong>方式储存，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。你可以假设除了数字0之外，这两个数字都不会以零开头。<ul><li>示例：<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出: 7 -&gt; 0 -&gt; 8</li><li>原因: 342 + 465 = 807</li></ul></li></ul></li></ul></li></ul><hr><h5 id="一些算法的思路："><a class="header-anchor" href="#一些算法的思路：">¶</a>一些算法的思路：</h5><ol><li><p>先把一个数字转换为一个链表 243 转换为 2 -&gt; 4 -&gt; 3 所以先用一个 将数字转换为链表的函数</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**对进来的数字，直接模10取个位，然后后插入一个链表中，然后取十位…以此类推直到把所以值都后插入链表中。</p></li></ul></li></ol><ol start="2"><li><p>转换数字后就会得到两个链表。然后进行相加。相加时得实现把链表转换成数字，例如 2 -&gt; 4 -&gt; 3转换成数字342。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**实现思路：**因为获得的数字链表是2 -&gt; 4 -&gt; 3，而实际对应的数字是342，所以可以先把第一个个位数字获得，加上十位，百位。</p></li></ul></li></ol><ol start="3"><li>最后一步把相加的结果再<code>ToLKlist()</code>用变为链表。</li></ol><hr><h5 id="具体实现"><a class="header-anchor" href="#具体实现">¶</a>具体实现:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lklist</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Lklist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode;</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = <span class="number">0</span>;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除第一个数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得第一个元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否为空链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*转换为数字*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">number</span><span class="params">(Lklist num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = num.Getlength();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!num.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line">result += num.getfirst() * i;</span><br><span class="line">num.deletefirst();</span><br><span class="line">i *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数字转换为链表*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">ToLKlist</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">Lklist <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">while</span> (r) &#123;</span><br><span class="line"><span class="built_in">stack</span>.push(r % <span class="number">10</span>);</span><br><span class="line">r /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*两数相加核心代码*/</span></span><br><span class="line"><span class="function">Lklist <span class="title">TwoNumberAdd</span><span class="params">(Lklist num1, Lklist num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = number(num1);</span><br><span class="line"><span class="keyword">int</span> b = number(num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ToLKlist(a + b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">Lklist s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入第一个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"请输入第二个数： "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">s = TwoNumberAdd(ToLKlist(a), ToLKlist(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = s.Getlength();</span><br><span class="line"><span class="keyword">while</span> (!s.IsEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.getfirst();</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.deletefirst();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/1.png"></li></ul><hr><h4 id="标准参考答案："><a class="header-anchor" href="#标准参考答案：">¶</a>标准参考答案：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumber</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ListNode* h = <span class="literal">nullptr</span>;</span><br><span class="line">ListNode** t = &amp;h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l1!=<span class="literal">nullptr</span>||l2!=<span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line"></span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">t = (&amp;node-&gt;next);</span><br><span class="line"></span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">ListNode* node = <span class="keyword">new</span> ListNode(carry % <span class="number">10</span>);</span><br><span class="line">*t = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(ListNode*&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">x = l-&gt;val;</span><br><span class="line">l = l-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="参考答案的核心算法思路："><a class="header-anchor" href="#参考答案的核心算法思路：">¶</a><strong>参考答案的核心算法思路：</strong></h5><ul><li><code>ListNode* addTwoNumber(ListNode* l1, ListNode* l2)</code></li><li>这步先把两个链表的第一个元素取出存入X和Y中，然后让其想加并加上一个进位carry数。以(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)为例。<ul><li>第一步：<ul><li>取出两个链表中的第一个元素2和5。</li></ul></li><li>第二步：<ul><li>让其相加并加上一个进位数即sum = carry(此时为0) + 2 + 5 = 7</li></ul></li><li>第三步：<ul><li>把结果7模上10并<code>push_back</code>进结果链表。此时结果为7并且是结果链表的第一个数据</li><li>然后重置进位carry即：carry = sum / 10,因为2 + 5 = 7小于10所以不用进位。</li></ul></li><li>第四步：<ul><li>循环上面的步骤</li><li>第二次循环中4和6的和是10，模上10取余后的结果为0，<code>push_back</code>进结果链表作为第二个数据</li><li>因为10是大于等于10的，所以要进位，故进行carry = sum / 10时，carry结果会为1作为下一次循环，sum = carry + x + y中的进位</li></ul></li></ul></li><li>总体来看，首先因为题目描述为 <strong>位数按照逆序方式储存</strong>，所以这里运用了普通加法运算。即：从个位开始相加，满10进1至下位的思路。</li></ul><hr><h5 id="个人实现代码优化后："><a class="header-anchor" href="#个人实现代码优化后：">¶</a>个人实现代码优化后：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LKlist</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LKlist() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode;</span><br><span class="line">LNode* t = head;</span><br><span class="line">p-&gt;data = e;</span><br><span class="line"><span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">t-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> head-&gt;next == <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">deletefirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> LNode* p = head-&gt;next-&gt;next;</span><br><span class="line"> <span class="keyword">delete</span> head-&gt;next;</span><br><span class="line"> head-&gt;next = p;</span><br><span class="line"> length--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">getfirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">Getlength</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> length;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValueAndMoveNext</span><span class="params">(LKlist&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">LKlist::LNode* T;</span><br><span class="line"><span class="keyword">if</span> (l.head-&gt;next) &#123;</span><br><span class="line">x = l.head-&gt;next-&gt;data;</span><br><span class="line">T = l.head-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> l.head-&gt;next;</span><br><span class="line">l.head-&gt;next = T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LKlist <span class="title">addTwoNumber</span><span class="params">(LKlist&amp; l1, LKlist&amp; l2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">LKlist h;</span><br><span class="line"><span class="keyword">while</span> (!l1.IsEmpty() || !l2.IsEmpty()) &#123;</span><br><span class="line">x = getValueAndMoveNext(l1);</span><br><span class="line">y = getValueAndMoveNext(l2);</span><br><span class="line"></span><br><span class="line">sum = carry + x + y;</span><br><span class="line">h.push_back(sum % <span class="number">10</span>);</span><br><span class="line">carry = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">h.push_back(carry % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果: <img src="/2019/06/29/链表应用-两数相加/2.png"></li></ul><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;两数相加&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#两数相加&quot;&gt;¶&lt;/a&gt;两数相加&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;问题：
&lt;ul&gt;
&lt;li&gt;给定两个&lt;strong&gt;非空&lt;/strong&gt;链表来表示两个非负整数。位数按照&lt;strong&gt;逆序&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="https://shuhaohwang.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="算法题" scheme="https://shuhaohwang.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
