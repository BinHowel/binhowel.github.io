<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-06-28T06:45:17.965Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++迭代器的失控范例和解决方案</title>
    <link href="https://shuhaohwang.github.io/2019/06/28/C-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%8E%A7%E8%8C%83%E4%BE%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/28/C-迭代器的失控范例和解决方案/</id>
    <published>2019-06-28T03:54:43.000Z</published>
    <updated>2019-06-28T06:45:17.965Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器失控范例"><a href="#迭代器失控范例" class="headerlink" title="迭代器失控范例"></a>迭代器失控范例</h4><h5 id="情形一："><a href="#情形一：" class="headerlink" title="情形一："></a>情形一：</h5><ul><li><p>很多在使用迭代器类型进行遍历容器的操作进行对容器容量的变化都会导致迭代器的失控，即输出错误的值。例如：要对<code>vector</code>容器进行<code>push_back()</code>操作、对<code>vector</code>容器进行插入操作、删除操作。都会使<code>end()</code>函数返回的迭代器类型位置错乱，导致出现可能会修改未被使用内存的风险，从而使程序崩溃。</p></li><li><p>例如：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者下面这种情况</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.insert(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/1.png"></p></li></ul></li><li><p>在一般情况下，如果只是要对容器进行添加一个元素，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">break</span>;<span class="comment">//添加元素后直接跳出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再进行一次迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span>(iter;iter!=arrays.end();iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    arrays.push_back(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/2.png"></p></li></ul></li><li><p>如果真的在实际项目中要进行在迭代器遍历容器的时候对容器多次进行增添内容，可以使用下面的方法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        iter = arrays.insert(iter,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/3.png"></p></li><li><p><strong>实现思路:</strong>因为<code>arrays.insert()</code>的返回值是一个迭代器类型，所以在循环中不断刷新循环的起始位置(因为是前插，所以<code>end()</code>的值没有发生变化)。多次更新迭代器的起始<code>begin()</code>的值，从而使迭代器类型的指向不会失控。</p></li></ul></li><li><p>同样的如果使用<code>push_back()</code>:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = arrays.begin();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">//用来控制插入次数（循环次数）</span></span><br><span class="line">    <span class="keyword">while</span>(iter != arrays.end())&#123;</span><br><span class="line">        </span><br><span class="line">        arrays.push_back(<span class="number">100</span>);<span class="comment">//不断更新iter的值起始</span></span><br><span class="line">        iter = arrays.begin()</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        iter++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(iter = arrays.begin(); iter != arrays.end(); iter++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/06/28/C-迭代器的失控范例和解决方案/4.png"></p></li></ul></li><li><p><strong>总体：</strong>即每对容器的容量进行变化一次便刷新迭代器的值。使其成为新的迭代器进行操作，就可以避免容器的失控。<strong><em>弊端</em></strong>：麻烦，代码较繁杂。</p></li></ul><hr><h5 id="情形二："><a href="#情形二：" class="headerlink" title="情形二："></a>情形二：</h5><ul><li>如果在某个时候要对容器进行清空操作，多数下使用容器自带的<code>clear()</code>函数即可。但在某些特殊情况下，要对<code>vector</code>容器的某些元素进行删除，就得使用容器自带的<code>erase()</code>函数。但是这样做就是对容器容量进行修改操作，会使迭代器指向失控。</li></ul><p>–（本文未完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;迭代器失控范例&quot;&gt;&lt;a href=&quot;#迭代器失控范例&quot; class=&quot;headerlink&quot; title=&quot;迭代器失控范例&quot;&gt;&lt;/a&gt;迭代器失控范例&lt;/h4&gt;&lt;h5 id=&quot;情形一：&quot;&gt;&lt;a href=&quot;#情形一：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="C++" scheme="https://shuhaohwang.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="技术类" scheme="https://shuhaohwang.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.6）迭代器</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-6%EF%BC%89%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/C-进阶学习总结-（1-6）迭代器/</id>
    <published>2019-06-26T05:28:56.000Z</published>
    <updated>2019-06-28T02:25:40.545Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述迭代器的基本概念、实质、及用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.3）链栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-3%EF%BC%89%E9%93%BE%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/26/数据结构学习总结-（3-3）链栈/</id>
    <published>2019-06-26T04:27:15.000Z</published>
    <updated>2019-06-26T05:03:16.042Z</updated>
    
    <content type="html"><![CDATA[<h4 id="栈的链式实现算法及思路"><a href="#栈的链式实现算法及思路" class="headerlink" title="栈的链式实现算法及思路"></a>栈的链式实现算法及思路</h4><ul><li><p>栈的链式实现是以前插法为基础的。即以头结点next指向的是栈顶，进行入栈出栈等操作。</p></li><li><table><tr><td bgcolor="yellow">入栈</td></tr></table><ul><li><p>思路：创建好空链栈后，每插入一个数据，便创建一个新的结点p，让p结点的next指针等于head的next指针，让head的next指针再指向新结点p，从而完成push_back操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span></span>&#123;</span><br><span class="line">    LNode*p = <span class="keyword">new</span> LNode();</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">出栈</td></tr></table><ul><li><p>思路：直接让head的next指针指向head-&gt;next-&gt;next即跳过原栈的数据，所以可以先让一个临时的p指向head-&gt;next,然后让head的next指针直接指向p的next指针。之后释放p的空间。(注意：进行出栈操作要首先判断是否空栈)</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(!head-&gt;next)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><table><tr><td bgcolor="yellow">析构函数</td></tr></table><ul><li><p>思路：析构函数就是链栈的销毁操作。总体上先把所有的数据进行出栈并释放空间，最后再把头结点释放了。所以要先用循环，分别释放每一个数据的空间。循环结束的判断条件是head-&gt;next 为空。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~LkStack()&#123;</span><br><span class="line">    LNode*p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        head-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a href="#具体代码实现：" class="headerlink" title="具体代码实现："></a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="class"><span class="keyword">class</span> <span class="title">LkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LkStack() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~LkStack() &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = <span class="keyword">new</span> LNode();</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">head-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*是否为空*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!head-&gt;next)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获得栈顶数据*/</span></span><br><span class="line"><span class="function">T&amp; <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">LkStack&lt;<span class="keyword">int</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据1"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据2"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据3"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据4"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈了数据5"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">stack</span>.GetTop() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;栈的链式实现算法及思路&quot;&gt;&lt;a href=&quot;#栈的链式实现算法及思路&quot; class=&quot;headerlink&quot; title=&quot;栈的链式实现算法及思路&quot;&gt;&lt;/a&gt;栈的链式实现算法及思路&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈的链式实现是以前插法为基础的。即以头结点next
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++个人学习路线</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-个人学习路线/</id>
    <published>2019-06-25T15:41:26.000Z</published>
    <updated>2019-06-25T16:40:52.386Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      （加密文章）
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.5）vector容器详解</title>
    <link href="https://shuhaohwang.github.io/2019/06/25/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-5%EF%BC%89vector%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/25/C-进阶学习总结-（1-5）vector容器详解/</id>
    <published>2019-06-25T11:01:59.000Z</published>
    <updated>2019-06-25T12:17:11.053Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++基本库中的vector容器的基本概念和用法（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.2）顺序栈的实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-2%EF%BC%89%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-2）顺序栈的实现/</id>
    <published>2019-06-24T14:59:45.000Z</published>
    <updated>2019-06-25T08:28:51.825Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序栈的实现与算法思路（以char数据类型为例）"><a href="#顺序栈的实现与算法思路（以char数据类型为例）" class="headerlink" title="顺序栈的实现与算法思路（以char数据类型为例）"></a>顺序栈的实现与算法思路（以char数据类型为例）</h4><ul><li><p>入栈push(char e)；</p></li><li><p>思路：在栈未满的情况下，直接对top(栈顶)指针指向的地址内容进行赋值，修改完毕后，直接top++移动栈顶至下一个位置。如果栈满则调用扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)<span class="comment">//容量满了就进行扩容</span></span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;<span class="comment">//直接修改并移动top指针</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出栈pop();</p></li><li><p>思路：在没有空栈的情况下，直接让top自减一。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)<span class="comment">//判断是否空栈。</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="顺序栈的实现情况"><a href="#顺序栈的实现情况" class="headerlink" title="顺序栈的实现情况"></a>顺序栈的实现情况</h4><ul><li><del>出栈</del>(完成)<ul><li>push(char e)</li></ul></li><li><del>入栈</del>(完成)<ul><li>pop()</li></ul></li><li><del>扩容</del>(完成)<ul><li>realloc()</li></ul></li><li><del>遍历？</del>(完成)<ul><li>Traverse(void(*fb)(char&amp; e))</li></ul></li><li><del>获得栈顶数据</del>(完成)<ul><li>GetTop()</li></ul></li><li><del>是否为空栈</del>(完成)<ul><li>IsStackEmpty()</li></ul></li><li><del>获得栈总容量</del>(完成)<ul><li>GetCapacity()</li></ul></li></ul></li></ul><hr><p>具体代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SQSTACK_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SQSTACK_H_</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span>* top = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">char</span>* data = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack(<span class="keyword">int</span> c = <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*入栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*出栈操作*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*遍历*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp;e))</span></span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">GetTop</span><span class="params">()</span></span>;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsStackEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetCapacity</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*扩容*/</span> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*打印*/</span> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_SQSTACK_H_</span></span></span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Sqstack.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqStack::SqStack(<span class="keyword">int</span> c) &#123;</span><br><span class="line">capacity = c;<span class="comment">//默认给一个初值</span></span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">top = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*扩容*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::<span class="built_in">realloc</span>() &#123;</span><br><span class="line"><span class="keyword">char</span>* n_data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * capacity];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">n_data[i] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]data;</span><br><span class="line">data = n_data;</span><br><span class="line">top = data + capacity;<span class="comment">//这里要注意top也有重新赋值新的地址</span></span><br><span class="line"></span><br><span class="line">capacity *= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*入栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::push(<span class="keyword">char</span> e) &#123;</span><br><span class="line"> <span class="keyword">if</span> ((top - data) == capacity)</span><br><span class="line"> <span class="built_in">realloc</span>();</span><br><span class="line"></span><br><span class="line"> *top = e; top++;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*出栈操作*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::pop() &#123;</span><br><span class="line"> <span class="keyword">if</span> (top == data)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> top--;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历*/</span></span><br><span class="line"><span class="keyword">void</span> SqStack::Traverse(<span class="keyword">void</span>(*fb)(<span class="keyword">char</span>&amp; e)) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top - data; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> fb(data[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得栈顶元素*/</span></span><br><span class="line"><span class="keyword">char</span> SqStack::GetTop() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>*(top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断是否空栈*/</span></span><br><span class="line"><span class="keyword">bool</span> SqStack::IsStackEmpty() &#123;</span><br><span class="line"><span class="keyword">if</span> (top == data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得容量*/</span></span><br><span class="line"><span class="keyword">int</span> SqStack::GetCapacity() &#123;</span><br><span class="line"><span class="keyword">return</span> capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印*/</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">char</span>&amp; e)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Sqstack.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqStack <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据a"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'a'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据b"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'b'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据c"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'c'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据d"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'d'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据e"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'e'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"入栈一个数据f"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">'f'</span>); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"出栈一个数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stack</span>.pop(); <span class="built_in">stack</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;a href=&quot;#顺序栈的实现与算法思路（以char数据类型为例）&quot; class=&quot;headerlink&quot; title=&quot;顺序栈的实现与算法思路（以char数据类型为例）&quot;&gt;&lt;/a&gt;顺序栈的实现与算法思路（以c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（3.1）栈</title>
    <link href="https://shuhaohwang.github.io/2019/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%883-1%EF%BC%89%E6%A0%88/"/>
    <id>https://shuhaohwang.github.io/2019/06/24/数据结构学习总结-（3-1）栈/</id>
    <published>2019-06-24T07:45:53.000Z</published>
    <updated>2019-06-24T08:13:32.972Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初识栈"><a href="#初识栈" class="headerlink" title="初识栈"></a>初识栈</h4><ul><li>定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。<ul><li>允许插入和删除的一段称为栈顶(top),另一段称为栈底(bottom)。</li><li>不含任何数据元素的栈称为空栈。</li></ul></li><li>特点：<ul><li>先进后出</li><li>后进先出</li></ul></li></ul><p><font color="red"><strong>注意：</strong></font></p><ul><li>栈又被称为后进先出(Last in First out)的线性表</li><li>栈的插入操作，被称为进栈，也称压栈、入栈(push)</li><li>栈的删除操作也称出栈，也称为弹栈(pop)</li><li>示意图：<img src="/2019/06/24/数据结构学习总结-（3-1）栈/1.gif"></li></ul><hr><h4 id="栈的抽象数据类型"><a href="#栈的抽象数据类型" class="headerlink" title="栈的抽象数据类型"></a>栈的抽象数据类型</h4><ul><li>ADT 栈(Stack)</li><li>Data<ul><li>栈的数据对象集合为{a1,a2,a3,…,an},每一个元素的类型均为同一个数据类型。其中除了第一个数据为，每个元素有且只有一个直接前驱元素，除了最后一个数据外，每个元素有且只有一个直接的后继元素。数据元素之间的关系是一对一的关系，</li></ul></li><li>Operation<ul><li>InitStack；初始化，创建一个空栈</li><li>destoryStack;  销毁栈</li><li>StackEmpty；判断是否为空</li><li>clearStack； 清空栈</li><li>getTop；获得栈顶元素</li><li>push 压栈</li><li>pop 出栈</li><li>stacklength；获得栈的长度</li></ul></li><li>endADT</li></ul><p><font color="red"><strong>注意：</strong></font>栈本身就是一个线性表结构、线性表的顺序储存和链式存储，对于栈来说也同样适用</p><p>–（本文未完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;初识栈&quot;&gt;&lt;a href=&quot;#初识栈&quot; class=&quot;headerlink&quot; title=&quot;初识栈&quot;&gt;&lt;/a&gt;初识栈&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：栈(stack)是限定仅在表尾插入和删除操作的线性表。&lt;ul&gt;
&lt;li&gt;允许插入和删除的一段称为栈顶(top),另
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.4）函数新特性、const关键字精解</title>
    <link href="https://shuhaohwang.github.io/2019/06/23/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-4%EF%BC%89%E5%87%BD%E6%95%B0%E6%96%B0%E7%89%B9%E6%80%A7%E3%80%81const%E5%85%B3%E9%94%AE%E5%AD%97%E7%B2%BE%E8%A7%A3/"/>
    <id>https://shuhaohwang.github.io/2019/06/23/C-进阶学习总结-（1-4）函数新特性、const关键字精解/</id>
    <published>2019-06-23T09:34:31.000Z</published>
    <updated>2019-06-24T04:06:03.460Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述函数的新特性、内联函数实质与应用、constchar*、charconst*、等区别，函数杂合（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.9）顺序存储结构与链式存储结构的逆置</title>
    <link href="https://shuhaohwang.github.io/2019/06/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%86%E7%BD%AE/"/>
    <id>https://shuhaohwang.github.io/2019/06/22/数据结构学习总结-（2-9）顺序存储结构与链式存储结构的逆置/</id>
    <published>2019-06-22T15:44:35.000Z</published>
    <updated>2019-06-22T16:26:32.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构的逆置算法与思路："><a href="#顺序结构的逆置算法与思路：" class="headerlink" title="顺序结构的逆置算法与思路："></a>顺序结构的逆置算法与思路：</h4><ul><li><p>夹逼法：</p></li><li><p>思路：通过对数组头部和尾部相互对调并向中间靠近。</p></li><li><p>实现：(假设以整型为数据类型实现)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length/<span class="number">2</span>; i++)&#123;<span class="comment">//注意：length要除于2！！！！length要除于2！！！！</span></span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[length - <span class="number">1</span> - i];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[length - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="red"><strong>注意</strong></font>：这里的length是要除于2的，因为只需向中间靠近即可而不是再往中间远离。即：移动的范围只是数组长度的一半。</li></ul></li></ul><ul><li><p>算法优化：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length为顺序表总长度。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//用来对换位置时使用的临时变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ，j = length - <span class="number">1</span>; i &lt; j; i++,j--)&#123;</span><br><span class="line">         temp = datas[i];</span><br><span class="line">        datas[i] = datas[j];<span class="comment">//前后换位置并向中间靠近</span></span><br><span class="line">        datas[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此方法更能体现夹逼法。</p></li></ul><hr><h4 id="链式存储结构的逆置算法与思路："><a href="#链式存储结构的逆置算法与思路：" class="headerlink" title="链式存储结构的逆置算法与思路："></a>链式存储结构的逆置算法与思路：</h4><ul><li><p>思路：把头结点和数据结点断开，然后把数据结点一个个<strong>前插</strong>进链表。（循环链表和单向链表均适用）,具体做法先让一个结点指针p保存第一个数据的地址，然后让头结点的next指针归零（即：使其与数据结点断开），开始循环：让一个临时指针指向p的下一个数据的地址，然后把这个第一个数据插入头结点后面（此时p指向为第一个数据的地址），即：<code>p-&gt;next = head-&gt;next;head -&gt;next = p;</code>其次移动指针p到下一个数据，这里就要运用到一开始的临时指针了。循环上面的操作，直到把所有数据都前插完毕。</p></li><li><p>实现1(单向链表)：</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现2(循环链表)</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Convert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LNode* p = head-&gt;next;</span><br><span class="line">    LNode* temp = <span class="literal">nullptr</span>;<span class="comment">//临时指针</span></span><br><span class="line">    head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p!=head)&#123;</span><br><span class="line">        temp = p-&gt;next;<span class="comment">//获取下一个数据的值</span></span><br><span class="line">        </span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//前插</span></span><br><span class="line">        head-&gt;next = p;</span><br><span class="line">        </span><br><span class="line">        p = temp;<span class="comment">//移动指针到下一个数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前后只是循环条件发生变化。</p></li></ul><hr><p>–（本文完）&lt;原创&gt;&lt;待增添修改&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;a href=&quot;#顺序结构的逆置算法与思路：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构的逆置算法与思路：&quot;&gt;&lt;/a&gt;顺序结构的逆置算法与思路：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;夹逼法：&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.8）线性表的顺序存储结构和链式存储结构之间的比较</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-8%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%92%8C%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/数据结构学习总结-（2-8）线性表的顺序存储结构和链式存储结构之间的比较/</id>
    <published>2019-06-21T15:13:32.000Z</published>
    <updated>2019-06-21T16:03:35.639Z</updated>
    
    <content type="html"><![CDATA[<h4 id="顺序结构与链式结构的比较："><a href="#顺序结构与链式结构的比较：" class="headerlink" title="顺序结构与链式结构的比较："></a>顺序结构与链式结构的比较：</h4><table><thead><tr><th></th><th>顺序结构</th><th>链式结构</th></tr></thead><tbody><tr><td>按序号下标读取</td><td>直接读取通过A[index]即可获的数据<font color="red"><strong>+++</strong></font></td><td>要从头开始找，找的下标才能获取数据<font color="blue"><strong>—</strong></font></td></tr><tr><td>内存实验</td><td>要先规定好顺序结构的长度，可能没有利用好空间或空间不够用，不够用时还要扩容<strong>可能没有足够的空间或多出空间</strong><font color="blue"><strong>—</strong></font></td><td>按需要分配，想要一个就一个<strong>可利用很小的碎片空间</strong><font color="red"><strong>+++</strong></font></td></tr><tr><td>插入元素</td><td>插入一个元素需要不断移动后面的元素，速度慢，消耗相比大<font color="blue"><strong>—</strong></font></td><td>直接插入，速度快，消耗相比小<font color="red"><strong>+++</strong></font></td></tr><tr><td>删除</td><td>需要移动元素<font color="blue"><strong>—</strong></font></td><td>直接删除<font color="red"><strong>+++</strong></font></td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;a href=&quot;#顺序结构与链式结构的比较：&quot; class=&quot;headerlink&quot; title=&quot;顺序结构与链式结构的比较：&quot;&gt;&lt;/a&gt;顺序结构与链式结构的比较：&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（1.3）范围for语句、动态分配、nullptr</title>
    <link href="https://shuhaohwang.github.io/2019/06/21/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%881-3%EF%BC%89%E8%8C%83%E5%9B%B4for%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D/"/>
    <id>https://shuhaohwang.github.io/2019/06/21/C++进阶学习总结-（1-3）范围for语句，动态分配/</id>
    <published>2019-06-21T06:55:19.000Z</published>
    <updated>2019-06-21T09:10:55.043Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述新版的for语句、动态内存分配的基础知识、c++11新关键字nullptr（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.7）双向链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/20/数据结构学习总结-（2-7）双向链表/</id>
    <published>2019-06-20T01:40:31.000Z</published>
    <updated>2019-06-22T04:06:28.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ul><li>与单向链表的不同之处：</li></ul><table><thead><tr><th align="center">单向链表</th><th align="center">双向链表</th></tr></thead><tbody><tr><td align="center">只知道后继节点，不知道前驱节点。每次查找只能从头开始查找。</td><td align="center">相比单向链表增加了一个前驱指针，使前驱节点很快就能被找到</td></tr></tbody></table><ul><li>双向链表由于有了前后指针。可以使其从前往后走，也可以从后往前走。</li></ul><hr><h5 id="根据双向链表具有前后两个指针的这个特性"><a href="#根据双向链表具有前后两个指针的这个特性" class="headerlink" title="根据双向链表具有前后两个指针的这个特性"></a>根据双向链表具有前后两个指针的这个特性</h5><ul><li>在插入算法和删除算法中都有很好的优势</li></ul><ul><li><p><strong>插入算法</strong>：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要插入的位置即可</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;<span class="comment">//指定位置的前一个数据的next指针指向新插入的数据地址</span></span><br><span class="line">node-&gt;prior = p-&gt;prior;<span class="comment">//新插入数据的prior指针指向原来位置数据的前一个数据地址</span></span><br><span class="line">p-&gt;prior = node;<span class="comment">//插入位置的前一个数据更变为新插入的数据地址</span></span><br><span class="line">node-&gt;next = p;<span class="comment">//新插入数据的next指针指向插入位置的地址</span></span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//链表总长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/1.png"></li></ul></li></ul><ul><li><p><strong>删除算法</strong></p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (j &lt; index)<span class="comment">//直接定位到要删除的数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;<span class="comment">//待删除的数据的前一个数据的next指针指向待删除数据的下一个数据的地址</span></span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;<span class="comment">//待删除数据的下一个数据的prior指针指向待删除数据的前一个数据</span></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//释放待删除数据的空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除算法即可以直接跳过待删除数据结点。</p></li><li><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/2.png"></li></ul></li></ul><hr><h5 id="其他测试代码详情："><a href="#其他测试代码详情：" class="headerlink" title="其他测试代码详情："></a>其他测试代码详情：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSLkList</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;</span><br><span class="line">LNode* next;</span><br><span class="line">LNode* prior;</span><br><span class="line">&#125;;</span><br><span class="line">LNode* head;</span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BSLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">head-&gt;next = head;</span><br><span class="line">head-&gt;prior = head;</span><br><span class="line">rear = head;</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line">p-&gt;next = node;</span><br><span class="line">node-&gt;next = head;</span><br><span class="line">node-&gt;prior = p;</span><br><span class="line">rear = node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* node = <span class="keyword">new</span> LNode();</span><br><span class="line">LNode* p = head;</span><br><span class="line">node-&gt;data = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = node;</span><br><span class="line">node-&gt;prior = p-&gt;prior;</span><br><span class="line">p-&gt;prior = node;</span><br><span class="line">node-&gt;next = p;</span><br><span class="line"></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定位置遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e, <span class="keyword">void</span>(*fb)(T&amp; e))</span> </span>&#123;</span><br><span class="line">LNode* s = GetDataAddress(e);</span><br><span class="line">LNode* p = s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s!=head)</span><br><span class="line">fb(s-&gt;data);</span><br><span class="line">s = s-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (s != p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BSLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个A数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'A'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个B数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'B'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插入了一个C数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Push_back(<span class="string">'C'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入了一个p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了3号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">3</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了1号位置的数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">1</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从B数据开始遍历"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'B'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果图：</p><img src="/2019/06/20/数据结构学习总结-（2-7）双向链表/3.png"><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;与单向链表的不同之处：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;c
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6.1）附加：循环链表的优点之从指定结点开始遍历</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6-1%EF%BC%89%E9%99%84%E5%8A%A0%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B9%8B%E4%BB%8E%E6%8C%87%E5%AE%9A%E7%BB%93%E7%82%B9%E5%BC%80%E5%A7%8B%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/</id>
    <published>2019-06-19T15:58:01.000Z</published>
    <updated>2019-06-22T04:06:21.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="体现循环链表的优点之从指定结点开始遍历"><a href="#体现循环链表的优点之从指定结点开始遍历" class="headerlink" title="体现循环链表的优点之从指定结点开始遍历"></a>体现循环链表的优点之从指定结点开始遍历</h4><p>​    上一篇总结文章介绍了循环链表的基本概念和个人理解，但我觉得能很好区分非循环链表和循环链表初了链表的合并，还有一个就是循环链表<strong>可以从指定的结点开始遍历整个链表</strong>，这是非循环链表所做不到的。非循环链表每次遍历只能从头一个个开始遍历每一个元素，而循环链表就不同了，因为它的尾部是与头部相连的，这样就可以实现从某一个结点开始就可以遍历到链表每一个结点上，大大提高了效率。</p><ul><li>这里通过遍历函数来体现这一特性。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找链表中的某一个元素并获得它的地址</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//获得指定结点的地址</span></span><br><span class="line">LNode* q = p;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)<span class="comment">//越过头结点</span></span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">            </span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：先获得指定结点的地址先记录下来，并再用一个指针记下这个位置（便于判断）。其次这里使用的是do-while循环结构（使用do-while循环可以避免while循环漏遍历一个指定结点的数据），先调用函数指针的内容，然后移动指针p。直到指针p再次等于原来的指定结点的地址就停止。</li></ul><hr><ul><li>具体实验代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得指定结点地址操作*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">GetDataAddress</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*从某一个结点进行遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(T e,<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LNode* p = GetDataAddress(e);<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line">LNode* q = p;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"链表为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(p!=head)</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span> (p != q);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从b数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'b'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从c数据开始遍历链表； "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.Traverse(<span class="string">'c'</span>, Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><img src="/2019/06/19/数据结构学习总结-（2-6-1）附加：循环链表的优点之从指定结点开始遍历/1.png"><hr><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>​    这里只是单单用遍历体现了循环链表的这个特点。</p><p>​    其实不单单在遍历操作上，这个更可以在查找操作上体现出这个优点，例如：在指定结点开始寻找其后的某个值、删除操作也可以运用上。</p><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;a href=&quot;#体现循环链表的优点之从指定结点开始遍历&quot; class=&quot;headerlink&quot; title=&quot;体现循环链表的优点之从指定结点开始遍历&quot;&gt;&lt;/a&gt;体现循环链表的优点之从指定结点开始遍历&lt;/h4&gt;&lt;p&gt;​ 
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.6）循环链表（单向链表）、清空链表与销毁链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-6%EF%BC%89%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/</id>
    <published>2019-06-19T06:47:06.000Z</published>
    <updated>2019-06-22T04:06:13.895Z</updated>
    
    <content type="html"><![CDATA[<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><ul><li>相较于非循环链表<ul><li>在非循环链表中，最后一个元素的next指针是空指针，造成浪费。</li><li>每次寻找后继指针的时候都要重新从头开始找。</li></ul></li><li>循环链表<ul><li>尾指针直接指向表头，使最后一个元素的next指针被利用起来。</li><li>从每一个元素开始都能遍历表中每一个元素。</li><li>便于类似于链表合并这样的算法实现。</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/1.png"></li></ul><ul><li><p>其他不同：</p><ul><li>循环链表与非循环链表的判断条件发生了变化</li></ul></li></ul><ul><li><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/5.png"></li></ul><hr><h5 id="判断的具体解释（循环链表）"><a href="#判断的具体解释（循环链表）" class="headerlink" title="判断的具体解释（循环链表）"></a>判断的具体解释（循环链表）</h5><ul><li><table><tr><td bgcolor="yellow">判断到前驱结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">  &#123;</span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    因为最后一个结点的next指针不再是空指针而是一个指向head的指针，所以在while循环中如果p的next指针下一个为head指针那么这时指针p就定位到head的前驱指针了。</p></li></ul><ul><li><table><tr><td bgcolor="yellow">判断到头结点：</td></tr></table></li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个也很好判断，不断移动指针p当等于头结点时就跳出循环，此时p定位到头结点。</p></li></ul><hr><h5 id="循环链表的尾指针"><a href="#循环链表的尾指针" class="headerlink" title="循环链表的尾指针"></a>循环链表的尾指针</h5><ul><li><p>循环链表通常是有一个尾指针的它指向的是最后一个元素的地址。</p><ul><li>尾指针的好处：<ul><li>找head指针非常方便。rear-&gt;next的值便是head。</li><li>便于链表的合并。</li></ul></li></ul></li></ul><ul><li>代码实现空表时的尾指针：</li></ul><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;<span class="comment">//尾指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;<span class="comment">//空表时的尾指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/2.png"></li></ul><ul><li>当插入一个元素后尾指针的变化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从链表最后面插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">    </span><br><span class="line">rear = q;<span class="comment">//因为是从最后面插入那么此时这个最后一个元素的的地址是尾指针指向的</span></span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="链表合并的实现"><a href="#链表合并的实现" class="headerlink" title="链表合并的实现:"></a>链表合并的实现:</h5><ul><li>具体思路（链表2合并到链表1）：先获得<font color="red">链表2</font>的头结点的地址（即：链表2的指针head）然后让<font color="blue">链表1</font>的head指针指向<font color="red">链表2</font>的指针head-&gt;next指向的地址（即：<font color="red">链表2</font>的第一个元素的地址），然后让<font color="red">链表2</font>的指针rear（尾指针）指向<font color="blue">链表1</font>的head-&gt;指向的地址（即指向<font color="blue">链表1</font>的第一个元素）最后<strong>delete <font color="red">链表2</font>的head指针</strong>。完成合并操作。</li></ul><ul><li>合并前：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/3.png"></li></ul><ul><li>合并后：<img src="/2019/06/19/数据结构学习总结-（2-6）循环链表（单向链表）/4.png"></li></ul><ul><li>具体实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">LNode* t_head_of_s = s-&gt;head;<span class="comment">//获得链表2的head指针</span></span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;<span class="comment">//让链表2的尾指针指向链表1的第一个元素</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;<span class="comment">//让链表1的head-&gt;next指针指向链表1第一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> t_head_of_s;<span class="comment">//释放原链表2的head指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="循环链表具体代码实现"><a href="#循环链表具体代码实现" class="headerlink" title="循环链表具体代码实现"></a>循环链表具体代码实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line">LNode* rear;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">CLkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = head;</span><br><span class="line">rear = head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">length++;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">rear = q;</span><br><span class="line">q-&gt;next = head;</span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line"><span class="comment">//length++;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得链表长度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index,T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p -&gt; next = q;</span><br><span class="line">length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（下标型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; index<span class="number">-1</span>) &#123;</span><br><span class="line">p = p -&gt; next;</span><br><span class="line">q = q -&gt; next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除操作（找值型）*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;</span><br><span class="line">LNode* q = head-&gt;next;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">while</span> (q != head) &#123;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;data == e) &#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空链表操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListClean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">LNode* p = head-&gt;next;</span><br><span class="line">LNode* q;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != head)<span class="comment">//定位到头结点之前，清空初头结点的外的其他数据空间</span></span><br><span class="line">&#123;</span><br><span class="line">q = p -&gt; next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = head;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/*合并操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListCombine</span><span class="params">(CLkList* s)</span> </span>&#123;</span><br><span class="line">LNode* t_head_of_s = s-&gt;head;</span><br><span class="line"></span><br><span class="line">s-&gt;rear-&gt;next = head-&gt;next;</span><br><span class="line"></span><br><span class="line">head-&gt;next = t_head_of_s-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length += s-&gt;length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s-&gt;head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T &amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p != head) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个a数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个b数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个c数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'c'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个d数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.push_back(<span class="string">'d'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在2号位置插入p数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.InsertElement(<span class="number">2</span>, <span class="string">'p'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除测试 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2号位置的数据被删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="number">2</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据a删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'a'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据b删除了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.DeleteElement(<span class="string">'b'</span>); <span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list2:   "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CLkList&lt;<span class="keyword">char</span>&gt; list2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个v数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'v'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个n数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'n'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; <span class="string">"后面插入了一个m数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">list2.push_back(<span class="string">'m'</span>); list2.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">"list2合并到list"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">list</span>.ListCombine(&amp;list2);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"合并后："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空list</span></span><br><span class="line"><span class="built_in">list</span>.ListClean();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空完成"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="销毁链表与清空链表的区别："><a href="#销毁链表与清空链表的区别：" class="headerlink" title="销毁链表与清空链表的区别："></a>销毁链表与清空链表的区别：</h5><table><thead><tr><th align="center"></th><th align="center"><strong>销毁链表</strong></th><th align="center"><strong>清空链表</strong></th></tr></thead><tbody><tr><td align="center"><strong>具体解释</strong></td><td align="center">包括头结点全部清空全部delete</td><td align="center">保留头结点其他数据元素全部delete清空</td></tr><tr><td align="center"><strong>产生的后果</strong></td><td align="center">头指针丢失，链表无法使用</td><td align="center">清空链表后，保留了头结点，只是元素被清空了（即链表回到初始空表状态）还可以使用。</td></tr></tbody></table><hr><p>–（本文完）&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;循环链表&quot;&gt;&lt;a href=&quot;#循环链表&quot; class=&quot;headerlink&quot; title=&quot;循环链表&quot;&gt;&lt;/a&gt;循环链表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;相较于非循环链表&lt;ul&gt;
&lt;li&gt;在非循环链表中，最后一个元素的next指针是空指针，造成浪费。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.2)auto、头文件防卫</title>
    <link href="https://shuhaohwang.github.io/2019/06/18/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.2)auto%E3%80%81%E5%A4%B4%E6%96%87%E4%BB%B6%E9%98%B2%E5%8D%AB/"/>
    <id>https://shuhaohwang.github.io/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/</id>
    <published>2019-06-18T08:08:05.000Z</published>
    <updated>2019-06-19T16:29:26.827Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Auto"><a href="#Auto" class="headerlink" title="Auto"></a>Auto</h4><ul><li>auto：变量的自动类型推断。<ul><li>可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型。（<strong>声明时要初始化</strong>）</li><li>自动推断发生在编译期间，所以使用auto不会造成程序效降低。</li></ul></li></ul><hr><h4 id="头文件防卫式声明"><a href="#头文件防卫式声明" class="headerlink" title="头文件防卫式声明"></a>头文件防卫式声明</h4><ul><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _文件名_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _文件名_H</span></span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="为什么要用到头文件防卫式声明？"><a href="#为什么要用到头文件防卫式声明？" class="headerlink" title="为什么要用到头文件防卫式声明？"></a>为什么要用到头文件防卫式声明？</h5><ul><li>目的：为了防止头文件中多重、重复定义内容。</li></ul><ul><li><p>情景假设：</p></li><li><p>假设一个工程里面有两个个头文件.h文件。里面都有自己的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head2.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number2 = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"head2.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; number2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行情况：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/1.png"></li></ul><ul><li><p>假设在head2.h也include了head1.h，且在main.cpp里面也分别include了head1.h和head2.h再进行编译就会出现：</p><img src="/2019/06/18/C++进阶学习总结-(1.2)auto、头文件防卫/2.png"></li></ul><ul><li><strong>错误原因</strong>：出现了number1重复定义的错误，为啥呢？因为在执行main.cpp文件编译的时候已经对head1.h里面的内容进行了编译定义，但到了head2.h的文件的时候又include了head1.h<strong>意味着又重复定义了一次head1.h里面的内容</strong>从而造成head1.h里的number1重复定义的错误。</li></ul><ul><li><p><strong>如何解决？—-对头文件进行防卫式定义</strong></p></li><li><p>即对head1.h文件编辑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//head1.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HEAD1_H<span class="comment">//如果head1.h没有被定义那么就执行下面的内容</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HEAD1_H<span class="comment">//定义head1.h</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number1 = <span class="number">8</span>；</span><br><span class="line"></span><br><span class="line">#endif<span class="comment">//结束如果</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>当main.cpp执行编译操作的时候head1.h是没有定义的。所以#ifndef下面的内容将被执行即先定义head1.h文件。但到了include”head2.h”的时候发现head2.h里面也有include“head1.h”但此时head1.h已经被定义了，故#ifndef不成立下面的内容就没有被执行了，从而<strong>避免了头文件重复定义的情况</strong>。</li></ul><ul><li><strong>结论</strong>：所以以后定义头文件的时候都可以进行防卫式定义然后就可以<del><strong>随便include定义的头文件了</strong></del>避免这些错误了。</li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Auto&quot;&gt;&lt;a href=&quot;#Auto&quot; class=&quot;headerlink&quot; title=&quot;Auto&quot;&gt;&lt;/a&gt;Auto&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;auto：变量的自动类型推断。&lt;ul&gt;
&lt;li&gt;可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(1.1)命名空间</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/C++%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-(1.1)%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/C++进阶学习总结-(1.1)命名空间/</id>
    <published>2019-06-17T13:14:59.000Z</published>
    <updated>2019-06-19T16:29:16.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命名空间的基本概念简介"><a href="#命名空间的基本概念简介" class="headerlink" title="命名空间的基本概念简介"></a>命名空间的基本概念简介</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>命名空间就是为了防止名字冲突引入的一种机制。系统中可以定义多个命名空间，每个命名空间都有自己的名字，<strong>不可以同名</strong>。</li></ul><ul><li>可以把命名空间看成一个作业域，在这个命名空间定义的函数，跟你另外一个命名空间里定义的函数，即便同名，也互不影响。</li><li>命名空间定义：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fb</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//函数</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命名空间的定义可以不连续，甚至可以写在多个文件中，如果以为没有定义这个命名空间，那么相当于定义命名空间，如果已经定义了，那么就算打开这个命名空间并可以往里面添加新成员的声明；</li></ul><hr><h4 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h4><ul><li><p>假设同一个工程里面有两个project.cpp和project2.cpp文件并分别给两个程序员去编写，在编写过程中张三和李四都定义了同名、返回值相同、参数也相同的void Print()函数，在编译时将会出现：</p><p><strong>找到一个或多个多重定义的符号</strong></p><p><strong>void_cdecl Print(void)已在project2.obj中定义</strong>的错误</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/1.jpg"></li></ul><ul><li>如何去解决这种问题呢？分别去改函数名或许是个好方法，但是如果这样的情况多了起来难免就太麻烦了。这里就可以用<strong>命名空间</strong>来解决具体：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//project1.cpp</span></span><br><span class="line"><span class="keyword">namespace</span> ZhangSan &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这是张三的Print函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就解决了这种重名的问题。如果要调用张三的这个同名函数就可以用 <strong>命名空间名::实体名（函数名）</strong>的方法调用张三的Print函数 （其中<strong>“ : : “</strong>是<strong>作用域运算符</strong>）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ZhangSan::Print();<span class="comment">//张三的</span></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//李四的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况：</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/2.png"><ul><li><p>但是每次调用的时候都要用<strong>命名空间名::实体名（函数名）</strong>的方法岂不是也太麻烦了。</p><p>所以这里就要用上<strong>using</strong>关键字了，只要在头文件引入语句下面加入：</p><p><strong>using namespace ZhangSan</strong>就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"project2.h"</span><span class="comment">//张三命名空间定义所在的头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ZhangSan;<span class="comment">//使用的张三的命名空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Print();<span class="comment">//张三的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行情况:</p><img src="/2019/06/17/C++进阶学习总结-(1.1)命名空间/3.png"></li></ul><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;命名空间的基本概念简介&quot;&gt;&lt;a href=&quot;#命名空间的基本概念简介&quot; class=&quot;headerlink&quot; title=&quot;命名空间的基本概念简介&quot;&gt;&lt;/a&gt;命名空间的基本概念简介&lt;/h3&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.5)链表存储结构的算法</title>
    <link href="https://shuhaohwang.github.io/2019/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.5%EF%BC%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>https://shuhaohwang.github.io/2019/06/17/数据结构学习总结-（2.5）链表存储结构的算法/</id>
    <published>2019-06-17T02:36:43.000Z</published>
    <updated>2019-06-22T04:06:07.725Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表储存结构"><a href="#链表储存结构" class="headerlink" title="链表储存结构"></a>链表储存结构</h4><ul><li>链表（LinkedList）</li><li>定义: 每个元素用一个指针（以存储下一个数据的地址）相互串联起来为存储方式的物理存储结构</li><li>对应线性表操作：<ul><li>前插数据元素<ul><li>Insert_Front()</li></ul></li><li>后插数据元素<ul><li>Push_back()</li></ul></li><li>插入数据<ul><li>Insert_Element()</li></ul></li><li>删除数据<ul><li>Delete_Element()</li></ul></li><li>获得数据<ul><li>Get()</li></ul></li><li>设置数据<ul><li>Set()</li></ul></li><li>遍历链表<ul><li>Traverse()</li></ul></li><li>……</li></ul></li></ul><hr><h4 id="对应一些算法实现思路"><a href="#对应一些算法实现思路" class="headerlink" title="对应一些算法实现思路"></a>对应一些算法实现思路</h4><ul><li><p><strong><em>插入操作</em></strong>：</p><ul><li>思路：先通过移动指针获得要插入位置前一个元素的地址，然后创建一个新的元素空间让要插入的数据对其进行赋值，然后将前一个数据的next指针指向这个新空间的地址，而原来next指针指向的地址赋值给新空间的next指针</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong><em>删除操作</em></strong>：</p><ul><li>思路：根据要删除的位置的下标先让一个指针定位到这个位置的前一个元素。这时<strong>要先创建一个临时的指针指向将删除的元素的地址</strong>（此步目的是获得下一个元素的地址，因为删除后不能获得要删除元素next指针的地址），然后将待删除的元素的前一个元素的next指针等于这个临时指针的next指针，最后<strong>delete这个临时指针</strong>。</li></ul></li></ul><ul><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="链表存储结构代码实现情况："><a href="#链表存储结构代码实现情况：" class="headerlink" title="链表存储结构代码实现情况："></a>链表存储结构代码实现情况：</h4><ul><li><del>前插操作</del>（完成）<ul><li>bool InsertFront(T e)</li></ul></li><li><del>后插操作</del>（完成）<ul><li>bool push_back(T e)</li></ul></li><li><del>插入操作</del>（完成）<ul><li>bool InsertElement(int index, T e)</li></ul></li><li><del>删除操作</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>获得操作</del>（完成）<ul><li>bool Get(int index,T&amp; e)</li></ul></li><li><del>修改操作</del>（完成）<ul><li>bool Set(int index, T e)</li></ul></li><li><del>遍历操作</del>（完成）<ul><li>void Traverse(void(*fb)(T&amp; t))</li></ul></li></ul><hr><h5 id="代码详细"><a href="#代码详细" class="headerlink" title="代码详细"></a>代码详细</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T data;<span class="comment">//数据</span></span><br><span class="line">LNode* next;<span class="comment">//指向下一个数据的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LNode* head;<span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">LkList() &#123;</span><br><span class="line">head = <span class="keyword">new</span> LNode();</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!head)<span class="keyword">throw</span><span class="string">"No Memory"</span>;<span class="comment">//若没有new出来就抛出异常</span></span><br><span class="line"></span><br><span class="line">head-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得数据操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> index,T&amp; e)</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//这里的p指向的下一个元素的头指针</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;<span class="comment">//把p的指针往后一个元素头指针移动</span></span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">e = p-&gt;data;<span class="comment">//获得数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* p = head;<span class="comment">//这里的p是指向头结点的指针，目的是要从第一个数据开始往下算下标</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index<span class="number">-1</span>)<span class="comment">//定位到要插入元素位置的前一个元素（即：寻找前驱结点）</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">LNode* s = <span class="keyword">new</span> LNode();<span class="comment">//创建一个链表数据空间</span></span><br><span class="line">s-&gt;data = e;<span class="comment">//把要插入的数据放入这个空间</span></span><br><span class="line">s-&gt;next = p-&gt;next;<span class="comment">//这个新的空间的下一个指针地址是上一个元素的下一个元素地址</span></span><br><span class="line">p-&gt;next = s;<span class="comment">//上一个元素的下一个指针地址变为新空间的地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//定位到头结点</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//从第0个元素开始移动指针</span></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index - <span class="number">1</span>) &#123;<span class="comment">//找到要删除元素数据的前一个位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">LNode* q = p-&gt;next;<span class="comment">//用一个临时指针存储要删除数据元素的位置（目的为了获取待删除数据元素的下一个数据元素的位置）</span></span><br><span class="line">p-&gt;next = q-&gt;next;<span class="comment">//把前一个数据元素的下一个指针地址存储</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放临时指针（即：要删除数据元素）的空间</span></span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertFront</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();<span class="comment">//创建一个新数据空间</span></span><br><span class="line"><span class="keyword">if</span> (!q)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//对要插入的数据进行赋值到这个空间的data</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//避免第一个数据next指针出现野指针的问题</span></span><br><span class="line">q-&gt;next = head-&gt;next;<span class="comment">//与头结点相连</span></span><br><span class="line">head-&gt;next = q;<span class="comment">//这个next指针指向第二个数据的位置</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/*往后插入操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push_back</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始让指针指向最后一个数据元素的地址</span></span><br><span class="line">LNode* q = <span class="keyword">new</span> LNode();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next)<span class="comment">//如果p-&gt;next为空指针，意味着找到了最后一个数据元素的地址</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">q-&gt;data = e;<span class="comment">//进行data赋值</span></span><br><span class="line">q-&gt;next = <span class="number">0</span>;<span class="comment">//因为是后插，说明后面没有数据元素地址，让这个空间的next指针赋值为0 避免野指针问题</span></span><br><span class="line">p-&gt;next = q;<span class="comment">//原最后一个元素数据的next指向这个新插入的空间地址</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> index, T e)</span> </span>&#123;</span><br><span class="line">LNode* p = head;<span class="comment">//从头结点开始寻找要修改的位置</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p || j &gt; index)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;data = e;<span class="comment">//数据进行修改</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(<span class="keyword">void</span>(*fb)(T&amp; t))</span> </span>&#123;</span><br><span class="line">LNode* p = head-&gt;next;<span class="comment">//从头结点开始遍历每一个元素的data</span></span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">fb(p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(T&amp;t)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LkList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个A "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'A'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"前插了一个B "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertFront(<span class="string">'B'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"后插了一个C "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.push_back(<span class="string">'C'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了O "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'O'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在第4个位置插入了G "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">4</span>, <span class="string">'G'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除了第2位的元素 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">2</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"把第3位的数据修改成I"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Set(<span class="number">3</span>,<span class="string">'I'</span>); List.Traverse(Print); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"获得第4位的数据 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">List.Get(<span class="number">4</span>, ch);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–（本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表储存结构&quot;&gt;&lt;a href=&quot;#链表储存结构&quot; class=&quot;headerlink&quot; title=&quot;链表储存结构&quot;&gt;&lt;/a&gt;链表储存结构&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;链表（LinkedList）&lt;/li&gt;
&lt;li&gt;定义: 每个元素用一个指针（以存储下一个数据的地
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-(2.4)初识链表</title>
    <link href="https://shuhaohwang.github.io/2019/06/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.4%EF%BC%89%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/06/16/数据结构学习总结-（2.4）初识链表/</id>
    <published>2019-06-16T12:07:28.000Z</published>
    <updated>2019-06-22T04:06:01.314Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表基本概念"><a href="#链表基本概念" class="headerlink" title="链表基本概念"></a>链表基本概念</h4><ul><li>结点包括数据域和指针域。</li><li>链表是有n个结点链结成，第一个结点的存储位置叫做头指针，最后一个结点的指针为“空”。</li></ul><ul><li><strong>相较于顺序表存储结构的优点</strong>：<ol><li>不用定义时规定长度。</li><li>存储的元素个数不受限制。</li><li>插入和删除元素时，不用移动其他元素。</li></ol></li></ul><hr><h4 id="链表的头指针和头结点"><a href="#链表的头指针和头结点" class="headerlink" title="链表的头指针和头结点"></a>链表的头指针和头结点</h4><ul><li>基本概念<ul><li>头指针：链表中第一个结点的储存位置。</li><li>头结点：在单链表的第一个结点前附设的一个结点。</li></ul></li></ul><table><thead><tr><th align="center">头指针</th><th align="center">头结点</th></tr></thead><tbody><tr><td align="center">若链表有头结点，则是指向头结点的指针；若没有则是链表指向第一个结点的指针</td><td align="center">头结点是为了操作的<strong>统一和方便</strong>而设立的，放在第一个结点之前  <font color="red">其数据域一般无意义</font>（可以存储链表的长度）</td></tr><tr><td align="center">头指针具有表示作用，所以常常有头指针表示链表的名字</td><td align="center">有了头结点，在第一个结点前插入和删除第一个结点时，操作与其他结点的操作就统一了</td></tr><tr><td align="center">无论链表是否为空，头指针均不为空。头指针是链表的<strong>必要</strong>元素</td><td align="center"><font color="red">头结点不一定是链表的必须要素</font></td></tr></tbody></table><hr><h4 id="链表存储结构"><a href="#链表存储结构" class="headerlink" title="链表存储结构"></a>链表存储结构</h4><ul><li>链表存储结构的特点是如何将数据域与“指标”（指针域）配对，以及指示下一条数据的内存位置。</li><li>链表存储结构中，数据存储在内存中<strong>分散</strong>的位置。各个数据由一个指针相互连接<ul><li>一个数据中的指针域存放的是<strong>下一个</strong>数据的地址。</li></ul></li><li>由于数据储存在不同的位置，每一个数据只能通过指针域中的指针来访问</li></ul><ul><li><strong>删除</strong>：删除元素时只需将前一个数据的指针域指向要删除数据的下一个数据的地址即可，从而避免了顺序表存储结构多次的数据调换的麻烦。</li><li><strong>添加</strong>：添加只需把要添加的位置的前一个数据的指针指向新数据，再让新数据的“指标”指向后一个数据的地址即可。</li></ul><p>–（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表基本概念&quot;&gt;&lt;a href=&quot;#链表基本概念&quot; class=&quot;headerlink&quot; title=&quot;链表基本概念&quot;&gt;&lt;/a&gt;链表基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;结点包括数据域和指针域。&lt;/li&gt;
&lt;li&gt;链表是有n个结点链结成，第一个结点的存储位置叫做头指
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（2.3）顺序表存储结构代码、算法实现</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882.3%EF%BC%89%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%BB%A3%E7%A0%81%E3%80%81%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/数据结构学习总结-（2.3）顺序表存储结构代码、算法实现/</id>
    <published>2019-06-15T02:16:28.000Z</published>
    <updated>2019-06-22T04:05:54.849Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表储存结构"><a href="#顺序表储存结构" class="headerlink" title="顺序表储存结构"></a>顺序表储存结构</h3><ul><li>顺序表(SqList)</li><li>定义： 顺序表存储结构是一个以<strong>连续</strong>空间地址存储为方式的<em>物理结构</em></li><li>实现线性表相应操作：<ul><li>SqList（）                    初始化线性表：创建一个空的线性表List</li><li>SqList.InsertElement（index ， e） 在线性表List的index下标处插入元素e</li><li>SqList.DeleteElement（ index， *e) 删除线性表List中的第i个元素，并返回删除元素指针e</li><li>SqList.GetLength（）                               获得线性表的长度</li><li>SqList.DeleteAllElement（）                                  清空线性表</li><li>SqList.find（e）                  查找线性表中的元素e</li><li>………. </li></ul></li></ul><hr><h4 id="一些基础算法的实现思路"><a href="#一些基础算法的实现思路" class="headerlink" title="一些基础算法的实现思路"></a>一些基础算法的实现思路</h4><ul><li><p><strong><em>插入算法</em></strong>：</p><ul><li><p>思路：根据想要插入的下标为准，用循环各各数值往后移动（即：相互覆盖赋值）空出指定下标进行插入赋值。从最后一个元素开始往后赋值</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, Datas t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部往后覆盖赋值</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>删除算法</em></strong>：</p><ul><li><p>思路：根据要删除元素的下标为目标往前覆盖赋值。</p></li><li><p>具体实现：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong><em>扩容</em></strong>：</p><ul><li><p>思路：先判断是否是否满了，（即：用最大容量与实际长度相互比较如果相等那么就算满了），确定满容后先重新获得一个跟大的空间容量，然后把原来的线性表数组对其进行赋值。Delete原线性表数组，地址等于新扩容后的地址，完成扩容操作。</p></li><li><p>具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(length == capacity)<span class="comment">//判断使用扩容的时机</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="根据线性表用顺序存储结构实现的操作完成情况："><a href="#根据线性表用顺序存储结构实现的操作完成情况：" class="headerlink" title="根据线性表用顺序存储结构实现的操作完成情况："></a>根据线性表用顺序存储结构实现的操作完成情况：</h4><ul><li><del>增加元素</del>（完成）<ul><li>bool Push_back(T)</li></ul></li><li><del>查找元素</del>（完成）<ul><li>bool GetElement(int index,T&amp;c)</li></ul></li><li><del>扩容</del>（完成）<ul><li>bool realloc()</li></ul></li><li><del>删除元素</del>（完成）<ul><li>bool DeleteElement(int index)</li></ul></li><li><del>插入元素</del>(完成)<ul><li>bool InsertElement(int index, T t)</li></ul></li><li><del>清空元素</del>（完成）&lt;待完善修改&gt;<ul><li>bool DeleteAllElement()</li></ul></li></ul><hr><h5 id="代码详细："><a href="#代码详细：" class="headerlink" title="代码详细："></a>代码详细：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1 <span class="comment">//定义最大容量</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* datas; <span class="comment">//线性表</span></span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;<span class="comment">//实际容量</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//总容量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">SqList() &#123;</span><br><span class="line">capacity = MAX_SIZE;<span class="comment">//总容量等于最大容量（进行初始化）</span></span><br><span class="line">datas = <span class="keyword">new</span> T[capacity];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得总容量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找并取值操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElement</span><span class="params">(<span class="keyword">int</span> index, T&amp; c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">c = datas[index];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*增加元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push_back</span><span class="params">(T NewElem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datas[length] = NewElem;</span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*设置元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">datas[index] = t;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertElement</span><span class="params">(<span class="keyword">int</span> index, T t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">length++;<span class="comment">//因为要插入一个新的元素，故实际长度要加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (length == capacity)<span class="comment">//判断顺序表是否满了</span></span><br><span class="line">&#123;<span class="comment">//如果满了调用扩容操作</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">realloc</span>())<span class="comment">//如果扩容失败那么Push_back也失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; index; i--) &#123;<span class="comment">//先把后面的元素全部后退</span></span><br><span class="line">datas[i] = datas[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">datas[index] = t;<span class="comment">//在目标index位置插入新元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index&lt;<span class="number">0</span> || index&gt;length)<span class="comment">//判断下标是否输入正确</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">datas[i] = datas[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">length--;<span class="comment">//每删除一个length（实际长度）将减少</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//删除动作完成后返回true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*清空元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteAllElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">DeleteElement(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找元素操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(T e, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(datas[i] == e)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">/*扩容操作*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">realloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T* p = <span class="keyword">new</span> T[<span class="number">2</span> * capacity];<span class="comment">//最大容量扩大两倍</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"扩容成功！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;<span class="comment">//把原顺序表赋值到新顺序表</span></span><br><span class="line">p[i] = datas[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]datas;<span class="comment">//清空原线性表里的元素</span></span><br><span class="line">datas = p;<span class="comment">//把新扩容后线性表的地址赋给datas</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//避免临时指针p变为野指针</span></span><br><span class="line">capacity *= <span class="number">2</span>;<span class="comment">//总容量扩大</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//更换扩容操作完成后宣布扩容操作成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印顺序表操作</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//模版</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(SqList&lt;T&gt;&amp; L)</span> </span>&#123;</span><br><span class="line">T e;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.GetLength(); i++)</span><br><span class="line">&#123;</span><br><span class="line">L.GetElement(i, e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqList&lt;<span class="keyword">char</span>&gt; List;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!List.GetElement(<span class="number">1</span>, ch))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'A'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入B"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'B'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改下标为1的B为G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.SetElement(<span class="number">1</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入C"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'C'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入D"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'D'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标为2的位置插入O"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">2</span>, <span class="string">'O'</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"删除下标为1的G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteElement(<span class="number">1</span>); Print(List);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找M的下标为： "</span> &lt;&lt; List.find(<span class="string">'M'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"清空了所有元素"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.DeleteAllElement();</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"加入F"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.Push_back(<span class="string">'F'</span>); Print(List);</span><br><span class="line">     </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"寻找A的下标为： "</span> &lt;&lt; List.find(<span class="string">'A'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"在下标9位置插入G"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">List.InsertElement(<span class="number">9</span>, <span class="string">'G'</span>); Print(List);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>–(本文完)&lt;原创&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;顺序表储存结构&quot;&gt;&lt;a href=&quot;#顺序表储存结构&quot; class=&quot;headerlink&quot; title=&quot;顺序表储存结构&quot;&gt;&lt;/a&gt;顺序表储存结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;顺序表(SqList)&lt;/li&gt;
&lt;li&gt;定义： 顺序表存储结构是一个以&lt;strong&gt;
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>大学学习个人计划及路线规划</title>
    <link href="https://shuhaohwang.github.io/2019/06/15/%E5%A4%A7%E5%AD%A6%E5%AD%A6%E4%B9%A0%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92%E5%8F%8A%E8%B7%AF%E7%BA%BF%E8%A7%84%E5%88%92/"/>
    <id>https://shuhaohwang.github.io/2019/06/15/大学学习个人计划及路线规划/</id>
    <published>2019-06-15T00:42:00.000Z</published>
    <updated>2019-06-21T02:14:48.159Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password to read." />    <label for="pass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+bRrG6wMCcnyebh0yMLOLnDYTj+m438tWC6GDpb51iBnYBQSS+wGSxnLhZJDap00QNPBOmnYWbaXe5G6avxmwL5lSDltcPrJQpL0YqFxfqTinWWGOJS42IIYT9HENlk1Ts00Ue+zZhMOp1X7at41WySkJmYeJsG/F4E+owS49bXFiU++6pJ769S2+jIAAMpaUV8AcV/GkGctP1smtOMRLGiVb+FMsoxuz5gkvaILJZntZ8C/ekgpv6Lnpc1WaCA0I3xkjZE1DKfMT6pXLy+ZLBpXAJ/JLv8cliDe5pKM0MYBzy3r5x5HecBHS49IxPZwL0cXy7LVtFLLcUaC8zJ0Olo+T1pqrBZpGNPpSBqzwOvAlivzcGd3yn83iDdSFP/sTzrKHGHclsLzvRWpPkBS4o4Pvgef2PJU/rhFXIVzabg9vwt2ZIdt4RtKHSyAm6W4dnJak7rxlnoc4KCYIVYKJPtlEyXB0fJSnZM7o+ykmyjPT5JbtuyQuwLGopCW3x7Z/4WOaUlOYaRz21L7iyP+y0jCbz9WQ2X4KORFKOed3kuHiTRwoiJAreA0ZVVG7xNAW6zCO2SCtxhkTq1IzaS6c6Rv6j6ZDD3uSUnRJ1HWQa7W+dMb5FEehxS8z2QkN/Ym0htN36E6X7da5VFspPcwfFCpM4X6kDycC3Jm61dcMxlXdNpVPDO4l/WcEcPG+T1YD0HPRwS9PZ3IJdjaqgIVek1ZQos9qwHvmEI87OJfz9dsS8vMEiyKU7/y/FrGSzC1TTaIUBpEeXwZdUpVwWatGVuSsAfjuSi9TXehhVM0m32VELwqIElNvGafaWLgQCtT5XXqxQjAJR6LsVw8r2iumisx3mramPV+yXcndGcLbnjCXoHMst/Bp/jLsNsCZCO6ajfqUB+0aKmAPMPzAmPN49EBSL8BflOeUhufLJZKVUPkO1y+U276PxK3IWmMjHru3TKAacEz1IqYuyciusQR+8fE7Jq2wHB8hDwuCdESwikcyOcHGt/DPZ/OEPBmbYaiG6ABzFIG+b0A5GGcxzsIZbgQZhgZ0JC/1OMDiQvoiPsoxbjD+BFlMrbNxnlkPJFukGfyKwNIwzaPTkmNBC7R1HZ+C75J3z0lgyzhV+LwWO8RF66JYmLesxt2nVJV9f7UYYFZSNdtfz1W3bUe70kGgD3wpNLeYcV0JLMtQ8Ki9ZB3hv1HhmPF2VJQkTCRImB01P1bbRDrtkhdTovqQrtwNbm1cE0DijBDNJn/wohPfajR+u5BI/CAUYhEPS/cy7JXToPyyvW8AxSw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="个人随感" scheme="https://shuhaohwang.github.io/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="学习计划" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="目标" scheme="https://shuhaohwang.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
</feed>
