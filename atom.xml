<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>双子星Binaryؼ</title>
  
  <subtitle>相逐彼此-却永不能接触</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shuhaohwang.github.io/"/>
  <updated>2019-09-02T01:46:36.600Z</updated>
  <id>https://shuhaohwang.github.io/</id>
  
  <author>
    <name>ShuHaoHwang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++进阶学习总结-（2.9）移动构造函数、移动运算符</title>
    <link href="https://shuhaohwang.github.io/2019/09/02/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-9%EF%BC%89%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E7%A7%BB%E5%8A%A8%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://shuhaohwang.github.io/2019/09/02/C-进阶学习总结-（2-9）移动构造函数、移动运算符/</id>
    <published>2019-09-01T23:00:24.000Z</published>
    <updated>2019-09-02T01:46:36.600Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+gTtqLqhv5oM0f7hNWVf0q+JAPrPafbMSca396iM5BcpmfnGLMLpwwRHLjRE3H3xdk5sj+e4sw/tuFtloQ1KjLqGMBWyNXGtf8YfhIBbZ9Un7yS+cW0AKTFZvW+h7WZhi6M56SjguDcGXIfaxOFq2+trSHPI+6YHYEZolq6CuoFc0KS25WPYqqPaPc8jXrEJDCG5GIbifV+MuBrKkKGQCGfYYdLQBVC/Tlkk3VhVHvuReQDBlGwIbxPF0iK1jRGLsl6XLft5ogh1w9aFBAScD0KWGw9CldJq++Z3CbSNaxyliuqww7xcgU7/iMhaSkYIJQPEUDvuPag9OD+5DHI6mxbztI3Nwz+wYLztCUXXwTuGHmW+yTLZthx1kmlgOVtRFmgBs5ZynMZ23kH9U9YSP0MUoKMrZUiD+hRCv2hYbf2HgUVksFI5IyEQSRhhBxBh0OxlUoLVshlIH++8nM+LlgG4E92n0XB4A1vibKNEJFS8rAiTDJInxnKhH7YSLZuA5HGtsVZs7sTyK7JsBYkeBAOIti7kQPhN2xQxAprr1orylffSc4y41dkIpx9CH9yReOTOGs8J0q4L/F4Mx5kElzPlD9I1Tu2pIo13Ecr/WijszBH/70Q/RR5ZYbQaYLArtovxACieYOKoHYTX6OcSfU7ip/CjIaaHlw/4aIfWaixCUAYv5OI/swOpt9sMrrXMO12F8MUgr2Az5/wCif11I0CFzvMhVo2nk6W9wQB39BBRC4aDtZZJcqm/w8HNTSfE/roUsNDzJGCvTJCeJM6M4eKbJ5aJtPLffTSUR6J/rXpE/bgX+7AuGwBZNSOYAMwy6ETMG2BzUnW8bYGsF7CwzrfOrrXVXkZ3mh6aNvY/Ioe8vfpScXpT4alPf9pF0nrac9rqcG62ldwcfFuvdsl0jwcxDpnVgBHsvxC74W7CMTMHSzj+KAmbljPs0Hk2Wq64xHT5jpbiSV6HmnOaZAKv5Vg1USbFxumkxA45zo5Wz+H6dcDmHhxV6SgPrIdY6MUbGqx+Y9h22VrG8yKuW76MdZiEEY8f2zzjErr/cYPmxK5E9iDH62G2RgT8jVnpF31KlkTJ6vgJZJ/PHp0Qvjqf1sOXJMbvEBxTU9ko+JBAmdXKv3yAVkMMavoYG4xtFbvAHXnaonCRcpNCQxGLFS0KhDXuJgJ8Mi2yOt0Gd3Pa2T+AMF/nZ5l6f+kBB/RfeXZuEr5ME+QfnhVaTGy/WT++zz3CMs+M0iBZdCtLT4P7/VKxlSeZPjJUhQeDm//lmVQuMVpAkSSwF6fbJbgSh2SP3nz69IguSKAWBHcj1KSLWCTrcDBosZoJMyOZmUFaBFQ73bEXZUcm3OphqRp0bvLSX25iPdqZrH5IQr/ytwzfS+WzbbA2XmuWYUw5JXohQj8yFphv16yQ72AqwCvTwOjJCVzKmVom+zx1MSw2Hirt83fwW1BwAGVU6lPnRQxaVRDdkK3r7CJ0XatVwNfSeTURc7T5WbEAy0ILBaSzaOUzsS18ZhU7A9WOM0h8opS0Mh5HUpOq7sy5bNosRDX/4aVr/uAfbei+kycx6auqawL/5PK3C53sHs7JJsEvSlAhMGGVNebvgQQbr4qj43bhUzNjwGyOHYQK4D7KLA/kvO74PnJk1Vg8/1CjZD7wHRwBFtik5FrerG+1aer5QvmpwxtVKg42f/xy1cLCoQYeRE5Gkg9uyFSR7CUKRbUkwUgCGURzc80w0InBxeqEiFExbAZXlYcSmQxKQwDytzzFTQmUp/7Ynk3zm6hzXn781QSpavkGVZi0FbFLyXuKCAMrB/CBqWDePPadUbybrjANO+YH9EmlocRKyX5o9QsJMDskWyqF/kMSbxIoOrBQgi4Jqr3C987NZ2H0D2OLHbxSZOll/uiB4EFjjgbvtePJjl8CO46L44YWWC3ALYIlwnjO+LqXp//O2XfMvryt9rDKp7udfjVWIvNfbfu7fdYNRuLIJza/vV0nNXbyEUKoAgB9Ol8AhempX+7n8vlIg/WNqnNJ+V0HQmsXI51+p0j7GOc4UwbKVHRF5vn7EwgqTzk0cxd1D+GhxlSlAJUoylACyQQYg+Ljfxw8/OhXlj4ho0R24xkoqW1Qk4rAz7zSxgDAFJzZy9IAQvqkc0QVWnGUJBiYGeZ1DQ8kToNuWmLEZ1UQPLF0Ol1sIb+Xo6K1qgWFw9gWmGtbQUPPQnnZW/eteP4W+TLTji0Dx8boirrmruhYEuNKhzmx8SLPn3NHb2l4CUAklDKVysnLtkUa+R1UC4FzvoRKLhq5DF4X+bN3HsGWN6yPqhBZdx4LhriFdVYmQqyKkLhj5HLvqOB+EOxp+Ddi1yWxpkZPHuX50qd5KCXQbJTlTJdXQRpnKDwg/fqgEc633R54edAMafmPnl4ionWgJsslN5yKhDwi1+cFVpuD0wMepYRpwu3Qv+1GEfuyky1+y560/OR8opxxAVVsTGGHfhcOx7vPmZzhSAJXOku32w3qLvdqlDp0carO9SmjZul/DkJGnXKPwrkuNf8tzqWVwwyDXW+ugI9xPkT7ts/5O40STYq5aJu5Znb2kh6udcZkk2XXZ6rtfdjyF1boU7hK4rXQkDjz2XjDROMCXR0zq8CDPUV/566YHsL3CEQeWWUHLWN4JGUkP/j6DAXQazHxCHxEeMBZ9nx7YI3yJSmp1MeHKnFotsP6cgYXzrsFSXfCbLshoT2dYvmbSG4/vm8xU5Ga4pSkndyiY9lLre8jfGqDblhix3b6EuwSvE74ue+g+YK6ALLmZhtuFo9vdmXAZjimdZQQiMIFrUh9VGfXoE/sHuY9wQP7YvWHcSw7EgPjW00R/7pcz6yan0MlESfK0VvXy3cvxfDcjxABQLgw2Ycq/vN44jeUuFCZdUVNAGa8UMmtTA2yl6jksrNU6MWJdDzmyKY5+63eu9fveZ2TZ5zQXzNSA/q+2X2asEyssh+vx+PLW20Q7wd+dE0lRhxLkzCXy758w8304i2OZ3OaNXKLx4K6sTUqvUuR5yKv67JRiW7OURoDJeBGnHeUGnjLMYOSrRPYZ2dfDzJPMFOiSXRBwHJton0SznbnAdh5oZ4PitAkBZNra6hS2OVAAsWasKYXuY3+ylRprUKEorPlpVyaxhWsMPwcM43+hCalIqaRoYHtKmVTw3hvLf2dCyDziLj0WcRBj0BjirrhsO0+E4TWbVnnnEWq+iaijuFH35Iuq+9Xq9A2SbaerUd+Hmt0x5AwHbhktwNgulLeXLuQvOoHtbioq5cswUqhgp63IFcBdd3zQzdEWTHFvTlC6y5cJArSgk9UFl5prUZuduHYtBBdo5ex7K4z5Yra2WYcOw9wDo6jLAWPAOkGsjcBgcCZZhZz2TIGS91w1rHNBcD8cSSiKdhdohJc587AykyGwHf3IUq/64vwafHMlG2Zuo7GwTJjbdfPfd0CxKzv+qHOSAjLp2f6Bbe9+bFjggGK9Uzfc5zx7/5jbnIZYzb0Ra09XnR2brEb2OfKlc2I3X94RPcgAnKGb3JQa6vBleUCIYKSApWMtyPq5KjleuI+8lgmeLbRYaBP34L1bWN2aFWe8PgpWmXOVfiR57UVINFlQsbj6MBafkvJDGFc4ZAbJSrWCI95nOLtmRHr2duHn2H0NbEKD9Wi/vZEDj2VIdB8rGkNLx+zE9KDg7KT2mk0k2nWv4GuETLDDGMG3f4KvJN6Zdgq0oVGlpUsCZ5GvTF1S3ZUuNniMffAk0E4QO/YgNTIR1Z+vjrI1SPNF9yP0Jz+f9s0IILmfrU9DWxNygyxDjjAkSHqMnQPy/lx4NODmnE9pCBgeoCsbwveZF31cKXiD4VEuKwPvBWhhDmE0MqYSY2m2QlRSRim2j5owyRR5IhppPiKeddhKdYb/Drl2PKzGe+/3nuR8X3+nqEAI8+33GFrfRCXgpFMUdgLTcT7C6czg7ZJhussFprp2sy7zmpQpM1Gc8JGPNScDYL2EDroZSIgiFw3agQ4lxarLFhRf1MPPSjFrumMvxSOz2MFeDPyI8T/MGcmrd3HSPTMk/CNrjTA8wbNsVe1cPJWemtU+3aLBds6ERShVtG44pmRSC3ZX67IdIEIWXmyvTszgUrzJhChOFJ3wCsXKUaysX/5qp5tSWEH+uXtlQFTBMTCcm5e0bW7hK9Gay0siTa2nTWWUjerK4nCg80RWPQe+gXkyxMJeJXK0zVCRwaUY8unJ40p4u4byh85X9Cl8GHAJYif50OkbIsz4ul2X+/Xbq7jnLGkSK0cGHhVxmLLF/zuomQidN48FktbcWAe/yWRfu2AqRH/CaxT8PgkCxZLmzGKwrOkZ7Ioos5ABbo/cOO5lq/l3m8qIXjdeGzLnarWsfk5tMSbIouu+UB6txekFCeYca4MteiUnURkYDMbxbwAbWO2JEF9lqwFcD7Z8dftK19tBUmDYMfaQmjZtQkexDX4ngUzD5w48GNF2tFIYZptKlfCo/vbmx92llFU0J/h/nxkcjgDpyY992BlHaGseurtG7eHWmUEdU8Nvdn9w3mc+WWs1jlKWc23FmjjV8KYOfj4Gaq1gWLOyJZk+2vBMzCvTYKzPKb8aybNf5Tix08oxik7BNxD55U3s0vAt4A0Exre9xiFaIF0c3f1i6ZuiheUFvJRBSm7VNa/01nwVJ7D+zWE2QrumF+1GKzoqoRNEu0jTvcDVxKCljBmg6MHgv/peaIqzVUL8WuPQw3HHowXmgRJJ0wZS7XZNhgowA4rZgg2EqSDBfvHQ0/51bgoNRRQ/tjiYlZxhUVWGWrHfNzKw6bU4ztPVpTyIjwaDc/zPA11xCOFG/tswoUghf+oLSVEgYU9VLHxycKFU2+HHXcTTpmo+3scgeZ5xF4WyGlTkn3w3mfMJvdTdpAcXI6K+C47N+ylBUysbjvjuTLbovIy6jylhvizesdecKSm4o0Nx6gBAeZA1RRvUp708fjZBqTC5laAkQ2myCDNWpXzs6BTyTIbBsZYuJBcj5NbjjgETJYbWaxWLgo6fbWXrhNserqhuz+djIlkvB4LP5HnpDIJ0lR8gxWPUbcwiw8Ljfqwjvihk4dfFcXGhMMwfoTHpAb2ZXg4ZNf1GkrRMk0yaqNAFEKMOGaJsbUPwXyY1JggfV7hxAljVVtBAHKeKQQNTCSFPIWdtRGr3E53yug9qTl08ACJYi1OrwnSV6TynOY94hJ+NmeYA3e2mcNKVRhXd1pyMRHXaNXl840wrZqmKzySfMV8xscOWNo8NNAL7yf09AV9uEYHl+59egZ62uqdZVOx8orKDGMMZJfz81GeQwnUqzFbmCufswN7b0tSIe9jK2hQX22yorLI3OxAoMEvw7xJmFY/kx4umE4BGoElm5jSKta4Z0xNfWueEac1PaAW1el/slOIia84ll76tPRfAPXIL88j/Q6Wmf6kwXe9Blamu0jfe3BlyY37ykGJ2PFa3iSDyMBJeh0IH0jZYj/Z3sKACbXpANKTeLocL60nJo9q7iraXRFxifGl28oGIHhV8073vIBk7lWkKY7QRNQm/HtOXk/f/PSd/n3eSUhxGpxJLdSQxxaNDTZSXrZQ7CoZw9UHA4/GZyjMaxPSgjlT68GGuBEla9yNdSdPiD0dPxOWVqtTba/bZjN6qA9r7PMXzxObFxccBTPXnQznPeKjP8pxX/lxn0Mn9nGE84uT1FQh3EOPZ2395BRVvp3Bk9eCp0NpYMwT/zogxqOUMt15SKr+D7D8cmyrQKGTHiQRZBdFbsG4mxROPG5EYhqP0pnXGNtsdCVegfjX4/ixfONuS4BnGgXsP3v626tyjCc7uZRu4PGARAB+y+31TvriKGX+AuidKeyTvpuzQIcOXxsZl19pGnpanAfst5BJ0BptqGta4GLaQ6kz7N6sFvIdFkLTnftVz/vV+zob0huAiyJPxIvoejo3ZxXy+/UM7ijnk9GQC5CklfM7iBSdpkLCZhP/hQjdhNpZtI+Q10OpaNUEWYuud49csBetz37fPR5wTeyrCwDq4DjqVY4fKputIm7t2vfBLlOy7uEJ0DOwqWlvKI3WXP09zuAC02Yc+JYFIE5zfTysK+NSJs+KqHz6OTb7+lulBjqlFuqOHuwlwitt6FnvT658laYY4iD4W8abxJiPcSS9GnxUIcrk4IMX2izC908kesLLV/z1MlQk6pOQUEWgbTslapi5NSxHhvENqQlUuAj+za1vvzR+sa5suZ91GQEzqL2SwndJ/Lb7TBmoMqXFhSDeuKax0vRvaB5KMx/AgvTgHx5PwRYkLZfNyPo/M3w/akCpWg0chYg2Gw9nhkYYwrlWzUb6nq4MhYEvOpcE0FGYOqkOgq4TkKVrtArNFdZhGwYv0/IPSx5jN8QsNIWCZ9wEVaZO5FIyePiuMVvMAz/DqmSt1rkA0gELW9mfvUOVdHEslhticQgG9bGq/s0Ajcr+zHKoRwyIenm40tlwqFIP7WXgB187v4mE1pWAcUwpY56tEx5KKNXL4QHo/viT5bJeMAT40yl12OQh5L5okoTU85M2G95DSLPLNyEBPYh5Ng9vBQs6kglpQ3VUQpBvjhQT9zFY7/Xdpl+vcfdLzss0Jt6q9Ae2p4gqgRhBUAPuCxkjkYJQjjY49bAhUQm4eZlWSnLl8dTiAKWrIKJyklB8n81yhus6lawxoTCFU+h/UMTchFzmb1mbg1VSlJhVcvZyHuyzXTpRbr4BcRcpO4XpaWHmkwfw61MQQSpS7R3usirPRWWJpKTeQmjSHMFinErQvLi3v0Z8OTOt9hfSDu7yf12SwjvETBwjTsrGRqwR3jlU3jir21XVGOwyvAoZkZqaXxAtNDk+EnwxF+qUKIo0FOJxWb3gpaf6ShZ1GeNPUmXzVbk2Y8gBTevv6AnsmBUM33ovBJpdZhMx4O90PKq13syrYMUDLwjClhrSzfsoShP1/xa3QFnyghGVKt5vK0gRrYw39GuVBuROaW2hlQhQUNwk4eujCEkwnIc6hFY/b5SRkE/jUZ9+XMMxU/KV2AmzQwnBZktaRtqphLCbKRK5pWhpmpoRWkZhmq6ROt4z3iVnXugUMxb05Ab93Tw2ZbEDi+CaHjofsPLqlG2HwSXzrW47Mv92tNZSINqr9JyfrbJEymIdUaFZGymnHr0dCzC4BHs5oMqcO1RcpfNO5PxS6jAlGBvIOKKVRyP45JpIBum6U+GxKEphbjZYI6UO+MflQs7Cdz4yNSqIcIUkZmqnmKxeEaTXi/oFulL9WUUlxcqlxnsGlX+LrImLJRAcAxwiokGvy/KFLq9/ozSKFlNxqgSuX4CSrrmAsqAhgwqDf97OqUaLWFYZ6XTpZ5uYLTRpTboBsOawEbNCr8RVpdHeSW2tn+FpRsK7UjCcLwyuIhGGsBNDkQgUNkeTlGBuOn2/Nqf0GUF7ms8svZyMuYIMp+VFDiCYsfcdvcbEUj/kZSyqdVrKCoJvMU6KinXUy6EXZpWj5CTxdfPQ/JIn49dNWlhAS3M+apk2dtpsZkHFmWHfbF6e3MkVpIIrVcsLHnLZ5mbJCAdjXxfN21WjdOx4urUNDHWfTrWOWBXMiJohh8bqHnaR0JfLM6W3tjx+oxPFUYeUXSkXmaWB0B23iR3kfO9noJGsDmtb8yN2C4y3oMDxNM5WMDoqwESX5rKD2+nK7zCVPRH1d2Pp4oTEq8zYONdHKGE884FS4s+JBLNafOUnGsvq07r0zLNy6Qd+yauIlsqBFiYt26yXVTqUhA1jPutEKUb9aY6lmnaX2lu2/MSIMc6BZIV8enwcTvoi+XhZ4OXmNeZwL5apwMSGjs+kBPT16HHJVrhsqY53vT0bSooaazW4ycCmWevacb3dpY/5QszsgUOserwhb0kznTMYuSrozfoT7oXKHwyUHQueTv6uJSYP+nGe+mLd1GxuzXIhj5FDI9OvTktqf7V0KL1Vc7NacpweZoMPlZBWppro9OgU5pLRaj10l9CEjIJqXvUlPbKJ4MZyQMxQdksUASceru3R71mx44/pWyEJyA8AdIWsUEPl8Fqsx+5sBLVHt9rtK3nRW2ic/z2SRLQHzmdzDwDg6NmR1uUVDwplh7AQw7RIwyFPkW4l1o9wnjq7diGqikjJ1/9XiW10SJvSgwLLOl6Qq+IDbRc3H0HSSYiQZZUBNoT9JzWMietIH5SYxIOiQKktPQeGG3mxFvYvyISHsRKALYVPLE9Tp3+vjNsM6HPoIj91syYJKKvMd2gXR8HyUUCNhmpIqABk/d+Pc0hA5+NjjfMHXKxq5mFepKgEqvlodA3NlSiXV7cQXdNo3H/+r1tVgP5mxYm6drsNXAb7w2/iXEBkD9ucR0skC6UxEQO03rC7IfkHPeL92WmE8auSjMu7GM68iVh5UNz0G4zAsyuXp7ou8XXLqW1FMYammPH0c4tTSppNIKEZxO4ZgvRx4iWIQ5PeeYpmPomv4Vgcr9Kz+6Kfk/cFjZ/ddADACEruB+iJeJGDI+OYOST9m1fdmO9kV6Zix80OFQ5kpcwjVsPuh9omHs+o7wbhsEpjt95eZhUE+h4YH9dtBcGZhAmSmmVXxT4nA9lepkDqx/zWYOpi1uAWPdSydjBcMlzvqp972rOR1T0s5YK8fxvfntJf6lYuUh+MDl0isyAEObNfozklb3yNuB1pP8ksnwCVO7ix4CJdZPd5J8pta0hlQSAhIe91juJn+WZ7F1l/b2NKk2Rd4GmWDL6pjrus/dkzWSeDYzjrS/2/+lgIECs8aAekTo79VuPBjdhUqgBimwGEPCoU0m1dak8WybRfjLK6brHm9nU70BQNNSN/LLySOftA3tcvp4JG6obEhkdlnc81L1Xi6JKNK1nujn+Nq5to8n2j4QxlgbHZMh694P00ADPwxI6XgOTCw/HSV2IYkcwd13irWjnZ9HBU3USRvq8zqRXZu3NSqE67PJ8d9I2xiIJ4lfWoatQ0ezXqUYpnExCbcFoNyqc6KfjqOeQ4FKCAziRQPCVGqs1xYAQ2u0fSn4vKif6cYAtbmylRYSeY1Ey/IHpj8t1OjqNY8YBTqwnpxbi70UkUDRHGhnI4EnD+OeGI0jB5cE3+us2D+KzMJj+mVoNvif+4VLErsZ8SyPaaEtVxkShFNXu7ltiyqeGNx5bfdYWcDkAoh2stnN2TNUeS8sAhAiEILHL2Xdj68KjH4ePUPCplp0RzrUKEscvfEvJ8nH+waAqJ67iGWFEpWKuekzg9nDUok9kRBKPj+jKfKp13ZApdaiUgi4xTNs0dqIvd0nhPd9IRk8eWP3WO7q3O5twI2TNI09s+gQAnxTQ8PP9xZb7aCDjUtpFRRM/0SeQLc/m29kZXjFH2X9mIaxX3awbV0ndoadhyLuzOR0uiqTLkjBddfgsq5vAQpLEjrJ01UkxuRg3KSx3Q2UGd0vn5ujChw9OIGLbwS29JBzG5GUtJWgcxfQPvALjxlLRADxppsUTTfTBPPRlRixwxSybnbWf8r+CBudhDQ5AvMlkNcky1pnnvYAL2E5NCr0MzZNol7Ih7tUeXvHYdrRMdYGy2xI9hHifhFRwS0D5+sW/ihoLh+mITtyC/lVJvQg/KvIGpQQ5Os+TS8LGqu5mHUUTi1Dzug73uT23W/olMqmbbrRRmYMSDUi2gNOd8OtacI6PEaLPEOE64NVlwKMIVf9mRmp9hMozrKoKo7frDBKgR5bGhibdXZQHYztGzaxejqmSSotrkfq7Vg8hrpzZzNbonNw7V3e7I3gfWh62Nl+y8f7aSp4ZMGabCro95XcbiEoe00P0DbxWDNANzCXKKZ3BgeZMV2YjzIAoB3NCj+7hK0XJqsJlnZfI6SWVs+fwuI56Mmt1d5F7uV5B96HwkOnD/Vu2YZrjegZ1o73aa/zJGOkgoV2tizQl/l5PYc3kLVzA9GS63rH3N8RPRAqjF47V4O/ypQhbyMIKkgWFrgN9k2yRDd9KEGFYIkRHHhcQeN05GgrMZCET88PLR6d5SztIknIr/BaxBMiPdjzulzfFodod0+fxc2Fjg45pQ4GbvvQFpQhJnbZKqgk5c1BTSFEVJSRkLhf2We7bi28+PNt19WbAuuFxNYNfCUwM7ENbcTNP311XiOvWQEBfzAiN+NF8mPvqkTxZU9uDX6TszXq/fHBI1Ht/JFt3pBdq9bppBIzFwDh/AVyqd/a1Vpy1U6XUjVgO07aUnbWAEO56rwGE4d4noXoZIDnf9HucYLLAyquu57fBZly6XiL/haRx8xHFv7IQ5zsG38R+S2Lk1qVcch9V7eFUEefm7IIvjsc3TFxScpuhaMy0tVy93HJ4YNCFkAnRMN25UYWzzOtBSv74BQk/CHaSyqAv5dy3ziA+LDrVziXQXKIIONLxiZoKegYlvVSSQp1BwZJl+dyC9Lph5QI5NmFVHe1lpqenEkkGrxl+PqZyMvKN5VwjN1LNBSxpJ4BV3OvLuCavjg3MKangPsRdeNVbB324mTXszqlDZdOX4ZJO/RWL1N9aDzl24zivANiTmm87+IjiIF8DYzQQTLZ3oyr2mzNvw6IQuN37cXe0sA7fWuaWtfY6a4JTBasWZFeXCtlsnQ2Gj93zpVkUYRyWFoS6noCu6CT8tcawSthHpcaY3IXfnpEywikx9U66b8LnRR1Hk1j38mSGZ4SBiynGrihVhI1VN3+BeNfMssWHEhzd3pCXsqFI4xTXTMx37qipjvEmghxnevjS590xaIyhfWd9hXOtT/zfe73utSZMOj8kEkqTfhADS0djAiSti+o0D3/u5mQBWkEkanmlcrF/rw6B1lvDkmnB0ZP4ZDzS8ckaR2xW+HuUAjqj28oBEEHN3z+I71g4oBNz3O9VIM1LzksQnBANK2AWoNpM507N0+bGRxQRUCYlHM8DBXE4KiMuafCF32ABvTwy45rBm1dF8olbE+6LaiaTcS9YilxheuXO9jPaiPK3XxNBqMxegBMcrQkYQWrK5LKBZgdqDqmC8yWLbSfsxL3Ay1QmEmFifftfxoKwB4/vBSXEL/17Ox2Ho76yzUWjseEZzxx3bQW4E6PaDhuCsUx/MMZKFsMmC7sp/myqkb8CzoUEelr48Kgmv17rcriITWk2Ma5Dcr1OlWYMacFOTgxd3flGw9E1+985cSynROCdBwRcFOjpjIvPLFtY2AkKS12a9pqAsNC0vdiYQ+tc4FFbPAhWPak9zcdWsv2aXptg6DL4ngh1LT+v+haGyzvqZJr8zOp/+dcgIRri2sxcU01EOjJAs/7EqbfskGtIUcYuNtERUG4D4TUbvApNdLkHR17WGAWTpamZm4fOcqXnLKOO1ZUEOBc8pQ6Boo22tGlcyqHIaOwp/B/Ix0E4nR1I+AnEkGj0nNZWPu8Ja82sf0Eq91ufS4vPCpi5q1OwrVnJokR32DelsUuQ1g/hKoC38NbYj0Q6LTwGIJJvpmLLK5Kd6830QIu0taBMJIkKfijmycIe2/d7mukW7EH3XHuZQY0iV6X1CafN1wbGJBAZ0tLqBtxb6kwYeQzQB5JC/2GgMGWnoSCQHTvBBs/CN8a6/KfzLCLU9He9wPXBg6jq7hlTTnl5U3lBz8+mo4N/sjZeW476/DGTOS6uv/fALsSTTjViKQ+nrEdVO6rzy0u4yycho4XPk+g+ivArqnjIqfCPR8ChU5g99qSrJjvrWJ+dA3zDG+3yN5rXbHRJTtdABKYbdn5+kKozAnwcBJ8xe0C9AVJ9ay5FLpH7jLlV0g83w0AJn0amd5lXrKn9H+7nECLz1xSPQ7rxIoaPlhnDBzTp1iSO/nf3p7K2WVZfR7J0K9jtmweP2DTbfByKqBWU2gj9ExVBFuM3rptkGzFf/jCbK9wo8m4krhsdjKnP/HbgyuwjGB53X86mnKd+urjEnWxBaPDPE2iFgctBoNS8fq2tx0juHcHT/uttsKvMKRuYMBLN9T9ekf4XBlNkV0ZwiX+nh1RRWvojUAVkkKL4QSsta7O7RtEYkAbME1rLHKvswcX4qrBAI/pwG3sVzosr1l/BF7Ph+NrdKuVw0NV+0tcNnK/MukudKfAQjI7AxqmqRsAjmtwsVA9OunDuqbt4emD1MOzDIUnmedF5dAQB4izVY3o03cnTquKvFONA1Itbj7qaEbO4uKUDqC6hhokIkRKinq3MedwY9KbR4zL8IOKMnxiLtBWjgkQV4P758JaZgBvdI6nsq0Tu45zfQr+R61cgxA6GUJf5cKhZir7AIDX++0VVPDLzAhkVxQueKtdha6ZwzQByPPThzmkoZ8Xt7OWjOnhtUIpg5wHkSr6ioxfAtolcH46nl3NZsVJo2MxhEPMfqce8/WXhIRwvizkWKxznwLMAxUiBPEFqD/8bbEsntnur1tDgL3o8XvFkL9UqcjiUOhntg/jjuAgi+5FLfwq0x7SZYC2gb1mGk2MxX3/dcljlG7bHhqFayW4iNFAGq2Jr8LcuSXeLvVu7uyvaFNKcLgvlXGGXi1rKsRwK+bd0fFLc+D5qPkQ98sEDDlErXaHOm0wKwzBNV4b/cpVxNS5QpCMT1B6IEIb9UQK1Bc54bWSaHOaTTYks/XHqj9QQOAu7zQRRcOtDgbA+t3eD3SLBB6HTYzep8atCLDztSCjkIPR+0xRc1x4qmEvivoA4bB+99MkgpJyWCEVntX666hN0DRJFd4LlsiegYh8pKogy1IQbtQigiLLhesk5GjZ13z2+B2CAk8gleKBrT4Lhq8dE1AejAlUj+z40h9/ojpbGd5ioPO1sl4MtgwbBIZyIhgKEuUgV5Jk4+1Mq72AQrGbTYR8cKdvvDCHJinQPQglMqkhr5Jw4zMOmJsqZ0CuZFAlAGnCHHksolfPXNWTrxqZwwwYHRN+eX+LbENWKRHC45t2NR/hmfZXquNhYoXP/wz8SBYV60fSCU6m36ri0AyFjzxn1qeRA/fBtFweNInzfpUhQHPh1VJALjlIAX4orXQeHSOShqe6rcWLOTyk0ozSAILd8oBLbhy9+O+DfeCtPlalU71T+driz7emhhbjtW8MlZsfGgxkCD5VzeA6PK0yEXE0Cge8geTriP6XNhd9ALz7/043NGNtsee8wsWvm/NA4m+gU11PwT18UudVyrxnX1h2eeM1onDNV2Uki/ErSOn5NRJh3VZ8SWbadqfl1XxFMaGDWen97gstabgKCIwxOd9Kuyrh3YWA/RbHXMwgNAwnQ9hK0n+IwUiiYNEdozw+jYUvT2p5nwP8Yr3UBuQseMKMtvAL7ZlbwI55CokMXbs/EtrmHTl83LdHdyIe/uBWjqNo9T56Er8oyiEHGHTPqWTwC87rX+ObceIjzeSLJm2a/U519IkITIGZEtXp2G2V7lUrTUEFQFYN5QKrICmPf7vG+UbS2nniYFVvKcmtPXPU/ZuZRMwH9Xgc/q5TF9O+tyDveIxq4sNXebosAxK2hD/V1T0nPLui/Ae+sZQn/fY2uhPs/DwuPPwcJaOo/e0dQWj/h095gsdCKmciKQOWuaES2e0ccysgadIe9wvLgpgRtR/D7BXoGyXnFMUJVrff39tp2Y1nV76Yt10/Dqwt64iD4DH5DsIbmaBsFdAF8hHqXmiqv+m3VSc5dWtF7dUFkt/l06ZYxL2Y9bvnQXWCgDAZTEmBw7RwCTnREgToUAEOT2lAoefgmr5J6FEPhnZZi5H8GUCSuilpPToM/7Lh5eU8aoYyFwOdC15vxkqt6nf+aAq0ziZ1u7EvOvR1YjOZvrzcO0+uGNEl3cc8PtbLw5XXX5tG2QLAE8Iv0FRGXXGQnagINRkMFc9JmMBsh3eJDSvIbYxXefdqZZTLsqFK9GAgj6tdygpOXTfTwGkIjmJ9iM4g6YTPh8VrgujmEgozqONVarsU/FXnbhGMW7Lsjqc3Y4Su994zGPv6KxipkFGQecWijzCKkvQ4J5Q6tIG5H5Hh8+C5tGQU4z5Afj2WSqeCQLlpLJMWww34IqRpTnNSYY1KSkAYvUwCqGFHyCWBPadrh60JM6DFKbzR4kVPF6CFtT7zi3wA8H01/NJS4VXYSeQ5XNi5I8KPsIP0Q1iEq9nsEcV6see4ZzIYbsgvwpD7CwGLIbaBwn95kgfJhb7OnV9FyWY+iO1KzgqllwwFlo8Z3jnr+K0s5BYoHVexO5zeiu4wmz3Y5x7AA01m8LlojQNfBkfRfl4/exBW7wTM3of/3xSm60XoT61GQmHd1o7QnBLztOPrapdm1e8v3eG/4AExqF5YJho/NTzx7L7sfdyhsKF6boZ/CwNIYDMPbOvAzPXRh9j90+8HQimsOhTjb5ovoMAnCGipC719f79OO+l/fL4V+m7V5HtsSY06L+SfL4gyiYFF9etRdlKnWbAYumBNezNLIHMGUzcqcwVVY9bV/UzAgXfrwJ0zD7KQcMLJTczL2BtyFoZMcbxDGBNobV9rWRhaou4hNa1pdiUTeHRDApqVO4Eqc3vNz/Pw56E0ATrBnzAZU8+RaPP5HlDqnUQaFHIkFWje/CDq8bJ4QLh2v9iTUCySPzsZlD4jZGI1kzhHLN1C6GGcXGR2kO4rZPRxJemD2cx3Y3z4Vj/LJlEb0kp++1iKRLvSV+ZrrCcZGDAwODcozXVcFPQVRFaqqvNq1sKnMuVgFvcQMx6WBx1pfck1m0Ff51bYvw8OROqU4PT/KBK0+O7gM8ZaGd8ZIHrQ6RWzQxhdvBZMHPnwU0/UzhtBZuIgrp1l5eXc428pzn0gqTQrB//ZjBb3N2jObNmMvvUH6uUn5MHfx2lYxN36Mz7fjmZMQ1cOHceM/GEOP1fK07MHeXya9mrtt88WDhgKpvHGyVYCj7f1/4KX3TvHcJWU23A1+zIJ4lAuszDk3ZKxa7Kj2WUK6VI6bVHdU1DTKqZGYmge58m2/pV/em4RxUbuehv9c9dJSdgc8bE1UuONXFH2eP5vcxw8D8PEzIIUnEJ1kuv+XlZZwJDlPRsNDEcM2KqMe2Yfq+fbKQwrNlSK96nKZ8qpWUja3ttFmJHOGEW27OB+NlnHcgpbiO+wjvWAYqWvXKmsgY9cVxiYEQOT34D358ZbQGXZOPNuREBLt60nB8lcRz0X+M/PuZ7UYhUZZZrU/podFA47Jlpwq5lQN3Mjtr1vFj4iKgl9L/2dOgAxcVnx9qy0tcb/87n+S0PhmeKBB5ovycH5xvVBLtk7G9Hxzoavbw32UIA3VMofzSWrXm+3aMDvt3vAlW8gJnmpGfPtXR+jDVhy/TKPK0oNvwtdLh4L0XJPfPEK9DpFYS/PkqBipJh1dbtUzdGYPwYK4LVar9hDefs6WfN/e2gSWTxay7y4KmBiYIBBI+ZwvT4rceHBbKJYKmTdsZznym4qTha7XvSs4k4LrzP/9bWp00jpblbqTd7F5RMCr4UO0SDNsylxSpxaOBR3U1nDGdIE2Kv5Yv+C6qZFnay8nJW1MhwhGy7YYlhJwppMAZcxjGAZuWJ1wgkE4QKE8+fDAYGUcsAvPDYYJHbvx1L0bKfsJdjNgwv7qljMfm0JQFR9tJGGQc9U9VIYxJf9rb5SLBr+K+YDWkF4YQja+jPIZUy2W48Iua79i8i1rXxTvW4nAIs0yJ3+uleMhmkks2iPrX1y3fRBMRhD6wrDPpAlLWUWesLrDaiYqfdYzMLi8lz99+qpwrXUNMyDnYx1/i5Nau3eMEpIVypA0729rBhjb8Ki4VuMYOOqLJ99zD8KeTueDfD7cXR4EV2V3x8Oz4RMpFnbSv0Awl6k0F6ktNSb1zIFp8aIoXIKdJoTUUdopGs9U+h/YdbJtH22IcbAsjyPj9rXMJmWZT5/q3BrGuW9PnjWS6ZnWPB2MNjupCKixrHNeezQW4VH6UUcwR2joUZ7MkwrA8H5bi1NDOVpqspxC25kbfTX1ZMW2NoWEtJiDpCnUf2ejwjW/iXjwKgCYGn4TdEqkAyLFLKyVTe1RP1P/FSO2VJc+j/8HLLTe4+d2aTVszZysvPna4n67zJqwa1dflI6eRQ5Voo0Kwf9gX/aVWDmgY4857kpI0r0S24MZi0uXCgC7aIaVHCq4svRN0DMu2uZ14g3YpwqpYgSFNlNKOYzmVhbVPG/2yU4l/N+iqIuwaVWVpOkj2DGE3X/IpHjHESUf50yyKXM8wqb/z+umJUaMae59CDlz6lZLwmwW/uiZRizlplrTu0DNYFTxtUDOojzzwNCm8yXgG4bldqnbK+6/f0AncusjE5vHCeqP17h6EhLCMyRdlAwWKc38hP4YvJnOOBNcBJsSIVSG9OUjvyhu6Gb4tMVFlAV6k9PjV5HMYnULGVMPSc0b9iCYDbitvsDkrvNQ46yAy4a/9uAJucOs4ZZMqRc+t+n52DQ4yzMf2Q0bGvft+8O0AhOqfrmzJe1sTtGnej7ZwGhum929LsccUTCmtyNKthUNts0z5wW53UpauCd27OY0dn48DwZ8Qn8RA/9l0XQ4UlP7eMl5Lfi8CKsH0dIZ7xTxKunfgmDXC1zh8oQOvxSXnIXm0lpKRdNyoSB/IgiUs/UVy9uR+6wS3zQjPc9Yup00Ev+lgiA/OHcbCoO8uB+MDbMMowBsArpc+Bf/W/rCSdR3lN3DaYPS8FCaYroWc51VRx6u4h+e3XcJklJK2UZAYUXIg36vArJ2pUqJGU13R18vgb+lmlC/VPDNOkvMr2DxyTpuFb3Td2W93ULaa1PMeDvd606pgA2ocEGUQFQKyRMJt7IpnjhYTnMEzbJ3J96LNpKvpwtW1bFBHqbfUdg+wu25qR76X/lxJ7jIeOj9RMLxH66DAUoAgIMm54bAl1CKULy2E3+UQKWushR5j5wh3w0aVAoj/C9GFM5iRGkp4V/MzPI85Qx+EvqgYS8XOJmaWAjMVcb5s60fuvncx7r5f3c3SIq/xu66WpUehgzS7iSaz1q9c+j/V877VVwqaXqDITodYDwulq0qenTpQLYf6lO1puKTSvDGhNzCFitiE4gcwcwh844WguqRC8v/j9oszcxpONqIYz4oVoQJzctXTMBhwVj4v6vD1voG6eoS27NKp5wbzwfHPH5YanvhyW4x1AM0PLaXJJSIiwsMHRWsgAFCd0DPPA2qzTixJWTKgjtULIp9dT9BbCUfqbhxfoCHyWphoC55wranMFC02mHzOB9jbZ+tCG8UqcPFzIsFq39I5eUnDTYAz/6hIw7vwm/5CdL2hM50Ni4QK2Fyljr9V1bZjd7zoGA4pa/0w/ryI0EeUKwvtgZ0W2FP5JVFl+9oAHiWVe0FZUHGXc3ZoxpPC3dn9lZHfFWpLI8foxFvhVTFYG534/oLnLoTNZ6KwuX855PPQUA2mMkmKy79sPzFSps6ey2BUJ8H3x9wMJMEYHVPSrgeNvg/nODPlSrVCG22irC0hfMmepgVopDDD0qO7EFSsnUt/DDP1GwBUx2f2z8A5GVbS65EP3rfvbgxt6gx4REFR9w4qJM4VGLtRVHFgpQy2v1kg7IU9ZeiF4vSe41BcVPv5KaSeF7CnO5i87e6FNPyQ4Gcj9VpRpiI4qtr49pBTDNklYhMw4+UAVYZFHqic8kPx22fLAtF0oYxYIVyqo8xXFZJSymZw0SXzpe0ih1/OWvOhbNegFpXeI3/c3JQ/zYTCn6GCG1BPLNSHVNLwKoP+qfkWOV4WeVoY808hEjiwYjmE76HF3UeYCPQsZJEEai+DxbOUpYjITgDV4Zicm3PxM/74qnoGW/oHG9Mj0vcc+x6IEaezDIkSuEjXheVHFt9ESAYzZWUqU8EQ6nJYbl+5Ifuler1DY+QJkks4IJz2WLkiFJbfov9aw92MINz7+KFlDz7ENAdE7GRmnytYFgzq90+J4JkxQdVOsC+nhREHSF1j5loCvhQ81kChgoT8JqricxFqFEeu9vdYMa+QKW6gWPGrvEjPIr59aDZINgydqunv6DFvumkygrE08pbHLxKvKq7BYf2FeqJEvpjSZBwqbT7cefFNCNTib2MzZ4PI4wT0aRLw3rHQ//vZKGUpcOT6yZ1DnTXrU1b8lWy3PJwHZr9b87CewJjEwQ0KDAaN33hyY5q24XEwrB0RElMgkb7wGZTWJ9XkG4T5bbImnd5QHe26W44TZVvlLfSUq9b6nS7KSiEozY1XOqzKHGtWVvXanOqAY1WdRIBg5SoSXpACcEGzwHXcYxT3W4T8R8bHsqmkTrAhUfMdvn4TU1TeDuE8qt+t5NbNMv2r6C7V9la/wqYbeD3M0k0V9CCcArfpK/Bqk2U1HvyThnduUZPapSldRw2Tx78H+whWZFsbYF6xSDZhA0QwGpfW/UMe3orcw5At+m86fJ4PfiZggKih82X2ZnkrSV6FgABFFxxey1rRh5T+jp3VVecwCtWk/bL97F9Nau0G3ePgjlmDlVxrX5y4SnNzRKKMGV2GSXq65nNLfklonHtNl3hT6L4crcQBn9Y0lqcF1HQIOwrbqnY6id4IZ4OzVfSAwAi4E2N+lQ96nebvc3aTO3pTX+MwDLvafL9aS6HXBD07I/bnzMNPrTcHvDPPEhrbL3DBrPPCbl9Ew/hZNUcGhSKChgf0Wuun/9GlyVTb7S9Myj+BdHHFvl9m/FrrCwMLtYc7TUykTBoDJZWhZhACM1sTYGgk4kY3g6eCjqZtfz77GnJNXLugqj8w9Fu8bpwG6in5GFUm32MBtFQ9BAxZi4WooC4co2ZCxeVCS4jegb357lEtSWziaTiqPsEAh0lAO9fMZDicL5JzkgRzJXubOBi18cvl2Dr+0dCI+AoeVvfO0ZwQiixbDwkP18u6EOimuLUKoBhqS/WS9Dn7Jg0CJbb2LOUxF232xpFSoXLSf1BaCtVdhn4z+N9UxmyPaDDqBeoh8tIJjwc09vQcfz7Z5tqjTumFH29xU+WRTiHAJM+XL1kNOxxoD7yQUH8Xhpv9aLCRpPINQiYKuv3vyhRYvCDJ1JqhuDDYHTKO9IsbdBAR6PZxK4IYki0D0xCQNf2V4tftFByLu1Js/Y3a13KbPZX//EUqWuccSplPfBqWfnMkDAFiRTQ36fYJEjxeTvW71eYepWE0YdcotBzL1/inxyR5RjzgXyaa8iZGGhVK82i3rkVJ3dyp5NetIA3v30KzhM2Ra+SanHgqKN6G5BbgPpcNkcPMvJAFJ+lwVGtiU+GIuSIngOwAa6751xEDc+gCwpu10TAIYZeoPZSyH6NOiQF5o0QfEN4HZtY7eNLsiPUaNKhW8UTLNNRZSx4mrXxHqtDAuc/XMVws/Pi6tdH3e5rXZEbR+PvI5N3dVYfmUsLkdlVIFQM0r2dZH2zy+ifazxWmRxaN85y3NuJj6mI65soG5Ll+e7kh2fljv1L3gzwkR+NzXFe/yuSuvT8lRpFz5STL8KY1z/V98hVD9ISqbI0Q14C2GhFpsuUKtCxQrY/5+pgCkJq80UwMXwJlD5efeOttyXJrbopPGXwBu4ItMIy57Jd4An8tok9n4c5H9GeUTWvPtNV0O/IxLBzhMLPYEt0B0mX6Aw677u5HBS+3Z7TLiEq22CsTC/1JA9yqT+vcTCo4+JBP3k7sLMQR4XVt970KChgGoOt876F4oN8e00jsHaeQC3fM8loZByJrFFpgnE5ucnZxtGwcm/SCUhefez7YxoOzqsW6KUvnk43Na3d1OPdmxEufTEiLvo5erXUvtOCYkv2qMHXPHisD+jRSTIrSRtgl+7udmLIQvqHUeXgcKokleTKvxieEo0hX/cIuj7+tsy4r+QX5kvte4AmJHwsCMTk7IlwMa2yvbtczLCXRWQDNXLNqIF9GaaxhPR94ixZIeux58u0J3rjyj9J0V0/HCcw7KrxmgI55sDsihB31MCbf8fL4iFp9SMJpdA4rAJSpUxtGhbAVxqi4iz1Nyp4EETc6XYOYuDDjeY+tt2NkjND3lPtSgJSYngAXa2AGb1VBwqbOicyCZy4x1cD4ub/HOTtMrW1rgfhw1g1fQ+AyLcxOMoyYN93ywGnwSOba8vLxmhYPF8W05lgilqVN9qSl8RPVVDsta+IRHwFLffDjfRhY2omLO56E8cLZ8WGTJYMz5t9CAimui7oS9SG6rG5wU5tcJGacInONi55ilRbamL4aUWmXsFsiLqO1sg1PkDblA96LVdcKiqffk7LiXsjR+K5FCuZgj8vH1nxeNwHWePhd/FSMeUKFIwrmJfXBOUXUG3CXOwiz8mQxYSjP/3qz+OMRHI2ezX/u/eubEGnxwDsxEGxfTHVBHjiTRzLIENXQ/F63AGScxhAObc4jcmzWPlXQO4M7ffJ+nFvy2avJsSEx2Dd0W0IubyqyfJqgOmRz056mxTSbZGwTWP4gauBCYTJsk6jXiNT96HYu8j+Xl0vHHnQz+7SKUvHGKh0Ep5tFtynQIapipngQ/AMUAWqFsI/RjDLy23nj66qhYC43ybipJ+XGeynTJjFG4Vdjb4RYYkCrTSqQuKYiI1Bd922yxt5BfxM/ZxFWasawo0fbr4R8u9w1GUMfajo8/t2We5Gvyx73lXXMTtFj8ti4B+2VwnblIxyap2oQbsJl0JkiucMoy4kIvs6bA8NBBSn3mgU1Y20gsfPV/g4IyZ+b/Ik23p310ES0UVS/bVqRx/vzPOTD0kZRCUhD3Hjo6XHqJtzbGpiVJYa/Aic8NeKHnUTc7WXYHHsp5n7VQ3HuYT/cp3hGmfsKfd/T0rHA7OCRgF6w9jSmvMLpj+SFoQ0ZRKgImWhd27GVur2gQRMDJlvwVXRk/9Rpy0SludYNhVAfy90Gs2NPZtmFZE3vfZP9IkBIBb3CQZsCypRI3D9+HK3CvjIf/9FsplMWe4CIdgu285N6gRgbuEj1v7UVdLKKS62eMunBeefZwGSh31jFmNcIULF1588T8vlmkXnrBw9xn36m9GjG10xEPoXP1v/KOkGLZvYPyFvobrCF3qUVBrPSi7NuVOQs6fG2GDeXqaj+gvI/RvxhyuTZxnCK/6WDLs/8NSsqYoLeV0wclsjfeWSe2aooqiFPUEPtTqiR2abEK2rSsLy0lAhzunO1C7BPpNO9oNIuDETEVt0CxHUXUT68MPCj1fyIgnn5D9RmQI40Ec29AFNF4uU9Dp0pEyXQ/M7aoHI7AXFCi3oolzpJ6DrbE3KEu/xqpHhglxDrTAZwJBEpmwgS5APf4zjZWArt937z34wamk2QP87ejR3z7WThE0WqgEFS/OQQfLsXmvUZgwPxIE4EDlP5YKCYauyVohwxJRoL7r3KJuCJZJd/tnL4H4JYTeYzp9AOJcZtlGU4wIujFpSyOW9uSrVzG1h1yw6A7M9tNM1mDWSY6QJhuLQMtkjz1xoV2WITDQP0im8m+k2YGmZPwoqHLJQ6tJa00j5/ZH5CGUbQc7j5j/5yABafIaOe8NXqUbkSJrH39CCr23XAdVFXW9124OO+ppFMmcoAArdH3JLzVxG59ek3mvxpQdlg1IfhnWffKHjivhtgzC5QJhbaRrgS7jH9xIN1OHpz0cuQHiYzFeGwN5k75YuCZn/W2B/7PznbsB9MxVEFsVIl9lsuksU/0lNenn91cM3YbE9oQKYi3wJCqpuhtWti8SU4lQVAp6lHdu5MDAmC52q64S6mp02HUkqbyAQcakSFxwYtyasUCVtvqZA6wPdwDhTZnctkw/gR/UoRJvqVQMPtzubta2nOj0D6uOydreD4zBFIC0nQa6onlDWv2fyjH02ZtOY7zbDT2X83fgw25r/tw//f4rWVeLaAOAyL81r8Pn8trqmnUcAB66R4fi9uIQodLs5zNRfYZfsaHr/h1CW5VvwjoB2YkdfWcxhsjRwttGhW9foE6g1CIfCgzj29DFzIVuOarYE2TfKvbCcTo2jxQGDPaSglHGD4Z2OP5TEDkoWD6godSGmrBsSYZi5WcH0nU9QMLUAezy2adJJjuvXK1/EwXMHDEltgAxrc4Yk+864cSQtJ6wP6pRCYkHmB0I6uxsYH+7Sk9wcIvLNE9Er1j5hRuRLQpXP1Xpl7bqYOAKjMv1yrO9J/tmmy0Xth+9XNhSbi1m7KzisC7fHnyKXUAgRcYCW5HUqJBgB++oofywjhGlbXBN1x6M/fAx8LHaYhKhXVpStngA0BtFMPj89YaFjxdU6WGOjpge1Y2YdDOIhkonvRAN4HWU0Ko9HsHpX9UY/4g+PTcItKB++ztZ/DM1mXEq1wht1FEt2oM+2Jgn/tgSSWyVSEiM5dqvMwkXdd+KWKm/0I+bN4QcmAj+kl4B0VGk4Pl3c6ca5HURrIpw0xdkSsbDZISKZpRTk9y7+gyAbHrHHDvuvq9YNPYagVJscxDvFvQZUQG8gFzakjeKAZfzbGsSP9x9fEdwZyWB3SnTCW/mWg+hYybYyScf6TevRjMf6QA09IMle/Zin5EpCl/YqNTIYlSjWKg1qtPxFe/brycjmO6CYj3v0a+4f7k9COUcKKm8Kk0pi8tOBGZMuWq2SbGd+kIp+4tEmmnBXlLPWJzWMtXGzjI9tKbVw+KGvYiNtL4XYY/Ck54JfrAsm+HKKdVhhOUzkSYsi/wifXORgbXjdKPV1Vp6Xz7Mdm16MHs2wPkJ2IJbVDmioEBY8ho+CKCXBdq3g1iUimRA+WYvCIjsZwFHndukvpoJ4QcS6hXNSgK7LfA+BiQdxodYZZG4tfuo+Wn+BP9GoaWtQ/c3JXPLV/hmr99rp0UFIVo3qovILH2TR0bEV7znYEoQ09lVGIzD5TFj5sjO3zi8Fzx9rxw5bX0woikYakYits3F+DTqad4gOm6tKbidoycwxsRXGqKPiBsv/HG2x31lxXsDJsZKl2mL8AcwL+GJzhwuKbO4qryHpCv3j9+4MzeZMVyMqnY2HA2UpNJ5v2IqVG/skmNQAYr5r+BIEYTplVmaXF47FpOt8ov1WboJ9i7YOB/tT4OA5Ghk2C9zf94WkLwC0g0+EdpZfhi86W5OscPUBJe2UrflWYnalg3ZMmeDI8S+AEi9aIxBD7S6OFxpYVLVpHTTcZ1NiaP8d9cZW1HjSQzggmpFzTN3+5K9JC6qjabvTM+eyIkqL+Fx9vDixSn11IYi+L+dfwzixyrdtN9JLv2eAYSJ5MNlSL1jCRhV/m1kpsm4XWk24w5qQAu3twH+JZEM+hBOwdnJeQibs9gU80T45jB0XYntgB6V1o81LIgzwh6EOtdwh9S6zSpbi/6KpkkYCGZemIlstnTzxq/5TCmI4Q/+7yaZRFXVpd6MkouBFV1k5HEfotWQx0leGGE5+pUeJWsmq2RFxun043i1r1uiGlKFkjjFr6NdnXTRrRCP1LHzLwX6jDd4WbyRKrp2KRdweR9aEKGtl1JvtpFAlelW+65U34Z8ktUQO8KE5HksbG5ffuytkM1HjWdBRXoWd8KUpVX5XMPbCONro8a3FhH7NTscJY93zs7C/H4Km+BRyeb01DXgcojX4nfO245TMV3ko1hBGc3QXhjf05VJepFHoH/zoqf/7pLO0lHILQuWaF0AWlcGHUT/3V1IwlXjAQwHT+Q2r26xEmh4f54B3IkzSQjZnnJspd6/HBjU2SBBBKa51oH5LSKGMMC0rFqJkJsaikZPw2YSjrgkzpiPS6hqXJ0NLmy15BKdf1BRZd0V3ccrJZr0TLwfeOsBLjpc9EZCqaJp6dXBXkz0SNzdvKEXz88cKtztiw/vVVHZZxsnWb12UJ6Ycpra92CcKGxgxgz74uPTQVpz+0eSjnPKoeh93DFxWN731NOqVUKN/ZzSEu9HxfOFKViIej3a0Vm9fy+KnbJWrn0cGrIykzn4e9Mz37rbnTXu8ceM0aXN51j1GVuMTCnSLj0BuXVII99T8A/YhJU4vmCnjVe1kmrP7nmssN0I3AsUeeObT/K4UhOlfaUOfkcvaPV5vy4DYevzM6KPIdP13aWcQYiEf3BvHeJDbQmS5tOyM6mKxjdZNYd4+Z5Yq9WUq+gq9/sK8DunqBxrq1zB/e43mWg5IA/yMq6pSpZXrttMoofWmmFgagKGItACe0X7QzoMy2udmPx9Luk2AChUPKETPcavQM7/e4CM3NdF/J31rhu4Yg1ls3zMYgo7wceNLLt9eCzsOfHFn3Hqv/99vHgI1mB9y62zcPrQAjqKoMzp/xiWzanSldTGH6QxCKYuxdw6ZhXMi258RWTQoWKZ5Qeu1KnFcQhOP/NXFMOP5vkiMkb2VCKi1L94KOxPY2KNcX8M/oOuufn/v95vO6roLbBHhqd0FZ3rqLKnQvsgK6vQgfh5GBNQzjY16Sslr1PFwhSOnW4mha20njcx9jibBgAB6T0dAfZLooFF8wHfGXJuJkhY6ThVxGaVmVCDQJyinviwb5WVlMYr5uEUMCG4C9DaBSijtcbnIjh5pswRgtbr9tlf6llGjY0CuHnTz4AvbJ2NHj0ZbyOBSoi0FL+ut/acr3NZ8/3AJgektLeioiTo7g/3kFZyf4M//Yse9NMRGYQ1sj5KxTJW00svSgGHLAjSKJ+VQ7YVINu/U8Osb9yewoZbcBwy/lxpTIu6VL3bBKAhdsj0UYp6T3VtfvbqUUQeak0VwwCyMbk2bJvBVoQmtCFYvteZbjmPVpCmR93mQfMil+jkaz5fd3rgNGY1oDQpr3v/jsahiPZlYL927zDym34hkgFzWpPOlMDd0yeog6hqOj2YElenCf8Dtnu3nrMGYnKLtv3OiAUC1nkIsbzzvoW87nxkEiLd7jGkYillgNl5l4j6d/T4EvNMIseSxEV1J4KPtE/L1Ebu35L/RO6WJQJ/Zf0+7kZ6h7/EpIaLPAHBByv2mQp4YORws6v9LluCl4qV+KuW3/E3rpe6bIR1HwetvoCoJH3HbfCN/dk1QgfxSXVQF0eyEwNLnBGq7lk27be69BNHodEKwQgw1uJn/+Ueg1EazSk7kwndSb5CpmTDRRvOJHzwKFh0iwFwdWpoBXp80ExTZHuHcBe2rrMNPqgyuvN80m3D5GN3m7aizyBNu+8RUrtibVf2Nvv31Y5TusPjE0vjWDCnsFs2rrJUJJNvY4ezt/H0Cy7vsKTQYHRaqVhEjGahM4fVdskKSqLT3WbFfJh7V08Hrsm0jKYp5jtZP/SNTzUCll7erb65C8T2x3QHpZhyYqKtJAlCudNpfVH9Axdfm6/5UIeXkWjKtZXqSbgw9CmQugmhOI1BVP367QVKEcOj/vG98UPJEo62uVAavJGMzVauEsMyGVr4/Q6qh5nyAmwmXAnRwuUAALqWexnTbzu3SQUlykzyl5UPVuacCqih0iNR1rANix8Sj59wmiS9/zYf3d97mZ8ErCESJMFd3mkdDKlmNO+zDXpRxDHjjqV5cjH7NKq9lDVOxKwNtsT1Ng8iwm+k06MDV/oqNU6telVZ4mjHZoyEM8Y0TJq/VmhOyjcu+/FZrqbMefPpscLkUd/em/mzppCBre6vijH7SfOXCMdkCGbwH/u46tNJ4Yx51XqJg0fH0UsrHu63WQu6CigXRK+Rc3A8zJNqBdlyiq6M/E+FCZ+4DuNXx2N/1yk89cb47pR2wyuRY3dxGmO6JiKiHX08XHiq2vyhq6N7z6e+lmzEHGfa3BXwlFwiaqEnycQOVFj9jY9t7FsTjWfwYaXN/SMlfKjejHzLoFSeTAUm+lkOQP3Hzr7a3hIZn8MXLP2304Q/ZTKYXn7I/3rRADn2M3HyLbM+bH2RYRaqV1Al1MSkqdeuYuEBUmcPsHCRTJl9LeqMLuzGzI/PVrmjHieT9uPT/DOEAW1jWlZIYmCEOsaf/XH06VZfBzT7Pq92lzyJzIWtRLIs4+jg503GqHzTDP+h/r4lAWLHSYhCDjHoxvwoQ0ecgEobUMz3eBUFLDKrso0WPVgTOFjuLV3sO0r0C5YYYdM5Un1KmkLpRccVTqsDy+hfJwlEms596MwwMQMqaBuZ4x2KBP2EZL4Io4qW+cljwFFYFJX91a8/E3FU7GuihuJBwav0lOfJi1g7lrOQoppepMklSoRQT7IWoGu7Twyb33sGXjAVTiOKPBVb+Gnyfxn34YSyPmXfr4GJhEFEDkrN34uvXx+0kmol2E+kA6LjegyDFWbFkE3uDaXUe3YtVWNmsEiDh2c1Bwfvie5BYdqBFvt71KwnpsvXG3BgJnjQN3fnG0o8ctb0Y157O0lVaqkuowD9XBhFE+liOJmXmkri7z8cNEhRZGCqS/s7Kpg/07DAlhTLgD8wafsW2h5NBfUd4SIcb0c/K+Jcgg5nOJesXPCgF8uuFPIUW2gp83zryjv4o/hX1UkS+m0MW4A+weCemd8WcXOeO199xTPHAxEJpKC0WwzXwoIHOydq25QbLR1ska5PnLHcOR7XTHG5EExMAA8vo7QBT4ccGAo4F8MkuY2onfchSKew3uq8klfl7Z+84ebH5aq6xIDjxwDX7RWERmFtvptWkPyKsBPhBqd40NJ2ivCmSe+ww6Zum28OQ3Hxlb57trjKN4JOkrOo/E79ee3vl4Ch0iwVOOezW7qYth9r0zunJVuOtjx5PkglERnciM/cSdufpp/tsAy50embXeTbJVVryEam0RV96vfLcymFK6KM9LiuvqPj9441gzwEbzhp60HCWjgoAA3cA340J0RKl8cmbMA5SNYXns6yriy5LB8GgwTypzHjsg0GrE27uGIvT5+bPuytXqpDk2KDg1jMG3K1fv9eeu1nVUYKfurprZOfQXnW7p7umcUUINq1vx60IhZSOIah/rEtWHDCqdd2S5qhtR9u/XnMnXV0o/ngmzuBOGXVXB3ahkCSmTCfE0WvRczzIERrA14rLlNFiUftLpOwlbrhL1N8pMALNwu84McNWH0kTQW8ZMM4ReObF2+saFkBi85XquCPw8rTQlk28KbcJlsdOOajGoPdT0xPRnw/pmSZATPE6AE1ucoW66Uzi3cuDuCCois+pvthUFVmZ+DmSA1NyBx5Ji7Owz8S+s7v08dqGzHsdl3LITidWpuKUkoyW8SK+NsRbsdM11P+f7ok1ICKC42D729MXY72MT/kS4aYJb3zO/8L9gkhUmuvJtHT3F7AGAgOjr2M/BLyLwisu5GvjtEqJgb8hQNnwUbwlmKpHJq6NzXUF2CCShJH66HcOMA7o8xL3cJkdhJwoCw+fxOMbeKmBFLNbiNFE39mQeRycd+lrBDlQNvuXZjUODH22s+EBjJbpfVbtj1e457NSGvkQhriTYLB2zhaJaBloPKnPcGZY9lL6DAvxsh9FTzfQkxJzg87QsrplJo21TpSgBXjxkMoJdAq6toLPgguumS9X+RZ/erozA4IVHrna1tJ33S4n39FlvH2VuG00iJm8w+ZhbpTGHRDKdykeQpoah1ITN3rYf2eivjZakTDvYS62VyX6H0f705/qK2ZnmN7yYonR1wHZovWMEe3z9Z6BCE+f+FHgzP1RWQ5HgiRWlxw7zl2o2GEUTmKUhok0SKe6K+8D3tQpTLrn6NPQIZukmQsC8ML8NY4XLdo1cKfMc6eBBPKxUOWYrgEyWH77Rpu1yc0hXQ5DZjq9hgRqhWlWlxi0KJtbhf/05dTIHsTiUXcPBYNJV8JIgLBDzHWgepMhETPYAI9PMhp5a5PtEdx6Vt7gc74c/yOjS0wmyfsGTR2uE4oRauoYwH+HH5/c07pJe0kBtGO4CYjNxrzyLf63JAa7d2zvyU4l1tInQnnRRjC9GvWLqIoDaNb8II5wL1/eeA1feuvtgS/7r5czxFmunany7X2cI9RQRTYecGlnFasOMznHi9QdIJgmYY2A+dCHzur3p3n7ASTzz5cq11jdxumRjFrf7S8Y8CTCw91ibX5etK3pRWhb+evDN9HZSBsZ2OVfp2KQc6RHtoivGBfiPsBeqBKtPQtkKxwIR0N46YytAwoEIIRL+Gy+VtPPJtXAUcoL+QYsd2aULRXySeQTicceMhT6KVNVQWqpwKSiDzAjZHxMReu50R6eW63qs9TvvD2JFQKlmm6e1FqfJJr/SwrR3wNstPepXOULJmZBZI01ky833fhdEHQDgwRSh5X7hg5/hub95RYfow+TJgCfBcWEfOBxO9LkoMRXbGst33yjhY2+o340IdBmidWjRvJ8A1E0zY8FP+dGIm6l/iFD+itJOnPKnJmERiOi6LAxlPl8MmvpJSkSHV7M/C0LNQIsSySZjdacbZoiOiWMEzbPQJaCUp1y3G83lnvkmLX8MZTY4Zy5xhKlxfDL73TOfuP5rGV3SqamAfv9lo/JkybNavhVgX5HUIxhr2ytQegUKqlBFkZDLcJK8bmW++aTnB4CpZz1yZA3m8PDlypH+cI4I0ZiKIpODXTmy+QzDiVZsMlG9dvRrlblhRGuAizubN8c1hvKwm0E4sFch6gKFJRBisty4ahSrLfbvCQBoeiJC8ozfir/vuF7U3lPmVrYQdEgh5KU8dYyqJ81W8MHEUF/l4uUZJX2pArF1C9KXAeTB4XxhfNBGugC7OCyl/Uey1oBsd0VqIdOlGkKfFqMWUQhflWww7fM9T6yBxWQr7zqfFvUeED8dglviqr1/U3kX2eDwoEe1GlgSQlB1uGaOIMAce+5Rs8sgaeUYC+dhfqx5jvjfw3O4dXduj0P/9hCzbmgikhtsi5vjQbWZ7upXAoMgJ5R4x3DVRWEM5FYtOnfw1Dg71b7+9w2SDxDj7FypsXn9YDq13ZttaggeDxADo2wjGQB3dCCNmpXYOEHIhGTplncUMU9XKyPe6VFZoxBWcCcT9HRZNSTh4YwCPBQ5hDLlmBxlk/MtSct4r36866U3AkCRaPdjjo08h7jT732MRm3jcJW1r4+cN/gwR1tNOjeMiAs7BCD/u7RPWAod3srOat1hb/Igm+UnbKSoVua+38vXl5IfaAzCphwkeE9Ti9RjRr/ig8wJA/wXMjHAhX+MnO9eKnxabThS/6w0Uj3p6NRiAo9UG7rwdiaTkUWOGlB0uxUWItF1BVKzXbfhtqovDuYV2BEpL6oUWkERjckEafd3m+jl1OvXs0LFBnkZ9Dz8FmiYjmfHyuQ1SAqxzzswsZVlFC78BGTXeSABJMSDnbw5Y1qE6GaDzN+i0bQPxtPHI3BroPIa49QMTX8J7Tgyo1ykcrLprRxTOMX0EOF01h5oUZ8Q61xAK4LAKxGYLw25da5qWEjhFH4/2spFUkABS+ewps8gnMgel5u0OmgFqY3bIG/5AdskIUdsoLliHRzhM5XQzx5mgbyMxwpuBRRjHZVXj+hbYoBcF4HD3H6I1A7qL85UFj478l06ZyZkveAtJViSvfiqfSdIHhlJa0nWdfeLFb3JvfX4zHYl5Akcrr5ZjbTYHlWWVJO8PXryUTxFQjM6gJ/kVpJzT0uH8kKvUcUI+k5I0ow3t9+tiGUqsW53ssVqwYH7OxWUq7750g7dDOm7bq4X8zl8Hp0ivtH3i3kGzcPBHR+MioCC459slqQdZ+7Ur4jLWVvRjauEOj2E1U28qY6NRl1GFEljsDslQy0ebjhwN0M5lTs1bxhWiHfoPtcDpWg+d/nWyqG8m74BZx5LI8dD7ynA0S276hAaz0Srl9tlx/V/J58QeVra23q6SWkS8AT23h43Gj8m7V22hCwJ1vs0AO6OqUwrLNZOShxJgIfGEUKLQO6ltsbbecyj4SYOKNcxBCQTTrWr11ODC6EHllq2B3u1ubo5kgSLfLWW9v5m3Wsrkqysh1PuQsYm+shHM0LgRVMiYw++RGre/LFuUxMJBUfneApY9wbzD4spx/VAVSRylLu5rneSaz2b4zSDJZYWZ9N2i4qa9v+fiHqofNpQyS/9y/Vz2SzIDA/WTvnXlAWoTQT2dxmY+I3JmGa31OEdZ3Dx2dv+LIwS8ZoLzJagwF1qn4FGUmhKIamvwuSDVfuUptBdo3vZ/xzc81UMHWGXOaII8QZzt8y4EDjduoUgeurY/HoSlXPuMTscjfl1G3tGLGu6ltCeD08l0PoHcN16FZR4GnpbdFhmIO+Gtuzsx50PtclpCfKjMgJfB/Ka1h5YyzLVKTURJm3ZMzxzH67E5szfMauCdn5UHrrjWQxSMK/hiEB69Dx3LEiDrbj6+4mSvONKNf1dYQlfoMRQnp435op3b3FdEjoVI9nsN/7uzOh8/qOK3PCWfRf2miUCl2ONMfQqngSoqudAnRfPl8QyuuYrgGdwLm9cj7v6R+5QLYdXlWgjARyg3DGgLd72U4VuvrAJBuyFpbkiS9t7n2GskTpW7XuL/khrpZSRrgHJSV1LMAaUTIVJoF8A/tWiIflBj3PYWH+2W5xOH4aHyHWb7WpA4ws5rV0LKRhJQdyI4Jg3SXUI6yoXbSpIMVxiuwC7mJlvG48aGXKPtqG/mmcab/ct9fsc1m9UZcFzBk6ySjKu8NpVHzAGOykVfe6E0G5hPfUQejSK9VIxG46uqgkYmwHer3gU8ugOaQcn3youzk/7lKSMHedVI9/nI5YO/NFu26PkzgSdQDt4tLwFwXiKrzK4+vooQamqW+JhNkygfh/AP5YlVPqXcZ3Hbu/VY0dN5chITlLOrurC/CIrBWx9qSkk9HMXDwZlNohGx9UIbNpnEtfweoDQbrbb6CrFCNpAVVmUc9YuJgviy1qwFKIhQppJ56C2epzxomhw885WhxtMFh+6C/zxkQjdwQg8QS+nftVdrZ+6SYV4UYdl+7dNfGd4EQHkqS0WLAev1HuvFKVmLA7EkjUDMPNjvIOCQjx38Fl+yfhjxr64RqcNg3AsrDKl2bsx0RUrf3QeYqlPB2ELBIwcWjMleKZ+EMtJrjaasrKPky00PSjAJko05+cGH07xKQh0brMQgIb+195ImdhU/Q+6wNwZvrmHjhzm7I8jvV/NXZfL6YdqfZIsYeAcsX9z6xA0TAD8gwdyRJENb4MtqsqbJ+PNC56311t/GlUcqD6ym+UPAAaWGL2AyTY1hZVDlMQy4QXjA65CZ59hFpfunsrrsLdbTy/8UQp8kmGXjE2g2f+N1aUXmqw1BWiIt7Ukn6HBqCt+AbvaRnf1CZbFk2baUnzMhc9eHqvrLLVpAqF8wItFIFRgfO9vp3KRVQmhpVBBoI2m2lplHprpzTsrLtml356WapnBAW1498xu0vfB3631sETUYWs38VxZScnulM/3hQ56rTTDCQNnTq/k7fZZEaO8+2lP916W98cxHptiNRn/xnRNWoHNuzs1FpR4TJLx7IskJU03t8Vg7/yIFZ5Ys/ccnVcJfmdI7TNgvViFcHHJ2XsKusJ7vsfMpgOr9Tt1RKWTLoTxvFyBZxsbgdtRMxw20Qugo9xnUuz6H+/9RA88rGnZU/xFtjLO7VcBuzMA7EoXhG0UTf1zx9fpYxu31p8OqKufyunsm3iLzAupKsQ4DKz/Mrd/GIsADyIgbxpqpkrS307jp011zUGygA+fkbEiEDG0PnPxpDuA2kZm9uX6x7tLp8+6yfsDrhOViQbrfCvNBz9lIu30U4iMBJm+xqnarhtjhQoJuO6PzBgRFQsdYVW0p0iRggRuPZkPZ9Jp+atI3C3uNXWlgXBcfy09PJk4fpXrgszjGtbbFReVuimehTEehpOnxnfFvZwHFCGNAfVc4SYteMEHZW93tgQFmk5+T/Q0fxyH5Po0kbiQ5mP/48o5CrlBCE586rJM9cZ5tPArSfpF9p6FbIEDqQnfSIijlGYySy/Jr2OjtuZkgzoPxIMiwhGZxxjagfaaw5dSZD75tL91U7SXwnmPrgvtuOMrBm/B9RwNxc54WmAc5HEtDhpP9Wb8DmUzSwvVktMBTSUrC23fRd6ohA3lle4DnAb0UYRe8FD3Z9Ej2iRlSvqwFDnH179ThEf2T/Yf7p9MTN6NVM5Iq74A34d7k6QqQXefA0OAs1Rnp7cdLFClXg/WE60YZtPgCAATdKD8kPRKrNGnQMhcAbg+nLKOlHrDvrOCkGrnfVkr1DRXR2wATsByk3Fc4M7gy+65yKqmxO0g0/Mv6mTf4W3SC2Sva6cRBfJfGdjQPsLDxW63jlZhR5K58U5ZTuTwJYJQSh55UfP0SFhaEOlS3KV7osbk5kxhBjUpMKLZLex3G8XTCAM4t4O6LiDzYRHLsMp4vZaXFyfLnJ2h+VFb+po+t2f0ML3L2KFYkEn8WWjkYF29EjlSsRqMbdatKExAwPEWjAJJDYMdEu3g+TcazN3jW9scT7lgbYCH+NFe2fNuv8G/eAWzeSbvMEjCY1H3B4CzeaofYC6Fr85MvCgd+FXMisCnUzXbJj10SAIeak13Sws39lrB8H3vX4Lk/XaTakWtz4f/4yg4r1HULk05vfOyM2m06qgGHhVLvsr/hPxKnflVUvbGJqwItjppBmofLx5Qsb440DCO/61IYX1UGs1zYX4S6RpaHJUIKvb3GD3vniWwWSOjcsHDlai0ofhkYCqkw2iWO2YAs0+tlW5Gr9bB1kmNXwEMoY/ndYqHL1iiSEqXCC6qYR1qv/UafJKr6jSmpeVCbABS2XjV3fxJbvip180csGgpsOD2TRzlzsjMXklALqsbZ/pp+iCmhQuBFUjcWpiYjdVyHya15pxxwvSecY8yQ/58IKQmcHqPsPMo2SPvQwDNU8dpaASoa85kD6jYkwS0HK1qqjgQ04KrvF1U3SkvBS97G0g6aVD49/gpDNNA3LaU1kLwBItIC9UHoKc9edA7l3OlVIBw8nYkI39j+zcMD1DJBxEwt0HBaUdbcv0T0VDvwad+aWE0KKHf8pXbxtTAWr8H7X4JhfrmaoyjfwA2oPU5rwUO2CQiuu0P4jsMERkZiK0MgBVl5fI9R3icFPWu0DkdDylGI2qugXSPLARWFAVFLTCCrMs+ngPxOcG+oiTR1QrXyRyLRTh9aqH5RkJZn2tYjb4sfH1RcZbudUp2QO0KBiAoniSAC9ns4tCTbiAm0ju9bz24L8k6HiG9WK+f+WkWAbnxIW6cIdHF9y5yARcH9fPtsTBEGFhiwUW0TU6+qJZp3hArNfCSPcSZqP196Tq28+N04boc2YoIcSucjQRcYwnD5I0M/vNipNjScXnk/VCnqU7KbWSspJhcWvrapULPQfAh5zw05tcN1wtXUjIifclLCFTVCWhwDz/vMcui5WPK89bta4MWKzXm6oeUR0ZwSuywhy/HQU+qf0AygDF8HF6XYZLfgedexnsRwkYz/0VZSdxt7xl80j1cu2ym1zXsJVrTIEv8KwQWAGR13+sVY9MWJ25bySG3Gx+SDl0WYPMlDHhGMwdW8SCdiRASYh/PDV0yZXXC1/rl0BmyAZyCgzJMMGOKPt40xAe4z/JTE1O1xFQp63vgCdw/FarHxmt9bPWdm1D5e23TpryThv8KOboplY9EcCAfbXI7vV0CzBN2sy/x0xFZKz5cUBg57FWStW4ZBHzeOO1gyvZUbiuLXPkRlJLkMYj1DHn5TzBdPHNjDb+Cfv/LTINvCwLLzASAQCaAxcj9P9A3O/Ja1F2qUb8ZE99ihnddNUmGlpkes7otH7xLd+Hz9aUdPGLWWxjBfIqsfx8etGIl//Py4aDECNdml1G1WmBtuzLyRsJEnY1qzSbazP3IXkRUo7ergmI88HrfnGJrPAbIPnwV+K3KyZiFkk1Vf7vVBcBrSUtCJ/yPEuKtvGT0ewBR25nDVyP+L09foOryJE5cSE+HaCLzCFhwFz0vQreKTmbZqlXjmJ/UrHirZN1gctvPLFTuwq7HA+adK3bIaOgVMAo2DmzF7pgIUHIOPuwRXXUUXUGdFhd3QQw6SaA+QBOp4SkCVS+vTFGbfYgzJDN+f55e+XDKV7s6u0v/TMPTUgvp/XDc+/7wfE31NUHq51LZKozPpW0e6uOKG1n4NZjLFis/Rf/nPzSh4mzQMW+57PfR+MoGlswGhztGB5do0xuIuJGE0ldfpXLDRlMLv3B2+AWxvQF0Z7jIoKM95ccEgsyLg0qrcMnpVjYLkYbpdoZ4PUd2vLN61I/uDtvHiTgMGFwaO35+NWs2iEaRW30vF6OyFTbdcKPxhwuqkqEoQPXSQ2bW7ouTUNHpm0bUcqDr931oCQK5Ln31TRcM3f6UO7jyKbUhQdtxdwrjNpte1MYXiB/8OgnKkeEoJv5DjOwuUh6YsAvZd2w/wDinOuQgz9Q3jddrENTkj9nDfLQICncRV0gslwv1ZBBYyCXplrL1yQ7PTmCezgyW/HQz68J8uonU1/WtGtZVVKxlE3karCNQiCJ8fmMzqHqMkCu/ZrJTfyf5Sm8PBwFkFs6qk9+bdtWHSf3c7YM8oZbRBLdYXigl1s6QCZbE26pHleIyZw/mrDpvwlnhN0pT7MYj2BMv6tnc6ikC+PyoaOSDHHY+jFVzLshp7fq3eZKWpPXtvpN4j6eHDQMORlKJ4tobDd1Nk7sMToR0Np2TDDw3dTTlNyBRg7kFGOGul/t1ZRU9lAxGvVhif0T+/CcdtFnDFaIinwYS335AiUgrqOgAEX5LEGpJfoBj0JftR4QAmQ1fMKuC5ADfSuTMYL52G7ONENsx7CFx+AgxwbxmNGrQ3xOp16A8qX08Jk83lj/BsMT4PJ7Wft8ZMEOopkSpAdAEwRo7d9lyysWw7idJBWL/lDH1CJY6RbKpA+MlRDc0t0jeUS6ZIRwHvA8tpNcZtW2xl2Z7+lRsB41+E6P9hzBEQrbF3Ku9ALTi8Ps6UhyNr9APP+39CEkU8wNjXZ8iLx4BdfXuH41bDUzrQOYxEZQtwJLvkTom9nHmhmN7dmI1ztlnNROlSrOPGMgMStqHBvU1qXH6qMRVGUpF0OY4kcMcLQJkwVKLnDzusdVqZ7mVjNp/FjlJadpYU2zpzyzcFGAXlN3WO4iYMDaksdmZYM1erNbDZd5GkvCF0UZu+2T7L5f63loSbpF7oFfpPS0KscuUUyzbATJICGZ7rVP11k8o0DJHsEUHqv3Sl9ZQ6HykekX2jvdARP/T3zL1qsGpsz8brFn9zNPKUlhjiLk1VpssgKUIIvB90UE1mhzlKDxuDA28GMTL4RKMk9sB6Ru8QPnT5CEdddE9fOBJNPx1jB3TF9DXt0nLYB4F0dURRH+PXv9jFHYxbxh+IEUOJFcispo4HrSk/qSZLH9U8n7NwKFHD/DMwOBNCLbzCz9rULiNsA6LfeFQ11hLc7Q8Q+STMqtQVzUv3Z8byEJWtw8RFAvHhZcpdRoUWoyfCHD3eMjMekMRhjFvXkl+hjhu3yGTAFjUnSJJH0F6IM6JZnPCjZPFwxAyiR7GdANYWuUQSEWjL502LxGPsNReegoHpsRKgy/y/Vzb9eFKZsS7hkZJWBwEiedJ77PmaTjIijxYlRmqByt+LvCUywMYCNY5yZd7yhIo6pKyU64L9AH93Cw1X9Vo3jvNy3glbrVhTyD0CeOLHeSo1o9OQ19Jv5A3AOebPtfnwLJlqM/pLXgzlb1Wgr9r80qtiPuauHxbW5Avp0Ub14eqXkPzE42P9G8k41t6XX0tkMUkA+7WX3i64+Hwup2Qroz/94Xrwy409i1SotUiAl7sAqnbaAcFury3YW4OuNAexvoLNP2h61ye+QNSELcfekYGY8oRqXPJXuLDtTFVN1McoG8t5DGvQC7rPbMxAScM+sWard3Q/snEFSKP0cp78k3XHohafzrL+O57I9+qOZw1zBggdqZNqHsoBJAcw5ONZOCgQFkUUeGp9DITppRtmFNbzxo/FhMJJKxl0IfMEeuLNafg0/X6YkQJ/j/r37RlEqhjGvyAEETkxfckVVeuTIpw1s+KJ7K8JctLHNErx0vypupXAyuFqSg7baZhVQ8/w0wQQ2E5vLoTLS1VpgdBFGz+YuaDC2oUcscYvM/M7UYRRbCkAjT52WmQb4FlRmXpPeSGlhF30kpChqihLyvQqPk32sXLAcFZwmlzfL5G1pvyWJMhGG4VhGmy4prgoQeJr6A4uwZChaX/6PkRh8/LUk+4FrzHp69XNAbR40KJtd8D+X5cZyEbh5VRdpKPeGAMErL2kj5aG/O2J7TEVNjIY3l5LTvfrq7R6BgIZJFTR8nZkb+CF68/z/MTUsjJerSO0lSS7DcMnTJX63iaJQqbDQiMXYxqZGYSYxU5Gc3K2Ffxtf9VCVBSLmZ+OpUCeFD7UAZ0vo1BnVNyg4BUw5EVytIavI873KbrxGGyHl2aFO3fgmb15pPqtl7xiG0CaD72QC0I7TANwr9I/MF7W6orR5ZHHSJ+ZraR/g6FIfPR9btQS1X8rGBSKKNQwE3ToUHf6yutupIK9ePmwYDy57dEQqwpO8/j+pUUlnDw1t6CUfNDLg3+HQmWm8AY450kxuPQZkbgdGDVDhdXR0NeaNzDKzF/xDv5zao0Q7THX+UNpSoZckyM2hBtF7Yyw01G5DP8/2aMjAfV+whTiosFmlXJN4cnMTMtzB6CmXxocKpK7fRO+KqR4UGLRnulZHF9nZaAaMkNzbSuWz3xjndLsQb58oQg8PCcf8wKGOEsxNzCQ3j+PhmpGU+mV41Gyvm3Z4U0nBgiGvXbwq39fDGlyQLIcHQe/ghgq3AL7e+2eYX2+yWAk/kEjxBMgrdi7XYm5Thrp0wLvjHtWJtG/o4tPIiiR8xrHN6mnIUGQ3q1hTmTOit/VqeyGFOX2KLlmHHJcFexNZ0EibjqduR4fNZMSWR+I9fdUez/9scrxajpYoQaEH/r6LL9aspVIQ7PCzMAf22OWCmTG/hocfH5SzDtWfO3d2zIcSgUYErU1cqNN++WyWmDiLLKkht+KiSLFG0Eoln7J4JrxKbW2BZoqhfbvxdBDoxOggtZVhmtqE4fSRvuSHI53d0/U3TuAtaN6pMOWdO/SWK71uBFD47fWTQrHnzBtDbbkbaTR/JR1jj09exkUKjOKrjE1N09LDucDWBqzhsTl/XIRdHKMmTQ6N1iKsS2NM+9O8+eGTN6dwd6GYxBEPmKdKWpuQ8GOUKNf0GkQhriEM02bseA6Zm35GCcXC+NATdQ68D80pKlvU/gxpJ6QGkL9JtvrYQ3pWXsGkbXJFtdb5UA8GRM+yDYcrLkiXYdcP6WBBPMeo+80GHtJ1geLYERKPylRyUJ5yI6bkDhzQTxN8SFiLUKHNys5IiKYj5Wp9Iu97X7Rif0GEdnsN+FDg6jN1Uapde9w/+OejGjX89/Vc3vVSIQZ96M7MOXhXyLi97YBhxT2rZZkZlDVxR8Qt6UvXef72YnW/+yAo2P5DPGCkeidjTKeihsacU5Uam7Wg+fxf8cOBkuoUztYEaDpNvJ8T8C5u5GzVRtz+0m+IAgGC295XKBdp4DSLwSqjypE+gTOYCasJRQqFT98zT6omBwblEwlaShMguR9feMjBv8bgtIFyYqyaI1wfrwonzvAYnddjiMjG12he/I1sYcSp1KbVzZ+tXrmUmprPkP2I8JePW5CEnRsJxHx7i/rQIALTITFk5FMo5CkcY330ki6SbQXzdR7weDAph2uO49EL3K/ohg9983vkpyqxjOCc1D/NsgU5C4XEBIvBhLT1ba6G1/+28avtzLeCMhprov5lEFHRXD3kHIIDvLGxHGbR0Mngmsfp84LLriuiY39PMkKRZU+T/i3RT48vSDSMLGr61+Thwpefg92Cv3MGmD8MTLt+7p9z3rMGXb+wRIju9KjnzIG1r+D8YYLgA8JppU+UPsoyW31gyqGgMGURjfe/2c8Xf/Qel1kwM7VvvBDUKFs2QQ2DOZYxTLf5s21UUuI7vQ5Celmj5Pox5x+le1MfQR0rH3jdUs69Wpqk3/ila4nAxo/28u4vbmdhoa7xCtGjgAXuoh30wAZH/4nIbaEdC9coL+nsjbpIjn5/B9qo5rIrcbNet1DpPjXr7f0c69uMO/p5WWnO1Ia4sOK82ebPcuxK92pye1x+LerSBtMX4uUEgnjo0q1SsAM0RXVtSd5+I2zdFLMBIeJH0C1guwOK8dg8XMwZ4D3OGBZYyympuHMWLYNLu1TqTso3C19MHzyL4HEfPyOkuvWh/hp/WsFegOtq9AR+u1k2yuD2dQ9e3EAngLypYGnLz0c50r006QXRt3YFZidoWEA2iNzPM0ijMs0vciRcyoCNtTElaacdpwflKjYknsh12wf6to/J/Rk8UapSt8ccB3DuHMR2MbpSGo8262ViSy9ItnzTCQaW9M0wYpFbInFboPVv4QAuMt5M00qO0Dh19DDpZXI37zR6FNTq92h9XoXjjC9Qtt2Jh/9XxMiiYzTq6oNquyiGjTue7nJNtMQxJ38uOD49WWivsnCjNuLrcVxOa2uSsYFJ26ZFs30DvMLND6OwcTjdE5xJspown1WaWt0p363/mNn0tuXK/9aRyLlSyVI/8gv/yP/PvMFrbSgD69pCN5zCqXhvSI2TesKVIuVdMXqxkdYdOZc9AakAk/z+ysFMH6BydgJVOg3UnK9+xiDWkykhl5NobZXqiCc/Et7JUXuMBLucUfF62ThreMqohKs89SQZOXTTzGD3onoBb+/S5UiteT5lOiPencICiqhzTwK07jdj3FlXjB4151idi+S8GmV6iTmPsd+xcT5OIrD4uES7d93jEkDD+q/XMHoWvt46BRSU/KlOTBsD06Z+7QJSmvNzTSnFJR6MIiqv/PK60uMO8pUnhG8Emhd+uEA+GnNLodmf0WEw9+nIacbBtwokPxvVCTR00qtfNQdjlzS9kBqJirwUJuondXA7rbFzd7J0q+QvM0xAmrvhfeEfnyONA2K7iy7V/NSme3y35mCW2NtTPmMmmrj1THy/3ngk7YTq7Z2r3hbRAf2zni+dzH23jvIHkRJgw0Nd05cA5/p7XjBDsvMlghqtSskpGxP+OYaS6TOlPShP8xnrsFX+Z8s3MHx0t583AfPzFbHwYkyf3BTtdLC0GLv5gStgNcbhbGGtZZwOd/l5DORDcAfcdRClCmsAEtYvDLjSgVLb5x+zHMgyET9yDDT2N5SQjYlJdVxTqTHcB+47lKeofJgt3bV+ApIHG+6GQz8H48O3CrRGgZed01bigI8lFuuCYM36AGcjd3w5oEy2IiUfNd35hPpSsPgX5AmuWe/IeeI3QuP3hD73omNUK5YyeexKaiBUhkvu+8OBR0fsHeElUK6lohPTzHl7DjZX4gZXoYLQbXFUN2pCP3plXcBHQTLF8o9JuNSlFBnazzHcvNU05iaduAPDwpaSddsxh2+8dyR+P9c4PF9/pPpfXAzUjcDZQndGLnWNkxKrDODBvj2ZAWL2ZAy8bO+tj68GuzPrB1ZuaVLwBjv+/9ygvAlORUT9145gCCjMbKe55TqcqhScrHagq0UOQkTxt7db5s/W/ONRyw0JiFMKH4fe7auI2qo5ox3A0m4MkFylvBmb2jB+Qj4jVHYBNnMjVxFb411CLgCcgmSOCOldnNjmLZS7R3pgis5Uw2UYehRFB54LvD6IYSOehwB/0g4dIgc1NqCZ+EwnTSa16PK2ZVF2CLDHuU1RsVMQgxXvxyC/LaeakkVoP0SSpUcjk1Z5Yygo09ma0er5NJTx4evv2ey/x14vlrY3gjwHEoc+IIhpJ5+XcclwjEjbYG+E0AxRVxeS8iH55i7wQjkueY3PWHhd/InGNnNPLmtEdsYJqILkzsPGe7GSqK4rM1ruhhLrQtj+YLOt+RMrLsGgOqZC4TXQysU458wBkY9GaSNxTLT1x2jqxZmYoq9BvSwUNcTPqDExI66iPvyeMznFfM+pQdLZorvS4uHnJPpyANXFREdIAhPJQEgCN7CFneiAYkhk6xDRHexqyuMQaWxobAtb8R4jgEfjY5SHi95/bwtzbflPahBuJ8W68PEGxUYqi6gb24SMibeR8az0fS5wRPWB1Ww8v3YaRIP9B1TO3fdmf0QfrZt+eGMG4TRQdOx0gHHTZWw8xmhqDXMa4ahfR8nt1R4XvrYDSesk/mTNwtjCyCUXBYGFAJ8blI43V5TZzNVkN65DGhv8AsLuJXgiocGt6H+xQkhnj5K+tEUdsHuHgkWINsxHn768QysID0hR+pBmOSt4g80EC9AyUy++Uzut8n2BDOR+n9BHESaJWSsaVUsPaMmSfWnuDDpjo5DqD6M/o2KfwGth8mHkw+KeA1EPXqW3KZymbqzsEN9NsTAgDipaQucIsu22Q+yqAEJ148NowR08wJtuu08h+0putgpkAl0SZhVNfkBT6d/L5hWyAlKDgOJFz69FS0QNr6e6Dl7FOBOJXOhEaE6vEhh2SpTJJkt2CAzl63MhJY0auUmjYZw8/JwxLl20KouThG2hiQBlNhG/UmJH0H+oslDfS/JsFkPizO1IKX4x7b2TWdxeH5dKAiqX0WYPJi6DfktvkAi4PWA/FtQaZ9t74JRDw5bnd1kOk3pcUAyy3UoatbIKt58+aZy4wqydc7lzVL0amT4Q7onZNFufc/tbA5rrkdrWNcd3h4NJb5AM4xcxaVwKFrDa2SUHDrAQIUl8agU8qa/XVFEgctzzJTSZ6j2r44mSQrYAYFmUFi4doxPkVtUApDeFYei1P2h6TYqnf9JUQ1MVB5AIbCXNlXR6q/IkGDLLee4agb0A/AyzLVMishrsU197iJjrcieDCvwrXERHaA+NC+msJLdydv64D0ojSMByt2ATifRWEHq/klamJe6urK5wyKcoFRp9cHYrDPVuzOAQBanmOde9aDkTjXYGnYSFq2woXN6SDys+4xdNI8IRAWNUaKz71l7r9LpxJ1wQTf2Fr32+736T7ZBTtS2MRf/lzlY1wcSW8ROrpF7kFplv2DBeLhskWsIlXToKVsCwyRXhUYQhl4fh2bIRHxh4zQ55Fi+3rBdWyBqC6rmKBlAp+moOqx0jhBdt9nL/Iu0U4zDzBKVDUMirTiA0N0Sk+jEGmgiwLXRT+WJbmyubqIY3oL4eWOPKVD5B3VDqIIaZrWAwazyWKVDTZVYuaouCvULAHICQx8dLavqjvE3KKA0plrajKi3sFor9CaMdXqruDwIiG7W1Ckfcu+RwWkaEVtsID5d3HDTmueeTXLNdZ3tbLuFLa/rKLiuJ+wLiE2X3ZjPdx77DT9Rpe8eEx7/Ss7c9x/ulJ9Xf4Kb0cS6r3NNJ7l6nd+2FWm6FSfXhFWFlW9SH+9PyQdxzyh18Cn3uekO4T0t5xRY6bOLpIg3rsOECqFeklDbYvTxTrd++VHeJwumOR8ZEzRtm+RsKQE8JIACNPpzd3X9poLHm67fHM6NIcBw3fwr5ayIhlJJcTh9ALFGjRDyq5zr62hbMi25HSVD/CUrAtrBW+/Nvu4YKETABSC6ERxodmJ7S5VCbsR5un5jUkUmQD8Ns+UpoGaaBp/CmjmA8O0LEM8p5LxdMbQlaPrdLuaNwyelhzudTJIYODK7urBuHkvfdW46XlX3Dn001dEyKOtSNiDcBsrgE1EgYbHq8Kb2DBeGCtX6vL2KsWsvmARXUwj2mI60KM3hUWWv1aqKHBVM9XvNOsZwkJIZ2hxAgrZ/Pg0a8QO+tAE4QPXu5P6SUWAaXK3naezHdlmX3Tz5S0YtOiYdinxNL4OoRXPzWbdbaZjXr7n4WSHa6WcebB12nAUMyv3oi6gX1VFqJ9TAXuQvadG1zaK/apwvj3PNm6CEIaoFX0PPXI76H6EbH5k4ZRE3wnS7JeTEpB/8VDf9mtPctgzYQbGOAYpSgICe2fgQ4Qbyai4BGjU3OjfbP8cX4zJLkfFdTpWDooeygDgeebooR/y49E1LkHgPBDg2voEzVdfqzkPb/BLe7rOCOq8g0HXQL4RgB4RfvstCQ+SNVSLisvJRmheON3UsiONkqptH3AaBTxGqInfLb6nqDkp/dn4YjwCeryNKJHD3/TUiTxJPRTE1AUrVAaNggWbEEjmPFDQNpPiCUomG0A4bmN9Q4tVWRlpGYHWrYlK19I1MFZzB7iKYwprafkjTUoTOavUFRCBmG7IAGvtkBI0Gg0noifcMHdXNzg+txR0RMKsF4AEwX8Rbr+SRRMCmuAH5QH2GCjC4dKgQ1TtZ1tTnoTYjrMrufTNWNdlvqKiH0CKvGUzgfxf2NLsYfPIXmDgFhcNly0SfM5ys3GdwhGkpyRyIbM5omKbNJA0aRXU5CDU0qtw+TOxxcuo1U4YIcevtTOFG/m/3zKRVONumzAVJNKymJS+YOBrPiN7X98oGQFqbOsp16rXk5vmiqRCp5hGrFIXs8mF5Fs+hRj3D4bkhjv2nYZCg6UgMW6VeKIlsll2VQ+0Rs/NxdOfgJBK0Pt2WrSwoWvl7HBLNh9DqPpjTDH3x5Huzez4mlIvU9jF+unXwnoKfzVnvQMh4ge02hfnlJg/fcx5dsRrsHjKIoaYUDQCWcGR/7nFhfeY94ETtEKOFOeoBfDnP9hnTHhmS4BDGSvWvdeOyj/qUKbh1XZmG83z5XqgrOkpWa5ZMd7U+6fz5oV4hqASJRPcK0nocynNC5z+GsupXy49CncjW9h5gm8md5o/SgNAS/qwQqIfdJ502DToZrQF2O1rg3jZdGo506BboH2dzQ+0VcV2t7wQLrIWHEQl5e0+RWj2trBG+TBJaLoZFchieNYQV2vwspXsDsJHQd72xBkZsT864vJD2U7fuYydAWwIG1I3wo9FFAd7VAJG/yxYHgSgU95CXWTthRlkAF4PNYBvXnoxvt7cdLlv4AnwFUWhw62fY2dfL+YA7gjHJPAxHjaEVjvCOAL9DY7zGSR0TX+yNHcDN178yZ5e2diDClSV4vuwtaEKXevyO4tN4HQGnO7k7yW7YDIpfk6B/+p1N2nF52eaxcotbGRvJzoMhhN7G7Pw2OTt1IaTXCZM6j3mZLuEotNV2mQIURPusVWbvSNnloFpX95/+0KwwawQEA80Swl6G8lMpICfu4R/PHmk7DpP70GahEdBpwP1I9FspkmSlZRW/HvUZhHzLtYuYAJn4qzn5oNrSNZQxqWZwvFkNIc/RUS0KB2NFVe5idzqVXm176G+33tNz5ODmnRuAYcCbwHYpPZrCGs64b9IEK+xCPmQ/i3QwXfdBMiXTrQKfk9/ftcZ09aoEblr5Y+1f/7yxXKpzZoCktTXj2vNihus+7Yef/d7eMdqw4hNHIvXOTvuOWw+VWdNGyi4i/PedfAuRVogu0cSNUDEz7ecv8PBtdrrwW7J56wapq2nmfIHqfxmW0Fed0yl9+gkPZlnoefFtG56atDvOuP+sB9Ph23S7luP11hjhIZ2gtn45QZn9NMCQZs0++NTnMr52erP6lU98ybLpcIshp2G2KhkAUyb7SduGqMVJIRiXz/2PdCuDAro0W2QC/e3Ze9H9/BLSMkUsvQ+RXAWioQ8dkH4luZpgjq33uDZ7h2x75Mclzqjbo8+MQXhwooL3E6PhCnvbTNBVDEVy3l4GX1KBDpHRp5XiH5BIVOpnajeQQJeDPkUNYPCGeBsMsRwxYdyscyngPkOO2yCbPgeSnNbyLUaeDxZ3aYjV0fMLk5zVbwz2re3plzI75K8mnXXQC89SGFAPEZ3a9Iu0GRLKOF5UDXcAFHTxx9OS5uegWaETP7z8IKaPFHka4rIPu432yW1dhz4HZLy2ZZgpkpJelmLk48W6JcC+c/qOwqezB7sXVRVhomJsYyO70o6i+UJ+fiC+5og+PKAeouq5aWfIMFpgf9olXjJlRCC1DHGVyxl+GI6ozDYFA/qRSYP1Wdd/fmO8RaB5geLM5wpu/AV39AqkPKlz7Fk49ITVH4UlN7hetmxnytEt086gsv6QC5MsYnqbmmfirqI90pNKc8aEh21CtmefSvl0dfgvD2ymsEnvtfDqoVeRhOkwAb8QW8Yhg+NxAB+nUdq2vgpmmDLRkHL4qqtVKy3vqMf2GMQsME4WfEUTmDp+df0iXedy6Jcz9SWEj7303FMFa5b4/MdT/NvEI/DP9zyQb6MtUKn1reufcZzTkjMRFIAY2WSOev6lA93cxXp6OsxxvmriMyIImeYA0ekgTrFY8SBH2B+qCW/VKo0BkyB4eXiks/9ChTiQlZjcz6bLMd3YYmNAPbgAP79ZEX08wY8CYj4+4dBK+HRsPhaGRLK797xSHjiyJrm4YDaNjdlo+JRYHgkxs3K7/WQZRSvj1MDfVnz69bG3ha1dmdEmnM/XvFPbdhpcrcvZlS7mqsJbzUwmWg90XeKTgsIcZqMSBAHEkXp/XS/U4+QV6V7CW0JFGEjy0En0zfHCfOaUEVpbEbtEs4Pb6gsPPAWvWDOeeDPFQ71uS7SIr8eiWNC41Hq75I5nhVDqAOwsTEsFRCxjyFOX67peECA21HOymiym0gOj3DGviQXrNkWPRtqDWhX6PCien2nkDYXwnHOfpIQoyL6fbBnszDUQ0Iqwd4axP0toa6bJWeCTLuMbBXr03afyGdOdUgHPBVXm8qZRgoF1AdFDNanooIQH2E1Z6lYjoZfL/zQlpN7hcxmtcpez/KCtJNQ9vdE1qhWvfXlW0zhdC+uymzPsEFwzw1jPTS/FxVhqR/fJNkIkkdPk7XI+XewYcm46XzxAJAdyTep5OI2hJ9A88E20G9sFi709g1MpA8i8ISVxXNO1mIbUmzRhl5iXmrMJOvg/9DwTjzp7T9fBnNkJ53H0niedWJYmYJwQjJFSVvhXjWNtPdgnHoGEufJrUaEeo80M3OmcPFG8WG9vShlI8I8Q5WNb0dxbv2Z92evHfB61oZluPZgQghGSO0yQXNRf3xRyG0pp9YiVai1joR+NLHBxccMXxTEiHkR+H6OLVDjKj/8mHg4dfy397tCIKbdWor6hCt3F+M7MppwF4XCD2pYpvr9TL77zQ//+zwQg9aHpGcgAphyVzZl1CL6ygorj2rVPxFelh03G8bAUV+XwyjE042GSGZzbZs2bNIiVwObVOPkTk8nAT6sf0vutLPiIlAQrB4oQGVM2TVlz0IqRq5r7aonN0ewC597nkBeuuoOaFqfR/PDXNTLpkNPZtpuoVSvVc1aQgOSQeqjsgrNvugeSfen8ZDG9NaLlzf7N6wQqUIhJNBwS5HvgJ2mdHoTkkqGK9Ljcpf4TqIDNvv0wTs8UTLuCpHzfaFsOuZ//1bzFBrjkFsAd4saLgRwPu/LjlfcFk0d7AVOOAG3B3w198q1U4k5hLaQFdiMC9ZBJfPBDvP3VwSQxmwdINdjPXuJLssmxjoKSgAx9TvaoGCGxq68o3obYzBlwYtZ9eVayf/6okavLRjeAyln0tBmaC5R+DqzZj86EuXtnZ/3xex3mFFmsU0LrQ0Na39h5Y3ZbL/0SlxpAatr+vd4Z2ZDgaQlgMS4XwoFRzyjsLxYpw//QsHRrFbjRP1yfaBHUvVzVTRF6In8sE5kdoHM4XJtLuT3Io8Ydl21V8eQeQuiQyX5YO9CsKrwHK9IIolbpPf+3kCHopVswlLLCElf8V3tlad59CXHbdZlKzDnet3iNNGN3wiBS3COl/fWIP2yLzo+xOAxPBgTu96LIdGa8bi6tnuB2N4FVbUwFKXtrNjCVKpX0HBY9Qf9zyoQyxz2IGJWtIXui5OHQLWASvodo6rAyBJcUjlMim/ZrZwBePr0Qe8Ud1v9J67UBCDjUWFV1YQhHnp695SaAOXNb7hJV2UbYhutOZFmpsVPLY4jGsUiqePeNjdXXXIu3rgA9rmyXUfxve9TiMzGX7cknPKuXEB1omIaa9OmgNFJCtuePwSIcBqESXECid20FL2hCW1HE6FXMcWTFi3SE9kl9lBaf0WSczmpICaGRi3JEjOdZ+xSN67nMWyW1HVhILKideLq5t13vSGU1tCt6YR1ceYPWm9wU9IkW9KgWhHuskFwkhFAkRvloSiEduTSYiuB5tG+K1gvka2LDqSpbOPO7LhL8WOYWYkmugX1nAJzIMzJVueQEPvEuKEdFGskfR1eT6qiKo25E3C84bstjdBDap3w+jix8Hc4wxBt7/IjOMxrENlpP8ln24iv9JJqgwfV0hln0ZPEbS8zo1V08dPjh3kInsbziMaHzq4/P0GHklxXg/a8J4z2ee84+k+QS1fo7gOQieOJyX0moiMcCypDT+va5p02MCbK+6VqxV/FK33fGa7Tte3vHq/9bC6EKFx7qbffwtw8laUjlvUAlHIaqn6mtts4D/X9k5iDt7Sy0TU1GVFHZnxRvvZ52Lx1FhQ1VzEaulI8+RxemlAXA7WYpM2NHL+0zMkblZCghu9s/XjBMwtexCg6c6aNPwgDEgsrcgUPePXOMO4Ac3ZCW6getaXXvwgC3aT3yZJX2CnAPHrIKkocGQs8qNxWi+LfkROMa8ITvUbAB9iSCcllj3WQN/JHY7BlXIBFMiZzEYoXtu+tyKS0tFPea1LfVHi2doLl2fSDOg5jDs7KAOmsPmtfChmHzLZQoIhfWavNUn9pAjWf+ygG8b12VeYZMLDFZAF6oVn5YFZI/iOvBNlSeg36Q1/kpZ8uGB37nhVgVhjSLPhMoe8vQQt88pyEFgiox7caG5xE8cBIsl0dKG2EfJbGJPhQxac0pAFT8JZpVi7KnulhQahZWPBnPyPk5rb5assc2kIqyasgdgbTWZrU+b6DRKeWxV5JtA5sc4Wej7UoKv3UN2GRVRhNWrvocup9Lok3gJWOKy6FWmqZ0Z6CjPunYi4+pbGnUohWqzrR/Bb29pB+DMmPyXKRiepc4ZEIqNpXJAHCRfOQcIpwzifXwDn1St4R5K+m++/bLsJSDYp0hAv6JmIg9fR/pPcP8eC2hHldp064qjDXNGijK4Jj/8apZqsMN7u8dmkoqiXRnjXh5t+PE13VVirjiQWQMFF11nT1izT5PXEHqQK1T9b9HRHqtHZBIRVku76erQTgEew55cWqYKZy0eiWt4uo7AvQTZCwv/3Eb9rXMOjGMyXxB3QtK0n7ZY+aYIT4VRQA6ibnGUoYsjVjINrwae1EajuEvJR5Q6sthYBpKr8GzBZGU3YnG1nuHLQoqtK7G2Cvu+w0BjB0Zj3nzwT2XCcBQB5miknoI90nNaxfXA/b2UqnUZIgsCnJfdYmaRxZMEDUnva89hwWo95SeXKI9zaHF7OlSYBzb+DE0LBa95slOIXYpVdIr64izqeZv0ljpLiwsrwEizYLpdQ12C/iFKC4S3Dsfyh+fI6oJDDRk6kvjD+NOmTCL9+X4wLLp2giyZxF+r5sug4f/tMj98oML0/ja86f3menDPManwI78WBgqSD9ygQtOrDpqew+ndTtX8TQmsadW0Ls4ofZs19yYKkkzkieHk1/oLztsTojiNSfVCITVwySfqMPM+laGMq2iEdaBoALgMljnkPXkkeHc/B0OqEG3JBYhBeewz90sNWL19F3LPCjRCfi6aHCsOkqAXySZehy7Bobn7/AWQ+iQIOwDgduiSaxfzColum60FahKZJuiqsg/RLBq2zk3U9cfhvI8cD47ZBzUXDh++dP9JCtoB0gjaFTvdOR5pVBPOUU/blbidHANhF9kq6gjRO+NlTIPe5paapmzC/XDfi/GG59ra8g7Vao0oxanGjy0lMTY+JMmDxftUZxdIses8KbVU/0AjFgxqZKDl6aQSfh8ZcDGVsmDG7ut6uDn5RLgcqXT/MOodoUY7msUk7md+1MURTFqO37Y3fYcv3VfR6P9rGqlavDMM+R07wbfSL2QqK731PYpg5Yi3QWcIAX4ENZj/pEC4hVH6eIeesi00o1TmrSBP/gyAqyKF5py2zG0hO/cUsK5plvjtMI8dA0ULDfEOE/o6bn9hdyfEfY6nECkGkFUMaw/w/T9KBMQ5XND/2PaJhwk3XvZ111dEk3XEmt0qMPvgVRak59tN3At2a/bzfTgpLy+SDy1z8iHRuMtzjwx/nrpmmBCWLM4usaqiw508cVJFdQTXWF3sfoxfk9pGekDB1lBYhlFXJQZXERLR0YTY/jo8+R81shtLtNHrLFOW9QzIL4AP5kAz1SfhiqBR29mC1OrqH5G4POsAqgXw0q9wzhMpBqRi18NIpgYjX3xCXItUw4AeAy9xRmo+nUNw/NQLseZ9GNeQSh65HubE7Wyqd6aAVhgwbaZJk0r130VlU952MqhsP4g7YUmGtLWBBSHwToOCrF7OH+9U5jC/yegSm/eyUzFc0FBMa6LHFPXrKAuoKgIYNXW8NMfEu3OO4QLiZ8ykpq0mtHL6/OHGyK4moGa+/XlliwKl1s0XhXUeMB9VZ7qGeigWDlnIPy7kuf8mbYtTC5i3YS14RQuLAfKsLZai5Q4z2cB/sJFjUyHJ8o8zOD/FAhQu0Nq2c/boOM7C6JjZOt2tq5NUKP6O4zNdxWhYdunik01c3Pl1kV8uu9NDNsSTHcUgQf0WdlHB+6QUDxD76YwdTRSqg3ciptTj2oY+ugyqSm0nAtRDP1+9dxj193R1Vau6deXNjlRhg0hKd4OZem1hTSPDxWkCiOqUc83syrVB81CUe3H7yGcztmKPd8NZ41dB4UeIBTV61+2eSIH2Apl5ScX3REjiOStdmijXOQ9hIVbox4AY9Zr3nr+xW6Q1djA2U4rLTGcAKJNwtzrckPUSsasloL6rgNLaSj0wn1GtPU8CQH9QJUhQd3zruTFCjzaQNCZz2T/esNytTa2n+j7Eu0WRTK0PBTcuNYpzFAYJJmGWo8XUpVjNeWgnvXjrCll1+/e1uUjCcgBhHjTW3r0V2i7xX/z9e4zHfBB9sRO8KQS/jKk+wdT9cyBRgGjUP0PVDJ0R6UPUMP1C+l3fH4AaA0saaZp21jJrmdLHHlU8Kz6dzakwxBk5GZ7WQx8y+yF8D3ogNhefAAtlioLSizvH6lNZFNZ5vE517LnOqi+ytM3Iu2vwA/TKoB0nJmlnJi/mbgjy1uYVNZbnLMo87PoF9aHFHtqWNUEHVX0VZh5+wLj+YaOAlWPDiBsYwFFJjYY750A9sJT6pEQf/FSxTpk8QRiP9TUzPuMcKccU/6eQO9VO+pT+8zGOvgS1hWDjQcd/pI5RB9s5rZgMHPmJe3wZFI+6nT45IWTz5GEP0PY8PELh2LNuExhDB8XJfgSTv5rCRWJVKHRCEteYzKe3OGmEVDRctHOVoYD4RYwm8G5hKzdJttVfCe8CK5zI+macriey3mdbd7hdteColz0EM71UuHrhqRvqr+UFVJv9bpwKn9R4l3Djw/bDj5vSbTKAegHb//h46nf8ej/eJLsdElzeBNADZYau4lTT7CfUx5tTZGDS7T70cYGeN03bBq//OW0rjohvvQ8IZKCx5gM4w0+fzcq1gCXnFJAHBYGa2aA1Q78YHSCvdFFtURgK9N4LZfHju1Fn7qKQ1n4WunJLTcMdEukNic3+e8oMKopXFZk4uzjvzQT9ld9s1HETP2mwEeEnbyFcxOeTIe1xhmpDZ86Dfi/DDgSrIFeOU8AvqVyble/nwl0dYqZMFhQpJyw+Od5IAEO+AaCjzb/OcsfnTYMHDg4vnTEff/3GlbWsKm6N8lKLHY9Oe35ZUvZeSrMH4WMo0QQZo0LeAWK00TX2AdHEnX1GsI+q5F5udyzCC3CyeinzuhJEfMnxBhaRR/NfmYpBpQDiuc1JxY8hcgK7pKQLR5tR1mRpN5+PXpFzWh2cgrucTiQNQfTNfZL4P6oOeMFwMcdH4CG9NdKLSmPtiUsZqqlASFYcF6CdfldnlKzy49fCR71el5/YsIkAZv8MBGcgdH0FymLgOO15FZb6Y5tI7Vfd2IOt+J1AP/2EtxXDpxDsQsgsxoznMr78BffmnsJfrxMYZIIgHRSW/OpmfhrMsw7yI618p+P2Cdt68tggwnm5wgLm1UaAWVWoanrN29dVDbH7pPKG/SLKrKcDqx7Ay1Hys7+ZmAtxSHD3Ia9bpxrFB4LVnLmzhMGvQm/PQ0vztJeD+YXpmFHT1zpKi2EbjaNwf7K973dSgespSPi7TtyaisjQEh+TyyQtfCVcXjwqxD3mM3aA+OGaj2ZwIO0W644dZB7QKVjXDuyZmJJdNik16UI6rc8Cvvf2fEvtqNTOt9yFHHefHnu/+s2JBZI5Z5EkWoxlXGY1tWEATxzn7QY0PNaUbJR8wApoGrR7pKrhae8flSC0qGK02NBJ2Xkr0YK+Nn2RHMCNNJRJNTCkgfSwqujcBuIFejP2Tz4aKQzgs5TpsTsfPTqNOTNX0OOIjG8bCyFYMb0xywScpmDtJiEfAA5Y5YnJku9DS3jXTflYiUgFCeAFb07j8l99kEfGsb4PNMhVjJ9atTqWUzZYGAUck72JOPQ/dAf+AqGCjFkFGci3Iwa5NWV2vpNByryY/WsuRTbAQKCDoN2qMmV3TKuB3/cA+WVSiNmlKuJy/NcbpxZ3jtVNadhDKvS10BsqzWtFv8IdtILd6Ke5M1j/it2XMfe6cKx6iVca3S4qsXgwVtvKGnaj+kLbZIXlOg4r8H9inxBxPSKpHMRFVNqZATulCtvRAwGs8RLiSYJJklC0yKnHFtLiu4RK5dFzUEMd6fvpdNioKRNjwmtrcp3cRl5RjL20RZ2W2oid/TkOV0l43nIuQ2m6G8SMmDBAQPThHV0+0oofKsgcAKfWaUll3PNYQG0XM6hw2qRJtK0yio99Mutwr1RN1BE8XIq8DwUo7azFm0gt33mIpa7FWFdVYtJrw2Qe7ZRL/ruIq0BdbOm+FyOVYa8Hh6/Bhh1HdwddwZA1IQgxCjj8061JVzGAGsh+IzKAgL9Ri5TeWH/GBz/uwsXm3NA3O1GlTP9vY+Jkxaq/qeuXGD/U4JR++LfVvzvgSwioY7bG6s+f5bhogRzXToUhElNquVERq9n3W/sc0bztt+ZCrOTyXoSLSqI1tsZbOtP6GlwVoB7v4R2t1dk1f1MCd2y1fakWmnevuYrnVeSUmDANwGlPub1WGBIGkELwrLqLODZTJVlqTIuQNG10EBpvdbRLIVCQ0vn8v3H/asUpIRn+MBUKBDyWgVDOw/teZDQJtvBQyYwOzRO2xYbSEVWHbP9cCpXvrH3LlYv8YGbtIDc5ci2GJeQHJpw43+EFoKbnM1np9nh450V+GtL5y/Oqy8w1Kl4rSd20CTH2cgMCT/uWU8nPLJDwTGMrlPoiYx1WpQ01FvEY8f28wYq4/M06gPznm/GVgkq+21IJxKXgV7zXYwfzVV5p6CEvQ0OFUY0GGxzwwu3rF92V5O3UI2+c/y53e4kWT9t3SwF5mrsZsFpRrW3HMYROKav6qD9MT0xK3dEqWFSS8H4H5l617+wgXvZCIdc2gOPQe+GzabHWFEeITHqLEbS9NjOGJy1Lu+xi7vbIZxlwRLcoXfhfGVp68aRFRyUhRsLRK+M+qswZJAr+9/cu5Efu9PUHf2vXKZex4icIor4dKM70lR7Df+Z8hOEMqk9zQtADk1R10JIf2LuswHd61qkA/V8tI48khbrjkUjTyZrsb+Q08CrqLmv2XzK08TVtPPhaN3kkt6MvSaiU0J8eP2mflZnHW6aRoIY4dwxuft503rZ9W5QEUl3lE2raP0dD3v+fWhgD72YE1cL/dOuuha58MDFFq6TwDFqFuN+ecW5sLjGmU+kTNf7X9Xxy2bG1ELldT1bUT71/X4TOCtDeXbdsYXl/T/RgDD/QhW+OVYNwrviwdi6Gv9ZwRjvC5dAyN8VTmdtIKzNQvsoM2VwNxSmiLF7kU2KlNoOwSke9fFILL3B1XP7wZIrCZKybtIH24maItmhTFIOBuc8QWiQLmQ4Jh9OB7bHStawUBtV9r5d9+vvVRLgdAdEMJyHGWKPM2L8/UusgJGoTWR5roUI/2h0BbfKHEO4GtxUOrehrWpD6HxfkXiGewkHwrGlfh1xjFbBiK/MxiUmcWc4c1rx25t35ysJsgpbomVuPbRCY50P1+Vt+fEuWIHfrTotv8JdI0Hev9qxCVUeCnZTo00jJMWXrFd9j2fokEAMZCDlAum2UpFaT1Pu4tvaco8HbeFDa7c2h63j1tfXu18p1FElk/TusTpybe4a/W9+Me2jmInEMXbw9+hPVGCLaqlXtsYA1wW2gWQpnf5kJfH5bviWgMyZuVZg8I5KHRy40yPhWVtR9lJxQ9oKQLF1V9vKnP7oEt2JL11WlgP4srrPrazwQD9ukLaPkh85hYhLAUR3NqWp+uX52cAfojFqzDIpJukXnDbWpk3AFrYAwK9RLRoGlT1yGkhu+thPs9GqJDIgyPF9zBIglqco6231kyWv4J7VHQQtYM6gG6BQS5g3iY3IVxYN6H7pgShdlzmnaluNbcw4JpAtQa1oImGGw2r2/b9PWM4ucCOeEO6mu/bweoNXkz47jxCnk7tPLfp8FGdM5H4dIGhmekEYVr6mhPB2ffKVr5wPDRWLVIySYCjcwaFn+4MStmi1JDozvPVny+wUt/Pd0UgWU+uiRtyvK21cemX8hZDU7tsnOyMZ/CIcyhargdExYZoD5UYM/30TNCmJdkkR/jJeD92kDd4c7hUklhxNO6kituXYtKFlOKXfHs+5gRdKgFjljsl23CgtUcHzGSdoyn4qLQ4pgDyb6bxh06s7QDfKThrLIygbe/Gw9k1uiQ8rAHd4lvYbQ0ASTeMDWrDV5cZAQKCicUJKXDy07674CEGcWGQO5+ncnJezIDz5PScHWZxZJq+0EScArqQlf8a5hww9KcswfAJKGHJT5TEGK/+P6wfl68L5rHfzfU/s/SwubTotX1J2XtQisuMfAxiUhcgrWu/jcNk9D2vJ1mk3o6BnuHLa4eDmM8gXfdCXhPNuOxJstn0NgHl6kVeyQ1S2K8HFIaj6y5gUKzLT4WrxROaK2wo1/WQHBVP25T+EST0jhFFpyVx6pLUz9bNG24r8eFDtjq+RfJhmHCZuTDnJ2KNkWP1iNilMPb7QUCd8NhYVwPIZvaPxnnZXsvfEYzYExC1vkM0k6iuOTBTpyvS3mh+2spwNd7xL9kpmyeNV3uCuFFhR7q9F7jby/Wyftywy+2z9rqJ1Tc9J+1vu+1f7RNoVu0WtQxoPelgR0/FIF8I0uQU8764gyVx9Xlp/7owwNV6GT+bCgL06zbVhTxkjVtQac5y45557fmx5YeAcnYCiT0osTDN9Th+P4/ghKydMbQST4Gj4PKk9s7tgsuvA2G1QgNDphbXTIfW5r+nGRtzuz/Jt5EQpq96a8pAtguI5QGX4GutMGgPJd7tGg940PvZjxcULKDuUpTPkf51c95G7VFotzArr1SlSI+oAUs0Cb7th9fhO7FORpJqhpykJiGjRTg3m96TNqD09Hsy9bAazvOa4+WIuDB8EhVPEZzCy3dVJa/V2vGWH2ilSf0xXuw9Q4FElTbAJGid44bMLd4G2YVexnAFkblxEGzBcBxzd9S5BlIwRdsqeuze39p4OKnXKHkHg5SVH6cIs/lYzpIUGuUBWnSmDEfaaIYfxpo9uT3u8xezQx9gmRWkJq8IMbuSTEGIX1Pcxu7jIpuefB+Dk5gScJaQyPY8PZi4RmuotJzYBY4QMh5OIAOPW8ec4PIpNzxflMWq9Y5ccZpXR+zaHjeo2DLqLjrK9VnY9RbsIKExwqwF3nS/1BLT+X+1Zwr+4eB4wKJfaRiHkI5NXPw35oK2WBiUo4jXe5mzXGXSSaNI8PtiPr9AwFAWtck+DRC3yzBMdRtvVA5wTYzU5sgqcsV2JWEWzNjZ7GjBr6p+m4xXCXV3uFqXS1tBW3wUPeh5dbsfrUVF4POEmFmGHKpCumxfoclGEYPqTiKlsmlxh4JCh1J+lUMz54+WHRlbi0kKe7ghgFAiN2hflWeZsd8IF2bVP6ljYm2xoxRagGAcvRs63ITx0frnVwX1z1wtVnUODqiAqiIsnA/RCyZnpjIgMcHGvtJ1gJBjJbu/5tEG/0742fEMs/J0IqszFB4VUR9UAieSsIZcQ/8V+UDZMyx0Y/x+TbdzEUFpIHc0kN0AOyQOMu0zwlj326lS53TRw66iWLvHuANEjGFJGzdedWmciLXm5N6/cKgF4bB1Gg+rgyaG2PH9Y4c8c9Ywnd1Gx5ghEGIh1DOivX1xgCvuM3L7wVNy43Bdp7I21TcRzfauHXuKB7lOzaceJWSyXW60Ad3hLbbB+peAYWD0y9/tThzPgBZe1ISVISWT86u8Zh8UlkiKlXEGtZrJ23dnA4klPVvxx6Rk1GVfhFJaaZZsRQpHN1nZfC4iwyfVA5a3zBXkemWZ6J87rwM4H0//75LDXo4sRdhJHlFmQMpBFRSy2J+sHeOF6SvrYb0BjWL2Ccvea622dSuUn6glsHT05NEvQh0hPBcsvQZlk+iHuUhc80/IhdOlqik4wt+IA4xR+omBvit6qIjESnsr8ixF8C9ZJaJVr5q5YgItudPjZyXkecg2/AryfInIfJ+25mziCmxAcmc75dRnB62/m1Ebi7buAv14w4w4T7Kd+DFvkmZlJyQP4c3Zq6XTklFiiEwM3/O1HDLqGf5BOo3jRNojuOwTB5DqHNyafUqtLv5370+u/COf/4WuSbZuWNJzFv3r2F5hlP5xlZScf7plBM+I9DSWjykTyKu5ROFeeFdiIhFhRhHStAMl6Jx6nrB2t8zOflIZXYJxN2L/PjJ0mLkhCorQgnFDhObHxEwYGRXZn1unbxeVHa14dz9NUvqZWZE273+P0XRb5qxDY6ht2K1k2C7YnAy39Q4pup9tpwBKvsW56+tHE42tHpNHz5uXxNLEwhGrURbu1lu2TCcdRD2kRa9ohWMpKHbqPCZmsgaHnJCC7/Hs2OI7eTQVPjsqnFQM2KO58whEZgUVYJ8XFGdRwlg/aFoA5b/+XjzNABdZx218zRDv25mqxuopbiqco=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述C++11中的移动构造函数、移动赋值运算符、相关使用时的注意事项（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计（二）</title>
    <link href="https://shuhaohwang.github.io/2019/08/29/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/08/29/概率论与数理统计（二）/</id>
    <published>2019-08-29T15:09:59.000Z</published>
    <updated>2019-08-29T15:33:01.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="条件概率与乘法公式"><a href="#条件概率与乘法公式" class="headerlink" title="条件概率与乘法公式"></a>条件概率与乘法公式</h4><ul><li><p>条件概率：</p><ul><li>P(B|A) = P(AB) / P(A)</li><li>P(A|B) = P(AB) / P(B)</li></ul></li><li><p>乘法公式</p><ul><li>P(AB) = P(A) - P(B|A) = P(B) - P(A|B)</li></ul></li></ul><hr><h4 id="全概率公式与贝叶斯公式"><a href="#全概率公式与贝叶斯公式" class="headerlink" title="全概率公式与贝叶斯公式"></a>全概率公式与贝叶斯公式</h4><ul><li><p>全概率公式：</p><ul><li><script type="math/tex; mode=display">P(A) = \sum_{i=1}^nP(B_i)P(A|B_i)</script></li><li><p>P(A) 要发生的事件的概率</p></li><li><p>P(B<sub>i</sub>)为A发生的前提事件的概率</p></li><li><p>P(A|B<sub>i</sub>)为B<sub>i</sub>事件已经发生后的前提下，A事件发生的概率</p></li></ul></li><li><p>贝叶斯公式：（逆概率公式）</p><ul><li><script type="math/tex; mode=display">P(B_i|A) = \frac {P(B_i)P(A|B_i)}{P(A)}</script></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;条件概率与乘法公式&quot;&gt;&lt;a href=&quot;#条件概率与乘法公式&quot; class=&quot;headerlink&quot; title=&quot;条件概率与乘法公式&quot;&gt;&lt;/a&gt;条件概率与乘法公式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;条件概率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(B|A) = P(AB)
      
    
    </summary>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://shuhaohwang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计（一）</title>
    <link href="https://shuhaohwang.github.io/2019/08/28/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://shuhaohwang.github.io/2019/08/28/概率论与数理统计（一）/</id>
    <published>2019-08-28T14:43:55.000Z</published>
    <updated>2019-08-28T15:39:12.051Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事件运算及概率"><a href="#事件运算及概率" class="headerlink" title="事件运算及概率"></a>事件运算及概率</h4><ul><li>事件运算<ul><li>包含事件<ul><li>A</li></ul></li><li>并事件<ul><li>A∪B = A+B</li></ul></li><li>差事件<ul><li>A - B  = AC<sub>B</sub> = A - AB</li></ul></li><li>交事件<ul><li>A∩B = AB</li></ul></li><li>互斥事件<ul><li>AB = ∅</li></ul></li><li>对立事件<ul><li>A∪C<sub>A</sub> = S; AC<sub>A</sub>  = ∅</li></ul></li><li>独立事件<ul><li><code>P(AB) = P(A)P(B)</code></li></ul></li></ul></li><li>其他：<ul><li><strong>A、B独立：</strong><ul><li>A、C<sub>B</sub>     C<sub>A</sub>、B    C<sub>A</sub>、C<sub>B</sub>互相独立</li></ul></li><li><strong>A、B、C独立：</strong><ul><li>A、B、C两两相互独立(充分不必要)</li><li><code>P(ABC) = P(A)P(B)P(C)</code></li></ul></li></ul></li></ul><hr><h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><ul><li><p>德摩根率：</p><ul><li><script type="math/tex; mode=display">C_{A∪B} = C_A · C_B</script></li><li><script type="math/tex; mode=display">C_{A∪B} = C_A∪C_B</script></li></ul></li></ul><ul><li><p>加法公式</p><ul><li><script type="math/tex; mode=display">P(A∪B) = P(A) + P(B) - P(AB）</script></li><li><script type="math/tex; mode=display">P(A∪B∪C) = P(A) + P(B) + P(C) - P(AB) - P(AC) - P(BC) + P(ABC)</script></li></ul></li></ul><ul><li><p>减法公式</p><ul><li><script type="math/tex; mode=display">P(A-B) = P(AC_B) = P(A) - P(AB)</script></li></ul></li><li><p>对立事件</p><ul><li><script type="math/tex; mode=display">P(C_A) = 1 - P(A)</script></li></ul></li><li><p>独立事件</p><ul><li><script type="math/tex; mode=display">P(AB) = P(A)·P(B)</script></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事件运算及概率&quot;&gt;&lt;a href=&quot;#事件运算及概率&quot; class=&quot;headerlink&quot; title=&quot;事件运算及概率&quot;&gt;&lt;/a&gt;事件运算及概率&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;事件运算&lt;ul&gt;
&lt;li&gt;包含事件&lt;ul&gt;
&lt;li&gt;A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="其他" scheme="https://shuhaohwang.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.7）深度优先搜索(邻接矩阵)</title>
    <link href="https://shuhaohwang.github.io/2019/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-7%EF%BC%89%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/</id>
    <published>2019-08-21T13:26:44.000Z</published>
    <updated>2019-08-22T07:42:47.118Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵的DFS-深度优先搜索-代码实现及思路"><a href="#邻接矩阵的DFS-深度优先搜索-代码实现及思路" class="headerlink" title="邻接矩阵的DFS(深度优先搜索)代码实现及思路"></a>邻接矩阵的DFS(深度优先搜索)代码实现及思路</h4><ol><li><strong>实现邻接矩阵DFS算法的前提</strong></li></ol><ul><li><p>思路：要实现邻接矩阵的DFS算法，首先就要在邻接矩阵的结构中设置一个标记数组，用来对应顶点数组在遍历过程中的访问情况，即已经访问过的顶点将被标记已被访问，没有访问的将被标记未访问。</p></li><li><p>代码1：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"> ....</span><br><span class="line">     </span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;Mark;<span class="comment">//标记数组</span></span><br><span class="line">     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建标记数组*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_mark</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//避免重复创建+验证</span></span><br><span class="line">    <span class="keyword">if</span>(Mark.size() != Vertex.size())<span class="keyword">return</span>;<span class="comment">//Vertex是顶点数组</span></span><br><span class="line">    </span><br><span class="line">    Mark.resize(Vertex.size(),<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><strong>遍历实现DFS</strong></li></ol><ul><li><p>思路：根据标识数组来确定是否要访问，函数参数可以更加顶点数组来指定结点开始，并可以通过函数指针作为参数之一多样化的去遍历图</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Mark.size())<span class="keyword">return</span>;</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    vistit(Vertex[ID]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; Vertex.size(); k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edges[ID][k] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[k])</span><br><span class="line">                DFS(k,visit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>代码解析</strong></p><img src="/2019/08/21/数据结构学习总结-（6-7）深度优先搜索-邻接矩阵/1.png"><div class="table-container"><table><thead><tr><th style="text-align:center">Mark/Vertex</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">false</td></tr></tbody></table></div><ul><li>邻接矩阵</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><ul><li>第一步<code>DFS(unsigned int ID,void(*visit)(const VT&amp; vertex))</code><ul><li>Mark[0] = true；</li><li>输出了A</li><li>Edge[0] [0]不输出，输出B,C,D</li></ul></li></ul><hr><ol><li>堆栈实现</li></ol><ul><li><p>思路：通过堆栈来模拟递归实现</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    create_mark();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Vertex.size(); i++)&#123;</span><br><span class="line">        DFS_(i,visit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ID,<span class="keyword">void</span>(*visit)(<span class="keyword">const</span> VT&amp; vertex))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ID &lt; <span class="number">0</span> || ID &gt; Vertex.size())<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.push(ID);</span><br><span class="line">    Mark[ID] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">auto</span> v = s.top();s.pop();</span><br><span class="line">        visit(Vertex[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">0</span>; w &lt; Vertex.size(); w++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Edge[ID][w] != definfo)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Mark[w])&#123;</span><br><span class="line">                s.push(w);</span><br><span class="line">                Mark[w] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵的DFS-深度优先搜索-代码实现及思路&quot;&gt;&lt;a href=&quot;#邻接矩阵的DFS-深度优先搜索-代码实现及思路&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵的DFS(深度优先搜索)代码实现及思路&quot;&gt;&lt;/a&gt;邻接矩阵的DFS(深度优先搜索)代
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.6）图的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-6%EF%BC%89%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/20/数据结构学习总结-（6-6）图的遍历/</id>
    <published>2019-08-20T03:53:51.000Z</published>
    <updated>2019-08-22T07:47:14.507Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的遍历（图的遍历是图的基本运算）"><a href="#图的遍历（图的遍历是图的基本运算）" class="headerlink" title="图的遍历（图的遍历是图的基本运算）"></a>图的遍历（图的遍历是图的基本运算）</h4><ul><li>定义：从已给的连通图中的某一个顶点出发，沿着一些边去访问遍历图中所有的顶点，且使每个顶点仅被访问一次</li><li>实质：找每个顶点的邻接点的过程</li></ul><hr><h4 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h4><ul><li>深度优先搜索(DFS)<ul><li>类似树的先序遍历</li></ul></li><li>广度优先搜索(BFS)<ul><li>类似树的层次遍历</li></ul></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的遍历（图的遍历是图的基本运算）&quot;&gt;&lt;a href=&quot;#图的遍历（图的遍历是图的基本运算）&quot; class=&quot;headerlink&quot; title=&quot;图的遍历（图的遍历是图的基本运算）&quot;&gt;&lt;/a&gt;图的遍历（图的遍历是图的基本运算）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：从
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.5）图的实现-邻接表</title>
    <link href="https://shuhaohwang.github.io/2019/08/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-5%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/</id>
    <published>2019-08-17T16:31:21.000Z</published>
    <updated>2019-08-19T13:02:41.535Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的每一个顶点来承载，通俗点讲，就是把一堆链表用顺序表进行存储的结构。</p><img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/1.png"><hr><h5 id="邻接表的实现及思路"><a href="#邻接表的实现及思路" class="headerlink" title="邻接表的实现及思路"></a>邻接表的实现及思路</h5><p><strong>邻接表的结构</strong></p><ul><li><p>思路：邻接表结构是由一个顶点结点数组，和各个邻接点组成的，其中顶点数组中含有顶点数据和指向邻接点的链域，而邻接点由邻接点域(对应顶点数组的顶点下标)和顶点所连接的其他顶点的邻接点地址。所以实现邻接表结构，首先就要有顶点数组和邻接点结构。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*邻接点结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点数组下标</span></span><br><span class="line">        Einfo info;<span class="comment">//保存权重</span></span><br><span class="line">        Edge_Node* next;<span class="comment">//指向下一个邻接点的指针</span></span><br><span class="line">        </span><br><span class="line">        Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id,Einfo info):ID(id),info(info),next(<span class="literal">nullptr</span>)&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*顶点数组元素结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VerTex_Node</span>&#123;</span></span><br><span class="line">       VT v_data;<span class="comment">//顶点数据</span></span><br><span class="line">       Edge_Node* Edge;</span><br><span class="line">       </span><br><span class="line">       VerTex_Node(VT v):v_data(v),Edge(<span class="literal">nullptr</span>); </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VerTex_Node&gt;Vertexs;<span class="comment">//顶点数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;</span><br><span class="line">    <span class="keyword">bool</span> undirected;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>添加顶点</strong></p><ul><li><p>思路：直接进行把顶点加入顶点数组即可</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span></span>&#123;</span><br><span class="line">    Vertexs.push_back(<span class="keyword">new</span> VerTex_Node(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>填加边</strong></p><p>思路：这里要注意的时，邻接表中的邻接点是以链表结合数组进行实现的，所以在添加边的时候，要对边结点的链域进行处理，这里可以采用链表中的前插法，邻接点一个个插入顶点数组的链域之间。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> id1,<span class="keyword">int</span> id2,Einfo info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id1].Edge;</span><br><span class="line">    Vertexs[id1].Edge = p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1,info);</span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    p-&gt;next = Vertexs[id2].Edge;</span><br><span class="line">    Vertexs[id2].Edge = p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>修改边的权值</strong></p><ul><li><p>思路：这个操作的思路比较明确，更加要修改的边，通过循环遍历该起始点的顶点数组中的链域结构即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1,<span class="keyword">const</span> <span class="keyword">int</span> id2,<span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id1].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id2)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">    Edge_Node* p = Vertexs[id2].Edge;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ID == id1)</span><br><span class="line">            p-&gt;info = info;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="具体代码实现："><a href="#具体代码实现：" class="headerlink" title="具体代码实现："></a>具体代码实现：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">AGraph</span> &#123;</span></span><br><span class="line"><span class="comment">/*邻接表结构-边结点*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ID;<span class="comment">//对应顶点集的下标</span></span><br><span class="line"></span><br><span class="line">Einfo info;<span class="comment">//权重</span></span><br><span class="line">Edge_Node* next;</span><br><span class="line">Edge_Node(<span class="keyword">unsigned</span> <span class="keyword">int</span> id, Einfo info) :ID(id), info(info), next(<span class="literal">nullptr</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶点结点结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex_Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VT v_data;</span><br><span class="line">Edge_Node* Edge = <span class="literal">nullptr</span>;</span><br><span class="line">Vertex_Node(VT v) :v_data(v) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vertex_Node&gt; VerTexs;<span class="comment">//顶点集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">AGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>) :undirected(undirected), Num_Edge(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123;</span><br><span class="line"><span class="keyword">return</span> VerTexs[i].v_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT t)</span> </span>&#123;</span><br><span class="line">VerTexs.push_back(Vertex_Node(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> id1, <span class="keyword">unsigned</span> <span class="keyword">int</span> id2, Einfo info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id2, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*前插*/</span></span><br><span class="line">p-&gt;next = VerTexs[id1].Edge;</span><br><span class="line">VerTexs[id1].Edge = p;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = <span class="keyword">new</span> Edge_Node(id1, info);</span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">p-&gt;next = VerTexs[id2].Edge;</span><br><span class="line">VerTexs[id2].Edge = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> id1, <span class="keyword">const</span> <span class="keyword">int</span> id2, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123;</span><br><span class="line">Edge_Node* p = VerTexs[id1].Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id2)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edge_Node* p = VerTexs[id2].Edge;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;ID == id1)</span><br><span class="line">p-&gt;info = info;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Agraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Edge_Node* p = e.Edge;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;ID &lt;&lt; <span class="string">","</span> &lt;&lt; p-&gt;info &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : VerTexs) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i.v_data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接表:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Agraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> VerTexs.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实验结果：<img src="/2019/08/18/数据结构学习总结-（6-5）图的实现-邻接表/2.png"></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接表&quot;&gt;&lt;a href=&quot;#邻接表&quot; class=&quot;headerlink&quot; title=&quot;邻接表&quot;&gt;&lt;/a&gt;邻接表&lt;/h4&gt;&lt;p&gt;邻接表是一种顺序分配和链式分配相结合的存储结构，其顶点集由顺序表进行存储，其边则用邻接顶点来表示，而邻接点则用链式结构在顺序结构中的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-(2.8)临时对象处理和程序优化探讨</title>
    <link href="https://shuhaohwang.github.io/2019/08/17/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2-8-%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E5%A4%84%E7%90%86%E5%92%8C%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96%E6%8E%A2%E8%AE%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/17/C-进阶学习总结-2-8-临时对象处理和程序优化探讨/</id>
    <published>2019-08-17T13:00:49.000Z</published>
    <updated>2019-08-17T13:21:17.851Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述临时对象处理方案、程序优化等（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="性能优化" scheme="https://shuhaohwang.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.4）图的实现-邻接矩阵</title>
    <link href="https://shuhaohwang.github.io/2019/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-4%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/</id>
    <published>2019-08-16T03:57:14.000Z</published>
    <updated>2019-08-16T12:29:48.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。<br><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"><br>该存储结构，是借助线性代数的邻接矩阵来表示图的结构。</p><hr><h4 id="具体实现和思路"><a href="#具体实现和思路" class="headerlink" title="具体实现和思路"></a>具体实现和思路</h4><ul><li><p><strong>邻接矩阵实现：</strong></p><ul><li><p>思路：邻接矩阵的实现是要借助二维数组来实现，在C++中可以使用vector来代替二维数组，从而实现矩阵。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MGraph</span>&#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edge<span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirecter(undirected)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加顶点/获得顶点总数：</strong></p><ul><li><p>思路：跟边集构建一样，使用vector进行存储顶点数据</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    VerTex.push_back(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_Vertex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VerTex.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建邻边矩阵：</strong></p><ul><li><p>思路：因为邻边矩阵是一个NXN的方形矩阵(N为顶点数量)，所以在构建邻边矩阵的时候，要先根据顶点总数来创建代表邻边矩阵的二维数组。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_MGraph</span><span class="params">(Einfo&amp; definfo = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*用来防止多次创建邻接矩阵*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N_Vertex = Get_n_Vertex();</span><br><span class="line">        Edge.resize(N_Vertex,<span class="built_in">vector</span>&lt;Einfo&gt;(N_Vertex,definfo));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>添加边</strong></p><ul><li><p>思路：因为邻接矩阵是一个二维数组，所以添加边的时候直接把顶点下标当做邻接矩阵的坐标位置进行编写即可。</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i,<span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp;info = <span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*要先创建邻接矩阵才能实现添加边操作*/</span></span><br><span class="line">    <span class="keyword">if</span>(VerTex.size() != Edge.size())</span><br><span class="line">      Create_MGraph();</span><br><span class="line">    </span><br><span class="line">    Edge[i][j] = info;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(undirected)&#123;</span><br><span class="line">        Edge[j][i] = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/2.png"><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> VT, <span class="keyword">typename</span> Einfo&gt;<span class="class"><span class="keyword">class</span> <span class="title">MGraph</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt;Vertex;<span class="comment">//顶点集</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Einfo&gt;&gt;Edges; <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Num_Edge;<span class="comment">//边数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//标记是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line">MGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected),Num_Edge(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点总数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_vertex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Vertex.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_n_edges</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Num_Edge; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_Mgraph</span><span class="params">(<span class="keyword">const</span> Einfo&amp; definfo = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size()) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n_vertex = Get_n_vertex();</span><br><span class="line"></span><br><span class="line">Edges.resize(n_vertex, <span class="built_in">vector</span>&lt;Einfo&gt;(n_vertex, definfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; Vertex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo info)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Edges.size() != Vertex.size())</span><br><span class="line">create_Mgraph();</span><br><span class="line"></span><br><span class="line">Edges[i][j] = info;</span><br><span class="line">Num_Edge++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (undirected) &#123;</span><br><span class="line">Edges[j][i] = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Mgraph</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : Vertex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"邻接矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Print_Mgraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.Get_n_vertex() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.Get_n_edges() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/16/数据结构学习总结-（6-4）图的实现-邻接矩阵/1.png"></p></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;邻接矩阵&quot;&gt;&lt;a href=&quot;#邻接矩阵&quot; class=&quot;headerlink&quot; title=&quot;邻接矩阵&quot;&gt;&lt;/a&gt;邻接矩阵&lt;/h4&gt;&lt;p&gt;用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。邻接矩阵又分为有向图邻接矩阵和无向图邻接矩阵。&lt;br
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.3）图的实现边表</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-3%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BE%B9%E8%A1%A8/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-3）图的实现边表/</id>
    <published>2019-08-15T13:26:14.000Z</published>
    <updated>2019-08-15T15:38:47.519Z</updated>
    
    <content type="html"><![CDATA[<h4 id="边表"><a href="#边表" class="headerlink" title="边表"></a>边表</h4><ul><li>边表是把图的顶点，和边分别用顺序表进行存储的结构</li><li>这种存储结构是最简单、最容易实现的图存储结构</li><li>缺点：如果边的数目过大，会使效率降低</li></ul><hr><h4 id="代码实现及思路"><a href="#代码实现及思路" class="headerlink" title="代码实现及思路"></a>代码实现及思路</h4><ul><li><p>边表结构</p><ul><li><p>思路：因为边表是通过两个顺序表分别存储顶点集和边集的存储结构，所以在实现时可以通过创建顶点集和边集的结构，其中边集要有两个顶点在顶点集中的下标数值，和该边对应的权值。其中顺序表可以通过C++内置的vector结构实现。</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt; <span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span>&#123;</span></span><br><span class="line">    <span class="comment">/*实现边集结构*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">        <span class="comment">/*边两头的顶点在顶点集的下标*/</span></span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        Einfo info;<span class="comment">//用来存储权的数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*边集构造函数*/</span></span><br><span class="line">        Edge(<span class="keyword">int</span> i,<span class="keyword">int</span> j,Einfo info):x(i),y(j),info(info)&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;VT&gt;VerTex;<span class="comment">//顶点集</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;Edges;<span class="comment">//边集</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> undirected;<span class="comment">//用来标记是否为无向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*边表构造函数(默认为无向表)*/</span></span><br><span class="line">     ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirecter)&#123;&#125;; </span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加顶点</p><ul><li><p>思路：直接通过对vector结构进行操作添加即可</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_VerTex</span><span class="params">(VT vertex)</span></span>&#123;VerTex.push_back(vertex);&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>添加边</p><ul><li><p>思路：跟添加顶点操作一致</p></li><li><p>代码实现：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_Edge</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span></span>&#123;Edges.push_back(Edge(i,j,info));&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/1.png"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* VT 顶点数据</span></span><br><span class="line"><span class="comment">* Einfo 边数据类型(权)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> VT,<span class="keyword">typename</span> Einfo&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElistGraph</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">Einfo info;</span><br><span class="line">Edge(<span class="keyword">int</span> i, <span class="keyword">int</span> j, Einfo inf) :x(i), y(j), info(inf) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;VT&gt; VerTex;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; Edges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> undirected;<span class="comment">//判断是否为无向图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*默认为有向图*/</span></span><br><span class="line">ElistGraph(<span class="keyword">bool</span> undirected = <span class="literal">true</span>):undirected(undirected)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加顶点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_VerTex</span><span class="params">(VT vertex)</span> </span>&#123; VerTex.push_back(vertex); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加边*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edges</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> i, <span class="keyword">const</span> <span class="keyword">int</span> j, <span class="keyword">const</span> Einfo&amp; info)</span> </span>&#123; Edges.push_back(Edge(i, j ,info)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载运算符*/</span></span><br><span class="line"></span><br><span class="line">VT <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;<span class="keyword">return</span> VerTex[i];&#125;</span><br><span class="line">VT&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> VerTex[i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获得顶点数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_VT</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> VerTex.size(); &#125;</span><br><span class="line"><span class="comment">/*获得边的数量*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n_e</span><span class="params">()</span> <span class="keyword">const</span></span>&#123; <span class="keyword">return</span> Edges.size(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : VerTex) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"边："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : Edges) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="string">" "</span> &lt;&lt; e.y &lt;&lt; <span class="string">" "</span> &lt;&lt; e.info &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ElistGraph&lt;<span class="keyword">char</span>, <span class="keyword">double</span>&gt; G(<span class="literal">false</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'A'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'B'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'C'</span>);</span><br><span class="line">G.Add_VerTex(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">1</span>, <span class="number">12.3</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">3</span>, <span class="number">9.5</span>);</span><br><span class="line">G.Add_Edges(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3.1</span>);</span><br><span class="line">G.Add_Edges(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>);</span><br><span class="line">G.Add_Edges(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">G.print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"顶点数量为: "</span> &lt;&lt; G.get_n_VT() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"边的数量为: "</span> &lt;&lt; G.get_n_e() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><p>实验结果：<img src="/2019/08/15/数据结构学习总结-（6-3）图的实现边表/2.png"></p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;边表&quot;&gt;&lt;a href=&quot;#边表&quot; class=&quot;headerlink&quot; title=&quot;边表&quot;&gt;&lt;/a&gt;边表&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;边表是把图的顶点，和边分别用顺序表进行存储的结构&lt;/li&gt;
&lt;li&gt;这种存储结构是最简单、最容易实现的图存储结构&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6.2）图的抽象数据类型</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-2%EF%BC%89%E5%9B%BE%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-2）图的抽象数据类型/</id>
    <published>2019-08-15T13:05:08.000Z</published>
    <updated>2019-08-15T13:25:09.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图的抽象数据类型"><a href="#图的抽象数据类型" class="headerlink" title="图的抽象数据类型"></a>图的抽象数据类型</h4><ul><li>ADT Graph</li><li>Data     V是具有相同特性的数据元素的集合名称为顶点集</li><li>Relation<ul><li>R = {VR}</li><li>VR = {<v,w>|V,W∈V且P(V,W) <v,w>表示从V，W的弧，P(v,w)定义了弧的<v,w>的意义}</v,w></v,w></v,w></li></ul></li><li>Operation<ul><li>createGraph(&amp;G,V,VR)<ul><li>初始条件：V是图的顶点集，VR是图中边/弧的集合</li><li>操作结果：按V和VR的定义构造图G</li></ul></li><li>DFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>深度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li><li>BFSTraverse(G)<ul><li>初始条件：图G存在</li><li>操作结果：对图进行<strong>广度优先遍历</strong>，在遍历过程中对每个顶点访问一次</li></ul></li></ul></li></ul><hr><h4 id="图的数据存储结构"><a href="#图的数据存储结构" class="headerlink" title="图的数据存储结构"></a>图的数据存储结构</h4><ul><li>边表</li><li>数组表示法(邻接矩阵)</li><li>邻接表</li><li>十字链表(有向图)</li><li>多重邻接表(无向图)</li></ul><p>— (本文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图的抽象数据类型&quot;&gt;&lt;a href=&quot;#图的抽象数据类型&quot; class=&quot;headerlink&quot; title=&quot;图的抽象数据类型&quot;&gt;&lt;/a&gt;图的抽象数据类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ADT Graph&lt;/li&gt;
&lt;li&gt;Data     V是具有相同特性的数据元
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>C++进阶学习总结-（2.7）左值和右值、左右值引用、std::move()函数</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/C-%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%882-7%EF%BC%89%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC%E3%80%81%E5%B7%A6%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E3%80%81std-move-%E5%87%BD%E6%95%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/C-进阶学习总结-（2-7）左值和右值、左右值引用、std-move-函数/</id>
    <published>2019-08-14T18:10:46.000Z</published>
    <updated>2019-08-15T08:24:27.816Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章是加密文章，请输入密码后查看." />    <label for="pass">此文章是加密文章，请输入密码后查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      讲述左值和右值、C++11中新版的右值引用运算符 &amp;&amp;、std::move()函数（加密文章）
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://shuhaohwang.github.io/tags/C/"/>
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="C++学习总结" scheme="https://shuhaohwang.github.io/tags/C-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（6-1）图的定义及概念</title>
    <link href="https://shuhaohwang.github.io/2019/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%886-1%EF%BC%89%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E6%A6%82%E5%BF%B5/"/>
    <id>https://shuhaohwang.github.io/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/</id>
    <published>2019-08-14T16:44:55.000Z</published>
    <updated>2019-08-14T18:07:05.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><ul><li>定义：图G(graph)是一些点和线的集合<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/1.png"></li><li>图中的点叫作<strong>顶点</strong>(VerTex)</li><li>两个顶点的连线叫作<strong>边</strong>(Edges)</li><li>Graph = (V,E)<ul><li>V：顶点(数据元素)的<strong>有穷非空</strong>集合</li><li>E：边的有穷集合</li></ul></li></ul></li></ul><hr><h4 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h4><ul><li><p>无向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"></li><li>每一条边都是没有方向的</li><li>顶点集合{A,B,C,D}</li><li>边集合{(A,B),(A,D),(C,D),(C,B),(A,C)}</li></ul></li><li><p>有向图</p><ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/3.png" title="其中B为弧头(Head),D为弧尾(Tail)"></li><li>每一条边有方向的，也称弧(arc)</li><li>顶点集合{A,B,C,D}</li><li>边集合{(B,A),(A,D),(B,C),(C,A)}</li></ul></li><li>完全图<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/4.png"></li><li>任意两个顶点都有一条边相连的图叫作<strong>完全图</strong></li><li>无向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)/2条边</strong></li><li>有向完全图：如果有<strong>N个结点</strong>那么它有<strong>N(N-1)条边</strong></li></ul></li><li>网<ul><li><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/5.png"></li><li>网是边或弧<strong>带权</strong>的图</li><li>无向网</li><li>有向网</li></ul></li></ul><hr><h5 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h5><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/6.png" title="1和2是3的子图"><ul><li>1和2是3的子图</li></ul><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><img src="/2019/08/15/数据结构学习总结-（6-1）图的定义及概念/2.png"><ol><li>如果边(V,U)∈E，则称顶点V和U互为邻接点(Adjacent)<ul><li>例：A/B、B/C、C/D…互为邻接点</li></ul></li><li>边(V,U)依附于(incident)顶点V和U(或边与顶点相关联)<ul><li>例：边(A,B)依附于顶点A、B上</li></ul></li><li>顶点V的度(Degree)是和V相关联的边的数量，记为TD(V)，对于有向图：有出度和入度<ul><li>例：A的度为3、D的度为2</li><li><strong>握手定理</strong>：边数(E) = 各顶点度数和/2</li></ul></li></ol><h5 id="相关术语解释"><a href="#相关术语解释" class="headerlink" title="相关术语解释"></a>相关术语解释</h5><ul><li><p>路径</p><ul><li>若从一个顶点V<sub>i</sub>出发，沿一些边经过一些顶点，再到达顶点V<sub>k</sub>,则称沿途的经过顶点的序列为从V<sub>i</sub>到V<sub>k</sub>的路径</li></ul></li><li><p>路径的长度</p><ul><li>路径上的边或弧的数目</li></ul></li><li>回路(环)<ul><li>起点与终点相同的路径</li></ul></li><li>简单路径<ul><li><strong>没有重复</strong>顶点的路径，即不含回路</li></ul></li><li>简单回路<ul><li>除起点和终点相同外，<strong>没有</strong>其余<strong>重复</strong>顶点的路径</li></ul></li></ul><hr><h5 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h5><ul><li>在<strong>无向图</strong>G中，如果从顶点V到顶点V`<strong>有路径</strong>，则称V和V’是连通的</li><li>如果对于图中的任意两个顶点V<sub>i</sub>和V<sub>k</sub><strong>都是连通</strong>的，则称G是<strong>连通图</strong></li><li>是否连通是对无向图来说的</li></ul><h5 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h5><ul><li>在<strong>有向图</strong>G中，从顶点u到顶点v有路径，且从顶点v到顶点u也有路径，则称u和v是强连通的</li><li>如果有向图的任意两个顶点u和v都是强连通，则称G是<strong>强连通图</strong></li><li>是否强连通是对于有向图来说的</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot;图&quot;&gt;&lt;/a&gt;图&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;定义：图G(graph)是一些点和线的集合&lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;/2019/08/15/数据结构学习总结-（6-1）图的
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14.1）哈夫曼编码表的代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14-1%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81%E8%A1%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/</id>
    <published>2019-08-11T14:39:41.000Z</published>
    <updated>2019-08-11T16:38:48.698Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码表"><a href="#哈夫曼编码表" class="headerlink" title="哈夫曼编码表"></a>哈夫曼编码表</h4><ol><li>根据构建的哈夫曼树，左分支标记为0有分支标记为1</li><li>通过二维数组保存编码表</li></ol><hr><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> code[<span class="number">256</span>][<span class="number">128</span>] <span class="comment">//存储哈夫曼编码表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Codeing</span><span class="params">(haffmanNode* node,<span class="keyword">char</span>* temparray,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*处理空结点的情况+递归出口*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*当到达叶结点的时候*/</span></span><br><span class="line">    <span class="keyword">if</span>(!node-&gt;R_Node || !node-&gt;L_Node)&#123;</span><br><span class="line">        temparray[index] = <span class="string">'\0'</span>;</span><br><span class="line">        </span><br><span class="line">        strcpy_s(code[node-&gt;data<span class="number">-0</span>],<span class="number">128</span>,temparray);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*递归获取编码表*/</span></span><br><span class="line">    temparray[index] = <span class="string">'0'</span>;</span><br><span class="line">    Codeing(node-&gt;L_Node,temparray,index++);</span><br><span class="line">    temparray[index] = <span class="string">'1'</span>;</span><br><span class="line">    Codeing(node-&gt;R_Node,temparray,index++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="技术小结："><a href="#技术小结：" class="headerlink" title="技术小结："></a>技术小结：</h5><ul><li>temparray数组用来临时存储字符对应的哈夫曼编码，存储格式为字符串</li><li>这里采用二维数组来存储哈夫曼编码表，第一维下标为字符对于的ASCII码，所储存的为对应的编码</li><li>当到达叶结点的时候，在该位置下标的temparry设置为结束符，意味着一个字符串(字符编码)的存储完毕</li></ul><hr><h4 id="编码过程解析"><a href="#编码过程解析" class="headerlink" title="编码过程解析"></a>编码过程解析</h4><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/1.png"><ul><li>第一步：<code>Codeing(haffmanNode* node,char* temparray,int index)</code><ul><li>根据哈夫曼树构建完毕的node数组</li><li>定义<code>char* temparray[128]；</code>index = 0；</li><li>parent4 拥有左右孩子且不空、temparray[0]  = 0</li></ul></li><li>第二步: <code>Codeing(node(parent4)-&gt;L_Node,temparray,index++);</code><ul><li>index = 1</li><li>B无左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>，temparry[1] = ‘\0’</li><li>code[66(B)] = “0”</li><li>return结束此处递归</li></ul></li><li>第三步： <code>Codeing(node(parent4)-&gt;R_Node,temparray,index++);</code><ul><li>index = 1、temparray[0] = 1</li><li>parent3 拥有左右孩子且不空执行左递归、temparry[1] = 0</li></ul></li><li>第四步：<code>Codeing(node(parent3)-&gt;L_Node,temparray,index++);</code><ul><li>index = 2 </li><li>D结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[2] = ‘\0’</li><li>code[68(D)] = “10”</li><li>return结束此处递归</li></ul></li><li>第五步：<code>Codeing(node(parent3)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[1] = 1,index = 2</li><li>parent2拥有左右孩子且不空指向左递归、temparry[2] = 0</li></ul></li><li>第六步：<code>Codeing(node(parent2)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 3</li><li>parent1拥有左右孩子且不空指向左递归、temparry[3] = 0</li></ul></li><li>第七步：<code>Codeing(node(parent1)-&gt;L_Node,temparray,index++)；</code><ul><li>index = 4</li><li>C结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[67(C)] = “1100”</li><li>return结束此处递归</li></ul></li><li>第八步：<code>Codeing(node(parent1)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[3] = 1，index = 4</li><li>E结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[4] = ‘\0’</li><li>code[69(E)] = “1101”</li><li>return结束此处递归</li></ul></li><li>第九步：<code>Codeing(node(parent2)-&gt;R_Node,temparray,index++)；</code><ul><li>temparry[2] = 1、index = 3</li><li>A结点没有左右孩子执行<code>if(!node-&gt;R_Node || !node-&gt;L_Node)</code>、temparray[3] = ‘\0’</li><li>code[65(A)] = “111”</li></ul></li></ul><hr><ul><li><img src="/2019/08/11/数据结构学习总结-（5-14-1）哈夫曼编码表的代码实现/2.png"></li><li>| code[下标] | 储存元素（编码） |<br>| :————: | :———————: |<br>|  65（A）   |       111        |<br>|  66（B）   |        0         |<br>|  67（C）   |       1100       |<br>|  68（D）   |        10        |<br>|  69（E）   |       1101       |</li></ul><h5 id="解析过程错误小结："><a href="#解析过程错误小结：" class="headerlink" title="解析过程错误小结："></a>解析过程错误小结：</h5><ul><li>函数递归时传参是形参，即index在递归时自加了。结束该分支后返回上一个函数时index值还是递归自加前的值</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码表&quot;&gt;&lt;a href=&quot;#哈夫曼编码表&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼编码表&quot;&gt;&lt;/a&gt;哈夫曼编码表&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;根据构建的哈夫曼树，左分支标记为0有分支标记为1&lt;/li&gt;
&lt;li&gt;通过二维数组保存编码表&lt;/l
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.14）哈夫曼树的构建代码实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-14%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/</id>
    <published>2019-08-10T17:16:45.000Z</published>
    <updated>2019-08-11T14:37:32.852Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼树的构建"><a href="#哈夫曼树的构建" class="headerlink" title="哈夫曼树的构建"></a>哈夫曼树的构建</h4><h5 id="哈夫曼树的构建步骤"><a href="#哈夫曼树的构建步骤" class="headerlink" title="哈夫曼树的构建步骤"></a>哈夫曼树的构建步骤</h5><ol><li>根据权重进行从小到大排列</li><li>取最小的两个构成一个子树,并使两个的权值相加用来代替这两个结点</li><li>根据这个新的权重再进行排列</li><li>重复1.2.3步</li></ol><hr><h5 id="代码实现-顺序结构储存"><a href="#代码实现-顺序结构储存" class="headerlink" title="代码实现(顺序结构储存)"></a>代码实现(顺序结构储存)</h5><ul><li><p>结点的构建</p><ul><li><p>根据哈夫曼树的构建，结点首先要包含权值、左右子树指针，其次要包含数据</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">haffmanNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> weigth;<span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    </span><br><span class="line">    haffmanNode* L_Node;<span class="comment">//左孩子</span></span><br><span class="line">    haffmanNode* R_Node;<span class="comment">//右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序结构存储二叉树*/</span></span><br><span class="line"></span><br><span class="line">haffmanNode node[<span class="number">256</span>]；</span><br><span class="line"></span><br><span class="line">haffmanNode allL_Node[<span class="number">128</span>];</span><br><span class="line">haffmanNode allR_Node[<span class="number">128</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>根据权值进行排序(冒泡排序)</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortHaffmanNode</span><span class="params">(haffmanNode* nodes,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    haffmanNode temp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length - <span class="number">1</span> - i; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes[k].weight &lt; nodes[k+<span class="number">1</span>].weight)&#123;</span><br><span class="line">                temp = nodes[k];</span><br><span class="line">                nodes[k] = nodes[k+<span class="number">1</span>];</span><br><span class="line">                nodes[k+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>哈夫曼树的构建</p><ul><li><p>对结点先进行排序取最小的构成一颗树</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHaffmanTree</span><span class="params">(haffmanNode* nodes, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//递归出口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*根据权值进行排序*/</span></span><br><span class="line">    sortHaffmanNode(nodes,length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*用来压缩成哈夫曼编码用*/</span></span><br><span class="line">    allL_Node[length] = nodes[length<span class="number">-1</span>];<span class="comment">//保存左结点</span></span><br><span class="line">    allR_Node[length] = nodes[length<span class="number">-2</span>];<span class="comment">//保存右结点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*取最小权重的两个结点重新组成树*/</span></span><br><span class="line">    haffmanNode parent;</span><br><span class="line">    parent.weight = allL_Node[length].weight + allR_Node[length].weight;</span><br><span class="line">    </span><br><span class="line">    parent.L_Node = &amp;allL_Node[length];</span><br><span class="line">    parent.R_Node = &amp;allR_Node[length];</span><br><span class="line">    </span><br><span class="line">    nodes[length - <span class="number">2</span>] = parent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归直至哈夫曼树创建完成</span></span><br><span class="line">    CreateHaffmanTree(nodes,length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="哈夫曼树构建解析"><a href="#哈夫曼树构建解析" class="headerlink" title="哈夫曼树构建解析"></a>哈夫曼树构建解析</h4><p>例图：<img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/1.png"></p><ul><li><p>第一步：<code>void CreateHaffmanTree(haffNode* node, int length)</code></p><ul><li><p>node数组内容{A(12),B(26),C(5),D(18),E(4)}，length = 5；</p></li><li><p>排序后 node{B,D,A,C,E},取最小结点C、E组成树</p></li><li><p><code>allL_Node[5] = C、allR_Node[5] = E</code></p></li><li><p>parent1：weight = (4 + 5)9、L_Node = C、R_Node = E</p></li><li><p>node 数组内容变更为{B(26),D(18),A(12),parent1(9)}</p></li></ul></li><li><p>第二步：<code>CreateHaffmanTree(node, length - 1(4))</code></p><ul><li>node 数组内容{B(26),D(18),A(12),parent1(9)}，length = 4</li><li>排序后 node{B,D,A,parent1},取最小结点A、parent1组成树</li><li><code>allL_Node[4] = parent1、allR_Node[4] = A</code></li><li>parent2：weight = (9+12)21、L_Node = parent1、R_Node = A\</li><li>node 数组内容变更为{B(26),D(18),parent2(21)}</li></ul></li><li><p>第三步：<code>CreateHaffmanTree(node, length - 1(3))</code></p><ul><li>node 数组内容{B(26),D(18),parent2(21)}、length = 3</li><li>排序后 node{B,parent2,D},取最小结点parent2、D组成树</li><li><code>allL_Node[3] = D、allR_Node[3] = parent2</code></li><li>parent3：weight = (18+21)39、L_Node = D、R_Node = parent2</li><li>node 数组内容变更为{B(26),parent3(39)}</li></ul></li><li><p>第四步：<code>CreateHaffmanTree(node, length - 1(2))</code></p><ul><li>node 数组内容{B(26),parent3(39)}、length = 2</li><li>排序后 node{parent3,B},取最小结点parent3、B组成树</li><li><code>allL_Node[2] = B、allR_Node[2] = parent3</code></li><li>parent4：weight = (26+39)65、L_Node = B、R_Node = parent3</li><li>node 数组内容变更为{parent4(65)}</li></ul></li><li><p>第五步：<code>CreateHaffmanTree(node, length - 1(1))</code></p><ul><li>length = 1 符合<code>if(length &lt;= 1)return;</code>结束递归，哈夫曼树创建完毕</li></ul></li></ul><hr><img src="/2019/08/11/数据结构学习总结-（5-14）哈夫曼树的构建代码实现/2.png"><div class="table-container"><table><thead><tr><th style="text-align:center">allL_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">B</td><td style="text-align:center">D</td><td style="text-align:center">parent1</td><td style="text-align:center">C</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">allR_Node</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">NULL</td><td style="text-align:center">parent3</td><td style="text-align:center">parent2</td><td style="text-align:center">A</td><td style="text-align:center">E</td></tr></tbody></table></div><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼树的构建&quot;&gt;&lt;a href=&quot;#哈夫曼树的构建&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼树的构建&quot;&gt;&lt;/a&gt;哈夫曼树的构建&lt;/h4&gt;&lt;h5 id=&quot;哈夫曼树的构建步骤&quot;&gt;&lt;a href=&quot;#哈夫曼树的构建步骤&quot; class=&quot;header
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.13）哈夫曼编码</title>
    <link href="https://shuhaohwang.github.io/2019/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-13%EF%BC%89%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"/>
    <id>https://shuhaohwang.github.io/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/</id>
    <published>2019-08-09T16:46:14.000Z</published>
    <updated>2019-08-09T17:49:51.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><h5 id="哈夫曼编码是什么？"><a href="#哈夫曼编码是什么？" class="headerlink" title="哈夫曼编码是什么？"></a>哈夫曼编码是什么？</h5><p>哈夫曼编码是用来压缩数据的一种手段，在网络上信息的传输都是通过二进制来进行输送的（0和1），在进行数据输送的时候，首先就要将即将输送的数据进行转码，使其变为二进制再进行传输。例如：</p><ul><li><p>要传输<code>‘ABCADBBAED’</code>这段数据。且你知道一个二进制转换编码表：</p><ul><li>| 字符 | 编码 |<br>| :—: | :—: |<br>|  A   | 000  |<br>|  B   | 100  |<br>|  C   | 110  |<br>|  D   | 111  |<br>|  E   | 101  |</li></ul></li><li><p>则这段字符串会先转换成二进制码：<code>000100110000111100100000101111</code></p></li><li><p>上面的二进制转换表编码是以3位进行编码的，而用哈夫曼编码进行编译转换，则会让这段字符串传输的时候能够更为简短。</p></li></ul><h5 id="哈夫曼编码的使用"><a href="#哈夫曼编码的使用" class="headerlink" title="哈夫曼编码的使用"></a>哈夫曼编码的使用</h5><p>哈夫曼编码是通过哈夫曼树进行转换出来的，例如在上面的字符串：<code>‘ABCADBBAED’</code>是出现在一个文章里面的，这个文章里面含有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">出现次数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">4</td></tr></tbody></table></div><p>根据上表进行转换为哈夫曼树</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/1.png"><p>通过对哈夫曼树处理，往左走为0往右走为1，通过记录会形成一个新的转换表</p><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"><ul><li>| 字符 | 编码 |<br>| :—: | :—: |<br>|  A   | 111  |<br>|  B   |  0   |<br>|  C   | 1100 |<br>|  D   |  10  |<br>|  E   | 1101 |</li></ul><p>根据表中的内容把要输送的字符串<code>‘ABCADBBAED’</code>进行转换成二进制<code>111011001111000111110110</code></p><p>对比一开始用3个编码进行转换的字符串编码会发现，哈夫曼编码进行转换处理的二进制码数为24个，比前面的少了6个，可以发现运用哈夫曼编码可以使传输的二进制码被压缩成更简单二进制码。</p><hr><h5 id="哈夫曼编码的好处"><a href="#哈夫曼编码的好处" class="headerlink" title="哈夫曼编码的好处"></a>哈夫曼编码的好处</h5><ul><li><strong>使转换的二进制码更简洁</strong><ul><li>哈夫曼编码是通过检测传输的字符串中字符的出现频率进行生成对应的编码表。采用的是前缀编码。</li></ul></li><li><strong>因为采用的前缀的编码，进行译码的时候减少出错</strong></li><li>….</li></ul><hr><h4 id="译码"><a href="#译码" class="headerlink" title="译码"></a>译码</h4><p>进行译码的过程很简单，通过一开始构建的哈夫曼树，进行译码。</p><ul><li><p>例如：<code>111011001111000111110110</code></p><ul><li><img src="/2019/08/10/数据结构学习总结-（5-13）哈夫曼编码/2.png"></li></ul></li><li><p>译码过程：<strong>从根开始</strong>遇到0就走左，遇到1就走右，当到达叶结点的时候，翻译出该字符，然后<strong>重新返回根结点重新识别</strong></p></li><li><p>译码结果：ABCADBBAED</p></li></ul><hr><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><ul><li>从上面的译码过程可以看出，对哈夫曼编码编码后的二进制码进行译码的时候只需根据编码对哈夫曼树进行遍历即可。</li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;哈夫曼编码&quot;&gt;&lt;a href=&quot;#哈夫曼编码&quot; class=&quot;headerlink&quot; title=&quot;哈夫曼编码&quot;&gt;&lt;/a&gt;哈夫曼编码&lt;/h4&gt;&lt;h5 id=&quot;哈夫曼编码是什么？&quot;&gt;&lt;a href=&quot;#哈夫曼编码是什么？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.12）中序线索二叉树的遍历</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-12%EF%BC%89%E4%B8%AD%E5%BA%8F%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/</id>
    <published>2019-08-03T09:03:17.000Z</published>
    <updated>2019-08-03T11:04:43.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h4><p>在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序线索二叉树。</p><hr><h4 id="中序线索二叉树的遍历算法"><a href="#中序线索二叉树的遍历算法" class="headerlink" title="中序线索二叉树的遍历算法"></a>中序线索二叉树的遍历算法</h4><p>通过构建的中序线索二叉树的特点。叶子结点存在直接指向前驱和后继的结点的指针，在遍历的时候就可以快速的定位。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threaded_Mid_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R-&gt;L_Node)&#123;</span><br><span class="line">        R = R-&gt;L_Node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(R)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; R-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!R-&gt;RTag)&#123;</span><br><span class="line">            R = R-&gt;R_Node;</span><br><span class="line">            <span class="keyword">while</span>(R-&gt;LTag)&#123;</span><br><span class="line">                R = R-&gt;L_Node;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span> R = R-&gt;R_Node; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果：<img src="/2019/08/03/数据结构学习总结-（5-12）中序线索二叉树的遍历/1.png"></p></li></ul></li></ul><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>通过利用线索来进行遍历就可以避免递归或者要使用栈结构来进行遍历。</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;中序线索二叉树&quot;&gt;&lt;a href=&quot;#中序线索二叉树&quot; class=&quot;headerlink&quot; title=&quot;中序线索二叉树&quot;&gt;&lt;/a&gt;中序线索二叉树&lt;/h4&gt;&lt;p&gt;在（5.11）中的线索二叉树便为中序二叉树，因其线索化时利用的是中序遍历。所以构建的线索二叉树为中序
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.11）线索二叉树</title>
    <link href="https://shuhaohwang.github.io/2019/08/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-11%EF%BC%89%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://shuhaohwang.github.io/2019/08/03/数据结构学习总结-（5-11）线索二叉树/</id>
    <published>2019-08-03T02:08:19.000Z</published>
    <updated>2019-08-03T09:41:50.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p>在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结点，在少数结点上也会存在左右孩子不存在的情况下，那么这些空的指针往往会造成资源的浪费，这就为什么要存在线索二叉树，它能使这些空掉的指针能重新运用起来。</p><h5 id="线索二叉树的构成"><a href="#线索二叉树的构成" class="headerlink" title="线索二叉树的构成"></a>线索二叉树的构成</h5><p>为了实现线索二叉树能够使空的指针能被重新利用起来，所以在结点结构定义的时候再添加两个标识符变量。这些标识符存在的目的是为了区分一个结点的左右孩子是否为空，如果是空那么就会指向前驱或者后置结点，如果不为空说明这个指针是指向左右孩子的。</p><img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/1.png"><p>从上面的图可以看出来，当右标识符为<code>&#39;0&#39;</code>的时候说明他的右孩子指针指向的是右孩子，当标识符为<code>&#39;1&#39;</code>的时候，说明这个结点的右孩子指针指向的不是右孩子(即：该结点没有右孩子)而是这个结点的前驱结点，同理，左标识符便是判断其左孩子的指针是指向后置结点还是左孩子。</p><hr><h4 id="二叉树线索化"><a href="#二叉树线索化" class="headerlink" title="二叉树线索化"></a>二叉树线索化</h4><p>根据上面所说的线索二叉树，从最基本的来看，线索二叉树相比普通二叉树就是在没有左孩子或者右孩子的结点中这些本该指向左右孩子的指针不为空，使其能重新废物利用。所以把一个二叉树线索化的主要思路便是遍历一个二叉树，逐一判断每个结点的左右孩子是否为空，若为空那么就让其能指向这个结点的前驱结点或者后置结点。</p><ul><li><p>综上所述，线索化的主要操作就是基于遍历算法。</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此区域内实现线索二叉树的主要操作...</span></span><br><span class="line">    </span><br><span class="line">    Tree_Threaded(R -&gt; R_Node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在开始线索化之前还需要将结点结构进行变化，即要多定义两个标识符表示用来进行判断左右孩子指针的指向。</p><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> data;</span><br><span class="line">    BiTreeNode* L_Node;</span><br><span class="line">    BiTreeNode* R_Node;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*标识符变量*/</span></span><br><span class="line">    <span class="keyword">int</span> RTag;</span><br><span class="line">    <span class="keyword">int</span> LTag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>其次二叉树存在没有利用的指针，线索化后，这些空指针会指向该结点的前驱结点或者后置结点，这也就是说在线索化过程中还要有两个临时变量能够指向受判断结点的前驱结点和后置结点，方便在判断该结点在没有左右孩子的情况下，使其两个指针能够快速的指向前驱和后置结点。</p><hr><h4 id="线索化二叉树的代码实现"><a href="#线索化二叉树的代码实现" class="headerlink" title="线索化二叉树的代码实现"></a>线索化二叉树的代码实现</h4><ul><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_Threaded</span><span class="params">(BiTreeNode* R，BiTreeNode* &amp;pre)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!R)<span class="keyword">return</span>;</span><br><span class="line">    Tree_Threaded(R -&gt; L_Node,pre);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!R-&gt;L_Node)&#123;</span><br><span class="line">        R-&gt;L_Node = pre;</span><br><span class="line">        R-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre &amp;&amp; !pre-&gt;R_Node)&#123;</span><br><span class="line">        pre-&gt;R_Node = R;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> pre = R;</span><br><span class="line">    Tree_Threaded(R -&gt; R_Node,pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="二叉树线索化解析："><a href="#二叉树线索化解析：" class="headerlink" title="二叉树线索化解析："></a>二叉树线索化解析：</h5><p>例图：<img src="/2019/08/03/数据结构学习总结-（5-11）线索二叉树/2.png"></p><ul><li><p>第一次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |      |      |      |         |      |<br>| L_Node |      |      |      | nullptr |      |<br>|  RTag  |      |      |      |         |      |<br>|  LTag  |      |      |      |    0    |      |</p><ul><li>pre指向D</li></ul></li></ul><hr><ul><li><p>第二次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |      |  E   |      |    B    |      |<br>| L_Node |      |  D   |      | nullptr |  B   |<br>|  RTag  |      |  0   |      |    1    |      |<br>|  LTag  |      |  0   |      |    0    |  1   |</p><ul><li>pre先指向B，递归至E结点后指向E</li></ul></li></ul><hr><ul><li><p>第三次：</p></li><li><p>|        |  A   |  B   |  C   |    D    |  E   |<br>| :——: | :—: | :—: | :—: | :——-: | :—: |<br>| R_Node |  C   |  E   |      |    B    |  A   |<br>| L_Node |  B   |  D   |      | nullptr |  B   |<br>|  RTag  |  0   |  0   |      |    1    |  1   |<br>|  LTag  |  0   |  0   |      |    0    |  1   |</p><ul><li>pre先指向E后指向A</li></ul></li></ul><hr><ul><li><p>第四次：</p></li><li><p>|        |  A   |  B   |    C    |    D    |  E   |<br>| :——: | :—: | :—: | :——-: | :——-: | :—: |<br>| R_Node |  C   |  E   | nullptr |    B    |  A   |<br>| L_Node |  B   |  D   |    A    | nullptr |  B   |<br>|  RTag  |  0   |  0   |    0    |    1    |  1   |<br>|  LTag  |  0   |  0   |    1    |    0    |  1   |</p><ul><li>pre先指向A后指向C</li></ul></li></ul><hr><h4 id="线索二叉树的好处："><a href="#线索二叉树的好处：" class="headerlink" title="线索二叉树的好处："></a>线索二叉树的好处：</h4><p>从上面可以看出，线索二叉树的一些结点空出来的指针被重新利用起来，再到达叶子结点的时候，可以直接通过左右孩子的指针快速定位到其的前驱结点或后继结点，根据这个性质在进行遍历的时候就可以直接访问这些通过线索链接起来的结点。</p><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;线索二叉树&quot;&gt;&lt;a href=&quot;#线索二叉树&quot; class=&quot;headerlink&quot; title=&quot;线索二叉树&quot;&gt;&lt;/a&gt;线索二叉树&lt;/h4&gt;&lt;p&gt;在构造一个二叉树的时候，我们通常会用两个指针来分别代表左孩子和右孩子，但在叶结点上这两个指针往往是空的，且不但是叶结
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5-10）前序遍历非递归实现</title>
    <link href="https://shuhaohwang.github.io/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-10%EF%BC%89%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>https://shuhaohwang.github.io/2019/08/01/数据结构学习总结-（5-10）前序遍历非递归实现/</id>
    <published>2019-08-01T08:41:16.000Z</published>
    <updated>2019-08-15T13:33:14.767Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前序遍历的非递归实现"><a href="#前序遍历的非递归实现" class="headerlink" title="前序遍历的非递归实现"></a>前序遍历的非递归实现</h4><ul><li><p>思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先从根结点开始，往下进行访问和移动，因为是堆栈所以要注意，在进行左右孩子移动的时候，应该让右孩子先入栈，左孩子后入栈，根据栈结构FIBO(先进后出)的结构特点，所以左孩子会先进行访问</p></li><li><p>代码：</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pre_Traversal</span><span class="params">(BiTreeNode* R)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = R;</span><br><span class="line">    s.push(T);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(T-&gt;R_Node)s.push(T-&gt;R_Node);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;L_Node)s.push(T-&gt;L_Node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前序遍历的非递归实现&quot;&gt;&lt;a href=&quot;#前序遍历的非递归实现&quot; class=&quot;headerlink&quot; title=&quot;前序遍历的非递归实现&quot;&gt;&lt;/a&gt;前序遍历的非递归实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;思路：跟中序遍历的差不多，通过栈结构，进行排序访问输出。先
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9.1）二叉树的遍历非递归[附加]</title>
    <link href="https://shuhaohwang.github.io/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9-1%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92-%E9%99%84%E5%8A%A0/"/>
    <id>https://shuhaohwang.github.io/2019/07/31/数据结构学习总结-（5-9-1）二叉树的遍历非递归-附加/</id>
    <published>2019-07-31T10:26:28.000Z</published>
    <updated>2019-07-31T15:57:24.536Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1:"></a>代码1:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    <span class="keyword">while</span>(!s.empty()||T)&#123;</span><br><span class="line">        <span class="keyword">if</span>(T)&#123;</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">            s.push(T)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            T = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            T = T-&gt;R_Node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码2："><a href="#代码2：" class="headerlink" title="代码2："></a>代码2：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">BiTreeNode* T = Root;</span><br><span class="line">s.push(T);</span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(T = s.top())</span><br><span class="line">            s.push(T-&gt;L_Node);</span><br><span class="line">        </span><br><span class="line">        T = s.top();s.pop();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!s.empty())&#123;</span><br><span class="line">            T = s.top();s.pop();</span><br><span class="line">        <span class="keyword">if</span> (!Visit(T))<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s.push(T-&gt;R_Node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码1&quot;&gt;&lt;a href=&quot;#代码1&quot; class=&quot;headerlink&quot; title=&quot;代码1:&quot;&gt;&lt;/a&gt;代码1:&lt;/h4&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习总结-（5.9）二叉树的遍历非递归</title>
    <link href="https://shuhaohwang.github.io/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%EF%BC%885-9%EF%BC%89%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92/"/>
    <id>https://shuhaohwang.github.io/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/</id>
    <published>2019-07-25T06:56:21.000Z</published>
    <updated>2019-07-25T07:51:36.930Z</updated>
    
    <content type="html"><![CDATA[<h4 id="递归的优缺点"><a href="#递归的优缺点" class="headerlink" title="递归的优缺点"></a>递归的优缺点</h4><p>二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方的。总所周知程序中函数的调用是要消耗系统内存的，在小范围小幅度的递归对程序不会有太大的影响，但是如果递归的深度太大，会使内存枯竭，程序崩溃。即：递归即有好处也有坏处</p><ul><li>递归的优点：<ul><li>代码简洁</li></ul></li><li>递归的缺点：<ul><li>过多递归会影响系统内存和程序运行效率</li></ul></li></ul><hr><h4 id="二叉树非递归的代码实现及思路"><a href="#二叉树非递归的代码实现及思路" class="headerlink" title="二叉树非递归的代码实现及思路"></a>二叉树非递归的代码实现及思路</h4><p>正如上面所说，函数递归在遍历较小的二叉树是没有太大的问题的。但若遍历深度巨大的二叉树，使用递归来遍历是不太可行的。所以二叉树非递归的方式来实现遍历也理所当然的变的重要。</p><ul><li><p>二叉树非递归遍历的实现<strong>思路</strong>：通过栈数据结构，进行入栈操作，先把树的每一个结点的左孩子入栈直至访问到叶结点，随后进行访问，访问一个出栈一个，并检测此时的右孩子是否为空，若不空，重复上述的操作即可。</p></li><li><p>代码实现:</p><ul><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mid_Traversal</span><span class="params">(BiTreeNode* Root)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;BiTreeNode*&gt; s;</span><br><span class="line">    BiTreeNode* T = Root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(T)&#123;</span><br><span class="line">            s.push(T);</span><br><span class="line">            T = T-&gt;L_Node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        T = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        T = T-&gt;R_Node;</span><br><span class="line">    &#125;<span class="keyword">while</span>(!s.Empty()||T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实验结果:<img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/1.png"></p></li></ul></li></ul><hr><h4 id="函数流程演示"><a href="#函数流程演示" class="headerlink" title="函数流程演示"></a>函数流程演示</h4><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/2.png"><ul><li><p>第一步：A结点不空进入循环，入栈。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  A   |</li></ul></li><li><p>第二步：B结点入栈、第三次循环D结点入栈。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  D   |<br>|  B   |<br>|  A   |</li></ul></li><li><p>第三步：跳出循环，T指针指向栈顶,访问栈顶数据，并出栈。</p><ul><li><p><code>T：-&gt;D</code></p></li><li><p><strong>输出了D</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  B   |<br>|  A   |</p></li></ul></li><li><p>第四步：T重新指向此时指向结点的右孩子。第一次外循环结束。</p><ul><li><code>T：-&gt;D.R_Node(nullptr)</code></li></ul></li><li><p>第五步：开始第二次外循环，因为T为空内循环不执行、T指向栈顶，访问栈顶数据。</p><ul><li><p><code>T：-&gt;B</code></p></li><li><p><strong>输出了B</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  A   |</p></li></ul></li></ul><ul><li><p>第六步：T指向了B结点的右孩子E，结束第二次外循环。</p><ul><li><code>T：-&gt;E</code></li></ul></li><li><p>第七步：此时T不空执行内循环，E入栈,,T指向E结点的左孩子,因为E结点的左孩子为空跳出循环。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  E   |<br>|  A   |</li></ul></li><li><p>第八步：T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;E</code></p></li><li><p><strong>输出了E</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  A   |</p></li></ul></li><li><p>第九步：T指向E结点的右孩子，因为为空所以结束第三次外循环。</p><ul><li><code>T：-&gt;E.R_Node(nullptr)</code></li></ul></li><li><p>第十步：因为此时T为空不执行内循环，T指向栈顶，访问栈顶数据，出栈。</p><ul><li><p><code>T：-&gt;A</code></p></li><li><p><strong>输出了A</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  空  |</p></li></ul></li><li><p>第十一步：T指向A结点的右孩子C，因为是空栈，所以也结束第四次外循环，重新开始下一轮循环。</p><ul><li><code>T：-&gt;C</code></li></ul></li><li><p>第十二步：T不为空，指向内循环，入栈，更新T指向C的左孩子，为空结束内循环。</p><ul><li>| 栈顶 |<br>| :—: |<br>|  C   |</li></ul></li><li><p>第十三步：T指向栈顶，访问栈顶，出栈</p><ul><li><p><code>T：-&gt;C</code></p></li><li><p><strong>输出了C</strong></p></li><li><p>| 栈顶 |<br>| :—: |<br>|  空  |</p></li></ul></li><li><p>第十四步：T指向C结点的右孩子，但为空，且栈也为空栈，跳出外循环。结束遍历操作。</p></li><li><p>结果输出：D、B、E、A、C</p></li><li><img src="/2019/07/25/数据结构学习总结-（5-9）二叉树的遍历非递归/3.png"></li></ul><p>—（本文完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;递归的优缺点&quot;&gt;&lt;a href=&quot;#递归的优缺点&quot; class=&quot;headerlink&quot; title=&quot;递归的优缺点&quot;&gt;&lt;/a&gt;递归的优缺点&lt;/h4&gt;&lt;p&gt;二叉树的遍历可以使用递归的方式来实现，递归调用函数思路简单，且可以让代码简洁清晰，但是递归也有其不够好的地方
      
    
    </summary>
    
      <category term="代码学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构学习" scheme="https://shuhaohwang.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习总结" scheme="https://shuhaohwang.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
      <category term="数据结构" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构-学习总结" scheme="https://shuhaohwang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
